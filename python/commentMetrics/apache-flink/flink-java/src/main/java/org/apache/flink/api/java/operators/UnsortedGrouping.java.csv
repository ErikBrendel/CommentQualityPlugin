# id;timestamp;commentText;codeText;commentWords;codeWords
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1406821655;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isSerializedLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		return new GroupReduceOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,serialized,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,return,new,group,reduce,operator,t,r,this,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1406830680;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		return new GroupReduceOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,return,new,group,reduce,operator,t,r,this,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1409655585;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		return new GroupReduceOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,return,new,group,reduce,operator,t,r,this,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411372797;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411372797;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411399886;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411473593;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411555453;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411575674;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411718446;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1412761141;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1415874087;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer, Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1416309577;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, reducer, Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421319483;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421341998;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421341998;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1426698965;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1427300031;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1444400661;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1446112342;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1449526313;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1453803455;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1454428544;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1454679829;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1462899491;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1500970016;Applies a GroupReduce transformation on a grouped {@link DataSet}.__<p>The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupReduceOperator<T, R>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,p,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1405024514;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1405090423;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1406821655;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1406830680;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1409655585;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411372797;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411372797;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411399886;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411473593;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411555453;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411575674;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1411718446;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1412761141;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return new AggregateOperator<T>(this, agg, field)__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,new,aggregate,operator,t,this,agg,field
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1415874087;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1416309577;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1421319483;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1421341998;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1421341998;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1426698965;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1427300031;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1444400661;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1446112342;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1449526313;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1453803455;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1454428544;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1454679829;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1462899491;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.<br>_<b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> aggregate(Aggregations agg, int field);1500970016;Applies an Aggregate transformation on a grouped {@link org.apache.flink.api.java.tuple.Tuple} {@link DataSet}.__<p><b>Note: Only Tuple DataSets can be aggregated.</b>_The transformation applies a built-in {@link Aggregations Aggregation} on a specified field_of a Tuple group. Additional aggregation functions can be added to the resulting_{@link AggregateOperator} by calling {@link AggregateOperator#and(Aggregations, int)}.__@param agg The built-in aggregation function that is computed._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the aggregated DataSet.__@see org.apache.flink.api.java.tuple.Tuple_@see Aggregations_@see AggregateOperator_@see DataSet;public AggregateOperator<T> aggregate(Aggregations agg, int field) {_		return aggregate(agg, field, Utils.getCallLocationName())__	};applies,an,aggregate,transformation,on,a,grouped,link,org,apache,flink,api,java,tuple,tuple,link,data,set,p,b,note,only,tuple,data,sets,can,be,aggregated,b,the,transformation,applies,a,built,in,link,aggregations,aggregation,on,a,specified,field,of,a,tuple,group,additional,aggregation,functions,can,be,added,to,the,resulting,link,aggregate,operator,by,calling,link,aggregate,operator,and,aggregations,int,param,agg,the,built,in,aggregation,function,that,is,computed,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,aggregated,data,set,see,org,apache,flink,api,java,tuple,tuple,see,aggregations,see,aggregate,operator,see,data,set;public,aggregate,operator,t,aggregate,aggregations,agg,int,field,return,aggregate,agg,field,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1409655585;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411372797;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411372797;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411399886;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411473593;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411555453;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411575674;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1411718446;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1412761141;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1415874087;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1416309577;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1421319483;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1421341998;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1421341998;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1426698965;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1427300031;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1444400661;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1446112342;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1449526313;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1453803455;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1454428544;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1454679829;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1462899491;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> minBy(int... fields);1500970016;Applies a special case of a reduce transformation (minBy) on a grouped {@link DataSet}.__<p>The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> minBy(int... fields)  {__		_		if (!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method minBy(int) only works on tuples.")__		}__		return new ReduceOperator<T>(this, new SelectByMinFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,min,by,on,a,grouped,link,data,set,p,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,min,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,min,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,min,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411555453;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411575674;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411718446;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1412761141;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1415874087;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1416309577;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421319483;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421341998;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421341998;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1426698965;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1427300031;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1444400661;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1446112342;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1449526313;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1453803455;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1454428544;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1454679829;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1462899491;Returns a new set containing the first n elements in this grouped {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public GroupReduceOperator<T, T> first(int n);1500970016;Returns a new set containing the first n elements in this grouped {@link DataSet}.__@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if (n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}__		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,link,data,set,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
UnsortedGrouping -> public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1405024514;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link GroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see GroupReduceFunction_@see ReduceGroupOperator_@see DataSet;public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		return new ReduceGroupOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,group,reduce,function,see,reduce,group,operator,see,data,set;public,r,reduce,group,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,return,new,reduce,group,operator,t,r,this,reducer
UnsortedGrouping -> public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1405090423;Applies a GroupReduce transformation on a grouped {@link DataSet}.<br/>_The transformation calls a {@link GroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see GroupReduceFunction_@see ReduceGroupOperator_@see DataSet;public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		return new ReduceGroupOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,link,data,set,br,the,transformation,calls,a,link,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,group,reduce,function,see,reduce,group,operator,see,data,set;public,r,reduce,group,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,return,new,reduce,group,operator,t,r,this,reducer
UnsortedGrouping -> public AggregateOperator<T> max (int field);1405024514;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1405090423;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1406821655;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1406830680;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1409655585;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411372797;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411372797;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411399886;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411473593;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411555453;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411575674;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1411718446;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1412761141;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field)__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field
UnsortedGrouping -> public AggregateOperator<T> max (int field);1415874087;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1416309577;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1421319483;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1421341998;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1421341998;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1426698965;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1427300031;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1444400661;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1446112342;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1449526313;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1453803455;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1454428544;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1454679829;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1462899491;Syntactic sugar for aggregate (MAX, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> max (int field);1500970016;Syntactic sugar for aggregate (MAX, field)._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the max'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> max (int field) {_		return this.aggregate (Aggregations.MAX, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,max,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,max,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,max,int,field,return,this,aggregate,aggregations,max,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1405024514;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1405090423;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1406821655;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1406830680;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1409655585;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411372797;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411372797;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411399886;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411473593;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411555453;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411575674;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1411718446;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1412761141;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field)__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1415874087;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1416309577;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1421319483;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1421341998;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1421341998;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1426698965;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1427300031;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1444400661;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1446112342;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1449526313;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1453803455;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1454428544;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1454679829;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1462899491;Syntactic sugar for aggregate (SUM, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> sum (int field);1500970016;Syntactic sugar for aggregate (SUM, field)._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the summed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> sum (int field) {_		return this.aggregate (Aggregations.SUM, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,sum,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,summed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,sum,int,field,return,this,aggregate,aggregations,sum,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1405024514;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1405090423;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1406821655;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1406830680;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1409655585;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411372797;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411372797;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411399886;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411473593;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411555453;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411575674;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1411718446;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1412761141;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field)__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field
UnsortedGrouping -> public AggregateOperator<T> min (int field);1415874087;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1416309577;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1421319483;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1421341998;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1421341998;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1426698965;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1427300031;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1444400661;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1446112342;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1449526313;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1453803455;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1454428544;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1454679829;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1462899491;Syntactic sugar for aggregate (MIN, field)_@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> public AggregateOperator<T> min (int field);1500970016;Syntactic sugar for aggregate (MIN, field)._@param field The index of the Tuple field on which the aggregation function is applied._@return An AggregateOperator that represents the min'ed DataSet.__@see org.apache.flink.api.java.operators.AggregateOperator;public AggregateOperator<T> min (int field) {_		return this.aggregate (Aggregations.MIN, field, Utils.getCallLocationName())__	};syntactic,sugar,for,aggregate,min,field,param,field,the,index,of,the,tuple,field,on,which,the,aggregation,function,is,applied,return,an,aggregate,operator,that,represents,the,min,ed,data,set,see,org,apache,flink,api,java,operators,aggregate,operator;public,aggregate,operator,t,min,int,field,return,this,aggregate,aggregations,min,field,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1409655585;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411372797;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411372797;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411399886;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411473593;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411555453;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411575674;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1411718446;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1412761141;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields))__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1415874087;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1416309577;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1421319483;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1421341998;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1421341998;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1426698965;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1427300031;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1444400661;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br/>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1446112342;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1449526313;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.dataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1453803455;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1454428544;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1454679829;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1462899491;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.<br>_The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {_		_		_		if(!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}_			_		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,br,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public ReduceOperator<T> maxBy(int... fields);1500970016;Applies a special case of a reduce transformation (maxBy) on a grouped {@link DataSet}.__<p>The transformation consecutively calls a {@link ReduceFunction}_until only a single element remains which is the result of the transformation._A ReduceFunction combines two elements into one new element of the same type.__@param fields Keys taken into account for finding the minimum._@return A {@link ReduceOperator} representing the minimum.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public ReduceOperator<T> maxBy(int... fields)  {__		_		if (!this.inputDataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Method maxBy(int) only works on tuples.")__		}__		return new ReduceOperator<T>(this, new SelectByMaxFunction(_				(TupleTypeInfo) this.inputDataSet.getType(), fields), Utils.getCallLocationName())__	};applies,a,special,case,of,a,reduce,transformation,max,by,on,a,grouped,link,data,set,p,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,remains,which,is,the,result,of,the,transformation,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,fields,keys,taken,into,account,for,finding,the,minimum,return,a,link,reduce,operator,representing,the,minimum;suppress,warnings,unchecked,rawtypes,public,reduce,operator,t,max,by,int,fields,if,this,input,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,method,max,by,int,only,works,on,tuples,return,new,reduce,operator,t,this,new,select,by,max,function,tuple,type,info,this,input,data,set,get,type,fields,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1405024514;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link ReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see ReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1405090423;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link ReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see ReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1406821655;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.java.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,java,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1406830680;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.java.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,java,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1409655585;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.java.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,java,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411372797;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.java.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,java,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411372797;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411399886;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411473593;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411555453;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411575674;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1411718446;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1412761141;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer)__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1415874087;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer, Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1416309577;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, reducer, Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1421319483;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1421341998;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1421341998;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1426698965;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1427300031;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1444400661;Applies a Reduce transformation on a grouped {@link DataSet}.<br/>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1446112342;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1449526313;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1453803455;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1454428544;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1454679829;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1462899491;Applies a Reduce transformation on a grouped {@link DataSet}.<br>_For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,br,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public ReduceOperator<T> reduce(ReduceFunction<T> reducer);1500970016;Applies a Reduce transformation on a grouped {@link DataSet}.__<p>For each group, the transformation consecutively calls a {@link org.apache.flink.api.common.functions.RichReduceFunction}_until only a single element for each group remains._A ReduceFunction combines two elements into one new element of the same type.__@param reducer The ReduceFunction that is applied on each group of the DataSet._@return A ReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichReduceFunction_@see ReduceOperator_@see DataSet;public ReduceOperator<T> reduce(ReduceFunction<T> reducer) {_		if (reducer == null) {_			throw new NullPointerException("Reduce function must not be null.")__		}_		return new ReduceOperator<T>(this, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,reduce,transformation,on,a,grouped,link,data,set,p,for,each,group,the,transformation,consecutively,calls,a,link,org,apache,flink,api,common,functions,rich,reduce,function,until,only,a,single,element,for,each,group,remains,a,reduce,function,combines,two,elements,into,one,new,element,of,the,same,type,param,reducer,the,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,reduce,function,see,reduce,operator,see,data,set;public,reduce,operator,t,reduce,reduce,function,t,reducer,if,reducer,null,throw,new,null,pointer,exception,reduce,function,must,not,be,null,return,new,reduce,operator,t,this,input,data,set,clean,reducer,utils,get,call,location,name
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1405024514;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1405090423;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1406821655;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1406830680;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1409655585;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411372797;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411372797;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411399886;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411473593;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411555453;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411575674;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411718446;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1412761141;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1415874087;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1416309577;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421319483;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1426698965;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1427300031;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1444400661;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1446112342;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1449526313;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1453803455;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1454428544;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1454679829;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1462899491;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1500970016;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple elements and Pojos can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field index group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,index,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1427300031;Applies a CombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The CombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1444400661;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1446112342;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1449526313;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1453803455;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1454428544;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1454679829;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1462899491;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1500970016;Applies a GroupCombineFunction on a grouped {@link DataSet}._A GroupCombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,group,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1412761141;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1415874087;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		return new SortedGrouping<T>(this.dataSet, this.keys, field, order)__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,return,new,sorted,grouping,t,this,data,set,this,keys,field,order
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1416309577;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421319483;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421341998;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421341998;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1426698965;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1427300031;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1444400661;Sorts Pojos within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1446112342;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1449526313;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1453803455;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1454428544;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1454679829;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1462899491;Sorts Pojos within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1500970016;Sorts Pojos within a group on the specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple elements and Pojos can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (this.getKeys() instanceof Keys.SelectorFunctionKeys) {_			throw new InvalidProgramException("KeySelector grouping keys and field expression group-sorting keys cannot be used together.")__		}__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, field, order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,pojos,within,a,group,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,grouping,keys,and,field,expression,group,sorting,keys,cannot,be,used,together,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,field,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1421341998;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		return new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,return,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1421341998;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.</br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1426698965;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.</br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1427300031;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.</br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1444400661;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.</br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1446112342;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1449526313;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.dataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.dataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.dataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1453803455;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.inputDataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.inputDataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,input,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,input,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1454428544;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.inputDataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.inputDataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,input,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,input,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1454679829;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.inputDataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.inputDataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,input,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,input,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1462899491;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.<br>_Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.inputDataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.inputDataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,br,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,input,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,input,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order);1500970016;Sorts elements within a group on a key extracted by the specified {@link org.apache.flink.api.java.functions.KeySelector}_in the specified {@link Order}.__<p>Chaining {@link #sortGroup(KeySelector, Order)} calls is not supported.__@param keySelector The KeySelector with which the group is sorted._@param order The Order in which the extracted key is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public <K> SortedGrouping<T> sortGroup(KeySelector<T, K> keySelector, Order order) {_		if (!(this.getKeys() instanceof Keys.SelectorFunctionKeys)) {_			throw new InvalidProgramException("KeySelector group-sorting keys can only be used with KeySelector grouping keys.")__		}__		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, this.inputDataSet.getType())__		SortedGrouping<T> sg = new SortedGrouping<T>(this.inputDataSet, this.keys, new Keys.SelectorFunctionKeys<T, K>(keySelector, this.inputDataSet.getType(), keyType), order)__		sg.customPartitioner = getCustomPartitioner()__		return sg__	};sorts,elements,within,a,group,on,a,key,extracted,by,the,specified,link,org,apache,flink,api,java,functions,key,selector,in,the,specified,link,order,p,chaining,link,sort,group,key,selector,order,calls,is,not,supported,param,key,selector,the,key,selector,with,which,the,group,is,sorted,param,order,the,order,in,which,the,extracted,key,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,k,sorted,grouping,t,sort,group,key,selector,t,k,key,selector,order,order,if,this,get,keys,instanceof,keys,selector,function,keys,throw,new,invalid,program,exception,key,selector,group,sorting,keys,can,only,be,used,with,key,selector,grouping,keys,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,this,input,data,set,get,type,sorted,grouping,t,sg,new,sorted,grouping,t,this,input,data,set,this,keys,new,keys,selector,function,keys,t,k,key,selector,this,input,data,set,get,type,key,type,order,sg,custom,partitioner,get,custom,partitioner,return,sg
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1416309577;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421319483;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421341998;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421341998;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1426698965;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1427300031;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1444400661;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1446112342;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1449526313;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1453803455;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1454428544;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1454679829;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1462899491;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
UnsortedGrouping -> public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1500970016;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public UnsortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		getKeys().validateCustomPartitioner(partitioner, null)___		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,unsorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
