commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// -------------------------------------------------------------------------------------------- public String getCharsetName() {     return charsetName. }
false;public;1;7;;public void setCharsetName(String charsetName) {     if (charsetName == null) {         throw new IllegalArgumentException("Charset must not be null.").     }     this.charsetName = charsetName. }
false;public;1;8;;// -------------------------------------------------------------------------------------------- @Override public void configure(Configuration parameters) {     super.configure(parameters).     if (charsetName == null || !Charset.isSupported(charsetName)) {         throw new RuntimeException("Unsupported charset: " + charsetName).     } }
false;public;4;11;;// -------------------------------------------------------------------------------------------- @Override public String readRecord(String reusable, byte[] bytes, int offset, int numBytes) throws IOException {     // Check if \n is used as delimiter and the end of this line is a \r, then remove \r from the line     if (this.getDelimiter() != null && this.getDelimiter().length == 1 && this.getDelimiter()[0] == NEW_LINE && offset + numBytes >= 1 && bytes[offset + numBytes - 1] == CARRIAGE_RETURN) {         numBytes -= 1.     }     return new String(bytes, offset, numBytes, this.charsetName). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     return "TextInputFormat (" + Arrays.toString(getFilePaths()) + ") - " + this.charsetName. }
false;public;0;4;;@Override public boolean supportsMultiPaths() {     return true. }
