# id;timestamp;commentText;codeText;commentWords;codeWords
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> @SuppressWarnings({ "unchecked", "hiding" }) 	@Deprecated 	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types);1418225396;Deprecated method only kept for compatibility.__@param types__@return;@SuppressWarnings({ "unchecked", "hiding" })_	@Deprecated_	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types) {_		TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, OUT>) this__	};deprecated,method,only,kept,for,compatibility,param,types,return;suppress,warnings,unchecked,hiding,deprecated,public,out,extends,tuple,project,operator,in,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,out,this
ProjectOperator -> @SuppressWarnings({ "unchecked", "hiding" }) 	@Deprecated 	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types);1420730997;Deprecated method only kept for compatibility.;@SuppressWarnings({ "unchecked", "hiding" })_	@Deprecated_	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types) {_		TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, OUT>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,hiding,deprecated,public,out,extends,tuple,project,operator,in,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,out,this
ProjectOperator -> @SuppressWarnings({ "unchecked", "hiding" }) 	@Deprecated 	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types);1422405541;Deprecated method only kept for compatibility.;@SuppressWarnings({ "unchecked", "hiding" })_	@Deprecated_	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types) {_		TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, OUT>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,hiding,deprecated,public,out,extends,tuple,project,operator,in,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,out,this
ProjectOperator -> @SuppressWarnings({ "unchecked", "hiding" }) 	@Deprecated 	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types);1423570503;Deprecated method only kept for compatibility.;@SuppressWarnings({ "unchecked", "hiding" })_	@Deprecated_	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types) {_		TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, OUT>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,hiding,deprecated,public,out,extends,tuple,project,operator,in,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,out,this
ProjectOperator -> @SuppressWarnings({ "unchecked", "hiding" }) 	@Deprecated 	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types);1427097830;Deprecated method only kept for compatibility.;@SuppressWarnings({ "unchecked", "hiding" })_	@Deprecated_	public <OUT extends Tuple> ProjectOperator<IN, OUT> types(Class<?>... types) {_		TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, OUT>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,hiding,deprecated,public,out,extends,tuple,project,operator,in,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,out,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectOperator<T, Tuple5<T0, T1, T2, T3, T4>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,operator,t,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,operator,t,tuple5,t0,t1,t2,t3,t4,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1418225395;Chooses a projectTupleX according to the length of {@link Projection#fieldIndexes}__@return The projected DataSet.__@see Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,projection,field,indexes,return,the,projected,data,set,see,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1418225396;Chooses a projectTupleX according to the length of {@link Projection#fieldIndexes}__@return The projected DataSet.__@see Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,projection,field,indexes,return,the,projected,data,set,see,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1420730997;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1422405541;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1423570503;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1427097830;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator = null___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1432212632;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1445539885;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1454679829;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1455101486;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1462899491;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1491417674;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}__@return The projected DataSet.__@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX();1500970016;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.ProjectOperator.Projection#fieldIndexes}.__@return The projected DataSet._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectOperator<T, OUT> projectTupleX() {_			ProjectOperator<T, OUT> projOperator___			switch (fieldIndexes.length) {_			case 1: projOperator = (ProjectOperator<T, OUT>) projectTuple1()_ break__			case 2: projOperator = (ProjectOperator<T, OUT>) projectTuple2()_ break__			case 3: projOperator = (ProjectOperator<T, OUT>) projectTuple3()_ break__			case 4: projOperator = (ProjectOperator<T, OUT>) projectTuple4()_ break__			case 5: projOperator = (ProjectOperator<T, OUT>) projectTuple5()_ break__			case 6: projOperator = (ProjectOperator<T, OUT>) projectTuple6()_ break__			case 7: projOperator = (ProjectOperator<T, OUT>) projectTuple7()_ break__			case 8: projOperator = (ProjectOperator<T, OUT>) projectTuple8()_ break__			case 9: projOperator = (ProjectOperator<T, OUT>) projectTuple9()_ break__			case 10: projOperator = (ProjectOperator<T, OUT>) projectTuple10()_ break__			case 11: projOperator = (ProjectOperator<T, OUT>) projectTuple11()_ break__			case 12: projOperator = (ProjectOperator<T, OUT>) projectTuple12()_ break__			case 13: projOperator = (ProjectOperator<T, OUT>) projectTuple13()_ break__			case 14: projOperator = (ProjectOperator<T, OUT>) projectTuple14()_ break__			case 15: projOperator = (ProjectOperator<T, OUT>) projectTuple15()_ break__			case 16: projOperator = (ProjectOperator<T, OUT>) projectTuple16()_ break__			case 17: projOperator = (ProjectOperator<T, OUT>) projectTuple17()_ break__			case 18: projOperator = (ProjectOperator<T, OUT>) projectTuple18()_ break__			case 19: projOperator = (ProjectOperator<T, OUT>) projectTuple19()_ break__			case 20: projOperator = (ProjectOperator<T, OUT>) projectTuple20()_ break__			case 21: projOperator = (ProjectOperator<T, OUT>) projectTuple21()_ break__			case 22: projOperator = (ProjectOperator<T, OUT>) projectTuple22()_ break__			case 23: projOperator = (ProjectOperator<T, OUT>) projectTuple23()_ break__			case 24: projOperator = (ProjectOperator<T, OUT>) projectTuple24()_ break__			case 25: projOperator = (ProjectOperator<T, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projOperator__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,project,operator,projection,field,indexes,return,the,projected,data,set,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,operator,t,out,project,tuple,x,project,operator,t,out,proj,operator,switch,field,indexes,length,case,1,proj,operator,project,operator,t,out,project,tuple1,break,case,2,proj,operator,project,operator,t,out,project,tuple2,break,case,3,proj,operator,project,operator,t,out,project,tuple3,break,case,4,proj,operator,project,operator,t,out,project,tuple4,break,case,5,proj,operator,project,operator,t,out,project,tuple5,break,case,6,proj,operator,project,operator,t,out,project,tuple6,break,case,7,proj,operator,project,operator,t,out,project,tuple7,break,case,8,proj,operator,project,operator,t,out,project,tuple8,break,case,9,proj,operator,project,operator,t,out,project,tuple9,break,case,10,proj,operator,project,operator,t,out,project,tuple10,break,case,11,proj,operator,project,operator,t,out,project,tuple11,break,case,12,proj,operator,project,operator,t,out,project,tuple12,break,case,13,proj,operator,project,operator,t,out,project,tuple13,break,case,14,proj,operator,project,operator,t,out,project,tuple14,break,case,15,proj,operator,project,operator,t,out,project,tuple15,break,case,16,proj,operator,project,operator,t,out,project,tuple16,break,case,17,proj,operator,project,operator,t,out,project,tuple17,break,case,18,proj,operator,project,operator,t,out,project,tuple18,break,case,19,proj,operator,project,operator,t,out,project,tuple19,break,case,20,proj,operator,project,operator,t,out,project,tuple20,break,case,21,proj,operator,project,operator,t,out,project,tuple21,break,case,22,proj,operator,project,operator,t,out,project,tuple22,break,case,23,proj,operator,project,operator,t,out,project,tuple23,break,case,24,proj,operator,project,operator,t,out,project,tuple24,break,case,25,proj,operator,project,operator,t,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0> ProjectOperator<T, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectOperator<T, Tuple1<T0>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,operator,t,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,operator,t,tuple1,t0,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectOperator<T, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,operator,t,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectOperator<T, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectOperator<T, Tuple4<T0, T1, T2, T3>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,operator,t,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,operator,t,tuple4,t0,t1,t2,t3,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectOperator<T, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,operator,t,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectOperator<T, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,operator,t,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectOperator<T, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,operator,t,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectOperator<T, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,operator,t,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectOperator<T, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,operator,t,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds,this,field,indexes,t,type
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	@PublicEvolving 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1455101486;Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	@PublicEvolving_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,evolving,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	@PublicEvolving 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1462899491;Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	@PublicEvolving_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,evolving,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	@PublicEvolving 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1491417674;@deprecated Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	@PublicEvolving_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,evolving,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	@PublicEvolving 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1500970016;@deprecated Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	@PublicEvolving_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>) this.getResultType()___		if (types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i = 0_ i < types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type " + typeClass.getSimpleName() + " at position " + i + " does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,evolving,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectOperator<T, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,operator,t,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectOperator<T, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,operator,t,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectOperator<T, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,operator,t,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectOperator<T, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,operator,t,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectOperator<T, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,operator,t,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@param type24 The class of field '24' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@param type24 The class of field '24' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@param type24 The class of field '24' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@param type24 The class of field '24' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@param type20 The class of field '20' of the result Tuples._@param type21 The class of field '21' of the result Tuples._@param type22 The class of field '22' of the result Tuples._@param type23 The class of field '23' of the result Tuples._@param type24 The class of field '24' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectOperator<T, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,operator,t,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1> ProjectOperator<T, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectOperator<T, Tuple2<T0, T1>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,operator,t,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,operator,t,tuple2,t0,t1,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectOperator<T, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectOperator<T, Tuple3<T0, T1, T2>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,operator,t,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,operator,t,tuple3,t0,t1,t2,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectOperator<T, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,operator,t,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectOperator<T, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,operator,t,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectOperator<T, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,operator,t,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectOperator<T, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,operator,t,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectOperator<T, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,operator,t,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds,this,field,indexes,t,type
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1432212632;Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> @SuppressWarnings("unchecked") 	@Deprecated 	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types);1445539885;Deprecated method only kept for compatibility.;@SuppressWarnings("unchecked")_	@Deprecated_	public <R extends Tuple> ProjectOperator<IN, R> types(Class<?>... types) {_		TupleTypeInfo<R> typeInfo = (TupleTypeInfo<R>)this.getResultType()___		if(types.length != typeInfo.getArity()) {_			throw new InvalidProgramException("Provided types do not match projection.")__		}_		for (int i=0_ i<types.length_ i++) {_			Class<?> typeClass = types[i]__			if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_				throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__			}_		}_		return (ProjectOperator<IN, R>) this__	};deprecated,method,only,kept,for,compatibility;suppress,warnings,unchecked,deprecated,public,r,extends,tuple,project,operator,in,r,types,class,types,tuple,type,info,r,type,info,tuple,type,info,r,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,project,operator,in,r,this
ProjectOperator -> @SuppressWarnings("hiding") 	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes);1418225396;Continues a Project transformation on a {@link Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be projected using field indexes.</b></br>_The transformation projects each Tuple of the DataSet onto a (sub)set of fields.</br>_Additional fields can be added to the projection by calling {@link ProjectOperator#project(int[])}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param fieldIndexes The field indexes which are added to the Project transformation._The order of fields in the output tuple corresponds to the order of field indexes._@return A ProjectOperator that represents the projected DataSet.__@see Tuple_@see DataSet_@see ProjectOperator;@SuppressWarnings("hiding")_	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes) {_		proj.acceptAdditionalIndexes(fieldIndexes)__		_		return proj.projectTupleX()__	};continues,a,project,transformation,on,a,link,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,projected,using,field,indexes,b,br,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,br,additional,fields,can,be,added,to,the,projection,by,calling,link,project,operator,project,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,field,indexes,the,field,indexes,which,are,added,to,the,project,transformation,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,a,project,operator,that,represents,the,projected,data,set,see,tuple,see,data,set,see,project,operator;suppress,warnings,hiding,public,out,extends,tuple,project,operator,out,project,int,field,indexes,proj,accept,additional,indexes,field,indexes,return,proj,project,tuple,x
ProjectOperator -> @SuppressWarnings("hiding") 	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes);1420730997;Continues a Project transformation on a {@link Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be projected using field indexes.</b></br>_The transformation projects each Tuple of the DataSet onto a (sub)set of fields.</br>_Additional fields can be added to the projection by calling {@link ProjectOperator#project(int[])}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param fieldIndexes The field indexes which are added to the Project transformation._The order of fields in the output tuple corresponds to the order of field indexes._@return A ProjectOperator that represents the projected DataSet.__@see Tuple_@see DataSet_@see ProjectOperator;@SuppressWarnings("hiding")_	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes) {_		proj.acceptAdditionalIndexes(fieldIndexes)__		_		return proj.projectTupleX()__	};continues,a,project,transformation,on,a,link,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,projected,using,field,indexes,b,br,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,br,additional,fields,can,be,added,to,the,projection,by,calling,link,project,operator,project,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,field,indexes,the,field,indexes,which,are,added,to,the,project,transformation,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,a,project,operator,that,represents,the,projected,data,set,see,tuple,see,data,set,see,project,operator;suppress,warnings,hiding,public,out,extends,tuple,project,operator,out,project,int,field,indexes,proj,accept,additional,indexes,field,indexes,return,proj,project,tuple,x
ProjectOperator -> @SuppressWarnings("hiding") 	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes);1422405541;Continues a Project transformation on a {@link Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be projected using field indexes.</b></br>_The transformation projects each Tuple of the DataSet onto a (sub)set of fields.</br>_Additional fields can be added to the projection by calling {@link ProjectOperator#project(int[])}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param fieldIndexes The field indexes which are added to the Project transformation._The order of fields in the output tuple corresponds to the order of field indexes._@return A ProjectOperator that represents the projected DataSet.__@see Tuple_@see DataSet_@see ProjectOperator;@SuppressWarnings("hiding")_	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes) {_		proj.acceptAdditionalIndexes(fieldIndexes)__		_		return proj.projectTupleX()__	};continues,a,project,transformation,on,a,link,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,projected,using,field,indexes,b,br,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,br,additional,fields,can,be,added,to,the,projection,by,calling,link,project,operator,project,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,field,indexes,the,field,indexes,which,are,added,to,the,project,transformation,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,a,project,operator,that,represents,the,projected,data,set,see,tuple,see,data,set,see,project,operator;suppress,warnings,hiding,public,out,extends,tuple,project,operator,out,project,int,field,indexes,proj,accept,additional,indexes,field,indexes,return,proj,project,tuple,x
ProjectOperator -> @SuppressWarnings("hiding") 	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes);1423570503;Continues a Project transformation on a {@link Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be projected using field indexes.</b></br>_The transformation projects each Tuple of the DataSet onto a (sub)set of fields.</br>_Additional fields can be added to the projection by calling {@link ProjectOperator#project(int[])}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param fieldIndexes The field indexes which are added to the Project transformation._The order of fields in the output tuple corresponds to the order of field indexes._@return A ProjectOperator that represents the projected DataSet.__@see Tuple_@see DataSet_@see ProjectOperator;@SuppressWarnings("hiding")_	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes) {_		proj.acceptAdditionalIndexes(fieldIndexes)__		_		return proj.projectTupleX()__	};continues,a,project,transformation,on,a,link,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,projected,using,field,indexes,b,br,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,br,additional,fields,can,be,added,to,the,projection,by,calling,link,project,operator,project,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,field,indexes,the,field,indexes,which,are,added,to,the,project,transformation,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,a,project,operator,that,represents,the,projected,data,set,see,tuple,see,data,set,see,project,operator;suppress,warnings,hiding,public,out,extends,tuple,project,operator,out,project,int,field,indexes,proj,accept,additional,indexes,field,indexes,return,proj,project,tuple,x
ProjectOperator -> @SuppressWarnings("hiding") 	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes);1427097830;Continues a Project transformation on a {@link Tuple} {@link DataSet}.<br/>_<b>Note: Only Tuple DataSets can be projected using field indexes.</b></br>_The transformation projects each Tuple of the DataSet onto a (sub)set of fields.</br>_Additional fields can be added to the projection by calling {@link ProjectOperator#project(int[])}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param fieldIndexes The field indexes which are added to the Project transformation._The order of fields in the output tuple corresponds to the order of field indexes._@return A ProjectOperator that represents the projected DataSet.__@see Tuple_@see DataSet_@see ProjectOperator;@SuppressWarnings("hiding")_	public <OUT extends Tuple> ProjectOperator<?, OUT> project(int... fieldIndexes) {_		proj.acceptAdditionalIndexes(fieldIndexes)__		_		return proj.projectTupleX()__	};continues,a,project,transformation,on,a,link,tuple,link,data,set,br,b,note,only,tuple,data,sets,can,be,projected,using,field,indexes,b,br,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,br,additional,fields,can,be,added,to,the,projection,by,calling,link,project,operator,project,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,field,indexes,the,field,indexes,which,are,added,to,the,project,transformation,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,a,project,operator,that,represents,the,projected,data,set,see,tuple,see,data,set,see,project,operator;suppress,warnings,hiding,public,out,extends,tuple,project,operator,out,project,int,field,indexes,proj,accept,additional,indexes,field,indexes,return,proj,project,tuple,x
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1418225395;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1418225396;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1420730997;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1422405541;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1423570503;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1427097830;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1432212632;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType, this)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type,this
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1445539885;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1454679829;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1455101486;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1462899491;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1491417674;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1500970016;Projects a {@link Tuple} {@link DataSet} to the previously selected fields.__@return The projected DataSet._@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, ds.getType())__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectOperator<T, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,ds,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,operator,t,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@param type6 The class of field '6' of the result Tuples._@param type7 The class of field '7' of the result Tuples._@param type8 The class of field '8' of the result Tuples._@param type9 The class of field '9' of the result Tuples._@param type10 The class of field '10' of the result Tuples._@param type11 The class of field '11' of the result Tuples._@param type12 The class of field '12' of the result Tuples._@param type13 The class of field '13' of the result Tuples._@param type14 The class of field '14' of the result Tuples._@param type15 The class of field '15' of the result Tuples._@param type16 The class of field '16' of the result Tuples._@param type17 The class of field '17' of the result Tuples._@param type18 The class of field '18' of the result Tuples._@param type19 The class of field '19' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectOperator<T, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,operator,t,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405024514;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405090423;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1406821655;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411399886;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
ProjectOperator -> Projection -> public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411473593;Projects a {@link Tuple} {@link DataSet} to the previously selected fields._Requires the classes of the fields of the resulting Tuples.__@param type0 The class of field '0' of the result Tuples._@param type1 The class of field '1' of the result Tuples._@param type2 The class of field '2' of the result Tuples._@param type3 The class of field '3' of the result Tuples._@param type4 The class of field '4' of the result Tuples._@param type5 The class of field '5' of the result Tuples._@return The projected DataSet.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types, ds.getType())__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectOperator<T, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds, this.fieldIndexes, tType)__		};projects,a,link,tuple,link,data,set,to,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,ds,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,operator,t,tuple6,t0,t1,t2,t3,t4,t5,this,ds,this,field,indexes,t,type
