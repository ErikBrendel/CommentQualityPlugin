# id;timestamp;commentText;codeText;commentWords;codeWords
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1405024514;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1405090423;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1406821655;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1411399886;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1411473593;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function);1412761141;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,super,input,input,get,type,this,function,function,this,grouper,null,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> @PublicEvolving 	public ReduceOperator<IN> setCombineHint(CombineHint strategy);1468441547;Sets the strategy to use for the combine phase of the reduce.__If this method is not called, then the default hint will be used._({@link org.apache.flink.api.common.operators.base.ReduceOperatorBase.CombineHint.OPTIMIZER_CHOOSES})__@param strategy The hint to use._@return The ReduceOperator object, for function call chaining.;@PublicEvolving_	public ReduceOperator<IN> setCombineHint(CombineHint strategy) {_		this.hint = strategy__		return this__	};sets,the,strategy,to,use,for,the,combine,phase,of,the,reduce,if,this,method,is,not,called,then,the,default,hint,will,be,used,link,org,apache,flink,api,common,operators,base,reduce,operator,base,combine,hint,param,strategy,the,hint,to,use,return,the,reduce,operator,object,for,function,call,chaining;public,evolving,public,reduce,operator,in,set,combine,hint,combine,hint,strategy,this,hint,strategy,return,this
ReduceOperator -> @PublicEvolving 	public ReduceOperator<IN> setCombineHint(CombineHint strategy);1472043742;Sets the strategy to use for the combine phase of the reduce.__If this method is not called, then the default hint will be used._({@link org.apache.flink.api.common.operators.base.ReduceOperatorBase.CombineHint#OPTIMIZER_CHOOSES})__@param strategy The hint to use._@return The ReduceOperator object, for function call chaining.;@PublicEvolving_	public ReduceOperator<IN> setCombineHint(CombineHint strategy) {_		this.hint = strategy__		return this__	};sets,the,strategy,to,use,for,the,combine,phase,of,the,reduce,if,this,method,is,not,called,then,the,default,hint,will,be,used,link,org,apache,flink,api,common,operators,base,reduce,operator,base,combine,hint,param,strategy,the,hint,to,use,return,the,reduce,operator,object,for,function,call,chaining;public,evolving,public,reduce,operator,in,set,combine,hint,combine,hint,strategy,this,hint,strategy,return,this
ReduceOperator -> @PublicEvolving 	public ReduceOperator<IN> setCombineHint(CombineHint strategy);1500970016;Sets the strategy to use for the combine phase of the reduce.__<p>If this method is not called, then the default hint will be used._({@link org.apache.flink.api.common.operators.base.ReduceOperatorBase.CombineHint#OPTIMIZER_CHOOSES})__@param strategy The hint to use._@return The ReduceOperator object, for function call chaining.;@PublicEvolving_	public ReduceOperator<IN> setCombineHint(CombineHint strategy) {_		this.hint = strategy__		return this__	};sets,the,strategy,to,use,for,the,combine,phase,of,the,reduce,p,if,this,method,is,not,called,then,the,default,hint,will,be,used,link,org,apache,flink,api,common,operators,base,reduce,operator,base,combine,hint,param,strategy,the,hint,to,use,return,the,reduce,operator,object,for,function,call,chaining;public,evolving,public,reduce,operator,in,set,combine,hint,combine,hint,strategy,this,hint,strategy,return,this
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1415874087;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1416309577;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__		_		extractSemanticAnnotationsFromUdf(function.getClass())__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name,extract,semantic,annotations,from,udf,function,get,class
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1420730997;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1427097830;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1428086500;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1433741389;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1453200998;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1453803455;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1454428544;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1454679829;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1468441547;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__		this.hint = null__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name,this,hint,null
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1472043742;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())__		_		this.function = function__		this.grouper = null__		this.defaultName = defaultName__		this.hint = null__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name,this,hint,null
ReduceOperator -> public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName);1500970016;This is the case for a reduce-all case (in contrast to the reduce-per-group case).__@param input_@param function;public ReduceOperator(DataSet<IN> input, ReduceFunction<IN> function, String defaultName) {_		super(input, input.getType())___		this.function = function__		this.grouper = null__		this.defaultName = defaultName__		this.hint = null__	};this,is,the,case,for,a,reduce,all,case,in,contrast,to,the,reduce,per,group,case,param,input,param,function;public,reduce,operator,data,set,in,input,reduce,function,in,function,string,default,name,super,input,input,get,type,this,function,function,this,grouper,null,this,default,name,default,name,this,hint,null
