commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testIgnoreHeaderConfigure() {     CsvReader reader = getCsvReader().     reader.ignoreFirstLine().     Assert.assertTrue(reader.skipFirstLineAsHeader). }
false;public;0;7;;@Test public void testIgnoreInvalidLinesConfigure() {     CsvReader reader = getCsvReader().     Assert.assertFalse(reader.ignoreInvalidLines).     reader.ignoreInvalidLines().     Assert.assertTrue(reader.ignoreInvalidLines). }
false;public;0;7;;@Test public void testIgnoreComments() {     CsvReader reader = getCsvReader().     assertNull(reader.commentPrefix).     reader.ignoreComments("#").     assertEquals("#", reader.commentPrefix). }
false;public;0;7;;@Test public void testCharset() {     CsvReader reader = getCsvReader().     assertEquals("UTF-8", reader.getCharset()).     reader.setCharset("US-ASCII").     assertEquals("US-ASCII", reader.getCharset()). }
false;public;0;22;;@Test public void testIncludeFieldsDense() {     CsvReader reader = getCsvReader().     reader.includeFields(true, true, true).     Assert.assertTrue(Arrays.equals(new boolean[] { true, true, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("ttt").     Assert.assertTrue(Arrays.equals(new boolean[] { true, true, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("TTT").     Assert.assertTrue(Arrays.equals(new boolean[] { true, true, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("111").     Assert.assertTrue(Arrays.equals(new boolean[] { true, true, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields(0x7L).     Assert.assertTrue(Arrays.equals(new boolean[] { true, true, true }, reader.includedMask)). }
false;public;0;26;;@Test public void testIncludeFieldsSparse() {     CsvReader reader = getCsvReader().     reader.includeFields(false, true, true, false, false, true, false, false).     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("fttfftff").     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("FTTFFTFF").     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("01100100").     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields("0t1f0TFF").     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)).     reader = getCsvReader().     reader.includeFields(0x26L).     Assert.assertTrue(Arrays.equals(new boolean[] { false, true, true, false, false, true }, reader.includedMask)). }
false;public;0;12;;@Test public void testIllegalCharInStringMask() {     CsvReader reader = getCsvReader().     try {         reader.includeFields("1t0Tfht").         Assert.fail("Reader accepted an invalid mask string").     } catch (IllegalArgumentException e) {     // expected     } }
false;public;0;36;;@Test public void testIncludeFieldsErrorWhenExcludingAll() {     CsvReader reader = getCsvReader().     try {         reader.includeFields(false, false, false, false, false, false).         Assert.fail("The reader accepted a fields configuration that excludes all fields.").     } catch (IllegalArgumentException e) {     // all good     }     try {         reader.includeFields(0).         Assert.fail("The reader accepted a fields configuration that excludes all fields.").     } catch (IllegalArgumentException e) {     // all good     }     try {         reader.includeFields("ffffffffffffff").         Assert.fail("The reader accepted a fields configuration that excludes all fields.").     } catch (IllegalArgumentException e) {     // all good     }     try {         reader.includeFields("00000000000000000").         Assert.fail("The reader accepted a fields configuration that excludes all fields.").     } catch (IllegalArgumentException e) {     // all good     } }
false;public;0;6;;@Test public void testReturnType() throws Exception {     CsvReader reader = getCsvReader().     DataSource<Item> items = reader.tupleType(Item.class).     Assert.assertTrue(items.getType().getTypeClass() == Item.class). }
false;public;0;20;;@Test public void testFieldTypes() throws Exception {     CsvReader reader = getCsvReader().     DataSource<Item> items = reader.tupleType(Item.class).     TypeInformation<?> info = items.getType().     if (!info.isTupleType()) {         Assert.fail().     } else {         TupleTypeInfo<?> tinfo = (TupleTypeInfo<?>) info.         Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, tinfo.getTypeAt(0)).         Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(1)).         Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tinfo.getTypeAt(2)).         Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(3)).     }     CsvInputFormat<?> inputFormat = (CsvInputFormat<?>) items.getInputFormat().     Assert.assertArrayEquals(new Class<?>[] { Integer.class, String.class, Double.class, String.class }, inputFormat.getFieldTypes()). }
false;public;0;20;;@Test public void testSubClass() throws Exception {     CsvReader reader = getCsvReader().     DataSource<SubItem> sitems = reader.tupleType(SubItem.class).     TypeInformation<?> info = sitems.getType().     Assert.assertEquals(true, info.isTupleType()).     Assert.assertEquals(SubItem.class, info.getTypeClass()).     @SuppressWarnings("unchecked")     TupleTypeInfo<SubItem> tinfo = (TupleTypeInfo<SubItem>) info.     Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, tinfo.getTypeAt(0)).     Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(1)).     Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tinfo.getTypeAt(2)).     Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(3)).     CsvInputFormat<?> inputFormat = (CsvInputFormat<?>) sitems.getInputFormat().     Assert.assertArrayEquals(new Class<?>[] { Integer.class, String.class, Double.class, String.class }, inputFormat.getFieldTypes()). }
false;public;0;23;;@Test public void testSubClassWithPartialsInHierarchie() throws Exception {     CsvReader reader = getCsvReader().     DataSource<FinalItem> sitems = reader.tupleType(FinalItem.class).     TypeInformation<?> info = sitems.getType().     Assert.assertEquals(true, info.isTupleType()).     Assert.assertEquals(FinalItem.class, info.getTypeClass()).     @SuppressWarnings("unchecked")     TupleTypeInfo<SubItem> tinfo = (TupleTypeInfo<SubItem>) info.     Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, tinfo.getTypeAt(0)).     Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(1)).     Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tinfo.getTypeAt(2)).     Assert.assertEquals(ValueTypeInfo.class, tinfo.getTypeAt(3).getClass()).     Assert.assertEquals(ValueTypeInfo.class, tinfo.getTypeAt(4).getClass()).     Assert.assertEquals(StringValue.class, ((ValueTypeInfo<?>) tinfo.getTypeAt(3)).getTypeClass()).     Assert.assertEquals(LongValue.class, ((ValueTypeInfo<?>) tinfo.getTypeAt(4)).getTypeClass()).     CsvInputFormat<?> inputFormat = (CsvInputFormat<?>) sitems.getInputFormat().     Assert.assertArrayEquals(new Class<?>[] { Integer.class, String.class, Double.class, StringValue.class, LongValue.class }, inputFormat.getFieldTypes()). }
false;public;0;12;;@Test public void testUnsupportedPartialitem() throws Exception {     CsvReader reader = getCsvReader().     try {         reader.tupleType(PartialItem.class).         Assert.fail("tupleType() accepted an underspecified generic class.").     } catch (Exception e) {     // okay.     } }
false;public;0;10;;@Test public void testWithValueType() throws Exception {     CsvReader reader = getCsvReader().     DataSource<Tuple8<StringValue, BooleanValue, ByteValue, ShortValue, IntValue, LongValue, FloatValue, DoubleValue>> items = reader.types(StringValue.class, BooleanValue.class, ByteValue.class, ShortValue.class, IntValue.class, LongValue.class, FloatValue.class, DoubleValue.class).     TypeInformation<?> info = items.getType().     Assert.assertEquals(true, info.isTupleType()).     Assert.assertEquals(Tuple8.class, info.getTypeClass()). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWithInvalidValueType1() throws Exception {     CsvReader reader = getCsvReader().     // CsvReader doesn't support CharValue     reader.types(CharValue.class). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWithInvalidValueType2() throws Exception {     CsvReader reader = getCsvReader().     // CsvReader doesn't support custom Value type     reader.types(ValueItem.class). }
false;private,static;0;3;;private static CsvReader getCsvReader() {     return new CsvReader("/some/none/existing/path", ExecutionEnvironment.createLocalEnvironment(1)). }
false;public;0;3;;public int getV1() {     return v1. }
false;public;1;3;;public void setV1(int v1) {     this.v1 = v1. }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(v1). }
false;public;1;4;;@Override public void read(DataInputView in) throws IOException {     v1 = in.readInt(). }
