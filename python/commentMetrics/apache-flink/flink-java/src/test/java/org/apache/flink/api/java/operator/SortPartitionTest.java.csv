commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSortPartitionPositionKeys1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.sortPartition(0, Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;15;;@Test public void testSortPartitionPositionKeys2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.sortPartition(0, Order.ASCENDING).sortPartition(3, Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithPositionKeys3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition(2, Order.ASCENDING). }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithPositionKeys4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition(3, Order.ASCENDING). }
false;public;0;13;;@Test public void testSortPartitionExpressionKeys1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.sortPartition("f1", Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;15;;@Test public void testSortPartitionExpressionKeys2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.sortPartition("f0", Order.ASCENDING).sortPartition("f2.nested.myInt", Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithExpressionKeys3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition("f2.nested", Order.ASCENDING). }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithExpressionKeys4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition("f3", Order.ASCENDING). }
false;public;1;4;;@Override public Integer getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f0. }
false;public;0;17;;@Test public void testSortPartitionWithKeySelector1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.sortPartition(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Integer>() {              @Override             public Integer getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {                 return value.f0.             }         }, Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Long[] getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f3. }
false;public;0;13;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithKeySelector2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Long[]>() {          @Override         public Long[] getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f3.         }     }, Order.ASCENDING). }
false;public;1;4;;@Override public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f2. }
false;public;0;15;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithKeySelector3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition("f1", Order.ASCENDING).sortPartition(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, CustomType>() {          @Override         public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f2.         }     }, Order.ASCENDING). }
false;public;1;4;;@Override public Tuple2<Integer, Long> getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return new Tuple2<>(value.f0, value.f1). }
false;public;0;17;;@Test public void testSortPartitionWithKeySelector4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.sortPartition(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Tuple2<Integer, Long>>() {              @Override             public Tuple2<Integer, Long> getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {                 return new Tuple2<>(value.f0, value.f1).             }         }, Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f2. }
false;public;0;15;;@Test(expected = InvalidProgramException.class) public void testSortPartitionWithKeySelector5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // must not work     tupleDs.sortPartition(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, CustomType>() {          @Override         public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f2.         }     }, Order.ASCENDING).sortPartition("f1", Order.ASCENDING). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
