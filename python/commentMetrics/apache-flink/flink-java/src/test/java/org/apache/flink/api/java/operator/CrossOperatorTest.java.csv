commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void insertCustomData() {     customTypeData.add(new CustomType()). }
false;public;0;15;;@Test public void testCrossProjection1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;15;;@Test public void testCrossProjection21() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;15;;@Test public void testCrossProjection2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0, 3).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;15;;@Test public void testCrossProjection22() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0, 3).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0).projectSecond(3).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection23() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0).projectSecond(3).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;18;;@Test public void testCrossProjection4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0, 2).projectSecond(1, 4).projectFirst(1).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;18;;@Test public void testCrossProjection24() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectFirst(0, 2).projectSecond(1, 4).projectFirst(1).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;17;;@Test public void testCrossProjection5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectSecond(0, 2).projectFirst(1, 4).projectFirst(1).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;17;;@Test public void testCrossProjection25() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectSecond(0, 2).projectFirst(1, 4).projectFirst(1).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection6() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.cross(ds2).projectFirst().projectSecond().     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection26() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.cross(ds2).projectFirst().projectSecond().     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection7() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectSecond().projectFirst(1, 4).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testCrossProjection27() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.cross(ds2).projectSecond().projectFirst(1, 4).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection8() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectFirst(5). }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection28() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectFirst(5). }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection9() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectSecond(5). }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection29() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectSecond(5). }
false;public;0;10;;public void testCrossProjection10() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     ds1.cross(ds2).projectFirst(2). }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection30() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, type does not match     ds1.cross(ds2).projectFirst(-1). }
false;public;0;10;;public void testCrossProjection11() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     ds1.cross(ds2).projectSecond(2). }
false;public;0;11;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection31() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, type does not match     ds1.cross(ds2).projectSecond(-1). }
false;public;0;11;;public void testCrossProjection12() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     ds1.cross(ds2).projectSecond(2).projectFirst(1). }
false;public;0;12;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection32() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, number of types and fields does not match     ds1.cross(ds2).projectSecond(2).projectFirst(-1). }
false;public;0;12;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection13() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectSecond(0).projectFirst(5). }
false;public;0;12;;@Test(expected = IndexOutOfBoundsException.class) public void testCrossProjection14() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, index out of range     ds1.cross(ds2).projectFirst(0).projectSecond(5). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
