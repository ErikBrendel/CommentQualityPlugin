commented;modifiers;parameterAmount;loc;comment;code
false;public;0;45;;@Test public void testFieldsProjection() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.project(0).     } catch (Exception e) {         Assert.fail().     }     // should not work: too many fields     try {         tupleDs.project(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25).         Assert.fail().     } catch (IllegalArgumentException iae) {     // we're good here     } catch (Exception e) {         Assert.fail().     }     // should not work: index out of bounds of input tuple     try {         tupleDs.project(0, 5, 2).         Assert.fail().     } catch (IndexOutOfBoundsException ioobe) {     // we're good here     } catch (Exception e) {         Assert.fail().     }     // should not work: not applied to tuple dataset     DataSet<Long> longDs = env.fromCollection(emptyLongData, BasicTypeInfo.LONG_TYPE_INFO).     try {         longDs.project(0).         Assert.fail().     } catch (UnsupportedOperationException uoe) {     // we're good here     } catch (Exception e) {         Assert.fail().     } }
false;public;0;21;;@Test public void testProjectionTypes() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.project(0).     } catch (Exception e) {         Assert.fail().     }     // should work: dummy types() here     try {         tupleDs.project(2, 1, 4).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;34;;@Test public void testProjectionWithoutTypes() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.project(2, 0, 4).     } catch (Exception e) {         Assert.fail().     }     // should not work: field index is out of bounds of input tuple     try {         tupleDs.project(2, -1, 4).         Assert.fail().     } catch (IndexOutOfBoundsException iob) {     // we're good here     } catch (Exception e) {         Assert.fail().     }     // should not work: field index is out of bounds of input tuple     try {         tupleDs.project(2, 1, 4, 5, 8, 9).         Assert.fail().     } catch (IndexOutOfBoundsException iob) {     // we're good here     } catch (Exception e) {         Assert.fail().     } }
