commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void fillPojoData() {     if (pojoData.isEmpty()) {         pojoData.add(new CustomType()).     } }
false;public;0;15;;@Test public void testTupleSingleOrderIdx() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(0, Order.ANY).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;17;;@Test public void testTupleTwoOrderIdx() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(0, Order.ASCENDING).sortLocalOutput(3, Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testTupleSingleOrderExp() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("f0", Order.ANY).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;11;;public void testTupleSingleOrderExpFull() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work     tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("*", Order.ANY). }
false;public;0;17;;@Test public void testTupleTwoOrderExp() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("f1", Order.ASCENDING).sortLocalOutput("f4", Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;17;;@Test public void testTupleTwoOrderMixed() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(4, Order.ASCENDING).sortLocalOutput("f2", Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;13;;@Test(expected = IndexOutOfBoundsException.class) public void testFailTupleIndexOutOfBounds() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // must not work     tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(3, Order.ASCENDING).sortLocalOutput(5, Order.DESCENDING). }
false;public;0;13;;@Test(expected = CompositeType.InvalidFieldReferenceException.class) public void testFailTupleInv() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // must not work     tupleDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("notThere", Order.ASCENDING).sortLocalOutput("f4", Order.DESCENDING). }
false;public;0;16;;@Test public void testPrimitiveOrder() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.generateSequence(0, 2).     // should work     try {         longDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("*", Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testFailPrimitiveOrder1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.generateSequence(0, 2).     // must not work     longDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(0, Order.ASCENDING). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testFailPrimitiveOrder2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.generateSequence(0, 2).     // must not work     longDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("0", Order.ASCENDING). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testFailPrimitiveOrder3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.generateSequence(0, 2).     // must not work     longDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("nope", Order.ASCENDING). }
false;public;0;16;;@Test public void testPojoSingleOrder() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> pojoDs = env.fromCollection(pojoData).     // should work     try {         pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("myString", Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;17;;@Test public void testPojoTwoOrder() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> pojoDs = env.fromCollection(pojoData).     // should work     try {         pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("myLong", Order.ASCENDING).sortLocalOutput("myString", Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testFailPojoIdx() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> pojoDs = env.fromCollection(pojoData).     // must not work     pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput(1, Order.DESCENDING). }
false;public;0;13;;@Test(expected = CompositeType.InvalidFieldReferenceException.class) public void testFailPojoInvalidField() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> pojoDs = env.fromCollection(pojoData).     // must not work     pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("myInt", Order.ASCENDING).sortLocalOutput("notThere", Order.DESCENDING). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testPojoSingleOrderFull() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> pojoDs = env.fromCollection(pojoData).     // must not work     pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("*", Order.ASCENDING). }
false;public;0;15;;@Test(expected = InvalidProgramException.class) public void testArrayOrderFull() {     List<Object[]> arrayData = new ArrayList<>().     arrayData.add(new Object[0]).     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Object[]> pojoDs = env.fromCollection(arrayData).     // must not work     pojoDs.writeAsText("/tmp/willNotHappen").sortLocalOutput("*", Order.ASCENDING). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
