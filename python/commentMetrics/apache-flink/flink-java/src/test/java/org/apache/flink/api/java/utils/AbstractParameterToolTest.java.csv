commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;13;;protected void validate(ParameterTool parameter) {     ClosureCleaner.ensureSerializable(parameter).     internalValidate(parameter).     // -------- test behaviour after serialization ------------     try {         byte[] b = InstantiationUtil.serializeObject(parameter).         final ParameterTool copy = InstantiationUtil.deserializeObject(b, getClass().getClassLoader()).         internalValidate(copy).     } catch (IOException | ClassNotFoundException e) {         throw new RuntimeException(e).     } }
false;private;1;32;;private void internalValidate(ParameterTool parameter) {     Assert.assertEquals("myInput", parameter.getRequired("input")).     Assert.assertEquals("myDefaultValue", parameter.get("output", "myDefaultValue")).     Assert.assertNull(parameter.get("whatever")).     Assert.assertEquals(15L, parameter.getLong("expectedCount", -1L)).     Assert.assertTrue(parameter.getBoolean("thisIsUseful", true)).     Assert.assertEquals(42, parameter.getByte("myDefaultByte", (byte) 42)).     Assert.assertEquals(42, parameter.getShort("myDefaultShort", (short) 42)).     final Configuration config = parameter.getConfiguration().     Assert.assertEquals(15L, config.getLong("expectedCount", -1L)).     final Properties props = parameter.getProperties().     Assert.assertEquals("myInput", props.getProperty("input")).     // -------- test the default file creation ------------     try {         final String pathToFile = tmp.newFile().getAbsolutePath().         parameter.createPropertiesFile(pathToFile).         final Properties defaultProps = new Properties().         try (FileInputStream fis = new FileInputStream(pathToFile)) {             defaultProps.load(fis).         }         Assert.assertEquals("myDefaultValue", defaultProps.get("output")).         Assert.assertEquals("-1", defaultProps.get("expectedCount")).         Assert.assertTrue(defaultProps.containsKey("input")).     } catch (IOException e) {         throw new RuntimeException(e).     } }
