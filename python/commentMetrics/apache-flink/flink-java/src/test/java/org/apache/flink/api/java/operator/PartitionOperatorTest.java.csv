commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Integer getNumber() {     return number. }
false;public;1;3;;public void setNumber(Integer number) {     this.number = number. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;4;;@Override public int compareTo(CustomPojo o) {     return Integer.compare(this.number, o.number). }
false;public;0;3;;public CustomPojo getNested() {     return nested. }
false;public;1;3;;public void setNested(CustomPojo nested) {     this.nested = nested. }
false;public;0;3;;public Long getOuter() {     return outer. }
false;public;1;3;;public void setOuter(Long outer) {     this.outer = outer. }
false;private;1;10;;private DataSet<Tuple2<Integer, String>> getTupleDataSet(ExecutionEnvironment env) {     return env.fromElements(new Tuple2<>(1, "first"), new Tuple2<>(2, "second"), new Tuple2<>(3, "third"), new Tuple2<>(4, "fourth"), new Tuple2<>(5, "fifth"), new Tuple2<>(6, "sixth")). }
false;private;1;10;;private DataSet<CustomPojo> getPojoDataSet(ExecutionEnvironment env) {     return env.fromElements(new CustomPojo(1, "first"), new CustomPojo(2, "second"), new CustomPojo(3, "third"), new CustomPojo(4, "fourth"), new CustomPojo(5, "fifth"), new CustomPojo(6, "sixth")). }
false;private;1;10;;private DataSet<NestedPojo> getNestedPojoDataSet(ExecutionEnvironment env) {     return env.fromElements(new NestedPojo(new CustomPojo(1, "first"), 1L), new NestedPojo(new CustomPojo(2, "second"), 2L), new NestedPojo(new CustomPojo(3, "third"), 3L), new NestedPojo(new CustomPojo(4, "fourth"), 4L), new NestedPojo(new CustomPojo(5, "fifth"), 5L), new NestedPojo(new CustomPojo(6, "sixth"), 6L)). }
false;public;0;7;;@Test public void testRebalance() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.rebalance(). }
false;public;0;7;;@Test public void testHashPartitionByField1() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByHash(0). }
false;public;0;7;;@Test public void testHashPartitionByField2() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByHash(0, 1). }
false;public;0;7;;@Test(expected = IndexOutOfBoundsException.class) public void testHashPartitionByFieldOutOfRange() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByHash(0, 1, 2). }
false;public;0;7;;@Test public void testHashPartitionByFieldName1() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByHash("number"). }
false;public;0;7;;@Test public void testHashPartitionByFieldName2() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByHash("number", "name"). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testHashPartitionByInvalidFieldName() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByHash("number", "name", "invalidField"). }
false;public;0;7;;@Test public void testRangePartitionByFieldName1() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByRange("number"). }
false;public;0;7;;@Test public void testRangePartitionByFieldName2() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByRange("number", "name"). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testRangePartitionByInvalidFieldName() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionByRange("number", "name", "invalidField"). }
false;public;0;7;;@Test public void testRangePartitionByField1() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByRange(0). }
false;public;0;7;;@Test public void testRangePartitionByField2() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByRange(0, 1). }
false;public;0;11;;@Test(expected = IllegalArgumentException.class) public void testRangePartitionWithEmptyIndicesKey() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSource<Tuple2<Tuple2<Integer, Integer>, Integer>> ds = env.fromElements(new Tuple2<>(new Tuple2<>(1, 1), 1), new Tuple2<>(new Tuple2<>(2, 2), 2), new Tuple2<>(new Tuple2<>(2, 2), 2)).     ds.partitionByRange(new int[] {}). }
false;public;0;7;;@Test(expected = IndexOutOfBoundsException.class) public void testRangePartitionByFieldOutOfRange() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByRange(0, 1, 2). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testHashPartitionWithOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByHash(1).withOrders(Order.ASCENDING). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testRebalanceWithOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.rebalance().withOrders(Order.ASCENDING). }
false;public;0;7;;@Test public void testRangePartitionWithOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByRange(0).withOrders(Order.ASCENDING). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testRangePartitionWithTooManyOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionByRange(0).withOrders(Order.ASCENDING, Order.DESCENDING). }
false;public;0;11;;@Test public void testRangePartitionByComplexKeyWithOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSource<Tuple2<Tuple2<Integer, Integer>, Integer>> ds = env.fromElements(new Tuple2<>(new Tuple2<>(1, 1), 1), new Tuple2<>(new Tuple2<>(2, 2), 2), new Tuple2<>(new Tuple2<>(2, 2), 2)).     ds.partitionByRange(0, 1).withOrders(Order.ASCENDING, Order.DESCENDING). }
false;public;0;11;;@Test(expected = IllegalArgumentException.class) public void testRangePartitionByComplexKeyWithTooManyOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSource<Tuple2<Tuple2<Integer, Integer>, Integer>> ds = env.fromElements(new Tuple2<>(new Tuple2<>(1, 1), 1), new Tuple2<>(new Tuple2<>(2, 2), 2), new Tuple2<>(new Tuple2<>(2, 2), 2)).     ds.partitionByRange(0).withOrders(Order.ASCENDING, Order.DESCENDING). }
false;public;1;4;;@Override public CustomPojo getKey(NestedPojo value) throws Exception {     return value.getNested(). }
false;public;0;12;;@Test public void testRangePartitionBySelectorComplexKeyWithOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<NestedPojo> ds = getNestedPojoDataSet(env).     ds.partitionByRange(new KeySelector<NestedPojo, CustomPojo>() {          @Override         public CustomPojo getKey(NestedPojo value) throws Exception {             return value.getNested().         }     }).withOrders(Order.ASCENDING). }
false;public;1;4;;@Override public CustomPojo getKey(NestedPojo value) throws Exception {     return value.getNested(). }
false;public;0;12;;@Test(expected = IllegalArgumentException.class) public void testRangePartitionBySelectorComplexKeyWithTooManyOrders() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<NestedPojo> ds = getNestedPojoDataSet(env).     ds.partitionByRange(new KeySelector<NestedPojo, CustomPojo>() {          @Override         public CustomPojo getKey(NestedPojo value) throws Exception {             return value.getNested().         }     }).withOrders(Order.ASCENDING, Order.DESCENDING). }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 1. }
false;public;0;12;;@Test public void testRangePartitionCustomPartitionerByFieldId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionCustom(new Partitioner<Integer>() {          @Override         public int partition(Integer key, int numPartitions) {             return 1.         }     }, 0). }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 1. }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testRangePartitionInvalidCustomPartitionerByFieldId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<Tuple2<Integer, String>> ds = getTupleDataSet(env).     ds.partitionCustom(new Partitioner<Integer>() {          @Override         public int partition(Integer key, int numPartitions) {             return 1.         }     }, 1). }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 1. }
false;public;0;12;;@Test public void testRangePartitionCustomPartitionerByFieldName() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionCustom(new Partitioner<Integer>() {          @Override         public int partition(Integer key, int numPartitions) {             return 1.         }     }, "number"). }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 1. }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testRangePartitionInvalidCustomPartitionerByFieldName() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionCustom(new Partitioner<Integer>() {          @Override         public int partition(Integer key, int numPartitions) {             return 1.         }     }, "name"). }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 1. }
false;public;1;4;;@Override public Integer getKey(CustomPojo value) throws Exception {     return value.getNumber(). }
false;public;0;17;;@Test public void testRangePartitionCustomPartitionerByKeySelector() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final DataSet<CustomPojo> ds = getPojoDataSet(env).     ds.partitionCustom(new Partitioner<Integer>() {          @Override         public int partition(Integer key, int numPartitions) {             return 1.         }     }, new KeySelector<CustomPojo, Integer>() {          @Override         public Integer getKey(CustomPojo value) throws Exception {             return value.getNumber().         }     }). }
