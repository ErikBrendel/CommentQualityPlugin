commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testGroupByKeyFields1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.groupBy(0).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testGroupByKeyFields2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.fromCollection(emptyLongData, BasicTypeInfo.LONG_TYPE_INFO).     // should not work: groups on basic type     longDs.groupBy(0). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testGroupByKeyFields3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> customDs = env.fromCollection(customTypeData).     // should not work: groups on custom type     customDs.groupBy(0). }
false;public;0;9;;@Test(expected = IndexOutOfBoundsException.class) public void testGroupByKeyFields4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, key out of tuple bounds     tupleDs.groupBy(5). }
false;public;0;9;;@Test(expected = IndexOutOfBoundsException.class) public void testGroupByKeyFields5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, negative field position     tupleDs.groupBy(-1). }
false;public;0;8;;@Test public void testGroupByKeyFieldsOnPrimitiveArray() {     this.byteArrayData.add(new Tuple2(new byte[] { 0 }, new byte[] { 1 })).     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<byte[], byte[]>> tupleDs = env.fromCollection(byteArrayData).     tupleDs.groupBy(0). }
false;public;0;16;;@Test public void testGroupByKeyExpressions1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> ds = env.fromCollection(customTypeData).     // should work     try {         ds.groupBy("myInt").     } catch (Exception e) {         Assert.fail().     } }
false;public;0;9;;@Test(expected = InvalidProgramException.class) public void testGroupByKeyExpressions2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.fromCollection(emptyLongData, BasicTypeInfo.LONG_TYPE_INFO).     // should not work: groups on basic type     longDs.groupBy("myInt"). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testGroupByKeyExpressions3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> customDs = env.fromCollection(customTypeData).     // should not work: tuple selector on custom type     customDs.groupBy(0). }
false;public;0;9;;@Test(expected = IllegalArgumentException.class) public void testGroupByKeyExpressions4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds = env.fromCollection(customTypeData).     // should not work, key out of tuple bounds     ds.groupBy("myNonExistent"). }
false;public;0;16;;@Test public void testGroupByKeyExpressions1Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> ds = env.fromCollection(customTypeData).     // should work     try {         ds.groupBy("nested.myInt").     } catch (Exception e) {         Assert.fail().     } }
false;public;0;9;;@Test(expected = IllegalArgumentException.class) public void testGroupByKeyExpressions2Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds = env.fromCollection(customTypeData).     // should not work, key out of tuple bounds     ds.groupBy("nested.myNonExistent"). }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;22;;@Test @SuppressWarnings("serial") public void testGroupByKeySelector1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     try {         DataSet<CustomType> customDs = env.fromCollection(customTypeData).         // should work         customDs.groupBy(new KeySelector<GroupingTest.CustomType, Long>() {              @Override             public Long getKey(CustomType value) {                 return value.myLong.             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Tuple2<Integer, Long> getKey(CustomType value) {     return new Tuple2<Integer, Long>(value.myInt, value.myLong). }
false;public;0;21;;@Test @SuppressWarnings("serial") public void testGroupByKeySelector2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     try {         DataSet<CustomType> customDs = env.fromCollection(customTypeData).         // should work         customDs.groupBy(new KeySelector<GroupingTest.CustomType, Tuple2<Integer, Long>>() {              @Override             public Tuple2<Integer, Long> getKey(CustomType value) {                 return new Tuple2<Integer, Long>(value.myInt, value.myLong).             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public CustomType getKey(CustomType value) {     return value. }
false;public;0;21;;@Test @SuppressWarnings("serial") public void testGroupByKeySelector3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     try {         DataSet<CustomType> customDs = env.fromCollection(customTypeData).         // should not work         customDs.groupBy(new KeySelector<GroupingTest.CustomType, CustomType>() {              @Override             public CustomType getKey(CustomType value) {                 return value.             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Tuple2<Integer, CustomType> getKey(CustomType value) {     return new Tuple2<Integer, CustomType>(value.myInt, value). }
false;public;0;21;;@Test @SuppressWarnings("serial") public void testGroupByKeySelector4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     try {         DataSet<CustomType> customDs = env.fromCollection(customTypeData).         // should not work         customDs.groupBy(new KeySelector<GroupingTest.CustomType, Tuple2<Integer, GroupingTest.CustomType>>() {              @Override             public Tuple2<Integer, CustomType> getKey(CustomType value) {                 return new Tuple2<Integer, CustomType>(value.myInt, value).             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public CustomType2 getKey(CustomType value) {     return new CustomType2(). }
false;public;0;17;;@Test(expected = InvalidProgramException.class) @SuppressWarnings("serial") public void testGroupByKeySelector5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> customDs = env.fromCollection(customTypeData).     // should not work     customDs.groupBy(new KeySelector<GroupingTest.CustomType, CustomType2>() {          @Override         public CustomType2 getKey(CustomType value) {             return new CustomType2().         }     }). }
false;public;0;13;;@Test public void testGroupSortKeyFields1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.groupBy(0).sortGroup(0, Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;10;;@Test(expected = IndexOutOfBoundsException.class) public void testGroupSortKeyFields2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, field index out of bounds     tupleDs.groupBy(0).sortGroup(5, Order.ASCENDING). }
false;public;1;4;;@Override public Long getKey(Long value) {     return value. }
false;public;0;18;;@Test(expected = InvalidProgramException.class) public void testGroupSortKeyFields3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> longDs = env.fromCollection(emptyLongData, BasicTypeInfo.LONG_TYPE_INFO).     // should not work: sorted groups on groupings by key selectors     longDs.groupBy(new KeySelector<Long, Long>() {          private static final long serialVersionUID = 1L.          @Override         public Long getKey(Long value) {             return value.         }     }).sortGroup(0, Order.ASCENDING). }
false;public;0;11;;@Test(expected = InvalidProgramException.class) public void testGroupSortKeyFields4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy(0).sortGroup(2, Order.ASCENDING). }
false;public;0;11;;@Test(expected = InvalidProgramException.class) public void testGroupSortKeyFields5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy(0).sortGroup(3, Order.ASCENDING). }
false;public;0;13;;@Test public void testChainedGroupSortKeyFields() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.groupBy(0).sortGroup(0, Order.ASCENDING).sortGroup(2, Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;14;;@Test public void testGroupSortByKeyExpression1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.groupBy("f0").sortGroup("f1", Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;14;;@Test public void testGroupSortByKeyExpression2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.groupBy("f0").sortGroup("f2.myString", Order.ASCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;16;;@Test public void testGroupSortByKeyExpression3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should work     try {         tupleDs.groupBy("f0").sortGroup("f2.myString", Order.ASCENDING).sortGroup("f1", Order.DESCENDING).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;11;;@Test(expected = InvalidProgramException.class) public void testGroupSortByKeyExpression4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy("f0").sortGroup("f2", Order.ASCENDING). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testGroupSortByKeyExpression5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy("f0").sortGroup("f1", Order.ASCENDING).sortGroup("f2", Order.ASCENDING). }
false;public;0;11;;@Test(expected = InvalidProgramException.class) public void testGroupSortByKeyExpression6() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy("f0").sortGroup("f3", Order.ASCENDING). }
false;public;1;4;;@Override public Integer getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f0. }
false;public;1;4;;@Override public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f1. }
false;public;0;24;;@SuppressWarnings("serial") @Test public void testGroupSortByKeySelector1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Long>() {          @Override         public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f1.         }     }).sortGroup(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Integer>() {          @Override         public Integer getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f0.         }     }, Order.ASCENDING). }
false;public;1;4;;@Override public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f2. }
false;public;1;4;;@Override public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f1. }
false;public;0;24;;@SuppressWarnings("serial") @Test(expected = InvalidProgramException.class) public void testGroupSortByKeySelector2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Long>() {          @Override         public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f1.         }     }).sortGroup(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, CustomType>() {          @Override         public CustomType getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f2.         }     }, Order.ASCENDING). }
false;public;1;4;;@Override public Long[] getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f3. }
false;public;1;4;;@Override public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {     return value.f1. }
false;public;0;24;;@SuppressWarnings("serial") @Test(expected = InvalidProgramException.class) public void testGroupSortByKeySelector3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple4<Integer, Long, CustomType, Long[]>> tupleDs = env.fromCollection(tupleWithCustomData, tupleWithCustomInfo).     // should not work     tupleDs.groupBy(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Long>() {          @Override         public Long getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f1.         }     }).sortGroup(new KeySelector<Tuple4<Integer, Long, CustomType, Long[]>, Long[]>() {          @Override         public Long[] getKey(Tuple4<Integer, Long, CustomType, Long[]> value) throws Exception {             return value.f3.         }     }, Order.ASCENDING). }
false;public;0;7;;@Test public void testGroupingAtomicType() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> dataSet = env.fromElements(0, 1, 1, 2, 0, 0).     dataSet.groupBy("*"). }
false;public;0;7;;@Test(expected = InvalidProgramException.class) public void testGroupAtomicTypeWithInvalid1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> dataSet = env.fromElements(0, 1, 2, 3).     dataSet.groupBy("*", "invalidField"). }
false;public;0;7;;@Test(expected = InvalidProgramException.class) public void testGroupAtomicTypeWithInvalid2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> dataSet = env.fromElements(0, 1, 2, 3).     dataSet.groupBy("invalidField"). }
false;public;0;7;;@Test(expected = InvalidProgramException.class) public void testGroupAtomicTypeWithInvalid3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<ArrayList<Integer>> dataSet = env.fromElements(new ArrayList<Integer>()).     dataSet.groupBy("*"). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
