commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Integer getFirstVertex() {     return this.getField(V1). }
false;public;0;3;;public Integer getSecondVertex() {     return this.getField(V2). }
false;public;1;3;;public void setFirstVertex(final Integer vertex1) {     this.setField(vertex1, V1). }
false;public;1;3;;public void setSecondVertex(final Integer vertex2) {     this.setField(vertex2, V2). }
false;public;1;4;;public void copyVerticesFromTuple2(Tuple2<Integer, Integer> t) {     this.setFirstVertex(t.f0).     this.setSecondVertex(t.f1). }
false;public;0;5;;public void flipVertices() {     Integer tmp = this.getFirstVertex().     this.setFirstVertex(this.getSecondVertex()).     this.setSecondVertex(tmp). }
false;public;1;3;;public void setFirstVertex(final Integer vertex1) {     this.setField(vertex1, V1). }
false;public;1;3;;public void setSecondVertex(final Integer vertex2) {     this.setField(vertex2, V2). }
false;public;1;3;;public void setThirdVertex(final Integer vertex3) {     this.setField(vertex3, V3). }
false;public;2;27;;@Override public void reduce(Iterable<Edge> edgesIter, Collector<Triad> out) throws Exception {     final Iterator<Edge> edges = edgesIter.iterator().     // clear vertex list     vertices.clear().     // read first edge     Edge firstEdge = edges.next().     outTriad.setFirstVertex(firstEdge.getFirstVertex()).     vertices.add(firstEdge.getSecondVertex()).     // build and emit triads     while (edges.hasNext()) {         Integer higherVertexId = edges.next().getSecondVertex().         // combine vertex with all previously read vertices         for (Integer lowerVertexId : vertices) {             outTriad.setSecondVertex(lowerVertexId).             outTriad.setThirdVertex(higherVertexId).             out.collect(outTriad).         }         vertices.add(higherVertexId).     } }
false;public;0;7;;@Test public void testEnumTrianglesBasicExamplesTriadBuilder() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(GroupReduceFunction.class, TriadBuilder.class, TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     }), TypeInformation.of(new TypeHint<Tuple3<Integer, Integer, Integer>>() {     }), new String[] { "0" }). }
false;public;1;5;;@Override public Edge map(Tuple2<Integer, Integer> t) throws Exception {     outEdge.copyVerticesFromTuple2(t).     return outEdge. }
false;public;0;6;;@Test public void testEnumTrianglesBasicExamplesTupleEdgeConverter() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, TupleEdgeConverter.class, TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     })). }
false;public;2;6;;@Override public void flatMap(Edge edge, Collector<Edge> out) throws Exception {     out.collect(edge).     edge.flipVertices().     out.collect(edge). }
false;public;0;6;;@Test public void testEnumTrianglesOptExamplesEdgeDuplicator() {     compareAnalyzerResultWithAnnotationsSingleInput(FlatMapFunction.class, EdgeDuplicator.class, TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     })). }
false;public;2;33;;@Override public void reduce(Iterable<Edge> edgesIter, Collector<Edge> out) {     Iterator<Edge> edges = edgesIter.iterator().     otherVertices.clear().     // get first edge     Edge edge = edges.next().     Integer groupVertex = edge.getFirstVertex().     this.otherVertices.add(edge.getSecondVertex()).     // get all other edges (assumes edges are sorted by second vertex)     while (edges.hasNext()) {         edge = edges.next().         Integer otherVertex = edge.getSecondVertex().         // collect unique vertices         if (!otherVertices.contains(otherVertex) && !otherVertex.equals(groupVertex)) {             this.otherVertices.add(otherVertex).         }     }     // emit edges     for (Integer otherVertex : this.otherVertices) {         if (groupVertex < otherVertex) {             outputEdge.setFirstVertex(groupVertex).             outputEdge.setSecondVertex(otherVertex).         } else {             outputEdge.setFirstVertex(otherVertex).             outputEdge.setSecondVertex(groupVertex).         }         out.collect(outputEdge).     } }
false;public;0;7;;@Test public void testEnumTrianglesOptExamplesDegreeCounter() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(GroupReduceFunction.class, DegreeCounter.class, TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Integer, Integer>>() {     }), new String[] { "0" }). }
false;public;1;5;;public Point add(Point other) {     x += other.x.     y += other.y.     return this. }
false;public;1;5;;public Point div(long val) {     x /= val.     y /= val.     return this. }
false;public;0;3;;public void clear() {     x = y = 0.0. }
false;public;0;4;;@Override public String toString() {     return x + " " + y. }
false;public;0;4;;@Override public String toString() {     return id + " " + super.toString(). }
false;public;2;4;;@Override public Tuple3<Integer, Point, Long> reduce(Tuple3<Integer, Point, Long> val1, Tuple3<Integer, Point, Long> val2) {     return new Tuple3<Integer, Point, Long>(val1.f0, val1.f1.add(val2.f1), val1.f2 + val2.f2). }
false;public;0;7;;@Test public void testKMeansExamplesCentroidAccumulator() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(ReduceFunction.class, CentroidAccumulator.class, TypeInformation.of(new TypeHint<Tuple3<Integer, Point, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple3<Integer, Point, Long>>() {     }), new String[] { "0" }). }
false;public;1;4;;@Override public Centroid map(Tuple3<Integer, Point, Long> value) {     return new Centroid(value.f0, value.f1.div(value.f2)). }
false;public;0;6;;@Test public void testKMeansExamplesCentroidAverager() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, CentroidAverager.class, TypeInformation.of(new TypeHint<Tuple3<Integer, Point, Long>>() {     }), TypeInformation.of(new TypeHint<Centroid>() {     })). }
false;public;2;7;;@Override public void flatMap(Tuple2<Long, Long> edge, Collector<Tuple2<Long, Long>> out) {     invertedEdge.f0 = edge.f1.     invertedEdge.f1 = edge.f0.     out.collect(edge).     out.collect(invertedEdge). }
false;public;0;6;;@Test public void testConnectedComponentsExamplesUndirectEdge() {     compareAnalyzerResultWithAnnotationsSingleInput(FlatMapFunction.class, UndirectEdge.class, TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     })). }
false;public;3;6;;@Override public void join(Tuple2<Long, Long> candidate, Tuple2<Long, Long> old, Collector<Tuple2<Long, Long>> out) {     if (candidate.f1 < old.f1) {         out.collect(candidate).     } }
false;public;0;7;;@Test public void testConnectedComponentsExamplesComponentIdFilter() {     compareAnalyzerResultWithAnnotationsDualInput(FlatJoinFunction.class, ComponentIdFilter.class, TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     })). }
false;public;1;4;;@Override public Tuple2<T, T> map(T vertex) {     return new Tuple2<T, T>(vertex, vertex). }
false;public;0;5;;@Test public void testConnectedComponentsExamplesDuplicateValue() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, DuplicateValue.class, Types.LONG, TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     })). }
false;public;2;4;;@Override public Tuple2<Long, Long> join(Tuple2<Long, Long> vertexWithComponent, Tuple2<Long, Long> edge) {     return new Tuple2<Long, Long>(edge.f1, vertexWithComponent.f1). }
false;public;0;7;;@Test public void testConnectedComponentsExamplesNeighborWithComponentIDJoin() {     compareAnalyzerResultWithAnnotationsDualInput(JoinFunction.class, NeighborWithComponentIDJoin.class, TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     })). }
false;public;3;10;;@Override public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out) {     // Check if there is a entry in the visits relation     if (!visits.iterator().hasNext()) {         for (Tuple3<Integer, String, Integer> next : ranks) {             // Emit all rank pairs             out.collect(next).         }     } }
false;public;0;8;;@Test public void testWebLogAnalysisExamplesAntiJoinVisits() {     compareAnalyzerResultWithAnnotationsDualInputWithKeys(CoGroupFunction.class, AntiJoinVisits.class, TypeInformation.of(new TypeHint<Tuple3<Integer, String, Integer>>() {     }), TypeInformation.of(new TypeHint<Tuple1<String>>() {     }), TypeInformation.of(new TypeHint<Tuple3<Integer, String, Integer>>() {     }), new String[] { "1" }, new String[] { "0" }). }
false;public;2;11;;@Override public void reduce(Iterable<Tuple2<Long, Long>> values, Collector<Tuple2<Long, Long[]>> out) {     neighbors.clear().     Long id = 0L.     for (Tuple2<Long, Long> n : values) {         id = n.f0.         neighbors.add(n.f1).     }     out.collect(new Tuple2<Long, Long[]>(id, neighbors.toArray(new Long[neighbors.size()]))). }
false;public;0;7;;@Test public void testPageRankBasicExamplesBuildOutgoingEdgeList() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(GroupReduceFunction.class, BuildOutgoingEdgeList.class, TypeInformation.of(new TypeHint<Tuple2<Long, Long>>() {     }), TypeInformation.of(new TypeHint<Tuple2<Long, Long[]>>() {     }), new String[] { "0" }). }
false;public;0;3;;public double[] getComponents() {     return this.f0. }
false;public;1;3;;public double getComponent(int i) {     return this.f0[i]. }
false;public;2;3;;public void setComponent(int i, double value) {     this.f0[i] = value. }
false;public;1;3;;public void setComponents(double[] components) {     this.f0 = components. }
false;public;0;3;;public double[] getFeatures() {     return this.f1. }
false;public;1;3;;public double getFeature(int i) {     return this.f1[i]. }
false;public;1;3;;public void setFeatures(double[] features) {     this.f1 = features. }
false;public;0;3;;public Integer getLabel() {     return this.f0. }
false;public;1;3;;public void setLabel(Integer label) {     this.f0 = label. }
false;public;2;9;;@Override public Gradient reduce(Gradient gradient1, Gradient gradient2) throws Exception {     // grad(i) +=     for (int i = 0. i < gradient1.getComponents().length. i++) {         gradient1.setComponent(i, gradient1.getComponent(i) + gradient2.getComponent(i)).     }     return gradient1. }
false;public;0;7;;@Test public void testLogisticRegressionExamplesSumGradient() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(ReduceFunction.class, SumGradient.class, TypeInformation.of(new TypeHint<Tuple1<Double>>() {     }), TypeInformation.of(new TypeHint<Tuple1<Double>>() {     }), new String[] { "0" }). }
false;public;1;22;;@Override public PointWithLabel map(String value) throws Exception {     PointWithLabel p = new PointWithLabel().     String[] split = value.split(",").     double[] features = new double[42].     int a = 0.     for (int i = 0. i < split.length. i++) {         if (i == 42 - 1) {             p.setLabel(Integer.valueOf(split[i].trim().substring(0, 1))).         } else {             if (a < 42 && !split[i].trim().isEmpty()) {                 features[a++] = Double.parseDouble(split[i].trim()).             }         }     }     p.setFeatures(features).     return p. }
false;public;0;6;;@Test public void testLogisticRegressionExamplesPointParser() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, PointParser.class, Types.STRING, TypeInformation.of(new TypeHint<Tuple2<Integer, double[]>>() {     })). }
false;public;2;8;;@Override public void flatMap(String value, Collector<Tuple2<Integer, String>> out) throws Exception {     String[] splits = value.split(" ").     if (splits.length < 2) {         return.     }     out.collect(new Tuple2<Integer, String>(Integer.valueOf(splits[0]), splits[1])). }
false;public;0;6;;@Test public void testCanopyExamplesMassageBOW() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, PointParser.class, Types.STRING, TypeInformation.of(new TypeHint<Tuple2<Integer, String>>() {     })). }
false;public;2;11;;@Override public void reduce(Iterable<Tuple2<Integer, String>> values, Collector<Document> out) throws Exception {     Iterator<Tuple2<Integer, String>> it = values.iterator().     Tuple2<Integer, String> first = it.next().     Integer docId = first.f0.     StringBuilder builder = new StringBuilder(first.f1).     while (it.hasNext()) {         builder.append("-").append(it.next().f1).     }     out.collect(new Document(docId, false, false, "", builder.toString())). }
false;public;0;7;;@Test public void testCanopyExamplesDocumentReducer() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(GroupReduceFunction.class, DocumentReducer.class, TypeInformation.of(new TypeHint<Tuple2<Integer, String>>() {     }), TypeInformation.of(new TypeHint<Tuple5<Integer, Boolean, Boolean, String, String>>() {     }), new String[] { "0" }). }
false;public;1;13;;@Override public Document map(Document value) throws Exception {     if (center != null) {         final float similarity = 42f.         final boolean isEqual = value.f0.equals(center.f0).         value.f1 = isEqual.         value.f2 = isEqual || similarity > 42.         if (!value.f3.contains(center.f0.toString() + ".") && (similarity > 42 || isEqual)) {             value.f3 += center.f0.toString() + ".".         }     }     return value. }
false;public;0;6;;@Test public void testCanopyExamplesMapToCenter() {     compareAnalyzerResultWithAnnotationsSingleInput(MapFunction.class, MapToCenter.class, TypeInformation.of(new TypeHint<Tuple5<Integer, Boolean, Boolean, String, String>>() {     }), TypeInformation.of(new TypeHint<Tuple5<Integer, Boolean, Boolean, String, String>>() {     })). }
false;public;0;4;;@Override public String toString() {     return Integer.toString(id). }
false;public;2;15;;@Override public void reduce(Iterable<Tuple3<Integer, Integer, Double>> values, Collector<DocumentWithFreq> out) throws Exception {     Iterator<Tuple3<Integer, Integer, Double>> it = values.iterator().     if (it.hasNext()) {         Tuple3<Integer, Integer, Double> elem = it.next().         DocumentWithFreq doc = new DocumentWithFreq(elem.f0).         doc.wordFreq.put(elem.f1.toString(), elem.f2).         while (it.hasNext()) {             elem = it.next().             doc.wordFreq.put(elem.f1.toString(), elem.f2).         }         out.collect(doc).     } }
false;public;0;7;;@Test public void testKMeansppExamplesRecordToDocConverter() {     compareAnalyzerResultWithAnnotationsSingleInputWithKeys(GroupReduceFunction.class, RecordToDocConverter.class, TypeInformation.of(new TypeHint<Tuple3<Integer, Integer, Double>>() {     }), TypeInformation.of(new TypeHint<DocumentWithFreq>() {     }), new String[] { "0" }). }
