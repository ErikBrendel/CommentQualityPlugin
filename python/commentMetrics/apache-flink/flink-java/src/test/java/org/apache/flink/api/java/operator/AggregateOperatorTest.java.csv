commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;@Test public void testFieldsAggregate() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.aggregate(Aggregations.SUM, 1).     } catch (Exception e) {         Assert.fail().     }     // should not work: index out of bounds     try {         tupleDs.aggregate(Aggregations.SUM, 10).         Assert.fail().     } catch (IllegalArgumentException iae) {     // we're good here     } catch (Exception e) {         Assert.fail().     }     // should not work: not applied to tuple dataset     DataSet<Long> longDs = env.fromCollection(emptyLongData, BasicTypeInfo.LONG_TYPE_INFO).     try {         longDs.aggregate(Aggregations.MIN, 1).         Assert.fail().     } catch (InvalidProgramException uoe) {     // we're good here     } catch (Exception e) {         Assert.fail().     } }
false;public;0;26;;@Test public void testAggregationTypes() {     try {         final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).         // should work: multiple aggregates         tupleDs.aggregate(Aggregations.SUM, 0).and(Aggregations.MIN, 4).         // should work: nested aggregates         tupleDs.aggregate(Aggregations.MIN, 2).aggregate(Aggregations.SUM, 1).         // should not work: average on string         try {             tupleDs.aggregate(Aggregations.SUM, 2).             Assert.fail().         } catch (UnsupportedAggregationTypeException iae) {         // we're good here         }     } catch (Exception e) {         System.err.println(e.getMessage()).         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
