commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     block = createInputFormat().createBlockInfo(). }
false;protected;0;12;;@Override protected BinaryInputFormat<Tuple2<Integer, String>> createInputFormat() {     Configuration configuration = new Configuration().     final TypeSerializerInputFormat<Tuple2<Integer, String>> inputFormat = new TypeSerializerInputFormat<Tuple2<Integer, String>>(resultType).     inputFormat.setFilePath(this.tempFile.toURI().toString()).     inputFormat.setBlockSize(this.blockSize).     inputFormat.configure(configuration).     return inputFormat. }
false;protected;2;16;;@Override protected BinaryOutputFormat<Tuple2<Integer, String>> createOutputFormat(String path, Configuration configuration) throws IOException {     TypeSerializerOutputFormat<Tuple2<Integer, String>> outputFormat = new TypeSerializerOutputFormat<Tuple2<Integer, String>>().     outputFormat.setSerializer(serializer).     outputFormat.setOutputFilePath(new Path(path)).     outputFormat.setWriteMode(FileSystem.WriteMode.OVERWRITE).     configuration = configuration == null ? new Configuration() : configuration.     outputFormat.configure(configuration).     outputFormat.open(0, 1).     return outputFormat. }
false;protected;0;4;;@Override protected int getInfoSize() {     return block.getInfoSize(). }
false;protected;1;4;;@Override protected Tuple2<Integer, String> getRecord(int index) {     return new Tuple2<Integer, String>(index, String.valueOf(index)). }
false;protected;0;4;;@Override protected Tuple2<Integer, String> createInstance() {     return new Tuple2<Integer, String>(). }
false;protected;2;4;;@Override protected void writeRecord(Tuple2<Integer, String> record, DataOutputView outputView) throws IOException {     serializer.serialize(record, outputView). }
false;protected;2;5;;@Override protected void checkEquals(Tuple2<Integer, String> expected, Tuple2<Integer, String> actual) {     Assert.assertEquals(expected.f0, actual.f0).     Assert.assertEquals(expected.f1, actual.f1). }
