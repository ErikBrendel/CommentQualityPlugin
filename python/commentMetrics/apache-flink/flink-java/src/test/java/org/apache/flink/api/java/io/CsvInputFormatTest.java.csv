# id;timestamp;commentText;codeText;commentWords;codeWords
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1443435747;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new CsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1447879320;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1462899491;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1465920682;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1474022056;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1474626798;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1481228508;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1488232219;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1489060855;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>)TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1501511872;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>) TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while ((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
CsvInputFormatTest -> @Test 	public void testPojoSubclassType() throws Exception;1515177485;Tests that the CSV input format can deal with POJOs which are subclasses.__@throws Exception;@Test_	public void testPojoSubclassType() throws Exception {_		final String fileContent = "t1,foobar,tweet2\nt2,barfoo,tweet2"___		final File tempFile = File.createTempFile("CsvReaderPOJOSubclass", "tmp")__		tempFile.deleteOnExit()___		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tempFile))__		writer.write(fileContent)__		writer.close()___		@SuppressWarnings("unchecked")_		PojoTypeInfo<TwitterPOJO> typeInfo = (PojoTypeInfo<TwitterPOJO>) TypeExtractor.createTypeInfo(TwitterPOJO.class)__		CsvInputFormat<TwitterPOJO> inputFormat = new PojoCsvInputFormat<>(new Path(tempFile.toURI().toString()), typeInfo)___		inputFormat.configure(new Configuration())__		FileInputSplit[] splits = inputFormat.createInputSplits(1)___		inputFormat.open(splits[0])___		List<TwitterPOJO> expected = new ArrayList<>()___		for (String line: fileContent.split("\n")) {_			String[] elements = line.split(",")__			expected.add(new TwitterPOJO(elements[0], elements[1], elements[2]))__		}__		List<TwitterPOJO> actual = new ArrayList<>()___		TwitterPOJO pojo___		while ((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {_			actual.add(pojo)__		}__		assertEquals(expected, actual)__	};tests,that,the,csv,input,format,can,deal,with,pojos,which,are,subclasses,throws,exception;test,public,void,test,pojo,subclass,type,throws,exception,final,string,file,content,t1,foobar,tweet2,nt2,barfoo,tweet2,final,file,temp,file,file,create,temp,file,csv,reader,pojosubclass,tmp,temp,file,delete,on,exit,output,stream,writer,writer,new,output,stream,writer,new,file,output,stream,temp,file,writer,write,file,content,writer,close,suppress,warnings,unchecked,pojo,type,info,twitter,pojo,type,info,pojo,type,info,twitter,pojo,type,extractor,create,type,info,twitter,pojo,class,csv,input,format,twitter,pojo,input,format,new,pojo,csv,input,format,new,path,temp,file,to,uri,to,string,type,info,input,format,configure,new,configuration,file,input,split,splits,input,format,create,input,splits,1,input,format,open,splits,0,list,twitter,pojo,expected,new,array,list,for,string,line,file,content,split,n,string,elements,line,split,expected,add,new,twitter,pojo,elements,0,elements,1,elements,2,list,twitter,pojo,actual,new,array,list,twitter,pojo,pojo,while,pojo,input,format,next,record,new,twitter,pojo,null,actual,add,pojo,assert,equals,expected,actual
