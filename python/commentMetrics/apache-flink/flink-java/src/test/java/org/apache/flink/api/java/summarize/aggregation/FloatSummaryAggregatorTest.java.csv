# id;timestamp;commentText;codeText;commentWords;codeWords
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1460990858;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Float[] q1x = { 10.0f, 8.0f, 13.0f, 9.0f, 11.0f, 14.0f, 6.0f, 4.0f, 12.0f, 7.0f, 5.0f }__		final Float[] q4x = { 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 19.0f, 8.0f, 8.0f, 8.0f }___		NumericColumnSummary<Float> q1 = summarize(q1x)__		NumericColumnSummary<Float> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0f)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0f)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0f)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,float,q1x,10,0f,8,0f,13,0f,9,0f,11,0f,14,0f,6,0f,4,0f,12,0f,7,0f,5,0f,final,float,q4x,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,19,0f,8,0f,8,0f,8,0f,numeric,column,summary,float,q1,summarize,q1x,numeric,column,summary,float,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0f,assert,assert,equals,9,0,q4,get,mean,double,value,0,0f,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0f,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1499940742;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Float[] q1x = { 10.0f, 8.0f, 13.0f, 9.0f, 11.0f, 14.0f, 6.0f, 4.0f, 12.0f, 7.0f, 5.0f }__		final Float[] q4x = { 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 19.0f, 8.0f, 8.0f, 8.0f }___		NumericColumnSummary<Float> q1 = summarize(q1x)__		NumericColumnSummary<Float> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0f)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0f)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0f)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,float,q1x,10,0f,8,0f,13,0f,9,0f,11,0f,14,0f,6,0f,4,0f,12,0f,7,0f,5,0f,final,float,q4x,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,19,0f,8,0f,8,0f,8,0f,numeric,column,summary,float,q1,summarize,q1x,numeric,column,summary,float,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0f,assert,assert,equals,9,0,q4,get,mean,double,value,0,0f,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0f,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1501495929;Use some values from Anscombe's Quartet for testing.__<p>There was no particular reason to use these except they have known means and variance.__<p>https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Float[] q1x = { 10.0f, 8.0f, 13.0f, 9.0f, 11.0f, 14.0f, 6.0f, 4.0f, 12.0f, 7.0f, 5.0f }__		final Float[] q4x = { 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 8.0f, 19.0f, 8.0f, 8.0f, 8.0f }___		NumericColumnSummary<Float> q1 = summarize(q1x)__		NumericColumnSummary<Float> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0f)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0f)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0f)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,p,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,p,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,float,q1x,10,0f,8,0f,13,0f,9,0f,11,0f,14,0f,6,0f,4,0f,12,0f,7,0f,5,0f,final,float,q4x,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,8,0f,19,0f,8,0f,8,0f,8,0f,numeric,column,summary,float,q1,summarize,q1x,numeric,column,summary,float,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0f,assert,assert,equals,9,0,q4,get,mean,double,value,0,0f,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0f,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1460990858;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Float[] q1y = { 8.04f, 6.95f, 7.58f, 8.81f, 8.33f, 9.96f, 7.24f, 4.26f, 10.84f, 4.82f, 5.68f }__		final Float[] q2y = { 9.14f, 8.14f, 8.74f, 8.77f, 9.26f, 8.1f, 6.13f, 3.1f, 9.13f, 7.26f, 4.74f }__		final Float[] q3y = { 7.46f, 6.77f, 12.74f, 7.11f, 7.81f, 8.84f, 6.08f, 5.39f, 8.15f, 6.42f, 5.73f }__		final Float[] q4y = { 6.58f, 5.76f, 7.71f, 8.84f, 8.47f, 7.04f, 5.25f, 12.5f, 5.56f, 7.91f, 6.89f }___		NumericColumnSummary<Float> q1 = summarize(q1y)__		NumericColumnSummary<Float> q2 = summarize(q2y)__		NumericColumnSummary<Float> q3 = summarize(q3y)__		NumericColumnSummary<Float> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,float,q1y,8,04f,6,95f,7,58f,8,81f,8,33f,9,96f,7,24f,4,26f,10,84f,4,82f,5,68f,final,float,q2y,9,14f,8,14f,8,74f,8,77f,9,26f,8,1f,6,13f,3,1f,9,13f,7,26f,4,74f,final,float,q3y,7,46f,6,77f,12,74f,7,11f,7,81f,8,84f,6,08f,5,39f,8,15f,6,42f,5,73f,final,float,q4y,6,58f,5,76f,7,71f,8,84f,8,47f,7,04f,5,25f,12,5f,5,56f,7,91f,6,89f,numeric,column,summary,float,q1,summarize,q1y,numeric,column,summary,float,q2,summarize,q2y,numeric,column,summary,float,q3,summarize,q3y,numeric,column,summary,float,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1499940742;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Float[] q1y = { 8.04f, 6.95f, 7.58f, 8.81f, 8.33f, 9.96f, 7.24f, 4.26f, 10.84f, 4.82f, 5.68f }__		final Float[] q2y = { 9.14f, 8.14f, 8.74f, 8.77f, 9.26f, 8.1f, 6.13f, 3.1f, 9.13f, 7.26f, 4.74f }__		final Float[] q3y = { 7.46f, 6.77f, 12.74f, 7.11f, 7.81f, 8.84f, 6.08f, 5.39f, 8.15f, 6.42f, 5.73f }__		final Float[] q4y = { 6.58f, 5.76f, 7.71f, 8.84f, 8.47f, 7.04f, 5.25f, 12.5f, 5.56f, 7.91f, 6.89f }___		NumericColumnSummary<Float> q1 = summarize(q1y)__		NumericColumnSummary<Float> q2 = summarize(q2y)__		NumericColumnSummary<Float> q3 = summarize(q3y)__		NumericColumnSummary<Float> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,float,q1y,8,04f,6,95f,7,58f,8,81f,8,33f,9,96f,7,24f,4,26f,10,84f,4,82f,5,68f,final,float,q2y,9,14f,8,14f,8,74f,8,77f,9,26f,8,1f,6,13f,3,1f,9,13f,7,26f,4,74f,final,float,q3y,7,46f,6,77f,12,74f,7,11f,7,81f,8,84f,6,08f,5,39f,8,15f,6,42f,5,73f,final,float,q4y,6,58f,5,76f,7,71f,8,84f,8,47f,7,04f,5,25f,12,5f,5,56f,7,91f,6,89f,numeric,column,summary,float,q1,summarize,q1y,numeric,column,summary,float,q2,summarize,q2y,numeric,column,summary,float,q3,summarize,q3y,numeric,column,summary,float,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
FloatSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1501495929;Use some values from Anscombe's Quartet for testing.__<p>There was no particular reason to use these except they have known means and variance.__<p>https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Float[] q1y = { 8.04f, 6.95f, 7.58f, 8.81f, 8.33f, 9.96f, 7.24f, 4.26f, 10.84f, 4.82f, 5.68f }__		final Float[] q2y = { 9.14f, 8.14f, 8.74f, 8.77f, 9.26f, 8.1f, 6.13f, 3.1f, 9.13f, 7.26f, 4.74f }__		final Float[] q3y = { 7.46f, 6.77f, 12.74f, 7.11f, 7.81f, 8.84f, 6.08f, 5.39f, 8.15f, 6.42f, 5.73f }__		final Float[] q4y = { 6.58f, 5.76f, 7.71f, 8.84f, 8.47f, 7.04f, 5.25f, 12.5f, 5.56f, 7.91f, 6.89f }___		NumericColumnSummary<Float> q1 = summarize(q1y)__		NumericColumnSummary<Float> q2 = summarize(q2y)__		NumericColumnSummary<Float> q3 = summarize(q3y)__		NumericColumnSummary<Float> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,p,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,p,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,float,q1y,8,04f,6,95f,7,58f,8,81f,8,33f,9,96f,7,24f,4,26f,10,84f,4,82f,5,68f,final,float,q2y,9,14f,8,14f,8,74f,8,77f,9,26f,8,1f,6,13f,3,1f,9,13f,7,26f,4,74f,final,float,q3y,7,46f,6,77f,12,74f,7,11f,7,81f,8,84f,6,08f,5,39f,8,15f,6,42f,5,73f,final,float,q4y,6,58f,5,76f,7,71f,8,84f,8,47f,7,04f,5,25f,12,5f,5,56f,7,91f,6,89f,numeric,column,summary,float,q1,summarize,q1y,numeric,column,summary,float,q2,summarize,q2y,numeric,column,summary,float,q3,summarize,q3y,numeric,column,summary,float,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
FloatSummaryAggregatorTest -> protected NumericColumnSummary<Float> summarize(Float... values);1460990858;Helper method for summarizing a list of values.__This method breaks the rule of "testing only one thing" by aggregating_and combining a bunch of different ways.;protected NumericColumnSummary<Float> summarize(Float... values) {__		return new AggregateCombineHarness<Float,NumericColumnSummary<Float>,FloatSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Float> result1, NumericColumnSummary<Float> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0f)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0f)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,float,summarize,float,values,return,new,aggregate,combine,harness,float,numeric,column,summary,float,float,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,float,result1,numeric,column,summary,float,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0f,assert,assert,equals,result1,get,max,result2,get,max,0,0f,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
FloatSummaryAggregatorTest -> protected NumericColumnSummary<Float> summarize(Float... values);1499940742;Helper method for summarizing a list of values.__This method breaks the rule of "testing only one thing" by aggregating_and combining a bunch of different ways.;protected NumericColumnSummary<Float> summarize(Float... values) {__		return new AggregateCombineHarness<Float,NumericColumnSummary<Float>,FloatSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Float> result1, NumericColumnSummary<Float> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0f)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0f)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,float,summarize,float,values,return,new,aggregate,combine,harness,float,numeric,column,summary,float,float,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,float,result1,numeric,column,summary,float,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0f,assert,assert,equals,result1,get,max,result2,get,max,0,0f,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
FloatSummaryAggregatorTest -> protected NumericColumnSummary<Float> summarize(Float... values);1501495929;Helper method for summarizing a list of values.__<p>This method breaks the rule of "testing only one thing" by aggregating_and combining a bunch of different ways.;protected NumericColumnSummary<Float> summarize(Float... values) {__		return new AggregateCombineHarness<Float, NumericColumnSummary<Float>, FloatSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Float> result1, NumericColumnSummary<Float> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0f)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0f)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,p,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,float,summarize,float,values,return,new,aggregate,combine,harness,float,numeric,column,summary,float,float,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,float,result1,numeric,column,summary,float,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0f,assert,assert,equals,result1,get,max,result2,get,max,0,0f,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
