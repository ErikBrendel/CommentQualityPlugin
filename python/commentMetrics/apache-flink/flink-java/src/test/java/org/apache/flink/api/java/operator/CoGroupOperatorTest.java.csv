commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void insertCustomData() {     customTypeData.add(new CustomType()). }
false;public;0;14;;@Test public void testCoGroupKeyFields1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.coGroup(ds2).where(0).equalTo(0).     } catch (Exception e) {         Assert.fail().     } }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyFields2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, incompatible cogroup key types     ds1.coGroup(ds2).where(0).equalTo(2). }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyFields3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, incompatible number of cogroup keys     ds1.coGroup(ds2).where(0, 1).equalTo(2). }
false;public;0;10;;@Test(expected = IndexOutOfBoundsException.class) public void testCoGroupKeyFields4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, cogroup key out of range     ds1.coGroup(ds2).where(5).equalTo(0). }
false;public;0;10;;@Test(expected = IndexOutOfBoundsException.class) public void testCoGroupKeyFields5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, negative key field position     ds1.coGroup(ds2).where(-1).equalTo(-1). }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyFields6() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, cogroup key fields on custom type     ds1.coGroup(ds2).where(4).equalTo(0). }
false;public;0;14;;@Test public void testCoGroupKeyExpressions1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.coGroup(ds2).where("myInt").equalTo("myInt").     } catch (Exception e) {         Assert.fail().     } }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyExpressions2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, incompatible cogroup key types     ds1.coGroup(ds2).where("myInt").equalTo("myString"). }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyExpressions3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, incompatible number of cogroup keys     ds1.coGroup(ds2).where("myInt", "myString").equalTo("myString"). }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void testCoGroupKeyExpressions4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, cogroup key non-existent     ds1.coGroup(ds2).where("myNonExistent").equalTo("myInt"). }
false;public;0;8;;@Test public void testCoGroupKeyAtomicExpression1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<Integer> ds2 = env.fromElements(0, 0, 1).     ds1.coGroup(ds2).where("myInt").equalTo("*"). }
false;public;0;8;;@Test public void testCoGroupKeyAtomicExpression2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> ds1 = env.fromElements(0, 0, 1).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     ds1.coGroup(ds2).where("*").equalTo("myInt"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> ds1 = env.fromElements(0, 0, 1).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     ds1.coGroup(ds2).where("*", "invalidKey"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> ds1 = env.fromElements(0, 0, 1).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     ds1.coGroup(ds2).where("invalidKey"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<Integer> ds2 = env.fromElements(0, 0, 1).     ds1.coGroup(ds2).where("myInt").equalTo("invalidKey"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<Integer> ds2 = env.fromElements(0, 0, 1).     ds1.coGroup(ds2).where("myInt").equalTo("*", "invalidKey"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression5() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<ArrayList<Integer>> ds1 = env.fromElements(new ArrayList<Integer>()).     DataSet<Integer> ds2 = env.fromElements(0, 0, 0).     ds1.coGroup(ds2).where("*"). }
false;public;0;8;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyAtomicInvalidExpression6() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> ds1 = env.fromElements(0, 0, 0).     DataSet<ArrayList<Integer>> ds2 = env.fromElements(new ArrayList<Integer>()).     ds1.coGroup(ds2).where("*").equalTo("*"). }
false;public;0;15;;@Test public void testCoGroupKeyExpressions1Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.coGroup(ds2).where("nested.myInt").equalTo("nested.myInt").     } catch (Exception e) {         e.printStackTrace().         Assert.fail().     } }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyExpressions2Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, incompatible cogroup key types     ds1.coGroup(ds2).where("nested.myInt").equalTo("nested.myString"). }
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyExpressions3Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, incompatible number of cogroup keys     ds1.coGroup(ds2).where("nested.myInt", "nested.myString").equalTo("nested.myString"). }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void testCoGroupKeyExpressions4Nested() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, cogroup key non-existent     ds1.coGroup(ds2).where("nested.myNonExistent").equalTo("nested.myInt"). }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;32;;@Test public void testCoGroupKeySelectors1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.coGroup(ds2).where(new KeySelector<CustomType, Long>() {              @Override             public Long getKey(CustomType value) {                 return value.myLong.             }         }).equalTo(new KeySelector<CustomType, Long>() {              @Override             public Long getKey(CustomType value) {                 return value.myLong.             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;24;;@Test public void testCoGroupKeyMixing1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds1 = env.fromCollection(customTypeData).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         ds1.coGroup(ds2).where(new KeySelector<CustomType, Long>() {              @Override             public Long getKey(CustomType value) {                 return value.myLong.             }         }).equalTo(3).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;24;;@Test public void testCoGroupKeyMixing2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should work     try {         ds1.coGroup(ds2).where(3).equalTo(new KeySelector<CustomType, Long>() {              @Override             public Long getKey(CustomType value) {                 return value.myLong.             }         }).     } catch (Exception e) {         Assert.fail().     } }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;20;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyMixing3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, incompatible types     ds1.coGroup(ds2).where(2).equalTo(new KeySelector<CustomType, Long>() {          @Override         public Long getKey(CustomType value) {             return value.myLong.         }     }). }
false;public;1;4;;@Override public Long getKey(CustomType value) {     return value.myLong. }
false;public;0;20;;@Test(expected = InvalidProgramException.class) public void testCoGroupKeyMixing4() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> ds1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<CustomType> ds2 = env.fromCollection(customTypeData).     // should not work, more than one key field position     ds1.coGroup(ds2).where(1, 3).equalTo(new KeySelector<CustomType, Long>() {          @Override         public Long getKey(CustomType value) {             return value.myLong.         }     }). }
false;public;0;43;;@Test public void testSemanticPropsWithKeySelector1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     CoGroupOperator<?, ?, ?> coGroupOp = tupleDs1.coGroup(tupleDs2).where(new DummyTestKeySelector()).equalTo(new DummyTestKeySelector()).with(new DummyTestCoGroupFunction1()).     SemanticProperties semProps = coGroupOp.getSemanticProperties().     assertTrue(semProps.getForwardingTargetFields(0, 0).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 1).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 2).size() == 1).     assertTrue(semProps.getForwardingTargetFields(0, 2).contains(4)).     assertTrue(semProps.getForwardingTargetFields(0, 3).size() == 2).     assertTrue(semProps.getForwardingTargetFields(0, 3).contains(1)).     assertTrue(semProps.getForwardingTargetFields(0, 3).contains(3)).     assertTrue(semProps.getForwardingTargetFields(0, 4).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 5).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 6).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 0).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 1).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 2).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 3).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 4).size() == 1).     assertTrue(semProps.getForwardingTargetFields(1, 4).contains(2)).     assertTrue(semProps.getForwardingTargetFields(1, 5).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 6).size() == 1).     assertTrue(semProps.getForwardingTargetFields(1, 6).contains(0)).     assertTrue(semProps.getReadFields(0).size() == 3).     assertTrue(semProps.getReadFields(0).contains(2)).     assertTrue(semProps.getReadFields(0).contains(4)).     assertTrue(semProps.getReadFields(0).contains(6)).     assertTrue(semProps.getReadFields(1).size() == 2).     assertTrue(semProps.getReadFields(1).contains(3)).     assertTrue(semProps.getReadFields(1).contains(5)). }
false;public;0;43;;@Test public void testSemanticPropsWithKeySelector2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs1 = env.fromCollection(emptyTupleData, tupleTypeInfo).     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs2 = env.fromCollection(emptyTupleData, tupleTypeInfo).     CoGroupOperator<?, ?, ?> coGroupOp = tupleDs1.coGroup(tupleDs2).where(new DummyTestKeySelector()).equalTo(new DummyTestKeySelector()).with(new DummyTestCoGroupFunction2()).withForwardedFieldsFirst("2.4->0").withForwardedFieldsSecond("0->4.1.1->3").     SemanticProperties semProps = coGroupOp.getSemanticProperties().     assertTrue(semProps.getForwardingTargetFields(0, 0).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 1).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 2).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 3).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 4).size() == 1).     assertTrue(semProps.getForwardingTargetFields(0, 4).contains(2)).     assertTrue(semProps.getForwardingTargetFields(0, 5).size() == 0).     assertTrue(semProps.getForwardingTargetFields(0, 6).size() == 1).     assertTrue(semProps.getForwardingTargetFields(0, 6).contains(0)).     assertTrue(semProps.getForwardingTargetFields(1, 0).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 1).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 2).size() == 1).     assertTrue(semProps.getForwardingTargetFields(1, 2).contains(4)).     assertTrue(semProps.getForwardingTargetFields(1, 3).size() == 2).     assertTrue(semProps.getForwardingTargetFields(1, 3).contains(1)).     assertTrue(semProps.getForwardingTargetFields(1, 3).contains(3)).     assertTrue(semProps.getForwardingTargetFields(1, 4).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 5).size() == 0).     assertTrue(semProps.getForwardingTargetFields(1, 6).size() == 0).     assertTrue(semProps.getReadFields(0).size() == 3).     assertTrue(semProps.getReadFields(0).contains(2)).     assertTrue(semProps.getReadFields(0).contains(3)).     assertTrue(semProps.getReadFields(0).contains(4)).     assertTrue(semProps.getReadFields(1) == null). }
false;public;1;4;;@Override public Tuple2<Long, Integer> getKey(Tuple5<Integer, Long, String, Long, Integer> value) throws Exception {     return new Tuple2<Long, Integer>(). }
false;public;3;5;;@Override public void coGroup(Iterable<Tuple5<Integer, Long, String, Long, Integer>> first, Iterable<Tuple5<Integer, Long, String, Long, Integer>> second, Collector<Tuple5<Integer, Long, String, Long, Integer>> out) throws Exception { }
false;public;3;5;;@Override public void coGroup(Iterable<Tuple5<Integer, Long, String, Long, Integer>> first, Iterable<Tuple5<Integer, Long, String, Long, Integer>> second, Collector<Tuple5<Integer, Long, String, Long, Integer>> out) throws Exception { }
