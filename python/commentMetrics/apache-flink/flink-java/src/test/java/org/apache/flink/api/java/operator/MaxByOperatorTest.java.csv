commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * This test validates that no exceptions is thrown when an empty dataset  * calls maxBy().  */ ;/**  * This test validates that no exceptions is thrown when an empty dataset  * calls maxBy().  */ @Test public void testMaxByKeyFieldsDataset() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should work     try {         tupleDs.maxBy(4, 0, 1, 2, 3).     } catch (Exception e) {         Assert.fail().     } }
true;public;0;11;/**  * This test validates that an InvalidProgramException is thrown when maxBy  * is used on a custom data type.  */ ;/**  * This test validates that an InvalidProgramException is thrown when maxBy  * is used on a custom data type.  */ @Test(expected = InvalidProgramException.class) public void testCustomKeyFieldsDataset() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     DataSet<CustomType> customDs = env.fromCollection(customTypeData).     // should not work: groups on custom type     customDs.maxBy(0). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, key out of tuple bounds     tupleDs.maxBy(5). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, key out of tuple bounds     tupleDs.maxBy(-1). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, String, Long, Integer>> tupleDs = env.fromCollection(emptyTupleData, tupleTypeInfo).     // should not work, key out of tuple bounds     tupleDs.maxBy(1, 2, 3, 4, -1). }
true;public;0;13;/**  * This test validates that no exceptions is thrown when an empty grouping  * calls maxBy().  */ ;// ---------------------------- GROUPING TESTS BELOW -------------------------------------- /**  * This test validates that no exceptions is thrown when an empty grouping  * calls maxBy().  */ @Test public void testMaxByKeyFieldsGrouping() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     UnsortedGrouping<Tuple5<Integer, Long, String, Long, Integer>> groupDs = env.fromCollection(emptyTupleData, tupleTypeInfo).groupBy(0).     // should work     try {         groupDs.maxBy(4, 0, 1, 2, 3).     } catch (Exception e) {         Assert.fail().     } }
true;public;0;11;/**  * This test validates that an InvalidProgramException is thrown when maxBy  * is used on a custom data type.  */ ;/**  * This test validates that an InvalidProgramException is thrown when maxBy  * is used on a custom data type.  */ @Test(expected = InvalidProgramException.class) public void testCustomKeyFieldsGrouping() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     this.customTypeData.add(new CustomType()).     UnsortedGrouping<CustomType> groupDs = env.fromCollection(customTypeData).groupBy(0).     // should not work: groups on custom type     groupDs.maxBy(0). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping1() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     UnsortedGrouping<Tuple5<Integer, Long, String, Long, Integer>> groupDs = env.fromCollection(emptyTupleData, tupleTypeInfo).groupBy(0).     // should not work, key out of tuple bounds     groupDs.maxBy(5). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping2() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     UnsortedGrouping<Tuple5<Integer, Long, String, Long, Integer>> groupDs = env.fromCollection(emptyTupleData, tupleTypeInfo).groupBy(0).     // should not work, key out of tuple bounds     groupDs.maxBy(-1). }
true;public;0;9;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ ;/**  * This test validates that an index which is out of bounds throws an  * IndexOutOfBoundsException.  */ @Test(expected = IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping3() {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     UnsortedGrouping<Tuple5<Integer, Long, String, Long, Integer>> groupDs = env.fromCollection(emptyTupleData, tupleTypeInfo).groupBy(0).     // should not work, key out of tuple bounds     groupDs.maxBy(1, 2, 3, 4, -1). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
