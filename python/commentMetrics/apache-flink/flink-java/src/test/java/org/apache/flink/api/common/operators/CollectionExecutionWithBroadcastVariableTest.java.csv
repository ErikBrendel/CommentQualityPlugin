commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testUnaryOp() {     try {         ExecutionEnvironment env = ExecutionEnvironment.createCollectionsEnvironment().         DataSet<String> bcData = env.fromElements(SUFFIX).         List<String> result = new ArrayList<String>().         env.fromElements(TEST_DATA).map(new SuffixAppender()).withBroadcastSet(bcData, BC_VAR_NAME).output(new LocalCollectionOutputFormat<String>(result)).         env.execute().         assertEquals(TEST_DATA.length, result.size()).         for (String s : result) {             assertTrue(s.indexOf(SUFFIX) > 0).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;25;;@Test public void testBinaryOp() {     try {         ExecutionEnvironment env = ExecutionEnvironment.createCollectionsEnvironment().         DataSet<String> bcData = env.fromElements(SUFFIX).         DataSet<String> inData = env.fromElements(TEST_DATA).         List<String> result = new ArrayList<String>().         inData.cross(inData).with(new SuffixCross()).withBroadcastSet(bcData, BC_VAR_NAME).output(new LocalCollectionOutputFormat<String>(result)).         env.execute().         assertEquals(TEST_DATA.length * TEST_DATA.length, result.size()).         for (String s : result) {             assertTrue(s.indexOf(SUFFIX) == 2).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;4;;@Override public void open(Configuration parameters) {     suffix = getRuntimeContext().<String>getBroadcastVariable(BC_VAR_NAME).get(0). }
false;public;1;4;;@Override public String map(String value) {     return value + suffix. }
false;public;1;4;;@Override public void open(Configuration parameters) {     suffix = getRuntimeContext().<String>getBroadcastVariable(BC_VAR_NAME).get(0). }
false;public;2;4;;@Override public String cross(String s1, String s2) {     return s1 + s2 + suffix. }
