commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testChoicesWithInvalidDefaultValue() throws RequiredParametersException {     expectedException.expect(RequiredParametersException.class).     expectedException.expectMessage("Default value d is not in the list of valid values for option choices").     Option option = new Option("choices").choices("a", "b", "c").     option.defaultValue("d"). }
false;public;0;12;;@Test public void testChoicesWithValidDefaultValue() {     Option option = null.     try {         option = new Option("choices").choices("a", "b", "c").         option = option.defaultValue("a").     } catch (RequiredParametersException e) {         fail("Exception thrown: " + e.getMessage()).     }     Assert.assertEquals(option.getDefaultValue(), "a"). }
false;public;0;8;;@Test public void testChoicesWithInvalidDefautlValue() throws RequiredParametersException {     expectedException.expect(RequiredParametersException.class).     expectedException.expectMessage("Valid values for option choices do not contain defined default value x").     Option option = new Option("choices").defaultValue("x").     option.choices("a", "b"). }
false;public;0;5;;@Test public void testIsCastableToDefinedTypeWithDefaultType() {     Option option = new Option("name").     Assert.assertTrue(option.isCastableToDefinedType("some value")). }
false;public;0;15;;@Test public void testIsCastableToDefinedTypeWithMatchingTypes() {     // Integer     Option option = new Option("name").type(OptionType.INTEGER).     Assert.assertTrue(option.isCastableToDefinedType("15")).     // Double     Option optionDouble = new Option("name").type(OptionType.DOUBLE).     Assert.assertTrue(optionDouble.isCastableToDefinedType("15.0")).     // Boolean     Option optionFloat = new Option("name").type(OptionType.BOOLEAN).     Assert.assertTrue(optionFloat.isCastableToDefinedType("true")). }
false;public;0;15;;@Test public void testIsCastableToDefinedTypeWithNonMatchingTypes() {     // Integer     Option option = new Option("name").type(OptionType.INTEGER).     Assert.assertFalse(option.isCastableToDefinedType("true")).     // Double     Option optionDouble = new Option("name").type(OptionType.DOUBLE).     Assert.assertFalse(optionDouble.isCastableToDefinedType("name")).     // Boolean     Option optionFloat = new Option("name").type(OptionType.BOOLEAN).     Assert.assertFalse(optionFloat.isCastableToDefinedType("15")). }
