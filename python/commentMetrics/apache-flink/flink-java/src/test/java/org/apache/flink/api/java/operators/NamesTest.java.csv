commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean filter(String value) throws Exception {     return value.equals("a"). }
false;public;0;18;;@Test public void testDefaultName() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<String> strs = env.fromCollection(Arrays.asList("a", "b")).     // WARNING: The test will fail if this line is being moved down in the file (the line-number is hard-coded)     strs.filter(new FilterFunction<String>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(String value) throws Exception {             return value.equals("a").         }     }).output(new DiscardingOutputFormat<String>()).     Plan plan = env.createProgramPlan().     testForName("Filter at testDefaultName(NamesTest.java:55)", plan). }
false;public;1;4;;@Override public boolean filter(String value) throws Exception {     return value.equals("a"). }
false;public;0;15;;@Test public void testGivenName() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<String> strs = env.fromCollection(Arrays.asList("a", "b")).     strs.filter(new FilterFunction<String>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(String value) throws Exception {             return value.equals("a").         }     }).name("GivenName").output(new DiscardingOutputFormat<String>()).     Plan plan = env.createProgramPlan().     testForName("GivenName", plan). }
false;public;3;4;;@Override public void join(Tuple1<String> first, Tuple1<String> second, Collector<String> out) throws Exception { //  }
false;public;1;7;;@Override public boolean preVisit(Operator<?> visitable) {     if (visitable instanceof InnerJoinOperatorBase) {         Assert.assertEquals("Join at testJoinWith(NamesTest.java:93)", visitable.getName()).     }     return true. }
false;public;1;2;;@Override public void postVisit(Operator<?> visitable) { }
false;public;0;31;;@Test public void testJoinWith() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     List<Tuple1<String>> strLi = new ArrayList<Tuple1<String>>().     strLi.add(new Tuple1<String>("a")).     strLi.add(new Tuple1<String>("b")).     DataSet<Tuple1<String>> strs = env.fromCollection(strLi).     DataSet<Tuple1<String>> strs1 = env.fromCollection(strLi).     strs.join(strs1).where(0).equalTo(0).with(new FlatJoinFunction<Tuple1<String>, Tuple1<String>, String>() {          @Override         public void join(Tuple1<String> first, Tuple1<String> second, Collector<String> out) throws Exception {         //          }     }).output(new DiscardingOutputFormat<String>()).     Plan plan = env.createProgramPlan().     plan.accept(new Visitor<Operator<?>>() {          @Override         public boolean preVisit(Operator<?> visitable) {             if (visitable instanceof InnerJoinOperatorBase) {                 Assert.assertEquals("Join at testJoinWith(NamesTest.java:93)", visitable.getName()).             }             return true.         }          @Override         public void postVisit(Operator<?> visitable) {         }     }). }
false;public;1;9;;@Override public boolean preVisit(Operator<?> visitable) {     if (visitable instanceof PlanFilterOperator<?>) {         // cast is actually not required. Its just a check for the right element         PlanFilterOperator<?> filterOp = (PlanFilterOperator<?>) visitable.         Assert.assertEquals(expected, filterOp.getName()).     }     return true. }
false;public;1;4;;@Override public void postVisit(Operator<?> visitable) { //  }
false;private,static;2;18;;private static void testForName(final String expected, Plan plan) {     plan.accept(new Visitor<Operator<?>>() {          @Override         public boolean preVisit(Operator<?> visitable) {             if (visitable instanceof PlanFilterOperator<?>) {                 // cast is actually not required. Its just a check for the right element                 PlanFilterOperator<?> filterOp = (PlanFilterOperator<?>) visitable.                 Assert.assertEquals(expected, filterOp.getName()).             }             return true.         }          @Override         public void postVisit(Operator<?> visitable) {         //          }     }). }
