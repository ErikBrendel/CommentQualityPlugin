# id;timestamp;commentText;codeText;commentWords;codeWords
ParameterToolTest -> @Test 	public void testConcurrentExecutionConfigSerialization() throws ExecutionException, InterruptedException;1511189418;Tests that we can concurrently serialize and access the ParameterTool. See FLINK-7943;@Test_	public void testConcurrentExecutionConfigSerialization() throws ExecutionException, InterruptedException {__		final int numInputs = 10__		Collection<String> input = new ArrayList<>(numInputs)___		for (int i = 0_ i < numInputs_ i++) {_			input.add("--" + UUID.randomUUID())__			input.add(UUID.randomUUID().toString())__		}__		final String[] args = input.toArray(new String[0])___		final ParameterTool parameterTool = ParameterTool.fromArgs(args)___		final int numThreads = 5__		final int numSerializations = 100___		final Collection<CompletableFuture<Void>> futures = new ArrayList<>(numSerializations)___		final ExecutorService executorService = Executors.newFixedThreadPool(numThreads)___		try {_			for (int i = 0_ i < numSerializations_ i++) {_				futures.add(_					CompletableFuture.runAsync(_						() -> {_							try {_								serializeDeserialize(parameterTool)__							} catch (Exception e) {_								throw new CompletionException(e)__							}_						},_						executorService))__			}__			for (CompletableFuture<Void> future : futures) {_				future.get()__			}_		} finally {_			executorService.shutdownNow()__			executorService.awaitTermination(1000L, TimeUnit.MILLISECONDS)__		}_	};tests,that,we,can,concurrently,serialize,and,access,the,parameter,tool,see,flink,7943;test,public,void,test,concurrent,execution,config,serialization,throws,execution,exception,interrupted,exception,final,int,num,inputs,10,collection,string,input,new,array,list,num,inputs,for,int,i,0,i,num,inputs,i,input,add,uuid,random,uuid,input,add,uuid,random,uuid,to,string,final,string,args,input,to,array,new,string,0,final,parameter,tool,parameter,tool,parameter,tool,from,args,args,final,int,num,threads,5,final,int,num,serializations,100,final,collection,completable,future,void,futures,new,array,list,num,serializations,final,executor,service,executor,service,executors,new,fixed,thread,pool,num,threads,try,for,int,i,0,i,num,serializations,i,futures,add,completable,future,run,async,try,serialize,deserialize,parameter,tool,catch,exception,e,throw,new,completion,exception,e,executor,service,for,completable,future,void,future,futures,future,get,finally,executor,service,shutdown,now,executor,service,await,termination,1000l,time,unit,milliseconds
ParameterToolTest -> @Test 	public void testConcurrentExecutionConfigSerialization() throws ExecutionException, InterruptedException;1539096710;Tests that we can concurrently serialize and access the ParameterTool. See FLINK-7943;@Test_	public void testConcurrentExecutionConfigSerialization() throws ExecutionException, InterruptedException {__		final int numInputs = 10__		Collection<String> input = new ArrayList<>(numInputs)___		for (int i = 0_ i < numInputs_ i++) {_			input.add("--" + UUID.randomUUID())__			input.add(UUID.randomUUID().toString())__		}__		final String[] args = input.toArray(new String[0])___		final ParameterTool parameterTool = ParameterTool.fromArgs(args)___		final int numThreads = 5__		final int numSerializations = 100___		final Collection<CompletableFuture<Void>> futures = new ArrayList<>(numSerializations)___		final ExecutorService executorService = Executors.newFixedThreadPool(numThreads)___		try {_			for (int i = 0_ i < numSerializations_ i++) {_				futures.add(_					CompletableFuture.runAsync(_						() -> {_							try {_								serializeDeserialize(parameterTool)__							} catch (Exception e) {_								throw new CompletionException(e)__							}_						},_						executorService))__			}__			for (CompletableFuture<Void> future : futures) {_				future.get()__			}_		} finally {_			executorService.shutdownNow()__			executorService.awaitTermination(1000L, TimeUnit.MILLISECONDS)__		}_	};tests,that,we,can,concurrently,serialize,and,access,the,parameter,tool,see,flink,7943;test,public,void,test,concurrent,execution,config,serialization,throws,execution,exception,interrupted,exception,final,int,num,inputs,10,collection,string,input,new,array,list,num,inputs,for,int,i,0,i,num,inputs,i,input,add,uuid,random,uuid,input,add,uuid,random,uuid,to,string,final,string,args,input,to,array,new,string,0,final,parameter,tool,parameter,tool,parameter,tool,from,args,args,final,int,num,threads,5,final,int,num,serializations,100,final,collection,completable,future,void,futures,new,array,list,num,serializations,final,executor,service,executor,service,executors,new,fixed,thread,pool,num,threads,try,for,int,i,0,i,num,serializations,i,futures,add,completable,future,run,async,try,serialize,deserialize,parameter,tool,catch,exception,e,throw,new,completion,exception,e,executor,service,for,completable,future,void,future,futures,future,get,finally,executor,service,shutdown,now,executor,service,await,termination,1000l,time,unit,milliseconds
ParameterToolTest -> private void serializeDeserialize(ParameterTool parameterTool) throws IOException, ClassNotFoundException;1511189418;Accesses parameter tool parameters and then serializes the given parameter tool and deserializes again._@param parameterTool to serialize/deserialize;private void serializeDeserialize(ParameterTool parameterTool) throws IOException, ClassNotFoundException {_		_		_		parameterTool.get(UUID.randomUUID().toString())___		try (_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)) {_			oos.writeObject(parameterTool)__			oos.close()__			baos.close()___			ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__			ObjectInputStream ois = new ObjectInputStream(bais)___			_			ParameterTool deserializedParameterTool = ((ParameterTool) ois.readObject())__		}_	};accesses,parameter,tool,parameters,and,then,serializes,the,given,parameter,tool,and,deserializes,again,param,parameter,tool,to,serialize,deserialize;private,void,serialize,deserialize,parameter,tool,parameter,tool,throws,ioexception,class,not,found,exception,parameter,tool,get,uuid,random,uuid,to,string,try,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,object,parameter,tool,oos,close,baos,close,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,object,input,stream,ois,new,object,input,stream,bais,parameter,tool,deserialized,parameter,tool,parameter,tool,ois,read,object
ParameterToolTest -> private void serializeDeserialize(ParameterTool parameterTool) throws IOException, ClassNotFoundException;1539096710;Accesses parameter tool parameters and then serializes the given parameter tool and deserializes again._@param parameterTool to serialize/deserialize;private void serializeDeserialize(ParameterTool parameterTool) throws IOException, ClassNotFoundException {_		_		_		parameterTool.get(UUID.randomUUID().toString())___		try (_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)) {_			oos.writeObject(parameterTool)__			oos.close()__			baos.close()___			ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__			ObjectInputStream ois = new ObjectInputStream(bais)___			_			ParameterTool deserializedParameterTool = ((ParameterTool) ois.readObject())__		}_	};accesses,parameter,tool,parameters,and,then,serializes,the,given,parameter,tool,and,deserializes,again,param,parameter,tool,to,serialize,deserialize;private,void,serialize,deserialize,parameter,tool,parameter,tool,throws,ioexception,class,not,found,exception,parameter,tool,get,uuid,random,uuid,to,string,try,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,object,parameter,tool,oos,close,baos,close,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,object,input,stream,ois,new,object,input,stream,bais,parameter,tool,deserialized,parameter,tool,parameter,tool,ois,read,object
ParameterToolTest -> @Test 	public void testSystemProperties();1431691975;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1437494296;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1443123598;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1473329066;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1474022085;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1478107885;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1499777482;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1502111816;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1505831007;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1506499511;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1511189418;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
ParameterToolTest -> @Test 	public void testSystemProperties();1539096710;This is mainly meant to be used with -D arguments against the JVM.;@Test_	public void testSystemProperties() {_		System.setProperty("input", "myInput")__		System.setProperty("expectedCount", "15")__		ParameterTool parameter = ParameterTool.fromSystemProperties()__		validate(parameter)__	};this,is,mainly,meant,to,be,used,with,d,arguments,against,the,jvm;test,public,void,test,system,properties,system,set,property,input,my,input,system,set,property,expected,count,15,parameter,tool,parameter,parameter,tool,from,system,properties,validate,parameter
