commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test(expected = InvalidProgramException.class) public void testNonSerializable() throws Exception {     MapCreator creator = new NonSerializableMapCreator().     MapFunction<Integer, Integer> map = creator.getMap().     ClosureCleaner.ensureSerializable(map).     int result = map.map(3).     Assert.assertEquals(result, 4). }
false;public;0;10;;@Test public void testCleanedNonSerializable() throws Exception {     MapCreator creator = new NonSerializableMapCreator().     MapFunction<Integer, Integer> map = creator.getMap().     ClosureCleaner.clean(map, true).     int result = map.map(3).     Assert.assertEquals(result, 4). }
false;public;0;10;;@Test public void testSerializable() throws Exception {     MapCreator creator = new SerializableMapCreator(1).     MapFunction<Integer, Integer> map = creator.getMap().     ClosureCleaner.clean(map, true).     int result = map.map(3).     Assert.assertEquals(result, 4). }
false;public;0;12;;@Test public void testNestedSerializable() throws Exception {     MapCreator creator = new NestedSerializableMapCreator(1).     MapFunction<Integer, Integer> map = creator.getMap().     ClosureCleaner.clean(map, true).     ClosureCleaner.ensureSerializable(map).     int result = map.map(3).     Assert.assertEquals(result, 4). }
false;public;0;12;;@Test(expected = InvalidProgramException.class) public void testNestedNonSerializable() throws Exception {     MapCreator creator = new NestedNonSerializableMapCreator(1).     MapFunction<Integer, Integer> map = creator.getMap().     ClosureCleaner.clean(map, true).     ClosureCleaner.ensureSerializable(map).     int result = map.map(3).     Assert.assertEquals(result, 4). }
false;;0;1;;MapFunction<Integer, Integer> getMap().
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value + 1. }
false;public;0;9;;@Override public MapFunction<Integer, Integer> getMap() {     return new MapFunction<Integer, Integer>() {          @Override         public Integer map(Integer value) throws Exception {             return value + 1.         }     }. }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value + add. }
false;public;0;9;;@Override public MapFunction<Integer, Integer> getMap() {     return new MapFunction<Integer, Integer>() {          @Override         public Integer map(Integer value) throws Exception {             return value + add.         }     }. }
false;public;0;4;;@Override public MapFunction<Integer, Integer> getMap() {     return inner.getMap(). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value + add. }
false;public;0;9;;@Override public MapFunction<Integer, Integer> getMap() {     return new MapFunction<Integer, Integer>() {          @Override         public Integer map(Integer value) throws Exception {             return value + add.         }     }. }
false;public;0;4;;@Override public MapFunction<Integer, Integer> getMap() {     return inner.getMap(). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value + getMeTheAdd(). }
false;public;0;9;;@Override public MapFunction<Integer, Integer> getMap() {     return new MapFunction<Integer, Integer>() {          @Override         public Integer map(Integer value) throws Exception {             return value + getMeTheAdd().         }     }. }
false;public;0;3;;public int getMeTheAdd() {     return add. }
