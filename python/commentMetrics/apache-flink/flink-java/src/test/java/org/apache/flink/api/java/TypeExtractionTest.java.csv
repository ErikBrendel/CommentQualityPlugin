commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Object map(Object value) throws Exception {     return null. }
false;public;0;19;;@SuppressWarnings({ "unchecked", "rawtypes" }) @Test public void testFunctionWithMissingGenericsAndReturns() {     RichMapFunction function = new RichMapFunction() {          private static final long serialVersionUID = 1L.          @Override         public Object map(Object value) throws Exception {             return null.         }     }.     TypeInformation<?> info = ExecutionEnvironment.getExecutionEnvironment().fromElements("arbitrary", "data").map(function).returns(Types.STRING).getResultType().     assertEquals(Types.STRING, info). }
false;public;0;5;;@Test public void testGetterSetterWithVertex() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(new VertexTyped(0L, 3.0), new VertexTyped(1L, 1.0)). }
false;public;1;3;;public void setKey1(K key1) {     this.key1 = key1. }
false;public;1;3;;public void setKey2(K key2) {     this.key2 = key2. }
false;public;0;3;;public K getKey1() {     return key1. }
false;public;0;3;;public K getKey2() {     return key2. }
false;public;1;3;;public void setValue(V value) {     this.value = value. }
false;public;0;3;;public V getValue() {     return value. }
