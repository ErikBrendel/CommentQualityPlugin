# id;timestamp;commentText;codeText;commentWords;codeWords
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1405024514;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1405090423;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1406821655;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1411372797;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1411473593;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuplesWildCard();1412346153;A mapper that preserves all fields over a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuplesWildCard() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new WildcardConstantMapper<Tuple3<Long,String,Integer>>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,all,fields,over,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,wild,card,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,wildcard,constant,mapper,tuple3,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1405024514;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1405090423;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1406821655;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1411372797;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1411473593;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateBinaryFunctionAnnotationTuples();1412346153;A join that preserves tuple fields from both sides.;@Test_	public void translateBinaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, String>> input1 = env.fromElements(new Tuple2<Long, String>(3l, "test"))__			@SuppressWarnings("unchecked")_			DataSet<Tuple2<Long, Double>> input2 = env.fromElements(new Tuple2<Long, Double>(3l, 3.1415))__			_			input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long, String, Long, Double>())_				.print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			JoinOperatorBase<?, ?, ?, ?> join = (JoinOperatorBase<?, ?, ?, ?>) sink.getInput()__			_			DualInputSemanticProperties semantics = join.getSemanticProperties()__			_			FieldSet fw11 = semantics.getForwardedField1(0)__			FieldSet fw12 = semantics.getForwardedField1(1)__			FieldSet fw21 = semantics.getForwardedField2(0)__			FieldSet fw22 = semantics.getForwardedField2(1)__			_			assertNull(fw11)__			assertNull(fw21)__			_			assertNotNull(fw12)__			assertNotNull(fw22)__			_			assertTrue(fw12.contains(0))__			assertTrue(fw22.contains(1))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,join,that,preserves,tuple,fields,from,both,sides;test,public,void,translate,binary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple2,long,string,input1,env,from,elements,new,tuple2,long,string,3l,test,suppress,warnings,unchecked,data,set,tuple2,long,double,input2,env,from,elements,new,tuple2,long,double,3l,3,1415,input1,join,input2,where,0,equal,to,0,with,new,forwarding,tuple,join,long,string,long,double,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,join,operator,base,join,join,operator,base,sink,get,input,dual,input,semantic,properties,semantics,join,get,semantic,properties,field,set,fw11,semantics,get,forwarded,field1,0,field,set,fw12,semantics,get,forwarded,field1,1,field,set,fw21,semantics,get,forwarded,field2,0,field,set,fw22,semantics,get,forwarded,field2,1,assert,null,fw11,assert,null,fw21,assert,not,null,fw12,assert,not,null,fw22,assert,true,fw12,contains,0,assert,true,fw22,contains,1,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1405024514;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1405090423;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1406821655;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1411372797;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1411473593;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
SemanticPropertiesTranslationTest -> @Test 	public void translateUnaryFunctionAnnotationTuples();1412346153;A mapper that preserves fields 0, 1, 2 of a tuple data set.;@Test_	public void translateUnaryFunctionAnnotationTuples() {_		try {_			ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__			_			@SuppressWarnings("unchecked")_			DataSet<Tuple3<Long, String, Integer>> input = env.fromElements(new Tuple3<Long, String, Integer>(3l, "test", 42))__			input.map(new IndividualConstantMapper<Long, String, Integer>()).print()__			_			Plan plan = env.createProgramPlan()__			_			GenericDataSinkBase<?> sink = plan.getDataSinks().iterator().next()__			MapOperatorBase<?, ?, ?> mapper = (MapOperatorBase<?, ?, ?>) sink.getInput()__			_			SingleInputSemanticProperties semantics = mapper.getSemanticProperties()__			_			FieldSet fw1 = semantics.getForwardedField(0)__			FieldSet fw2 = semantics.getForwardedField(1)__			FieldSet fw3 = semantics.getForwardedField(2)__			_			assertNotNull(fw1)__			assertNotNull(fw2)__			assertNotNull(fw3)__			_			assertTrue(fw1.contains(0))__			assertTrue(fw2.contains(1))__			assertTrue(fw3.contains(2))__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Exception in test: " + e.getMessage())__		}_	};a,mapper,that,preserves,fields,0,1,2,of,a,tuple,data,set;test,public,void,translate,unary,function,annotation,tuples,try,execution,environment,env,execution,environment,get,execution,environment,suppress,warnings,unchecked,data,set,tuple3,long,string,integer,input,env,from,elements,new,tuple3,long,string,integer,3l,test,42,input,map,new,individual,constant,mapper,long,string,integer,print,plan,plan,env,create,program,plan,generic,data,sink,base,sink,plan,get,data,sinks,iterator,next,map,operator,base,mapper,map,operator,base,sink,get,input,single,input,semantic,properties,semantics,mapper,get,semantic,properties,field,set,fw1,semantics,get,forwarded,field,0,field,set,fw2,semantics,get,forwarded,field,1,field,set,fw3,semantics,get,forwarded,field,2,assert,not,null,fw1,assert,not,null,fw2,assert,not,null,fw3,assert,true,fw1,contains,0,assert,true,fw2,contains,1,assert,true,fw3,contains,2,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,exception,in,test,e,get,message
