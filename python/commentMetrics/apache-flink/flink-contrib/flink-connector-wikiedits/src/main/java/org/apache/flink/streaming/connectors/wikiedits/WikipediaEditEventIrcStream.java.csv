commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;BlockingQueue<WikipediaEditEvent> getEdits() {     return edits. }
false;;0;5;;void connect() throws IOException {     if (!conn.isConnected()) {         conn.connect().     } }
false;;1;4;;void join(String channel) {     Objects.requireNonNull(channel, "channel").     conn.send("JOIN " + channel). }
false;;1;3;;void leave(String channel) {     conn.send("PART " + channel). }
false;public;0;8;;@Override public void close() throws Exception {     if (conn != null && conn.isConnected()) {         conn.doQuit().         conn.close().         conn.join(5 * 1000).     } }
false;public;3;15;;@Override public void onPrivmsg(String target, IRCUser user, String msg) {     LOG.debug("[{}] {}: {}.", target, user.getNick(), msg).     WikipediaEditEvent event = WikipediaEditEvent.fromRawEvent(System.currentTimeMillis(), target, msg).     if (event != null) {         if (!edits.offer(event)) {             LOG.debug("Dropping message, because of full queue.").         }     } }
false;public;0;4;;@Override public void onRegistered() {     LOG.debug("Connected."). }
false;public;0;4;;@Override public void onDisconnected() {     LOG.debug("Disconnected."). }
false;public;1;4;;@Override public void onError(String msg) {     LOG.error("Error: '{}'.", msg). }
false;public;2;4;;@Override public void onError(int num, String msg) {     LOG.error("Error #{}: '{}'.", num, msg). }
false;public;3;4;;@Override public void onInvite(String chan, IRCUser user, String passiveNick) {     LOG.debug("[{}]: {} invites {}.", chan, user.getNick(), passiveNick). }
false;public;2;4;;@Override public void onJoin(String chan, IRCUser user) {     LOG.debug("[{}]: {} joins.", chan, user.getNick()). }
false;public;4;4;;@Override public void onKick(String chan, IRCUser user, String passiveNick, String msg) {     LOG.debug("[{}]: {} kicks {}.", chan, user.getNick(), passiveNick). }
false;public;3;4;;@Override public void onMode(String chan, IRCUser user, IRCModeParser modeParser) {     LOG.debug("[{}]: mode '{}'.", chan, modeParser.getLine()). }
false;public;3;4;;@Override public void onMode(IRCUser user, String passiveNick, String mode) {     LOG.debug("{} sets modes {} ({}).", user.getNick(), mode, passiveNick). }
false;public;2;4;;@Override public void onNick(IRCUser user, String newNick) {     LOG.debug("{} is now known as {}.", user.getNick(), newNick). }
false;public;3;4;;@Override public void onNotice(String target, IRCUser user, String msg) {     LOG.debug("[{}] {} (notice): {}.", target, user.getNick(), msg). }
false;public;3;4;;@Override public void onPart(String chan, IRCUser user, String msg) {     LOG.debug("[{}] {} parts.", chan, user.getNick(), msg). }
false;public;1;3;;@Override public void onPing(String ping) { }
false;public;2;4;;@Override public void onQuit(IRCUser user, String msg) {     LOG.debug("Quit: {}.", user.getNick()). }
false;public;3;4;;@Override public void onReply(int num, String value, String msg) {     LOG.debug("Reply #{}: {} {}.", num, value, msg). }
false;public;3;4;;@Override public void onTopic(String chan, IRCUser user, String topic) {     LOG.debug("[{}] {} changes topic into {}.", chan, user.getNick(), topic). }
false;public;4;4;;@Override public void unknown(String prefix, String command, String middle, String trailing) {     LOG.warn("UNKNOWN: " + prefix + " " + command + " " + middle + " " + trailing). }
