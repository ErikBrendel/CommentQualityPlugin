commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean equals(Object obj) {     return (obj instanceof SchemaCompatibilityTestingSerializer) && Objects.equals(tokenForEqualityChecks, ((SchemaCompatibilityTestingSerializer) obj).tokenForEqualityChecks). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getClass(), tokenForEqualityChecks). }
false;public;0;6;;@Override public String toString() {     return "SchemaCompatibilityTestingSerializer{" + "tokenForEqualityChecks='" + tokenForEqualityChecks + '\'' + '}'. }
false;public;0;4;;@Override public TypeSerializerSnapshot<Integer> snapshotConfiguration() {     return new SchemaCompatibilityTestingSnapshot(tokenForEqualityChecks, resolver). }
false;public;0;4;;// ----------------------------------------------------------------------------------------------------------- // Serialization related methods are not supported // ----------------------------------------------------------------------------------------------------------- @Override public boolean isImmutableType() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public TypeSerializer<Integer> duplicate() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Integer createInstance() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Integer copy(Integer from) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Integer copy(Integer from, Integer reuse) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int getLength() {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void serialize(Integer record, DataOutputView target) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Integer deserialize(DataInputView source) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Integer deserialize(Integer reuse, DataInputView source) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) {     throw new UnsupportedOperationException(). }
false;public,static;0;3;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer() {     return thatIsCompatibleWithNextSerializer(null). }
false;public,static;1;3;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(String tokenForEqualityChecks) {     return new SchemaCompatibilityTestingSnapshot(tokenForEqualityChecks, unused -> TypeSerializerSchemaCompatibility.compatibleAsIs()). }
false;public,static;0;3;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration() {     return thatIsCompatibleWithNextSerializerAfterReconfiguration(null). }
false;public,static;1;4;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration(String tokenForEqualityChecks) {     SchemaCompatibilityTestingSerializer reconfiguredSerializer = new SchemaCompatibilityTestingSerializer(tokenForEqualityChecks, ALWAYS_COMPATIBLE).     return new SchemaCompatibilityTestingSnapshot(tokenForEqualityChecks, unused -> TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(reconfiguredSerializer)). }
false;public,static;0;3;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration() {     return thatIsCompatibleWithNextSerializerAfterMigration(null). }
false;public,static;1;3;;public static SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration(String tokenForEqualityChecks) {     return new SchemaCompatibilityTestingSnapshot(tokenForEqualityChecks, unused -> TypeSerializerSchemaCompatibility.compatibleAfterMigration()). }
false;public,static;0;3;;public static SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer() {     return thatIsIncompatibleWithTheNextSerializer(null). }
false;public,static;1;3;;public static SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer(String tokenForEqualityChecks) {     return new SchemaCompatibilityTestingSnapshot(tokenForEqualityChecks, unused -> TypeSerializerSchemaCompatibility.incompatible()). }
false;public;1;11;;@Override public TypeSerializerSchemaCompatibility<Integer> resolveSchemaCompatibility(TypeSerializer<Integer> newSerializer) {     if (!(newSerializer instanceof SchemaCompatibilityTestingSerializer)) {         return TypeSerializerSchemaCompatibility.incompatible().     }     SchemaCompatibilityTestingSerializer schemaCompatibilityTestingSerializer = (SchemaCompatibilityTestingSerializer) newSerializer.     if (!(Objects.equals(schemaCompatibilityTestingSerializer.tokenForEqualityChecks, tokenForEqualityChecks))) {         return TypeSerializerSchemaCompatibility.incompatible().     }     return resolver.apply(newSerializer). }
false;public;0;4;;@Override public int getCurrentVersion() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void writeSnapshot(DataOutputView out) {     throw new UnsupportedOperationException(). }
false;public;3;4;;@Override public void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public TypeSerializer<Integer> restoreSerializer() {     return new SchemaCompatibilityTestingSerializer(tokenForEqualityChecks, resolver). }
