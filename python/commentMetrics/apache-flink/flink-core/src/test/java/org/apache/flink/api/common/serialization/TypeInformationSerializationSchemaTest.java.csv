commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testDeSerialization() {     try {         TypeInformation<MyPOJO> info = TypeExtractor.getForClass(MyPOJO.class).         TypeInformationSerializationSchema<MyPOJO> schema = new TypeInformationSerializationSchema<MyPOJO>(info, new ExecutionConfig()).         MyPOJO[] types = { new MyPOJO(72, new Date(763784523L), new Date(88234L)), new MyPOJO(-1, new Date(11111111111111L)), new MyPOJO(42), new MyPOJO(17, new Date(222763784523L)) }.         for (MyPOJO val : types) {             byte[] serialized = schema.serialize(val).             MyPOJO deser = schema.deserialize(serialized).             assertEquals(val, deser).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;15;;@Test public void testSerializability() {     try {         TypeInformation<MyPOJO> info = TypeExtractor.getForClass(MyPOJO.class).         TypeInformationSerializationSchema<MyPOJO> schema = new TypeInformationSerializationSchema<MyPOJO>(info, new ExecutionConfig()).         // this needs to succeed         CommonTestUtils.createCopySerializable(schema).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;4;;@Override public int hashCode() {     return aField. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof MyPOJO) {         MyPOJO that = (MyPOJO) obj.         return this.aField == that.aField && (this.aList == null ? that.aList == null : that.aList != null && this.aList.equals(that.aList)).     }     return super.equals(obj). }
false;public;0;4;;@Override public String toString() {     return "MyPOJO " + aField + " " + aList. }
