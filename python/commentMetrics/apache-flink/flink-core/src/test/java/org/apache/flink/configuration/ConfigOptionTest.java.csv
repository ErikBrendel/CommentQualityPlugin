commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testDeprecationFlagForDeprecatedKeys() {     final ConfigOption<Integer> optionWithDeprecatedKeys = ConfigOptions.key("key").defaultValue(0).withDeprecatedKeys("deprecated1", "deprecated2").     assertTrue(optionWithDeprecatedKeys.hasFallbackKeys()).     for (final FallbackKey fallbackKey : optionWithDeprecatedKeys.fallbackKeys()) {         assertTrue("deprecated key not flagged as deprecated", fallbackKey.isDeprecated()).     } }
false;public;0;12;;@Test public void testDeprecationFlagForFallbackKeys() {     final ConfigOption<Integer> optionWithFallbackKeys = ConfigOptions.key("key").defaultValue(0).withFallbackKeys("fallback1", "fallback2").     assertTrue(optionWithFallbackKeys.hasFallbackKeys()).     for (final FallbackKey fallbackKey : optionWithFallbackKeys.fallbackKeys()) {         assertFalse("falback key flagged as deprecated", fallbackKey.isDeprecated()).     } }
false;public;0;24;;@Test public void testDeprecationFlagForMixedAlternativeKeys() {     final ConfigOption<Integer> optionWithMixedKeys = ConfigOptions.key("key").defaultValue(0).withDeprecatedKeys("deprecated1", "deprecated2").withFallbackKeys("fallback1", "fallback2").     final List<String> fallbackKeys = new ArrayList<>(2).     final List<String> deprecatedKeys = new ArrayList<>(2).     for (final FallbackKey alternativeKey : optionWithMixedKeys.fallbackKeys()) {         if (alternativeKey.isDeprecated()) {             deprecatedKeys.add(alternativeKey.getKey()).         } else {             fallbackKeys.add(alternativeKey.getKey()).         }     }     assertEquals(2, fallbackKeys.size()).     assertEquals(2, deprecatedKeys.size()).     assertThat(fallbackKeys, containsInAnyOrder("fallback1", "fallback2")).     assertThat(deprecatedKeys, containsInAnyOrder("deprecated1", "deprecated2")). }
