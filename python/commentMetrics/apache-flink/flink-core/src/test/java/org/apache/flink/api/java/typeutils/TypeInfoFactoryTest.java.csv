commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSimpleType() {     TypeInformation<?> ti = TypeExtractor.createTypeInfo(IntLike.class).     assertEquals(INT_TYPE_INFO, ti).     ti = TypeExtractor.getForClass(IntLike.class).     assertEquals(INT_TYPE_INFO, ti).     ti = TypeExtractor.getForObject(new IntLike()).     assertEquals(INT_TYPE_INFO, ti). }
false;public;0;9;;@Test public void testMyEitherGenericType() {     MapFunction<Boolean, MyEither<Boolean, String>> f = new MyEitherMapper<>().     TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(f, BOOLEAN_TYPE_INFO).     assertTrue(ti instanceof EitherTypeInfo).     EitherTypeInfo eti = (EitherTypeInfo) ti.     assertEquals(BOOLEAN_TYPE_INFO, eti.getLeftType()).     assertEquals(STRING_TYPE_INFO, eti.getRightType()). }
false;public;0;13;;@Test public void testMyOptionGenericType() {     TypeInformation<MyOption<Tuple2<Boolean, String>>> inTypeInfo = new MyOptionTypeInfo<>(new TupleTypeInfo<Tuple2<Boolean, String>>(BOOLEAN_TYPE_INFO, STRING_TYPE_INFO)).     MapFunction<MyOption<Tuple2<Boolean, String>>, MyOption<Tuple2<Boolean, Boolean>>> f = new MyOptionMapper<>().     TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(f, inTypeInfo).     assertTrue(ti instanceof MyOptionTypeInfo).     MyOptionTypeInfo oti = (MyOptionTypeInfo) ti.     assertTrue(oti.getInnerType() instanceof TupleTypeInfo).     TupleTypeInfo tti = (TupleTypeInfo) oti.getInnerType().     assertEquals(BOOLEAN_TYPE_INFO, tti.getTypeAt(0)).     assertEquals(BOOLEAN_TYPE_INFO, tti.getTypeAt(1)). }
false;public;0;13;;@Test public void testMyTuple() {     TypeInformation<Tuple1<MyTuple<Double, String>>> inTypeInfo = new TupleTypeInfo<>(new MyTupleTypeInfo(DOUBLE_TYPE_INFO, STRING_TYPE_INFO)).     MapFunction<Tuple1<MyTuple<Double, String>>, Tuple1<MyTuple<Boolean, Double>>> f = new MyTupleMapperL2<>().     TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(f, inTypeInfo).     assertTrue(ti instanceof TupleTypeInfo).     TupleTypeInfo<?> tti = (TupleTypeInfo<?>) ti.     assertTrue(tti.getTypeAt(0) instanceof MyTupleTypeInfo).     MyTupleTypeInfo mtti = (MyTupleTypeInfo) tti.getTypeAt(0).     assertEquals(BOOLEAN_TYPE_INFO, mtti.getField0()).     assertEquals(DOUBLE_TYPE_INFO, mtti.getField1()). }
false;public;0;8;;@Test public void testMyTupleHierarchy() {     TypeInformation<?> ti = TypeExtractor.createTypeInfo(MyTuple2.class).     assertTrue(ti instanceof MyTupleTypeInfo).     MyTupleTypeInfo<?, ?> mtti = (MyTupleTypeInfo) ti.     assertEquals(STRING_TYPE_INFO, mtti.getField0()).     assertEquals(BOOLEAN_TYPE_INFO, mtti.getField1()). }
false;public;0;13;;@Test public void testMyTupleHierarchyWithInference() {     TypeInformation<Tuple1<MyTuple3<Tuple1<Float>>>> inTypeInfo = new TupleTypeInfo<>(new MyTupleTypeInfo<>(new TupleTypeInfo<Tuple1<Float>>(FLOAT_TYPE_INFO), BOOLEAN_TYPE_INFO)).     MapFunction<Tuple1<MyTuple3<Tuple1<Float>>>, Tuple1<MyTuple3<Tuple2<Float, String>>>> f = new MyTuple3Mapper<>().     TypeInformation ti = TypeExtractor.getMapReturnTypes(f, inTypeInfo).     assertTrue(ti instanceof TupleTypeInfo).     TupleTypeInfo<?> tti = (TupleTypeInfo) ti.     assertTrue(tti.getTypeAt(0) instanceof MyTupleTypeInfo).     MyTupleTypeInfo mtti = (MyTupleTypeInfo) tti.getTypeAt(0).     assertEquals(new TupleTypeInfo<>(FLOAT_TYPE_INFO, STRING_TYPE_INFO), mtti.getField0()).     assertEquals(BOOLEAN_TYPE_INFO, mtti.getField1()). }
false;public;0;5;;@Test(expected = InvalidTypesException.class) public void testMissingTypeInfo() {     MapFunction f = new MyFaultyMapper().     TypeExtractor.getMapReturnTypes(f, INT_TYPE_INFO). }
false;public;0;5;;@Test(expected = InvalidTypesException.class) public void testMissingTypeInference() {     MapFunction f = new MyFaultyMapper2().     TypeExtractor.getMapReturnTypes(f, new MyFaultyTypeInfo()). }
false;public;1;4;;@Override public Tuple1<MyTuple3<Tuple2<Y, String>>> map(Tuple1<MyTuple3<Tuple1<Y>>> value) throws Exception {     return null. }
false;public;1;4;;@Override public MyFaulty<T> map(MyFaulty<T> value) throws Exception {     return null. }
false;public;1;4;;@Override public MyFaulty<T> map(T value) throws Exception {     return null. }
false;public;2;4;;@Override public TypeInformation createTypeInfo(Type t, Map genericParameters) {     return null. }
false;public;0;4;;@Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 0. }
false;public;0;4;;@Override public int getTotalFields() {     return 0. }
false;public;0;4;;@Override public Class<MyFaulty> getTypeClass() {     return null. }
false;public;0;4;;@Override public boolean isKeyType() {     return false. }
false;public;1;4;;@Override public TypeSerializer<MyFaulty> createSerializer(ExecutionConfig config) {     return null. }
false;public;0;4;;@Override public String toString() {     return null. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return false. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return false. }
false;public;1;4;;@Override public Tuple1<MyTuple<B, A>> map(Tuple1<MyTuple<A, String>> value) throws Exception {     return null. }
false;public;2;5;;@Override @SuppressWarnings("unchecked") public TypeInformation<MyTuple> createTypeInfo(Type t, Map<String, TypeInformation<?>> genericParameters) {     return new MyTupleTypeInfo(genericParameters.get("T0"), genericParameters.get("T1")). }
false;public;0;3;;public TypeInformation getField0() {     return field0. }
false;public;0;3;;public TypeInformation getField1() {     return field1. }
false;public;0;4;;@Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 0. }
false;public;0;4;;@Override public int getTotalFields() {     return 0. }
false;public;0;4;;@Override public Class<MyTuple<T0, T1>> getTypeClass() {     return null. }
false;public;0;4;;@Override public boolean isKeyType() {     return false. }
false;public;1;4;;@Override public TypeSerializer<MyTuple<T0, T1>> createSerializer(ExecutionConfig config) {     return null. }
false;public;0;4;;@Override public String toString() {     return null. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return false. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return false. }
false;public;0;7;;@Override public Map<String, TypeInformation<?>> getGenericParameters() {     Map<String, TypeInformation<?>> map = new HashMap<>(2).     map.put("T0", field0).     map.put("T1", field1).     return map. }
false;public;1;4;;@Override public MyOption<Tuple2<T, T>> map(MyOption<Tuple2<T, String>> value) throws Exception {     return null. }
false;public;2;5;;@Override @SuppressWarnings("unchecked") public TypeInformation<MyOption<T>> createTypeInfo(Type t, Map<String, TypeInformation<?>> genericParams) {     return new MyOptionTypeInfo(genericParams.get("T")). }
false;public;0;3;;public TypeInformation<T> getInnerType() {     return innerType. }
false;public;0;4;;@Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 0. }
false;public;0;4;;@Override public int getTotalFields() {     return 1. }
false;public;0;4;;@Override public Class<MyOption<T>> getTypeClass() {     return null. }
false;public;0;4;;@Override public boolean isKeyType() {     return false. }
false;public;1;4;;@Override public TypeSerializer<MyOption<T>> createSerializer(ExecutionConfig config) {     return null. }
false;public;0;4;;@Override public String toString() {     return null. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return false. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return false. }
false;public;0;6;;@Override public Map<String, TypeInformation<?>> getGenericParameters() {     Map<String, TypeInformation<?>> map = new HashMap<>(1).     map.put("T", innerType).     return map. }
false;public;1;4;;@Override public MyEither<T, String> map(T value) throws Exception {     return null. }
false;public;2;5;;@Override @SuppressWarnings("unchecked") public TypeInformation<MyEither<A, B>> createTypeInfo(Type t, Map<String, TypeInformation<?>> genericParams) {     return new EitherTypeInfo(genericParams.get("A"), genericParams.get("B")). }
false;public;2;5;;@Override @SuppressWarnings("unchecked") public TypeInformation<IntLike> createTypeInfo(Type t, Map<String, TypeInformation<?>> genericParams) {     return (TypeInformation) INT_TYPE_INFO. }
