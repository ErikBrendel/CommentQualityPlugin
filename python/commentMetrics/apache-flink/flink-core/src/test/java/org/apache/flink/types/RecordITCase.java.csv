commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     PipedInputStream pipedInput = new PipedInputStream(32 * 1024 * 1024).     this.in = new DataInputViewStreamWrapper(pipedInput).     this.out = new DataOutputViewStreamWrapper(new PipedOutputStream(pipedInput)). }
false;public;0;24;;@Test public void massiveRandomBlackBoxTests() {     try {         // random test with records with a small number of fields         for (int i = 0. i < 100000. i++) {             final Value[] fields = RecordTest.createRandomValues(this.rand, 0, 32).             RecordTest.blackboxTestRecordWithValues(fields, this.rand, this.in, this.out).         }         // random tests with records with a moderately large number of fields         for (int i = 0. i < 2000. i++) {             final Value[] fields = RecordTest.createRandomValues(this.rand, 20, 200).             RecordTest.blackboxTestRecordWithValues(fields, this.rand, this.in, this.out).         }         // random tests with records with very many fields         for (int i = 0. i < 200. i++) {             final Value[] fields = RecordTest.createRandomValues(this.rand, 500, 2000).             RecordTest.blackboxTestRecordWithValues(fields, this.rand, this.in, this.out).         }     } catch (Throwable t) {         Assert.fail("Test failed due to an exception: " + t.getMessage()).     } }
