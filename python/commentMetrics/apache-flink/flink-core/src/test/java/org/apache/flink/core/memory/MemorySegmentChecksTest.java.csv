commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHeapNullBuffer1() {     new HeapMemorySegment(null). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHeapNullBuffer2() {     new HeapMemorySegment(null, new Object()). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHybridHeapNullBuffer1() {     new HybridMemorySegment((byte[]) null). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHybridHeapNullBuffer2() {     new HybridMemorySegment((byte[]) null, new Object()). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHybridOffHeapNullBuffer1() {     new HybridMemorySegment((ByteBuffer) null). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testHybridOffHeapNullBuffer2() {     new HybridMemorySegment((ByteBuffer) null, new Object()). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testHybridNonDirectBuffer() {     new HybridMemorySegment(ByteBuffer.allocate(1024)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testZeroAddress() {     new MockSegment(0L, 4 * 1024, null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testNegativeAddress() {     new MockSegment(-1L, 4 * 1024, null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testTooLargeAddress() {     new MockSegment(Long.MAX_VALUE - 8 * 1024, 4 * 1024, null). }
false;public;2;4;;@Override public ByteBuffer wrap(int offset, int length) {     return null. }
false;public;1;4;;@Override public byte get(int index) {     return 0. }
false;public;2;2;;@Override public void put(int index, byte b) { }
false;public;2;2;;@Override public void get(int index, byte[] dst) { }
false;public;2;2;;@Override public void put(int index, byte[] src) { }
false;public;4;2;;@Override public void get(int index, byte[] dst, int offset, int length) { }
false;public;4;2;;@Override public void put(int index, byte[] src, int offset, int length) { }
false;public;1;4;;@Override public boolean getBoolean(int index) {     return false. }
false;public;2;2;;@Override public void putBoolean(int index, boolean value) { }
false;public;3;2;;@Override public void get(DataOutput out, int offset, int length) { }
false;public;3;2;;@Override public void put(DataInput in, int offset, int length) { }
false;public;3;2;;@Override public void get(int offset, ByteBuffer target, int numBytes) { }
false;public;3;2;;@Override public void put(int offset, ByteBuffer source, int numBytes) { }
