commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;// ------------------------------------------------------------------------ // Tests for serializer initialization // ------------------------------------------------------------------------ @Test public void testInitializeWithSerializer() throws Exception {     final TypeSerializer<String> serializer = StringSerializer.INSTANCE.     final TestStateDescriptor<String> descr = new TestStateDescriptor<>("test", serializer).     assertTrue(descr.isSerializerInitialized()).     assertNotNull(descr.getSerializer()).     assertTrue(descr.getSerializer() instanceof StringSerializer).     // this should not have any effect     descr.initializeSerializerUnlessSet(new ExecutionConfig()).     assertTrue(descr.isSerializerInitialized()).     assertNotNull(descr.getSerializer()).     assertTrue(descr.getSerializer() instanceof StringSerializer).     TestStateDescriptor<String> clone = CommonTestUtils.createCopySerializable(descr).     assertTrue(clone.isSerializerInitialized()).     assertNotNull(clone.getSerializer()).     assertTrue(clone.getSerializer() instanceof StringSerializer). }
false;public;0;22;;@Test public void testInitializeSerializerBeforeSerialization() throws Exception {     final TestStateDescriptor<String> descr = new TestStateDescriptor<>("test", String.class).     assertFalse(descr.isSerializerInitialized()).     try {         descr.getSerializer().         fail("should fail with an exception").     } catch (IllegalStateException ignored) {     }     descr.initializeSerializerUnlessSet(new ExecutionConfig()).     assertTrue(descr.isSerializerInitialized()).     assertNotNull(descr.getSerializer()).     assertTrue(descr.getSerializer() instanceof StringSerializer).     TestStateDescriptor<String> clone = CommonTestUtils.createCopySerializable(descr).     assertTrue(clone.isSerializerInitialized()).     assertNotNull(clone.getSerializer()).     assertTrue(clone.getSerializer() instanceof StringSerializer). }
false;public;0;24;;@Test public void testInitializeSerializerAfterSerialization() throws Exception {     final TestStateDescriptor<String> descr = new TestStateDescriptor<>("test", String.class).     assertFalse(descr.isSerializerInitialized()).     try {         descr.getSerializer().         fail("should fail with an exception").     } catch (IllegalStateException ignored) {     }     TestStateDescriptor<String> clone = CommonTestUtils.createCopySerializable(descr).     assertFalse(clone.isSerializerInitialized()).     try {         clone.getSerializer().         fail("should fail with an exception").     } catch (IllegalStateException ignored) {     }     clone.initializeSerializerUnlessSet(new ExecutionConfig()).     assertTrue(clone.isSerializerInitialized()).     assertNotNull(clone.getSerializer()).     assertTrue(clone.getSerializer() instanceof StringSerializer). }
false;public;0;19;;@Test public void testInitializeSerializerAfterSerializationWithCustomConfig() throws Exception {     // guard our test assumptions.     assertEquals("broken test assumption", -1, new KryoSerializer<>(String.class, new ExecutionConfig()).getKryo().getRegistration(File.class).getId()).     final ExecutionConfig config = new ExecutionConfig().     config.registerKryoType(File.class).     final TestStateDescriptor<Path> original = new TestStateDescriptor<>("test", Path.class).     TestStateDescriptor<Path> clone = CommonTestUtils.createCopySerializable(original).     clone.initializeSerializerUnlessSet(config).     // serialized one (later initialized) carries the registration     assertTrue(((KryoSerializer<?>) clone.getSerializer()).getKryo().getRegistration(File.class).getId() > 0). }
true;public;0;14;/**  * FLINK-6775, tests that the returned serializer is duplicated.  * This allows to share the state descriptor across threads.  */ ;// ------------------------------------------------------------------------ // Tests for serializer initialization // ------------------------------------------------------------------------ /**  * FLINK-6775, tests that the returned serializer is duplicated.  * This allows to share the state descriptor across threads.  */ @Test public void testSerializerDuplication() throws Exception {     // we need a serializer that actually duplicates for testing (a stateful one)     // we use Kryo here, because it meets these conditions     TypeSerializer<String> statefulSerializer = new KryoSerializer<>(String.class, new ExecutionConfig()).     TestStateDescriptor<String> descr = new TestStateDescriptor<>("foobar", statefulSerializer).     TypeSerializer<String> serializerA = descr.getSerializer().     TypeSerializer<String> serializerB = descr.getSerializer().     // check that the retrieved serializers are not the same     assertNotSame(serializerA, serializerB). }
false;public;0;26;;// ------------------------------------------------------------------------ // Test hashCode() and equals() // ------------------------------------------------------------------------ @Test public void testHashCodeAndEquals() throws Exception {     final String name = "testName".     TestStateDescriptor<String> original = new TestStateDescriptor<>(name, String.class).     TestStateDescriptor<String> same = new TestStateDescriptor<>(name, String.class).     TestStateDescriptor<String> sameBySerializer = new TestStateDescriptor<>(name, StringSerializer.INSTANCE).     // test that hashCode() works on state descriptors with initialized and uninitialized serializers     assertEquals(original.hashCode(), same.hashCode()).     assertEquals(original.hashCode(), sameBySerializer.hashCode()).     assertEquals(original, same).     assertEquals(original, sameBySerializer).     // equality with a clone     TestStateDescriptor<String> clone = CommonTestUtils.createCopySerializable(original).     assertEquals(original, clone).     // equality with an initialized     clone.initializeSerializerUnlessSet(new ExecutionConfig()).     assertEquals(original, clone).     original.initializeSerializerUnlessSet(new ExecutionConfig()).     assertEquals(original, same). }
false;public;0;9;;@Test public void testEqualsSameNameAndTypeDifferentClass() throws Exception {     final String name = "test name".     final TestStateDescriptor<String> descr1 = new TestStateDescriptor<>(name, String.class).     final OtherTestStateDescriptor<String> descr2 = new OtherTestStateDescriptor<>(name, String.class).     assertNotEquals(descr1, descr2). }
false;public;0;4;;@Override public Type getType() {     return Type.VALUE. }
false;public;0;4;;@Override public Type getType() {     return Type.VALUE. }
