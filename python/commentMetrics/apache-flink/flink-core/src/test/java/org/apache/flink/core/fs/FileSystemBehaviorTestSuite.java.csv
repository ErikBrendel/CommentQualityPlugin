commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Gets an instance of the {@code FileSystem} to be tested.  */ ;// ------------------------------------------------------------------------ // FileSystem-specific methods // ------------------------------------------------------------------------ /**  * Gets an instance of the {@code FileSystem} to be tested.  */ public abstract FileSystem getFileSystem() throws Exception.
true;public,abstract;0;1;/**  * Gets the base path in the file system under which tests will place their temporary files.  */ ;/**  * Gets the base path in the file system under which tests will place their temporary files.  */ public abstract Path getBasePath() throws Exception.
true;public,abstract;0;1;/**  * Gets the kind of the file system (file system, object store, ...).  */ ;/**  * Gets the kind of the file system (file system, object store, ...).  */ public abstract FileSystemKind getFileSystemKind().
false;public;0;6;;// ------------------------------------------------------------------------ // Init / Cleanup // ------------------------------------------------------------------------ @Before public void prepare() throws Exception {     fs = getFileSystem().     basePath = new Path(getBasePath(), randomName()).     fs.mkdirs(basePath). }
false;public;0;4;;@After public void cleanup() throws Exception {     fs.delete(basePath, true). }
false;public;0;4;;// ------------------------------------------------------------------------ // Suite of Tests // ------------------------------------------------------------------------ // --- file system kind @Test public void testFileSystemKind() {     assertEquals(getFileSystemKind(), fs.getKind()). }
false;public;0;5;;// --- access and scheme @Test public void testPathAndScheme() throws Exception {     assertEquals(fs.getUri(), getBasePath().getFileSystem().getUri()).     assertEquals(fs.getUri().getScheme(), getBasePath().toUri().getScheme()). }
false;public;0;5;;@Test public void testHomeAndWorkDir() {     assertEquals(fs.getUri().getScheme(), fs.getWorkingDirectory().toUri().getScheme()).     assertEquals(fs.getUri().getScheme(), fs.getHomeDirectory().toUri().getScheme()). }
false;public;0;12;;// --- mkdirs @Test public void testMkdirsReturnsTrueWhenCreatingDirectory() throws Exception {     // this test applies to object stores as well, as rely on the fact that they     // return true when things are not bad     final Path directory = new Path(basePath, randomName()).     assertTrue(fs.mkdirs(directory)).     if (getFileSystemKind() != FileSystemKind.OBJECT_STORE) {         assertTrue(fs.exists(directory)).     } }
false;public;0;12;;@Test public void testMkdirsCreatesParentDirectories() throws Exception {     // this test applies to object stores as well, as rely on the fact that they     // return true when things are not bad     final Path directory = new Path(new Path(new Path(basePath, randomName()), randomName()), randomName()).     assertTrue(fs.mkdirs(directory)).     if (getFileSystemKind() != FileSystemKind.OBJECT_STORE) {         assertTrue(fs.exists(directory)).     } }
false;public;0;12;;@Test public void testMkdirsReturnsTrueForExistingDirectory() throws Exception {     // this test applies to object stores as well, as rely on the fact that they     // return true when things are not bad     final Path directory = new Path(basePath, randomName()).     // make sure the directory exists     createRandomFileInDirectory(directory).     assertTrue(fs.mkdirs(directory)). }
false;public;0;17;;@Test public void testMkdirsFailsForExistingFile() throws Exception {     // test is not defined for object stores, they have no proper notion     // of directories     assumeNotObjectStore().     final Path file = new Path(getBasePath(), randomName()).     createFile(file).     try {         fs.mkdirs(file).         fail("should fail with an IOException").     } catch (IOException e) {     // good!     } }
false;public;0;18;;@Test public void testMkdirsFailsWithExistingParentFile() throws Exception {     // test is not defined for object stores, they have no proper notion     // of directories     assumeNotObjectStore().     final Path file = new Path(getBasePath(), randomName()).     createFile(file).     final Path dirUnderFile = new Path(file, randomName()).     try {         fs.mkdirs(dirUnderFile).         fail("should fail with an IOException").     } catch (IOException e) {     // good!     } }
false;private,static;0;3;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ private static String randomName() {     return StringUtils.getRandomString(RND, 16, 16, 'a', 'z'). }
false;private;1;5;;private void createFile(Path file) throws IOException {     try (FSDataOutputStream out = fs.create(file, WriteMode.NO_OVERWRITE)) {         out.write(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }).     } }
false;private;1;4;;private void createRandomFileInDirectory(Path directory) throws IOException {     fs.mkdirs(directory).     createFile(new Path(directory, randomName())). }
false;private;0;4;;private void assumeNotObjectStore() {     Assume.assumeTrue("Test does not apply to object stores", getFileSystemKind() != FileSystemKind.OBJECT_STORE). }
