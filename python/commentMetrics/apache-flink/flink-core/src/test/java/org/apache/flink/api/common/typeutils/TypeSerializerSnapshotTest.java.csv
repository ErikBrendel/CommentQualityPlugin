commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSerializeConfigWhenSerializerMissing() throws Exception {     TestSerializer ser = new TestSerializer().     TypeSerializerConfigSnapshot<Object> snap = (TypeSerializerConfigSnapshot<Object>) ser.snapshotConfiguration().     try {         TypeSerializerSnapshot.writeVersionedSnapshot(new DataOutputSerializer(64), snap).         fail("exception expected").     } catch (IllegalStateException e) {     // expected     } }
false;public;0;32;;@Test public void testSerializerDeserializationFailure() throws Exception {     TestSerializer ser = new TestSerializer().     TypeSerializerConfigSnapshot<Object> snap = (TypeSerializerConfigSnapshot<Object>) ser.snapshotConfiguration().     snap.setPriorSerializer(ser).     DataOutputSerializer out = new DataOutputSerializer(64).     TypeSerializerSnapshot.writeVersionedSnapshot(out, snap).     TypeSerializerSnapshot<Object> readBack = TypeSerializerSnapshot.readVersionedSnapshot(new DataInputDeserializer(out.getCopyOfBuffer()), getClass().getClassLoader()).     assertNotNull(readBack).     try {         readBack.restoreSerializer().         fail("expected exception").     } catch (IllegalStateException e) {     // expected     }     ((TypeSerializerConfigSnapshot<Object>) readBack).setPriorSerializer(new UnloadableDummyTypeSerializer<>(new byte[0])).     try {         readBack.restoreSerializer().         fail("expected exception").     } catch (IllegalStateException e) {     // expected     } }
false;public;0;4;;@Override public boolean isImmutableType() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public TypeSerializer<Object> duplicate() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Object createInstance() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object copy(Object from) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Object copy(Object from, Object reuse) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int getLength() {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void serialize(Object record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object deserialize(DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Object deserialize(Object reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj instanceof TestSerializer. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;private;1;3;;private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     throw new IOException("cannot deserialize"). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Object> snapshotConfiguration() {     return new TestSerializerConfigSnapshot(). }
false;public;0;4;;@Override public int getVersion() {     return 0. }
