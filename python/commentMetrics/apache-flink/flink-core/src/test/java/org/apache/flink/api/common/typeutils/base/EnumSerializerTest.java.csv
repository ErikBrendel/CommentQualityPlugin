commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testPublicEnum() {     testEnumSerializer(PrivateEnum.ONE, PrivateEnum.TWO, PrivateEnum.THREE). }
false;public;0;5;;@Test public void testPrivateEnum() {     testEnumSerializer(PublicEnum.FOO, PublicEnum.BAR, PublicEnum.PETER, PublicEnum.NATHANIEL, PublicEnum.EMMA, PublicEnum.PAULA). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testEmptyEnum() {     new EnumSerializer<>(EmptyEnum.class). }
false;public;0;34;;@Test public void testReconfiguration() {     // mock the previous ordering of enum constants to be BAR, PAULA, NATHANIEL     PublicEnum[] mockPreviousOrder = { PublicEnum.BAR, PublicEnum.PAULA, PublicEnum.NATHANIEL }.     // now, the actual order of FOO, BAR, PETER, NATHANIEL, EMMA, PAULA will be the "new wrong order"     EnumSerializer<PublicEnum> serializer = new EnumSerializer<>(PublicEnum.class).     // verify that the serializer is first using the "wrong order" (i.e., the initial new configuration)     assertEquals(PublicEnum.FOO.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue()).     assertEquals(PublicEnum.BAR.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue()).     assertEquals(PublicEnum.PETER.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue()).     assertEquals(PublicEnum.NATHANIEL.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue()).     assertEquals(PublicEnum.EMMA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue()).     assertEquals(PublicEnum.PAULA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue()).     // reconfigure and verify compatibility     EnumSerializer.EnumSerializerSnapshot serializerSnapshot = new EnumSerializer.EnumSerializerSnapshot(PublicEnum.class, mockPreviousOrder).     TypeSerializerSchemaCompatibility compatibility = serializerSnapshot.resolveSchemaCompatibility(serializer).     assertTrue(compatibility.isCompatibleWithReconfiguredSerializer()).     // after reconfiguration, the order should be first the original BAR, PAULA, NATHANIEL,     // followed by the "new enum constants" FOO, PETER, EMMA     PublicEnum[] expectedOrder = { PublicEnum.BAR, PublicEnum.PAULA, PublicEnum.NATHANIEL, PublicEnum.FOO, PublicEnum.PETER, PublicEnum.EMMA }.     EnumSerializer<PublicEnum> configuredSerializer = (EnumSerializer<PublicEnum>) compatibility.getReconfiguredSerializer().     int i = 0.     for (PublicEnum constant : expectedOrder) {         assertEquals(i, configuredSerializer.getValueToOrdinal().get(constant).intValue()).         i++.     }     assertTrue(Arrays.equals(expectedOrder, configuredSerializer.getValues())). }
false;public;0;28;;@Test public void testConfigurationSnapshotSerialization() throws Exception {     EnumSerializer<PublicEnum> serializer = new EnumSerializer<>(PublicEnum.class).     byte[] serializedConfig.     try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {         TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(new DataOutputViewStreamWrapper(out), serializer.snapshotConfiguration(), serializer).         serializedConfig = out.toByteArray().     }     TypeSerializerSnapshot<PublicEnum> restoredConfig.     try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {         restoredConfig = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), serializer).     }     TypeSerializerSchemaCompatibility<PublicEnum> compatResult = restoredConfig.resolveSchemaCompatibility(serializer).     assertTrue(compatResult.isCompatibleAsIs()).     assertEquals(PublicEnum.FOO.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue()).     assertEquals(PublicEnum.BAR.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue()).     assertEquals(PublicEnum.PETER.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue()).     assertEquals(PublicEnum.NATHANIEL.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue()).     assertEquals(PublicEnum.EMMA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue()).     assertEquals(PublicEnum.PAULA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue()).     assertTrue(Arrays.equals(PublicEnum.values(), serializer.getValues())). }
false;public;0;25;;@Test public void testSerializeEnumSerializer() throws Exception {     EnumSerializer<PublicEnum> serializer = new EnumSerializer<>(PublicEnum.class).     // verify original transient parameters     assertEquals(PublicEnum.FOO.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue()).     assertEquals(PublicEnum.BAR.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue()).     assertEquals(PublicEnum.PETER.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue()).     assertEquals(PublicEnum.NATHANIEL.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue()).     assertEquals(PublicEnum.EMMA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue()).     assertEquals(PublicEnum.PAULA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue()).     assertTrue(Arrays.equals(PublicEnum.values(), serializer.getValues())).     byte[] serializedSerializer = InstantiationUtil.serializeObject(serializer).     // deserialize and re-verify transient parameters     serializer = InstantiationUtil.deserializeObject(serializedSerializer, Thread.currentThread().getContextClassLoader()).     assertEquals(PublicEnum.FOO.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue()).     assertEquals(PublicEnum.BAR.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue()).     assertEquals(PublicEnum.PETER.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue()).     assertEquals(PublicEnum.NATHANIEL.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue()).     assertEquals(PublicEnum.EMMA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue()).     assertEquals(PublicEnum.PAULA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue()).     assertTrue(Arrays.equals(PublicEnum.values(), serializer.getValues())). }
false;public;0;33;;@Test public void testSerializeReconfiguredEnumSerializer() throws Exception {     // mock the previous ordering of enum constants to be BAR, PAULA, NATHANIEL     PublicEnum[] mockPreviousOrder = { PublicEnum.BAR, PublicEnum.PAULA, PublicEnum.NATHANIEL }.     // now, the actual order of FOO, BAR, PETER, NATHANIEL, EMMA, PAULA will be the "new wrong order"     EnumSerializer<PublicEnum> serializer = new EnumSerializer<>(PublicEnum.class).     // verify that the serializer is first using the "wrong order" (i.e., the initial new configuration)     assertEquals(PublicEnum.FOO.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue()).     assertEquals(PublicEnum.BAR.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue()).     assertEquals(PublicEnum.PETER.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue()).     assertEquals(PublicEnum.NATHANIEL.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue()).     assertEquals(PublicEnum.EMMA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue()).     assertEquals(PublicEnum.PAULA.ordinal(), serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue()).     // reconfigure and verify compatibility     EnumSerializer.EnumSerializerSnapshot serializerSnapshot = new EnumSerializer.EnumSerializerSnapshot(PublicEnum.class, mockPreviousOrder).     TypeSerializerSchemaCompatibility compatibility = serializerSnapshot.resolveSchemaCompatibility(serializer).     assertTrue(compatibility.isCompatibleWithReconfiguredSerializer()).     // verify that after the serializer was read, the reconfigured constant ordering is untouched     PublicEnum[] expectedOrder = { PublicEnum.BAR, PublicEnum.PAULA, PublicEnum.NATHANIEL, PublicEnum.FOO, PublicEnum.PETER, PublicEnum.EMMA }.     EnumSerializer<PublicEnum> configuredSerializer = (EnumSerializer<PublicEnum>) compatibility.getReconfiguredSerializer().     int i = 0.     for (PublicEnum constant : expectedOrder) {         assertEquals(i, configuredSerializer.getValueToOrdinal().get(constant).intValue()).         i++.     }     assertTrue(Arrays.equals(expectedOrder, configuredSerializer.getValues())). }
false;public,final;1;10;;@SafeVarargs public final <T extends Enum<T>> void testEnumSerializer(T... data) {     @SuppressWarnings("unchecked")     final Class<T> clazz = (Class<T>) data.getClass().getComponentType().     SerializerTestInstance<T> tester = new SerializerTestInstance<>(new EnumSerializer<T>(clazz), clazz, 4, data).     tester.testAll(). }
