commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testReadVersioned() throws IOException {     String payload = "test-data".     TestPostVersionedReadableWritable versionedReadableWritable = new TestPostVersionedReadableWritable(payload).     byte[] serialized.     try (ByteArrayOutputStreamWithPos out = new ByteArrayOutputStreamWithPos()) {         versionedReadableWritable.write(new DataOutputViewStreamWrapper(out)).         serialized = out.toByteArray().     }     TestPostVersionedReadableWritable restoredVersionedReadableWritable = new TestPostVersionedReadableWritable().     try (ByteArrayInputStreamWithPos in = new ByteArrayInputStreamWithPos(serialized)) {         restoredVersionedReadableWritable.read(in).     }     Assert.assertEquals(payload, restoredVersionedReadableWritable.getData()). }
false;public;0;19;;@Test public void testReadNonVersioned() throws IOException {     int preVersionedPayload = 563.     TestNonVersionedReadableWritable nonVersionedReadableWritable = new TestNonVersionedReadableWritable(preVersionedPayload).     byte[] serialized.     try (ByteArrayOutputStreamWithPos out = new ByteArrayOutputStreamWithPos()) {         nonVersionedReadableWritable.write(new DataOutputViewStreamWrapper(out)).         serialized = out.toByteArray().     }     TestPostVersionedReadableWritable restoredVersionedReadableWritable = new TestPostVersionedReadableWritable().     try (ByteArrayInputStreamWithPos in = new ByteArrayInputStreamWithPos(serialized)) {         restoredVersionedReadableWritable.read(in).     }     Assert.assertEquals(String.valueOf(preVersionedPayload), restoredVersionedReadableWritable.getData()). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     super.write(out).     out.writeUTF(data). }
false;protected;2;9;;@Override protected void read(DataInputView in, boolean wasVersioned) throws IOException {     if (wasVersioned) {         this.data = in.readUTF().     } else {         // in the previous non-versioned format, we wrote integers instead         this.data = String.valueOf(in.readInt()).     } }
false;public;0;3;;public String getData() {     return data. }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(data). }
false;public;1;4;;@Override public void read(DataInputView in) throws IOException {     this.data = in.readInt(). }
