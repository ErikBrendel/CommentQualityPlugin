commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;TestPojoField shallowCopy() {     return new TestPojoField(name, field, serializerSnapshot). }
false;public;0;22;;// ------------------------------------------------------------------------------------------------ // Tests for PojoSerializerSnapshot#restoreSerializer // ------------------------------------------------------------------------------------------------ @Test public void testRestoreSerializerWithSameFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD)).     final TypeSerializer<TestPojo> restoredSerializer = testSnapshot.restoreSerializer().     assertSame(restoredSerializer.getClass(), PojoSerializer.class).     final PojoSerializer<TestPojo> restoredPojoSerializer = (PojoSerializer<TestPojo>) restoredSerializer.     final Field[] restoredFields = restoredPojoSerializer.getFields().     assertArrayEquals(new Field[] { ID_FIELD.field, NAME_FIELD.field, HEIGHT_FIELD.field }, restoredFields).     final TypeSerializer<?>[] restoredFieldSerializers = restoredPojoSerializer.getFieldSerializers().     assertArrayEquals(new TypeSerializer[] { IntSerializer.INSTANCE, StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }, restoredFieldSerializers). }
false;public;0;22;;@Test public void testRestoreSerializerWithRemovedFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(mockRemovedField(ID_FIELD), NAME_FIELD, mockRemovedField(HEIGHT_FIELD))).     final TypeSerializer<TestPojo> restoredSerializer = testSnapshot.restoreSerializer().     assertTrue(restoredSerializer.getClass() == PojoSerializer.class).     final PojoSerializer<TestPojo> restoredPojoSerializer = (PojoSerializer<TestPojo>) restoredSerializer.     final Field[] restoredFields = restoredPojoSerializer.getFields().     assertArrayEquals(new Field[] { null, NAME_FIELD.field, null }, restoredFields).     final TypeSerializer<?>[] restoredFieldSerializers = restoredPojoSerializer.getFieldSerializers().     assertArrayEquals(new TypeSerializer[] { IntSerializer.INSTANCE, StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }, restoredFieldSerializers). }
false;public;0;18;;@Test public void testRestoreSerializerWithNewFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Collections.singletonList(HEIGHT_FIELD)).     final TypeSerializer<TestPojo> restoredSerializer = testSnapshot.restoreSerializer().     assertTrue(restoredSerializer.getClass() == PojoSerializer.class).     final PojoSerializer<TestPojo> restoredPojoSerializer = (PojoSerializer<TestPojo>) restoredSerializer.     final Field[] restoredFields = restoredPojoSerializer.getFields().     assertArrayEquals(new Field[] { HEIGHT_FIELD.field }, restoredFields).     final TypeSerializer<?>[] restoredFieldSerializers = restoredPojoSerializer.getFieldSerializers().     assertArrayEquals(new TypeSerializer[] { DoubleSerializer.INSTANCE }, restoredFieldSerializers). }
false;public;0;19;;// ------------------------------------------------------------------------------------------------ // Tests for PojoSerializerSnapshot#resolveSchemaCompatibility // ------------------------------------------------------------------------------------------------ @Test public void testResolveSchemaCompatibilityWithSameFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD)).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleAsIs()). }
false;public;0;15;;@Test public void testResolveSchemaCompatibilityWithRemovedFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(mockRemovedField(ID_FIELD), NAME_FIELD, mockRemovedField(HEIGHT_FIELD))).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Collections.singletonList(NAME_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleAfterMigration()). }
false;public;0;15;;@Test public void testResolveSchemaCompatibilityWithNewFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Collections.singletonList(HEIGHT_FIELD)).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleAfterMigration()). }
false;public;0;15;;@Test public void testResolveSchemaCompatibilityWithNewAndRemovedFields() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Collections.singletonList(mockRemovedField(ID_FIELD))).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(NAME_FIELD, HEIGHT_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleAfterMigration()). }
false;public;0;21;;@Test public void testResolveSchemaCompatibilityWithIncompatibleFieldSerializers() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(ID_FIELD, mockFieldSerializerSnapshot(NAME_FIELD, SchemaCompatibilityTestingSnapshot.thatIsIncompatibleWithTheNextSerializer()), HEIGHT_FIELD)).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(ID_FIELD, mockFieldSerializer(NAME_FIELD, new SchemaCompatibilityTestingSerializer()), HEIGHT_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isIncompatible()). }
false;public;0;20;;@Test public void testResolveSchemaCompatibilityWithCompatibleAfterMigrationFieldSerializers() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(ID_FIELD, NAME_FIELD, mockFieldSerializerSnapshot(HEIGHT_FIELD, SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterMigration()))).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(ID_FIELD, NAME_FIELD, mockFieldSerializer(HEIGHT_FIELD, new SchemaCompatibilityTestingSerializer()))).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleAfterMigration()). }
false;public;0;33;;@Test public void testResolveSchemaCompatibilityWithCompatibleWithReconfigurationFieldSerializers() {     final PojoSerializerSnapshot<TestPojo> testSnapshot = buildTestSnapshot(Arrays.asList(mockFieldSerializerSnapshot(ID_FIELD, SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterReconfiguration()), NAME_FIELD, HEIGHT_FIELD)).     final PojoSerializer<TestPojo> newPojoSerializer = buildTestNewPojoSerializer(Arrays.asList(mockFieldSerializer(ID_FIELD, new SchemaCompatibilityTestingSerializer()), NAME_FIELD, HEIGHT_FIELD)).     final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility = testSnapshot.resolveSchemaCompatibility(newPojoSerializer).     assertTrue(resultCompatibility.isCompatibleWithReconfiguredSerializer()).     final TypeSerializer<TestPojo> reconfiguredSerializer = resultCompatibility.getReconfiguredSerializer().     assertSame(reconfiguredSerializer.getClass(), PojoSerializer.class).     final PojoSerializer<TestPojo> reconfiguredPojoSerializer = (PojoSerializer<TestPojo>) reconfiguredSerializer.     final TypeSerializer<?>[] reconfiguredFieldSerializers = reconfiguredPojoSerializer.getFieldSerializers().     assertArrayEquals(new TypeSerializer[] { new SchemaCompatibilityTestingSerializer(), StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }, reconfiguredFieldSerializers). }
false;private,static;1;17;;// ------------------------------------------------------------------------------------------------ // Test utilities // ------------------------------------------------------------------------------------------------ private static PojoSerializerSnapshot<TestPojo> buildTestSnapshot(List<TestPojoField> fieldsToContainInSnapshot) {     int numFields = fieldsToContainInSnapshot.size().     ArrayList<Field> fields = new ArrayList<>(numFields).     ArrayList<TypeSerializerSnapshot<?>> fieldSerializerSnapshots = new ArrayList<>(numFields).     fieldsToContainInSnapshot.forEach(testPojoField -> {         fields.add(testPojoField.field).         fieldSerializerSnapshots.add(testPojoField.serializerSnapshot).     }).     return new PojoSerializerSnapshot<>(TestPojo.class, fields.toArray(new Field[numFields]), fieldSerializerSnapshots.toArray(new TypeSerializerSnapshot[numFields]), new LinkedHashMap<>(), new LinkedHashMap<>()). }
false;private,static;1;16;;private static PojoSerializer<TestPojo> buildTestNewPojoSerializer(List<TestPojoField> fieldsForNewPojo) {     int numFields = fieldsForNewPojo.size().     final ArrayList<Field> fields = new ArrayList<>(numFields).     final ArrayList<TypeSerializer<?>> fieldSerializers = new ArrayList<>(numFields).     fieldsForNewPojo.forEach(fieldForNewPojo -> {         fields.add(fieldForNewPojo.field).         fieldSerializers.add(fieldForNewPojo.serializer).     }).     return new PojoSerializer<>(TestPojo.class, fieldSerializers.toArray(new TypeSerializer[numFields]), fields.toArray(new Field[numFields]), new ExecutionConfig()). }
false;private,static;1;5;;private static TestPojoField mockRemovedField(TestPojoField original) {     TestPojoField copy = original.shallowCopy().     copy.field = null.     return copy. }
false;private,static;2;5;;private static TestPojoField mockFieldSerializer(TestPojoField original, TypeSerializer<?> mockSerializer) {     TestPojoField copy = original.shallowCopy().     copy.serializer = mockSerializer.     return copy. }
false;private,static;2;5;;private static TestPojoField mockFieldSerializerSnapshot(TestPojoField original, TypeSerializerSnapshot<?> mockSnapshot) {     TestPojoField copy = original.shallowCopy().     copy.serializerSnapshot = mockSnapshot.     return copy. }
