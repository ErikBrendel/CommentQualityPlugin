commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;4;;@Override public byte[] serialize(String str) throws IOException {     return str.getBytes(StandardCharsets.UTF_8). }
false;public;2;5;;@Override public String deserialize(int version, byte[] serialized) throws IOException {     assertEquals(VERSION, version).     return new String(serialized, StandardCharsets.UTF_8). }
false;public;0;37;;@Test public void testSerializationRoundTrip() throws IOException {     final SimpleVersionedSerializer<String> utfEncoder = new SimpleVersionedSerializer<String>() {          // version should occupy many bytes         private static final int VERSION = Integer.MAX_VALUE / 2.          @Override         public int getVersion() {             return VERSION.         }          @Override         public byte[] serialize(String str) throws IOException {             return str.getBytes(StandardCharsets.UTF_8).         }          @Override         public String deserialize(int version, byte[] serialized) throws IOException {             assertEquals(VERSION, version).             return new String(serialized, StandardCharsets.UTF_8).         }     }.     final String testString = "dugfakgs".     final DataOutputSerializer out = new DataOutputSerializer(32).     SimpleVersionedSerialization.writeVersionAndSerialize(utfEncoder, testString, out).     final byte[] outBytes = out.getCopyOfBuffer().     final byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(utfEncoder, testString).     assertArrayEquals(bytes, outBytes).     final DataInputDeserializer in = new DataInputDeserializer(bytes).     final String deserialized = SimpleVersionedSerialization.readVersionAndDeSerialize(utfEncoder, in).     final String deserializedFromBytes = SimpleVersionedSerialization.readVersionAndDeSerialize(utfEncoder, outBytes).     assertEquals(testString, deserialized).     assertEquals(testString, deserializedFromBytes). }
false;public;0;4;;@Override public int getVersion() {     return 42. }
false;public;1;4;;@Override public byte[] serialize(String obj) throws IOException {     return new byte[0]. }
false;public;2;6;;@Override public String deserialize(int version, byte[] serialized) throws IOException {     assertEquals(42, version).     assertEquals(0, serialized.length).     return testString. }
false;public;0;37;;@Test public void testSerializeEmpty() throws IOException {     final String testString = "beeeep!".     SimpleVersionedSerializer<String> emptySerializer = new SimpleVersionedSerializer<String>() {          @Override         public int getVersion() {             return 42.         }          @Override         public byte[] serialize(String obj) throws IOException {             return new byte[0].         }          @Override         public String deserialize(int version, byte[] serialized) throws IOException {             assertEquals(42, version).             assertEquals(0, serialized.length).             return testString.         }     }.     final DataOutputSerializer out = new DataOutputSerializer(32).     SimpleVersionedSerialization.writeVersionAndSerialize(emptySerializer, "abc", out).     final byte[] outBytes = out.getCopyOfBuffer().     final byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(emptySerializer, "abc").     assertArrayEquals(bytes, outBytes).     final DataInputDeserializer in = new DataInputDeserializer(bytes).     final String deserialized = SimpleVersionedSerialization.readVersionAndDeSerialize(emptySerializer, in).     final String deserializedFromBytes = SimpleVersionedSerialization.readVersionAndDeSerialize(emptySerializer, outBytes).     assertEquals(testString, deserialized).     assertEquals(testString, deserializedFromBytes). }
