commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@SuppressWarnings("unchecked") @Parameterized.Parameters(name = "Test Specification = {0}") public static Collection<TestSpecification<?>> testSpecifications() {     final TestSpecifications testSpecifications = new TestSpecifications(MigrationVersion.v1_6, MigrationVersion.v1_7).     testSpecifications.addWithCompatibilityMatcher(SPEC_NAME, EnumSerializer.class, EnumSerializer.EnumSerializerSnapshot.class, () -> new EnumSerializer(TestEnum.class), isCompatibleWithReconfiguredSerializer(enumSerializerWith(previousEnumValues))).     return testSpecifications.get(). }
false;protected;1;4;;@Override protected boolean matchesSafely(EnumSerializer<TestEnum> reconfiguredSerialized) {     return Arrays.equals(reconfiguredSerialized.getValues(), expectedEnumValues). }
false;public;1;6;;@Override public void describeTo(Description description) {     description.appendText("EnumSerializer with values ").appendValueList("{", ", ", "}", expectedEnumValues). }
false;private,static;1;16;;private static Matcher<? extends TypeSerializer<TestEnum>> enumSerializerWith(final TestEnum[] expectedEnumValues) {     return new TypeSafeMatcher<EnumSerializer<TestEnum>>() {          @Override         protected boolean matchesSafely(EnumSerializer<TestEnum> reconfiguredSerialized) {             return Arrays.equals(reconfiguredSerialized.getValues(), expectedEnumValues).         }          @Override         public void describeTo(Description description) {             description.appendText("EnumSerializer with values ").appendValueList("{", ", ", "}", expectedEnumValues).         }     }. }
