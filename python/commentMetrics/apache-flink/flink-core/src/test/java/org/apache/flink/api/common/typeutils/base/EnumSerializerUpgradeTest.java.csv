# id;timestamp;commentText;codeText;commentWords;codeWords
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1497962233;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_A).isRequiresMigration())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1528212859;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_A).isRequiresMigration())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1539149027;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_A).isRequiresMigration())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1539149040;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_A).isRequiresMigration())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1539149114;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_A).isRequiresMigration())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1540907751;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_A).isCompatibleAsIs())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1541451716;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_A).isCompatibleAsIs())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1550738920;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_A).isCompatibleAsIs())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkIndenticalEnums() throws Exception;1550738934;Check that identical enums don't require migration;@Test_	public void checkIndenticalEnums() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_A).isCompatibleAsIs())__	};check,that,identical,enums,don,t,require,migration;test,public,void,check,indentical,enums,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1497962233;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_B).isRequiresMigration())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1528212859;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_B).isRequiresMigration())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1539149027;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_B).isRequiresMigration())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1539149040;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_B).isRequiresMigration())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1539149114;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_B).isRequiresMigration())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1540907751;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_B).isCompatibleAsIs())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1541451716;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_B).isCompatibleAsIs())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1550738920;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_B).isCompatibleWithReconfiguredSerializer())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,true,check,compatibility,is,compatible,with,reconfigured,serializer
EnumSerializerUpgradeTest -> @Test 	public void checkAppendedField() throws Exception;1550738934;Check that appending fields to the enum does not require migration;@Test_	public void checkAppendedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_B).isCompatibleWithReconfiguredSerializer())__	};check,that,appending,fields,to,the,enum,does,not,require,migration;test,public,void,check,appended,field,throws,exception,assert,assert,true,check,compatibility,is,compatible,with,reconfigured,serializer
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1497962233;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isRequiresMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1528212859;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isRequiresMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1539149027;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isRequiresMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1539149040;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isRequiresMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1539149114;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isRequiresMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1540907751;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isIncompatible())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,incompatible
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1541451716;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isIncompatible())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,incompatible
EnumSerializerUpgradeTest -> @Test 	public void checkRemovedField() throws Exception;1550738920;Check that removing enum fields requires migration;@Test_	public void checkRemovedField() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isCompatibleAfterMigration())__	};check,that,removing,enum,fields,requires,migration;test,public,void,check,removed,field,throws,exception,assert,assert,true,check,compatibility,is,compatible,after,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1497962233;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_D).isRequiresMigration())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1528212859;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_D).isRequiresMigration())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1539149027;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_D).isRequiresMigration())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1539149040;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_D).isRequiresMigration())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1539149114;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertFalse(checkCompatibility(ENUM_A, ENUM_D).isRequiresMigration())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,false,check,compatibility,is,requires,migration
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1540907751;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_D).isCompatibleAsIs())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1541451716;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_D).isCompatibleAsIs())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1550738920;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_D).isCompatibleAsIs())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,true,check,compatibility,is,compatible,as,is
EnumSerializerUpgradeTest -> @Test 	public void checkDifferentFieldOrder() throws Exception;1550738934;Check that changing the enum field order don't require migration;@Test_	public void checkDifferentFieldOrder() throws Exception {_		Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_D).isCompatibleWithReconfiguredSerializer())__	};check,that,changing,the,enum,field,order,don,t,require,migration;test,public,void,check,different,field,order,throws,exception,assert,assert,true,check,compatibility,is,compatible,with,reconfigured,serializer
