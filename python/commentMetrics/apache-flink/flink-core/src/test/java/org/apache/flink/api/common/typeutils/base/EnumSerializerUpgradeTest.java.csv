commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Check that identical enums don't require migration  */ ;/**  * Check that identical enums don't require migration  */ @Test public void checkIndenticalEnums() throws Exception {     Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_A).isCompatibleAsIs()). }
true;public;0;4;/**  * Check that appending fields to the enum does not require migration  */ ;/**  * Check that appending fields to the enum does not require migration  */ @Test public void checkAppendedField() throws Exception {     Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_B).isCompatibleWithReconfiguredSerializer()). }
true;public;0;4;/**  * Check that removing enum fields makes the snapshot incompatible  */ ;/**  * Check that removing enum fields makes the snapshot incompatible  */ @Test(expected = IllegalStateException.class) public void removingFieldShouldBeIncompatible() throws Exception {     Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_C).isIncompatible()). }
true;public;0;4;/**  * Check that changing the enum field order don't require migration  */ ;/**  * Check that changing the enum field order don't require migration  */ @Test public void checkDifferentFieldOrder() throws Exception {     Assert.assertTrue(checkCompatibility(ENUM_A, ENUM_D).isCompatibleWithReconfiguredSerializer()). }
false;private,static;2;35;;@SuppressWarnings("unchecked") private static TypeSerializerSchemaCompatibility checkCompatibility(String enumSourceA, String enumSourceB) throws IOException, ClassNotFoundException {     ClassLoader classLoader = ClassLoaderUtils.compileAndLoadJava(temporaryFolder.newFolder(), ENUM_NAME + ".java", enumSourceA).     EnumSerializer enumSerializer = new EnumSerializer(classLoader.loadClass(ENUM_NAME)).     TypeSerializerSnapshot snapshot = enumSerializer.snapshotConfiguration().     byte[] snapshotBytes.     try (ByteArrayOutputStream outBuffer = new ByteArrayOutputStream().         DataOutputViewStreamWrapper outputViewStreamWrapper = new DataOutputViewStreamWrapper(outBuffer)) {         TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(outputViewStreamWrapper, snapshot, enumSerializer).         snapshotBytes = outBuffer.toByteArray().     }     ClassLoader classLoader2 = ClassLoaderUtils.compileAndLoadJava(temporaryFolder.newFolder(), ENUM_NAME + ".java", enumSourceB).     TypeSerializerSnapshot restoredSnapshot.     try (ByteArrayInputStream inBuffer = new ByteArrayInputStream(snapshotBytes).         DataInputViewStreamWrapper inputViewStreamWrapper = new DataInputViewStreamWrapper(inBuffer)) {         restoredSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(inputViewStreamWrapper, classLoader2, enumSerializer).     }     EnumSerializer enumSerializer2 = new EnumSerializer(classLoader2.loadClass(ENUM_NAME)).     return restoredSnapshot.resolveSchemaCompatibility(enumSerializer2). }
