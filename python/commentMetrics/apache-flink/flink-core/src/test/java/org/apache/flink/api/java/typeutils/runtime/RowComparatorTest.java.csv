commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void init() {     // TODO we cannot test null here as PojoComparator has no support for null keys     testPojo1.name = "".     testPojo2.name = "Test1".     testPojo3.name = "Test2". }
false;protected;3;10;;@Override protected void deepEquals(String message, Row should, Row is) {     int arity = should.getArity().     assertEquals(message, arity, is.getArity()).     for (int i = 0. i < arity. i++) {         Object copiedValue = should.getField(i).         Object element = is.getField(i).         assertEquals(message, element, copiedValue).     } }
false;protected;1;8;;@Override protected TypeComparator<Row> createComparator(boolean ascending) {     return typeInfo.createComparator(new int[] { 0, 1, 2, 3, 4, 5, 6 }, new boolean[] { ascending, ascending, ascending, ascending, ascending, ascending, ascending }, 0, new ExecutionConfig()). }
false;protected;0;4;;@Override protected TypeSerializer<Row> createSerializer() {     return typeInfo.createSerializer(new ExecutionConfig()). }
false;protected;0;4;;@Override protected Row[] getSortedTestData() {     return data. }
false;protected;0;4;;@Override protected boolean supportsNullKeys() {     return true. }
false;private,static;5;9;;private static Row createRow(Object f0, Object f1, Object f2, Object f3, Object f4) {     Row row = new Row(5).     row.setField(0, f0).     row.setField(1, f1).     row.setField(2, f2).     row.setField(3, f3).     row.setField(4, f4).     return row. }
false;public;1;12;;@Override public int compareTo(MyPojo o) {     if (name == null && o.name == null) {         return 0.     } else if (name == null) {         return -1.     } else if (o.name == null) {         return 1.     } else {         return name.compareTo(o.name).     } }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     MyPojo myPojo = (MyPojo) o.     return name != null ? name.equals(myPojo.name) : myPojo.name == null. }
