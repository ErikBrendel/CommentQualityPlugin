commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testExtractInputFormatType() {     try {         InputFormat<?, ?> format = new DummyFloatInputFormat().         TypeInformation<?> typeInfo = TypeExtractor.getInputFormatTypes(format).         assertEquals(BasicTypeInfo.FLOAT_TYPE_INFO, typeInfo).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;32;;@Test public void testExtractDerivedInputFormatType() {     try {         // simple type         {             InputFormat<?, ?> format = new DerivedInputFormat().             TypeInformation<?> typeInfo = TypeExtractor.getInputFormatTypes(format).             assertEquals(BasicTypeInfo.SHORT_TYPE_INFO, typeInfo).         }         // composite type         {             InputFormat<?, ?> format = new DerivedTupleInputFormat().             TypeInformation<?> typeInfo = TypeExtractor.getInputFormatTypes(format).             assertTrue(typeInfo.isTupleType()).             assertTrue(typeInfo instanceof TupleTypeInfo).             @SuppressWarnings("unchecked")             TupleTypeInfo<Tuple3<String, Short, Double>> tupleInfo = (TupleTypeInfo<Tuple3<String, Short, Double>>) typeInfo.             assertEquals(3, tupleInfo.getArity()).             assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tupleInfo.getTypeAt(0)).             assertEquals(BasicTypeInfo.SHORT_TYPE_INFO, tupleInfo.getTypeAt(1)).             assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tupleInfo.getTypeAt(2)).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;26;;@Test public void testMultiLevelDerivedInputFormatType() {     try {         // composite type         {             InputFormat<?, ?> format = new FinalRelativeInputFormat().             TypeInformation<?> typeInfo = TypeExtractor.getInputFormatTypes(format).             assertTrue(typeInfo.isTupleType()).             assertTrue(typeInfo instanceof TupleTypeInfo).             @SuppressWarnings("unchecked")             TupleTypeInfo<Tuple3<String, Integer, Double>> tupleInfo = (TupleTypeInfo<Tuple3<String, Integer, Double>>) typeInfo.             assertEquals(3, tupleInfo.getArity()).             assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tupleInfo.getTypeAt(0)).             assertEquals(BasicTypeInfo.INT_TYPE_INFO, tupleInfo.getTypeAt(1)).             assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tupleInfo.getTypeAt(2)).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;12;;@Test public void testQueryableFormatType() {     try {         InputFormat<?, ?> format = new QueryableInputFormat().         TypeInformation<?> typeInfo = TypeExtractor.getInputFormatTypes(format).         assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, typeInfo).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;1;2;;@Override public BaseStatistics getStatistics(BaseStatistics cachedStatistics) {     return null. }
false;public;1;2;;@Override public InputSplit[] createInputSplits(int minNumSplits) {     return null. }
false;public;1;2;;@Override public DefaultInputSplitAssigner getInputSplitAssigner(InputSplit[] splits) {     return null. }
false;public;1;2;;@Override public void open(InputSplit split) { }
false;public;0;2;;@Override public boolean reachedEnd() {     return false. }
false;public;1;2;;@Override public Float nextRecord(Float reuse) throws IOException {     return null. }
false;public;0;2;;@Override public void close() { }
false;public;0;2;;@Override public boolean reachedEnd() {     return false. }
false;public;1;2;;@Override public Short nextRecord(Short reuse) {     return null. }
false;public;0;2;;@Override public boolean reachedEnd() {     return false. }
false;public;1;2;;@Override public Tuple3<String, Short, Double> nextRecord(Tuple3<String, Short, Double> reuse) {     return null. }
false;public;0;2;;@Override public boolean reachedEnd() {     return false. }
false;public;1;2;;@Override public Tuple3<String, T, Double> nextRecord(Tuple3<String, T, Double> reuse) {     return null. }
false;public;1;2;;@Override public Tuple3<String, Integer, Double> nextRecord(Tuple3<String, Integer, Double> reuse) {     return null. }
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;1;2;;@Override public BaseStatistics getStatistics(BaseStatistics cachedStatistics) {     return null. }
false;public;1;2;;@Override public InputSplit[] createInputSplits(int minNumSplits) {     return null. }
false;public;1;2;;@Override public DefaultInputSplitAssigner getInputSplitAssigner(InputSplit[] splits) {     return null. }
false;public;1;2;;@Override public void open(InputSplit split) { }
false;public;0;2;;@Override public boolean reachedEnd() {     return false. }
false;public;1;2;;@Override public Float nextRecord(Float reuse) throws IOException {     return null. }
false;public;0;2;;@Override public void close() { }
false;public;0;4;;@Override public TypeInformation<Double> getProducedType() {     return BasicTypeInfo.DOUBLE_TYPE_INFO. }
