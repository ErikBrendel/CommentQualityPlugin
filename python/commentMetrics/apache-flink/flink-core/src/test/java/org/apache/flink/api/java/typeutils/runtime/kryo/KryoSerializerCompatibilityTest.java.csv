# id;timestamp;commentText;codeText;commentWords;codeWords
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1494180263;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.requiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1494658833;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1495466666;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1509723634;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1509723634;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1509723636;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1539149027;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1539149040;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerConfigSnapshotSerializationUtil.writeSerializerConfigSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerConfigSnapshotSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,config,snapshot,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,config,snapshot,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1539149114;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializerForB)__		}__		CompatibilityResult<TestClassB> compatResult = kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertTrue(compatResult.isRequiresMigration())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,for,b,compatibility,result,test,class,b,compat,result,kryo,serializer,for,b,ensure,compatibility,kryo,serializer,config,snapshot,assert,true,compat,result,is,requires,migration
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1540907751;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializerForB)__		}__		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClassB, ?> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializerForB)__		assertTrue(compatResult.isIncompatible())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,for,b,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,b,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,for,b,assert,true,compat,result,is,incompatible
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1540907751;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializerForB)__		}__		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClassB> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializerForB)__		assertTrue(compatResult.isIncompatible())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,for,b,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,b,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,for,b,assert,true,compat,result,is,incompatible
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyWithDifferentKryoType() throws Exception;1550821414;Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.;@Test_	public void testMigrationStrategyWithDifferentKryoType() throws Exception {_		KryoSerializer<TestClassA> kryoSerializerForA = new KryoSerializer<>(TestClassA.class, new ExecutionConfig())___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializerForA.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializerForA)__			serializedConfig = out.toByteArray()__		}__		KryoSerializer<TestClassB> kryoSerializerForB = new KryoSerializer<>(TestClassB.class, new ExecutionConfig())___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializerForB)__		}__		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClassB> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializerForB)__		assertTrue(compatResult.isIncompatible())__	};verifies,that,reconfiguration,result,is,incompatible,if,data,type,has,changed;test,public,void,test,migration,strategy,with,different,kryo,type,throws,exception,kryo,serializer,test,class,a,kryo,serializer,for,a,new,kryo,serializer,test,class,a,class,new,execution,config,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,for,a,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,for,a,serialized,config,out,to,byte,array,kryo,serializer,test,class,b,kryo,serializer,for,b,new,kryo,serializer,test,class,b,class,new,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,for,b,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,b,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,for,b,assert,true,compat,result,is,incompatible
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1494180263;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.requiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1494658833;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1495466666;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try(ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1509723634;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1509723634;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1509723636;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1539149027;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1539149040;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerConfigSnapshotSerializationUtil.writeSerializerConfigSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerConfigSnapshotSerializationUtil.readSerializerConfigSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader())__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,config,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,config,snapshot,serialization,util,write,serializer,config,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,config,snapshot,serialization,util,read,serializer,config,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1539149114;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializer)__		}__		_		CompatibilityResult<TestClass> compatResult = kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot)__		assertFalse(compatResult.isRequiresMigration())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,compatibility,result,test,class,compat,result,kryo,serializer,ensure,compatibility,kryo,serializer,config,snapshot,assert,false,compat,result,is,requires,migration,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1540907751;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializer)__		}__		_		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClass, ?> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializer)__		assertTrue(compatResult.isCompatibleAsIs())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,assert,true,compat,result,is,compatible,as,is,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1540907751;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializer)__		}__		_		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClass> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializer)__		assertTrue(compatResult.isCompatibleAsIs())__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,assert,true,compat,result,is,compatible,as,is,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
KryoSerializerCompatibilityTest -> @Test 	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception;1550821414;Tests that after reconfiguration, registration ids are reconfigured to_remain the same as the preceding KryoSerializer.;@Test_	public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {__		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassA.class)__		executionConfig.registerKryoType(TestClassB.class)___		KryoSerializer<TestClass> kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		int testClassId = kryoSerializer.getKryo().getRegistration(TestClass.class).getId()__		int testClassAId = kryoSerializer.getKryo().getRegistration(TestClassA.class).getId()__		int testClassBId = kryoSerializer.getKryo().getRegistration(TestClassB.class).getId()___		_		TypeSerializerSnapshot kryoSerializerConfigSnapshot = kryoSerializer.snapshotConfiguration()__		byte[] serializedConfig__		try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {_			TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_				new DataOutputViewStreamWrapper(out), kryoSerializerConfigSnapshot, kryoSerializer)__			serializedConfig = out.toByteArray()__		}__		_		executionConfig = new ExecutionConfig()__		executionConfig.registerKryoType(TestClassB.class)_ _		executionConfig.registerKryoType(TestClassA.class)___		kryoSerializer = new KryoSerializer<>(TestClass.class, executionConfig)___		_		try (ByteArrayInputStream in = new ByteArrayInputStream(serializedConfig)) {_			kryoSerializerConfigSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_				new DataInputViewStreamWrapper(in), Thread.currentThread().getContextClassLoader(), kryoSerializer)__		}__		_		@SuppressWarnings("unchecked")_		TypeSerializerSchemaCompatibility<TestClass> compatResult =_			kryoSerializerConfigSnapshot.resolveSchemaCompatibility(kryoSerializer)__		assertTrue(compatResult.isCompatibleWithReconfiguredSerializer())___		kryoSerializer = (KryoSerializer<TestClass>) compatResult.getReconfiguredSerializer()__		assertEquals(testClassId, kryoSerializer.getKryo().getRegistration(TestClass.class).getId())__		assertEquals(testClassAId, kryoSerializer.getKryo().getRegistration(TestClassA.class).getId())__		assertEquals(testClassBId, kryoSerializer.getKryo().getRegistration(TestClassB.class).getId())__	};tests,that,after,reconfiguration,registration,ids,are,reconfigured,to,remain,the,same,as,the,preceding,kryo,serializer;test,public,void,test,migration,strategy,for,different,registration,order,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,a,class,execution,config,register,kryo,type,test,class,b,class,kryo,serializer,test,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,int,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,int,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,int,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id,type,serializer,snapshot,kryo,serializer,config,snapshot,kryo,serializer,snapshot,configuration,byte,serialized,config,try,byte,array,output,stream,out,new,byte,array,output,stream,type,serializer,snapshot,serialization,util,write,serializer,snapshot,new,data,output,view,stream,wrapper,out,kryo,serializer,config,snapshot,kryo,serializer,serialized,config,out,to,byte,array,execution,config,new,execution,config,execution,config,register,kryo,type,test,class,b,class,execution,config,register,kryo,type,test,class,a,class,kryo,serializer,new,kryo,serializer,test,class,class,execution,config,try,byte,array,input,stream,in,new,byte,array,input,stream,serialized,config,kryo,serializer,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,new,data,input,view,stream,wrapper,in,thread,current,thread,get,context,class,loader,kryo,serializer,suppress,warnings,unchecked,type,serializer,schema,compatibility,test,class,compat,result,kryo,serializer,config,snapshot,resolve,schema,compatibility,kryo,serializer,assert,true,compat,result,is,compatible,with,reconfigured,serializer,kryo,serializer,kryo,serializer,test,class,compat,result,get,reconfigured,serializer,assert,equals,test,class,id,kryo,serializer,get,kryo,get,registration,test,class,class,get,id,assert,equals,test,class,aid,kryo,serializer,get,kryo,get,registration,test,class,a,class,get,id,assert,equals,test,class,bid,kryo,serializer,get,kryo,get,registration,test,class,b,class,get,id
