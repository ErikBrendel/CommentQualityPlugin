commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TypeSerializer<String[]> createSerializer() {     return new StringArraySerializer(). }
false;protected;0;4;;@Override protected Class<String[]> getTypeClass() {     return String[].class. }
false;protected;0;4;;@Override protected int getLength() {     return -1. }
false;protected;0;24;;@Override protected String[][] getTestData() {     Random rnd = new Random(874597969123412341L).     return new String[][] { new String[] { "a", "", "bcd", "jbmbmner8 jhk hj \n \t üäßß@µ", "", "non-empty" }, new String[] { "a", null, "", null, "bcd", null, "jbmbmner8 jhk hj \n \t üäßß@µ", null, "", null, "non-empty" }, new String[] { StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2) }, new String[] { StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), "", StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), null, StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), null, "", StringUtils.getRandomString(rnd, 10000, 1024 * 1024 * 2), "", null } }. }
false;public;0;5;;@Test public void arrayTypeIsMutable() {     StringArraySerializer serializer = (StringArraySerializer) createSerializer().     assertFalse(serializer.isImmutableType()). }
