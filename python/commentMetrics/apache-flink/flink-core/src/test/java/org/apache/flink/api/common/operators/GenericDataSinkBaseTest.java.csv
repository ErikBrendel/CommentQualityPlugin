commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testDataSourcePlain() {     try {         TestNonRichOutputFormat out = new TestNonRichOutputFormat().         GenericDataSinkBase<String> sink = new GenericDataSinkBase<String>(out, new UnaryOperatorInformation<String, Nothing>(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.getInfoFor(Nothing.class)), "test_sink").         sink.setInput(source).         ExecutionConfig executionConfig = new ExecutionConfig().         executionConfig.disableObjectReuse().         in.reset().         sink.executeOnCollections(asList(TestIOData.NAMES), null, executionConfig).         assertEquals(out.output, asList(TestIOData.NAMES)).         executionConfig.enableObjectReuse().         out.clear().         in.reset().         sink.executeOnCollections(asList(TestIOData.NAMES), null, executionConfig).         assertEquals(out.output, asList(TestIOData.NAMES)).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;36;;@Test public void testDataSourceWithRuntimeContext() {     try {         TestRichOutputFormat out = new TestRichOutputFormat().         GenericDataSinkBase<String> sink = new GenericDataSinkBase<String>(out, new UnaryOperatorInformation<String, Nothing>(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.getInfoFor(Nothing.class)), "test_sink").         sink.setInput(source).         ExecutionConfig executionConfig = new ExecutionConfig().         final HashMap<String, Accumulator<?, ?>> accumulatorMap = new HashMap<String, Accumulator<?, ?>>().         final HashMap<String, Future<Path>> cpTasks = new HashMap<>().         final TaskInfo taskInfo = new TaskInfo("test_sink", 1, 0, 1, 0).         executionConfig.disableObjectReuse().         in.reset().         sink.executeOnCollections(asList(TestIOData.NAMES), new RuntimeUDFContext(taskInfo, null, executionConfig, cpTasks, accumulatorMap, new UnregisteredMetricsGroup()), executionConfig).         assertEquals(out.output, asList(TestIOData.RICH_NAMES)).         executionConfig.enableObjectReuse().         out.clear().         in.reset().         sink.executeOnCollections(asList(TestIOData.NAMES), new RuntimeUDFContext(taskInfo, null, executionConfig, cpTasks, accumulatorMap, new UnregisteredMetricsGroup()), executionConfig).         assertEquals(out.output, asList(TestIOData.RICH_NAMES)).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
