commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testString() {     runTests("abc", "", StringUtils.getRandomString(new Random(289347567856686223L), 10, 100), StringUtils.getRandomString(new Random(289347567856686223L), 1000, 5000), StringUtils.getRandomString(new Random(289347567856686223L), 30000, 35000), StringUtils.getRandomString(new Random(289347567856686223L), 100 * 1024, 105 * 1024)). }
false;public;0;18;;@Test public void testSimpleTypesObjects() {     SimpleTypes a = new SimpleTypes().     SimpleTypes b = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     SimpleTypes c = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     SimpleTypes d = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     SimpleTypes e = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     SimpleTypes f = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     SimpleTypes g = new SimpleTypes(rnd.nextInt(), rnd.nextLong(), (byte) rnd.nextInt(), StringUtils.getRandomString(rnd, 10, 100), (short) rnd.nextInt(), rnd.nextDouble()).     runTests(a, b, c, d, e, f, g). }
false;public;0;10;;@Test public void testCompositeObject() {     ComplexNestedObject1 o1 = new ComplexNestedObject1(5626435).     ComplexNestedObject1 o2 = new ComplexNestedObject1(76923).     ComplexNestedObject1 o3 = new ComplexNestedObject1(-1100).     ComplexNestedObject1 o4 = new ComplexNestedObject1(0).     ComplexNestedObject1 o5 = new ComplexNestedObject1(44).     runTests(o1, o2, o3, o4, o5). }
false;public;0;9;;@Test public void testNestedObjects() {     ComplexNestedObject2 o1 = new ComplexNestedObject2(rnd).     ComplexNestedObject2 o2 = new ComplexNestedObject2().     ComplexNestedObject2 o3 = new ComplexNestedObject2(rnd).     ComplexNestedObject2 o4 = new ComplexNestedObject2(rnd).     runTests(o1, o2, o3, o4). }
false;public;0;27;;@Test public void testBeanStyleObjects() {     {         Book b1 = new Book(976243875L, "The Serialization Odyssey", 42).         Book b2 = new Book(0L, "Debugging byte streams", 1337).         Book b3 = new Book(-1L, "Low level interfaces", 0xC0FFEE).         runTests(b1, b2, b3).     }     // object with collection     {         ArrayList<String> list = new ArrayList<String>().         list.add("A").         list.add("B").         list.add("C").         list.add("D").         list.add("E").         BookAuthor b1 = new BookAuthor(976243875L, list, "Arno Nym").         ArrayList<String> list2 = new ArrayList<String>().         BookAuthor b2 = new BookAuthor(987654321L, list2, "The Saurus").         runTests(b1, b2).     } }
false;public;0;28;;@Test public void testNestedInterfaces() {     {         SimpleWithNestedInterfaces s1 = new SimpleWithNestedInterfaces("Hello", 1).         SimpleWithNestedInterfaces s2 = new SimpleWithNestedInterfaces("Ciao", 2).         SimpleWithNestedInterfaces s3 = new SimpleWithNestedInterfaces("Foo", 3).         runTests(s1, s2, s3).     }     // object with collection     {         ArrayList<String> list = new ArrayList<String>().         list.add("A").         list.add("B").         list.add("C").         list.add("D").         list.add("E").         BookAuthor b1 = new BookAuthor(976243875L, list, "Arno Nym").         ArrayList<String> list2 = new ArrayList<String>().         BookAuthor b2 = new BookAuthor(987654321L, list2, "The Saurus").         runTests(b1, b2).     } }
false;protected,final;1;12;;protected final <T> void runTests(T... instances) {     if (instances == null || instances.length == 0) {         throw new IllegalArgumentException().     }     @SuppressWarnings("unchecked")     Class<T> clazz = (Class<T>) instances[0].getClass().     TypeSerializer<T> serializer = createSerializer(clazz).     SerializerTestInstance<T> test = new SerializerTestInstance<T>(serializer, clazz, -1, instances).     test.testAll(). }
false;abstract,protected;1;1;;abstract protected <T> TypeSerializer<T> createSerializer(Class<T> type).
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     SimpleWithNestedInterfaces that = (SimpleWithNestedInterfaces) o.     if (!list.equals(that.list)) {         return false.     }     if (!map1.equals(that.map1)) {         return false.     }     return true. }
false;public;0;6;;@Override public int hashCode() {     int result = map1.hashCode().     result = 31 * result + list.hashCode().     return result. }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj.getClass() == SimpleTypes.class) {         SimpleTypes other = (SimpleTypes) obj.         return other.iVal == this.iVal && other.lVal == this.lVal && other.bVal == this.bVal && other.sVal.equals(this.sVal) && other.rVal == this.rVal && other.dVal == this.dVal.     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return String.format("(%d, %d, %d, %s, %d, %f)", iVal, lVal, bVal, sVal, rVal, dVal). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj.getClass() == ComplexNestedObject1.class) {         ComplexNestedObject1 other = (ComplexNestedObject1) obj.         return other.doubleValue == this.doubleValue && this.stringList.equals(other.stringList).     } else {         return false.     } }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj.getClass() == ComplexNestedObject2.class) {         ComplexNestedObject2 other = (ComplexNestedObject2) obj.         return other.longValue == this.longValue && this.theMap.equals(other.theMap).     } else {         return false.     } }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj.getClass() == Book.class) {         Book other = (Book) obj.         return other.bookId == this.bookId && other.authorId == this.authorId && this.title.equals(other.title).     } else {         return false.     } }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj.getClass() == BookAuthor.class) {         BookAuthor other = (BookAuthor) obj.         return other.authorName.equals(this.authorName) && other.authorId == this.authorId && other.bookTitles.equals(this.bookTitles).     } else {         return false.     } }
