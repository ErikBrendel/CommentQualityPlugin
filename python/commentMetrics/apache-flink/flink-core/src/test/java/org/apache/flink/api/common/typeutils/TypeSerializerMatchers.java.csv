commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;4;/**  * Matches {@code compatibleAsIs} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code compatibleAsIs} {@link TypeSerializerSchemaCompatibility}.  */ ;// ------------------------------------------------------------------------------------------------------------- // Matcher Factories // ------------------------------------------------------------------------------------------------------------- /**  * Matches {@code compatibleAsIs} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code compatibleAsIs} {@link TypeSerializerSchemaCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> isCompatibleAsIs() {     return propertyMatcher(TypeSerializerSchemaCompatibility::isCompatibleAsIs, "type serializer schema that is a compatible as is"). }
true;public,static;0;4;/**  * Matches {@code isIncompatible} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isIncompatible} {@link TypeSerializerSchemaCompatibility}.  */ ;/**  * Matches {@code isIncompatible} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isIncompatible} {@link TypeSerializerSchemaCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> isIncompatible() {     return propertyMatcher(TypeSerializerSchemaCompatibility::isIncompatible, "type serializer schema that is incompatible"). }
true;public,static;0;4;/**  * Matches {@code isCompatibleAfterMigration} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isCompatibleAfterMigration} {@link TypeSerializerSchemaCompatibility}.  */ ;/**  * Matches {@code isCompatibleAfterMigration} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isCompatibleAfterMigration} {@link TypeSerializerSchemaCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> isCompatibleAfterMigration() {     return propertyMatcher(TypeSerializerSchemaCompatibility::isCompatibleAfterMigration, "type serializer schema that is compatible after migration"). }
true;public,static;0;6;/**  * Matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  */ ;/**  * Matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  *  * @param <T> element type  * @return a {@code Matcher} that matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> isCompatibleWithReconfiguredSerializer() {     @SuppressWarnings("unchecked")     Matcher<TypeSerializer<T>> anything = (Matcher<TypeSerializer<T>>) (Matcher<?>) CoreMatchers.anything().     return new CompatibleAfterReconfiguration<>(anything). }
true;public,static;1;5;/**  * Matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  *  * @param reconfiguredSerializerMatcher matches the reconfigured serializer.  * @param <T>                           element type  * @return a {@code Matcher} that matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  */ ;/**  * Matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  *  * @param reconfiguredSerializerMatcher matches the reconfigured serializer.  * @param <T>                           element type  * @return a {@code Matcher} that matches {@code isCompatibleWithReconfiguredSerializer} {@link TypeSerializerSchemaCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> isCompatibleWithReconfiguredSerializer(Matcher<? extends TypeSerializer<T>> reconfiguredSerializerMatcher) {     return new CompatibleAfterReconfiguration<>(reconfiguredSerializerMatcher). }
true;public,static;1;5;/**  * Matches if the expected {@code TypeSerializerSchemaCompatibility} has the same compatibility as {@code expectedCompatibility}.  *  * @param expectedCompatibility the compatibility to match to.  * @param <T> element type.  * @return a {@code Matcher} that matches if it has the same compatibility as {@code expectedCompatibility}.  */ ;/**  * Matches if the expected {@code TypeSerializerSchemaCompatibility} has the same compatibility as {@code expectedCompatibility}.  *  * @param expectedCompatibility the compatibility to match to.  * @param <T> element type.  * @return a {@code Matcher} that matches if it has the same compatibility as {@code expectedCompatibility}.  */ public static <T> Matcher<TypeSerializerSchemaCompatibility<T>> hasSameCompatibilityAs(TypeSerializerSchemaCompatibility<T> expectedCompatibility) {     return new SchemaCompatibilitySameAs<>(expectedCompatibility). }
false;protected;1;4;;@Override protected boolean matchesSafely(T item) {     return predicate.test(item). }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText(matcherDescription). }
false;private,static;2;14;;// ------------------------------------------------------------------------------------------------------------- // Helpers // ------------------------------------------------------------------------------------------------------------- private static <T> Matcher<T> propertyMatcher(Predicate<T> predicate, String matcherDescription) {     return new TypeSafeMatcher<T>() {          @Override         protected boolean matchesSafely(T item) {             return predicate.test(item).         }          @Override         public void describeTo(Description description) {             description.appendText(matcherDescription).         }     }. }
false;protected;2;13;;@Override protected boolean matchesSafely(TypeSerializerSchemaCompatibility<T> item, Description mismatchDescription) {     if (!item.isCompatibleWithReconfiguredSerializer()) {         mismatchDescription.appendText("serializer schema is not compatible with a reconfigured serializer").         return false.     }     TypeSerializer<T> reconfiguredSerializer = item.getReconfiguredSerializer().     if (!reconfiguredSerializerMatcher.matches(reconfiguredSerializer)) {         reconfiguredSerializerMatcher.describeMismatch(reconfiguredSerializer, mismatchDescription).         return false.     }     return true. }
false;public;1;6;;@Override public void describeTo(Description description) {     description.appendText("type serializer schema that is compatible after reconfiguration,").appendText("with a reconfigured serializer matching ").appendDescriptionOf(reconfiguredSerializerMatcher). }
false;protected;1;16;;@Override protected boolean matchesSafely(TypeSerializerSchemaCompatibility<T> testResultCompatibility) {     if (expectedCompatibility.isCompatibleAsIs()) {         return testResultCompatibility.isCompatibleAsIs().     } else if (expectedCompatibility.isIncompatible()) {         return testResultCompatibility.isIncompatible().     } else if (expectedCompatibility.isCompatibleAfterMigration()) {         return testResultCompatibility.isCompatibleAfterMigration().     } else if (expectedCompatibility.isCompatibleWithReconfiguredSerializer()) {         return testResultCompatibility.isCompatibleWithReconfiguredSerializer().     }     return false. }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText("same compatibility as ").appendValue(expectedCompatibility). }
