commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.config = new Configuration().     format = new DummyFileInputFormat(). }
false;public;0;6;;@After public void setdown() throws Exception {     if (this.format != null) {         this.format.close().     } }
true;public;0;16;/**  * Test without nested directory and recursive.file.enumeration = true  */ ;/**  * Test without nested directory and recursive.file.enumeration = true  */ @Test public void testNoNestedDirectoryTrue() {     try {         String filePath = TestFileUtils.createTempFile("foo").         this.format.setFilePath(new Path(filePath)).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(1, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
true;public;0;25;/**  * Test with one nested directory and recursive.file.enumeration = true  */ ;/**  * Test with one nested directory and recursive.file.enumeration = true  */ @Test public void testOneNestedDirectoryTrue() {     try {         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir).         File nestedDir = insideNestedDir.getParentFile().         // create a file in the first-level and two files in the nested dir         TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua").         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(3, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
true;public;0;25;/**  * Test with one nested directory and recursive.file.enumeration = false  */ ;/**  * Test with one nested directory and recursive.file.enumeration = false  */ @Test public void testOneNestedDirectoryFalse() {     try {         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir).         File nestedDir = insideNestedDir.getParentFile().         // create a file in the first-level and two files in the nested dir         TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua").         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", false).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(1, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
true;public;0;28;/**  * Test with two nested directories and recursive.file.enumeration = true  */ ;/**  * Test with two nested directories and recursive.file.enumeration = true  */ @Test public void testTwoNestedDirectoriesTrue() {     try {         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         String thirdLevelDir = TestFileUtils.randomFileName().         File nestedNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir, thirdLevelDir).         File insideNestedDir = nestedNestedDir.getParentFile().         File nestedDir = insideNestedDir.getParentFile().         // create a file in the first-level, two files in the second level and one in the third level         TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua").         TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas").         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(4, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
true;public;0;30;/**  * Tests if the recursion is invoked correctly in nested directories.  */ ;/**  * Tests if the recursion is invoked correctly in nested directories.  */ @Test public void testOnlyLevel2NestedDirectories() {     try {         String rootDir = TestFileUtils.randomFileName().         String nestedDir = TestFileUtils.randomFileName().         String firstNestedNestedDir = TestFileUtils.randomFileName().         String secondNestedNestedDir = TestFileUtils.randomFileName().         File testDir = tempFolder.newFolder(rootDir).         tempFolder.newFolder(rootDir, nestedDir).         File nestedNestedDir1 = tempFolder.newFolder(rootDir, nestedDir, firstNestedNestedDir).         File nestedNestedDir2 = tempFolder.newFolder(rootDir, nestedDir, secondNestedNestedDir).         // create files in second level         TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella").         TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua").         TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas").         this.format.setFilePath(new Path(testDir.getAbsolutePath())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(4, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
true;public;0;38;/**  * Test with two nested directories and recursive.file.enumeration = true  */ ;/**  * Test with two nested directories and recursive.file.enumeration = true  */ @Test public void testTwoNestedDirectoriesWithFilteredFilesTrue() {     try {         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         String thirdLevelDir = TestFileUtils.randomFileName().         String secondLevelFilterDir = "_" + TestFileUtils.randomFileName().         String thirdLevelFilterDir = "_" + TestFileUtils.randomFileName().         File nestedNestedDirFiltered = tempFolder.newFolder(firstLevelDir, secondLevelDir, thirdLevelDir, thirdLevelFilterDir).         File nestedNestedDir = nestedNestedDirFiltered.getParentFile().         File insideNestedDir = nestedNestedDir.getParentFile().         File nestedDir = insideNestedDir.getParentFile().         File insideNestedDirFiltered = tempFolder.newFolder(firstLevelDir, secondLevelFilterDir).         File filteredFile = new File(nestedDir, "_IWillBeFiltered").         filteredFile.createNewFile().         // create a file in the first-level, two files in the second level and one in the third level         TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua").         TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas").         // create files which are filtered         TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari").         TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua").         TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas").         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         FileInputSplit[] splits = format.createInputSplits(1).         Assert.assertEquals(4, splits.length).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
false;public;0;24;;@Test public void testGetStatisticsOneFileInNestedDir() {     try {         final long SIZE = 1024 * 500.         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir).         File nestedDir = insideNestedDir.getParentFile().         // create a file in the nested dir         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), SIZE).         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         BaseStatistics stats = format.getStatistics(null).         Assert.assertEquals("The file size from the statistics is wrong.", SIZE, stats.getTotalInputSize()).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
false;public;0;43;;@Test public void testGetStatisticsMultipleNestedFiles() {     try {         final long SIZE1 = 2077.         final long SIZE2 = 31909.         final long SIZE3 = 10.         final long SIZE4 = 71.         final long TOTAL = SIZE1 + SIZE2 + SIZE3 + SIZE4.         String firstLevelDir = TestFileUtils.randomFileName().         String secondLevelDir = TestFileUtils.randomFileName().         String secondLevelDir2 = TestFileUtils.randomFileName().         File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir).         File insideNestedDir2 = tempFolder.newFolder(firstLevelDir, secondLevelDir2).         File nestedDir = insideNestedDir.getParentFile().         // create a file in the first-level and two files in the nested dir         TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), SIZE1).         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), SIZE2).         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), SIZE3).         TestFileUtils.createTempFileInDirectory(insideNestedDir2.getAbsolutePath(), SIZE4).         this.format.setFilePath(new Path(nestedDir.toURI().toString())).         this.config.setBoolean("recursive.file.enumeration", true).         format.configure(this.config).         BaseStatistics stats = format.getStatistics(null).         Assert.assertEquals("The file size from the statistics is wrong.", TOTAL, stats.getTotalInputSize()).         /* Now invalidate the cache and check again */         // accuracy of file modification times is rather low         Thread.sleep(1000).         TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), 42L).         BaseStatistics stats2 = format.getStatistics(stats).         Assert.assertNotEquals(stats2, stats).         Assert.assertEquals("The file size from the statistics is wrong.", TOTAL + 42L, stats2.getTotalInputSize()).     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail(ex.getMessage()).     } }
false;public;0;4;;@Override public boolean reachedEnd() throws IOException {     return true. }
false;public;1;4;;@Override public IntValue nextRecord(IntValue reuse) throws IOException {     return null. }
