commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;// ------------------------------------------------------------------------------------------------ // Tests for CompositeTypeSerializerUtil#constructIntermediateCompatibilityResult // ------------------------------------------------------------------------------------------------ @Test public void testCompatibleAsIsIntermediateCompatibilityResult() {     final TypeSerializerSnapshot<?>[] testSerializerSnapshots = new TypeSerializerSnapshot<?>[] { SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializer("first serializer"), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializer("second serializer") }.     final TypeSerializer<?>[] testNewSerializers = new TypeSerializer<?>[] { new SchemaCompatibilityTestingSerializer("first serializer"), new SchemaCompatibilityTestingSerializer("second serializer") }.     IntermediateCompatibilityResult<?> intermediateCompatibilityResult = CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(testNewSerializers, testSerializerSnapshots).     assertTrue(intermediateCompatibilityResult.isCompatibleAsIs()).     assertTrue(intermediateCompatibilityResult.getFinalResult().isCompatibleAsIs()).     assertArrayEquals(testNewSerializers, intermediateCompatibilityResult.getNestedSerializers()). }
false;public;0;23;;@Test public void testCompatibleWithReconfiguredSerializerIntermediateCompatibilityResult() {     final TypeSerializerSnapshot<?>[] testSerializerSnapshots = new TypeSerializerSnapshot<?>[] { SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializer("a"), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterReconfiguration("b") }.     final TypeSerializer<?>[] testNewSerializers = new TypeSerializer<?>[] { new SchemaCompatibilityTestingSerializer("a"), new SchemaCompatibilityTestingSerializer("b") }.     IntermediateCompatibilityResult<?> intermediateCompatibilityResult = CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(testNewSerializers, testSerializerSnapshots).     final TypeSerializer<?>[] expectedReconfiguredNestedSerializers = new TypeSerializer<?>[] { new SchemaCompatibilityTestingSerializer("a"), new SchemaCompatibilityTestingSerializer("b") }.     assertTrue(intermediateCompatibilityResult.isCompatibleWithReconfiguredSerializer()).     assertArrayEquals(expectedReconfiguredNestedSerializers, intermediateCompatibilityResult.getNestedSerializers()). }
false;public;0;20;;@Test public void testCompatibleAfterMigrationIntermediateCompatibilityResult() {     final TypeSerializerSnapshot<?>[] testSerializerSnapshots = new TypeSerializerSnapshot<?>[] { SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterReconfiguration("a"), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterMigration("b"), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializer("c") }.     final TypeSerializer<?>[] testNewSerializers = new TypeSerializer<?>[] { new SchemaCompatibilityTestingSerializer("a"), new SchemaCompatibilityTestingSerializer("b"), new SchemaCompatibilityTestingSerializer("c") }.     IntermediateCompatibilityResult<?> intermediateCompatibilityResult = CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(testNewSerializers, testSerializerSnapshots).     assertTrue(intermediateCompatibilityResult.isCompatibleAfterMigration()).     assertTrue(intermediateCompatibilityResult.getFinalResult().isCompatibleAfterMigration()). }
false;public;0;22;;@Test public void testIncompatibleIntermediateCompatibilityResult() {     final TypeSerializerSnapshot<?>[] testSerializerSnapshots = new TypeSerializerSnapshot<?>[] { SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializer(), SchemaCompatibilityTestingSnapshot.thatIsIncompatibleWithTheNextSerializer(), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterReconfiguration(), SchemaCompatibilityTestingSnapshot.thatIsCompatibleWithNextSerializerAfterMigration() }.     final TypeSerializer<?>[] testNewSerializers = new TypeSerializer<?>[] { new SchemaCompatibilityTestingSerializer(), new SchemaCompatibilityTestingSerializer(), new SchemaCompatibilityTestingSerializer(), new SchemaCompatibilityTestingSerializer() }.     IntermediateCompatibilityResult<?> intermediateCompatibilityResult = CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(testNewSerializers, testSerializerSnapshots).     assertTrue(intermediateCompatibilityResult.isIncompatible()).     assertTrue(intermediateCompatibilityResult.getFinalResult().isIncompatible()). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testGetFinalResultOnUndefinedReconfigureIntermediateCompatibilityResultFails() {     IntermediateCompatibilityResult<Integer> intermediateCompatibilityResult = IntermediateCompatibilityResult.undefinedReconfigureResult(new TypeSerializer[] { IntSerializer.INSTANCE }).     intermediateCompatibilityResult.getFinalResult(). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testGetNestedSerializersOnCompatibleAfterMigrationIntermediateCompatibilityResultFails() {     IntermediateCompatibilityResult<Integer> intermediateCompatibilityResult = IntermediateCompatibilityResult.definedCompatibleAfterMigrationResult().     intermediateCompatibilityResult.getNestedSerializers(). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testGetNestedSerializersOnIncompatibleIntermediateCompatibilityResultFails() {     IntermediateCompatibilityResult<Integer> intermediateCompatibilityResult = IntermediateCompatibilityResult.definedIncompatibleResult().     intermediateCompatibilityResult.getNestedSerializers(). }
