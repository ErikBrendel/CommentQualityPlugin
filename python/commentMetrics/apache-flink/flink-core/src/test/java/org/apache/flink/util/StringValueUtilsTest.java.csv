commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testToLowerCaseConverting() {     StringValue testString = new StringValue("TEST").     StringValueUtils.toLowerCase(testString).     assertEquals(new StringValue("test"), testString). }
false;public;0;6;;@Test public void testReplaceNonWordChars() {     StringValue testString = new StringValue("TEST123_@").     StringValueUtils.replaceNonWordChars(testString, '!').     assertEquals(new StringValue("TEST123_!"), testString). }
false;public;0;10;;@Test public void testTokenizerOnStringWithoutNexToken() {     StringValue testString = new StringValue("test").     StringValueUtils.WhitespaceTokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setStringToTokenize(testString).     // first token     tokenizer.next(testString).     // next token is not exist     assertFalse(tokenizer.next(testString)). }
false;public;0;7;;@Test public void testTokenizerOnStringWithNexToken() {     StringValue testString = new StringValue("test test").     StringValueUtils.WhitespaceTokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setStringToTokenize(testString).     assertTrue(tokenizer.next(testString)). }
false;public;0;7;;@Test public void testTokenizerOnStringOnlyWithDelimiter() {     StringValue testString = new StringValue("    ").     StringValueUtils.WhitespaceTokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setStringToTokenize(testString).     assertFalse(tokenizer.next(testString)). }
