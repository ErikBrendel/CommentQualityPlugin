commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testStringifyNullException() {     assertNotNull(ExceptionUtils.STRINGIFIED_NULL_EXCEPTION).     assertEquals(ExceptionUtils.STRINGIFIED_NULL_EXCEPTION, ExceptionUtils.stringifyException(null)). }
false;public;0;12;;@Test public void testJvmFatalError() {     // not all errors are fatal     assertFalse(ExceptionUtils.isJvmFatalError(new Error())).     // linkage errors are not fatal     assertFalse(ExceptionUtils.isJvmFatalError(new LinkageError())).     // some errors are fatal     assertTrue(ExceptionUtils.isJvmFatalError(new InternalError())).     assertTrue(ExceptionUtils.isJvmFatalError(new UnknownError())). }
false;public;0;11;;@Test public void testRethrowFatalError() {     // fatal error is rethrown     try {         ExceptionUtils.rethrowIfFatalError(new InternalError()).         fail().     } catch (InternalError ignored) {     }     // non-fatal error is not rethrown     ExceptionUtils.rethrowIfFatalError(new NoClassDefFoundError()). }
false;public;0;6;;@Test public void testFindThrowableByType() {     assertTrue(ExceptionUtils.findThrowable(new RuntimeException(new IllegalStateException()), IllegalStateException.class).isPresent()). }
false;public;0;7;;@Test public void testExceptionStripping() {     final FlinkException expectedException = new FlinkException("test exception").     final Throwable strippedException = ExceptionUtils.stripException(new RuntimeException(new RuntimeException(expectedException)), RuntimeException.class).     assertThat(strippedException, is(equalTo(expectedException))). }
false;public;0;7;;@Test public void testInvalidExceptionStripping() {     final FlinkException expectedException = new FlinkException(new RuntimeException(new FlinkException("inner exception"))).     final Throwable strippedException = ExceptionUtils.stripException(expectedException, RuntimeException.class).     assertThat(strippedException, is(equalTo(expectedException))). }
