commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;43;;@SuppressWarnings("unchecked") @Parameterized.Parameters(name = "Test Specification = {0}") public static Collection<Object[]> testSpecifications() {     List<Object[]> specs = new ArrayList<>().     add(specs, "kryo-type-serializer-empty-config", () -> new KryoSerializer<>(Animal.class, new ExecutionConfig())).     add(specs, "kryo-type-serializer-empty-config", () -> {         ExecutionConfig executionConfig = new ExecutionConfig().         executionConfig.registerKryoType(DummyClassOne.class).         executionConfig.registerTypeWithKryoSerializer(DummyClassTwo.class, StringSerializer.class).         return new KryoSerializer<>(Animal.class, executionConfig).     }, COMPATIBLE_WITH_RECONFIGURED).     add(specs, "kryo-type-serializer", () -> {         ExecutionConfig executionConfig = new ExecutionConfig().         executionConfig.registerKryoType(DummyClassOne.class).         executionConfig.registerKryoType(Dog.class).         executionConfig.registerKryoType(DummyClassTwo.class).         executionConfig.registerKryoType(Cat.class).         executionConfig.registerKryoType(Parrot.class).         return new KryoSerializer<>(Animal.class, executionConfig).     }, COMPATIBLE_WITH_RECONFIGURED).     add(specs, "kryo-type-serializer-custom", () -> {         ExecutionConfig executionConfig = new ExecutionConfig().         executionConfig.registerKryoType(DummyClassOne.class).         executionConfig.registerTypeWithKryoSerializer(Dog.class, DogV2KryoSerializer.class).         executionConfig.registerKryoType(DummyClassTwo.class).         executionConfig.registerKryoType(Cat.class).         executionConfig.registerTypeWithKryoSerializer(Parrot.class, ParrotKryoSerializer.class).         return new KryoSerializer<>(Animal.class, executionConfig).     }, COMPATIBLE_WITH_RECONFIGURED).     return specs. }
false;private,static;3;3;;private static void add(List<Object[]> all, String name, Supplier<TypeSerializer<Animal>> supplier) {     add(all, name, supplier, compatibleAsIs()). }
false;private,static;4;25;;private static void add(List<Object[]> all, String name, Supplier<TypeSerializer<Animal>> supplier, TypeSerializerSchemaCompatibility<Animal> expected) {     TestSpecification<Animal> flink16 = TestSpecification.<Animal>builder(MigrationVersion.v1_6 + " " + name, KryoSerializer.class, KryoSerializerSnapshot.class, MigrationVersion.v1_6).withNewSerializerProvider(supplier, expected).withSnapshotDataLocation("flink-1.6-" + name + "-snapshot").withTestData("flink-1.6-" + name + "-data", 2).     TestSpecification<Animal> flink17 = TestSpecification.<Animal>builder(MigrationVersion.v1_7 + " " + name, KryoSerializer.class, KryoSerializerSnapshot.class, MigrationVersion.v1_7).withNewSerializerProvider(supplier, expected).withSnapshotDataLocation("flink-1.7-" + name + "-snapshot").withTestData("flink-1.7-" + name + "-data", 2).     all.add(new Object[] { flink16 }).     all.add(new Object[] { flink17 }). }
