# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1548860007;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550167822;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550738934;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550738934;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 			String name, 			Class<? extends TypeSerializer> serializerClass, 			Class<? extends TypeSerializerSnapshot> snapshotClass, 			Supplier<? extends TypeSerializer<T>> serializerProvider, 			Matcher<T> elementMatcher);1550821417;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param elementMatcher an {@code hamcrest} matcher to match test data.__@param <T> type of the test data.;public <T> void add(_			String name,_			Class<? extends TypeSerializer> serializerClass,_			Class<? extends TypeSerializerSnapshot> snapshotClass,_			Supplier<? extends TypeSerializer<T>> serializerProvider,_			Matcher<T> elementMatcher)  {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_					.withTestDataMatcher(elementMatcher)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,element,matcher,an,code,hamcrest,matcher,to,match,test,data,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,t,element,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name,with,test,data,matcher,element,matcher
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1547725996;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1548860007;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550167822;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550738934;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550738934;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider);1550821417;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_						.withNewSerializerProvider(serializerProvider)_						.withSnapshotDataLocation(_							String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_						.withTestData(_							String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_							DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void addWithCompatibilityMatcher( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher);1550738934;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param <T> type of the test data.;public <T> void addWithCompatibilityMatcher(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_						TestSpecification.<T>builder(_								getSpecNameForVersion(name, testVersion),_								serializerClass,_								snapshotClass,_								testVersion)_								.withNewSerializerProvider(serializerProvider)_								.withSchemaCompatibilityMatcher(schemaCompatibilityMatcher)_								.withSnapshotDataLocation(_										String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_								.withTestData(_										String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_										DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,t,type,of,the,test,data;public,t,void,add,with,compatibility,matcher,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,type,serializer,schema,compatibility,t,schema,compatibility,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,schema,compatibility,matcher,schema,compatibility,matcher,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void addWithCompatibilityMatcher( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param <T> type of the test data.;public <T> void addWithCompatibilityMatcher(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_						TestSpecification.<T>builder(_								getSpecNameForVersion(name, testVersion),_								serializerClass,_								snapshotClass,_								testVersion)_								.withNewSerializerProvider(serializerProvider)_								.withSchemaCompatibilityMatcher(schemaCompatibilityMatcher)_								.withSnapshotDataLocation(_										String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_								.withTestData(_										String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_										DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,t,type,of,the,test,data;public,t,void,add,with,compatibility,matcher,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,type,serializer,schema,compatibility,t,schema,compatibility,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,schema,compatibility,matcher,schema,compatibility,matcher,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void addWithCompatibilityMatcher( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher);1550821415;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param <T> type of the test data.;public <T> void addWithCompatibilityMatcher(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_						TestSpecification.<T>builder(_								getSpecNameForVersion(name, testVersion),_								serializerClass,_								snapshotClass,_								testVersion)_								.withNewSerializerProvider(serializerProvider)_								.withSchemaCompatibilityMatcher(schemaCompatibilityMatcher)_								.withSnapshotDataLocation(_										String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_								.withTestData(_										String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_										DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,t,type,of,the,test,data;public,t,void,add,with,compatibility,matcher,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,type,serializer,schema,compatibility,t,schema,compatibility,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,schema,compatibility,matcher,schema,compatibility,matcher,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void addWithCompatibilityMatcher( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher);1550821417;Adds a test specification to be tested for all specified test versions.__<p>This method adds the specification with pre-defined snapshot and data filenames,_with the format "flink-&lt_testVersion&gt_-&lt_specName&gt_-&lt_data/snapshot&gt_",_and each specification's test data count is assumed to always be 10.__@param <T> type of the test data.;public <T> void addWithCompatibilityMatcher(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				Matcher<TypeSerializerSchemaCompatibility<T>> schemaCompatibilityMatcher) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_						TestSpecification.<T>builder(_								getSpecNameForVersion(name, testVersion),_								serializerClass,_								snapshotClass,_								testVersion)_								.withNewSerializerProvider(serializerProvider)_								.withSchemaCompatibilityMatcher(schemaCompatibilityMatcher)_								.withSnapshotDataLocation(_										String.format(DEFAULT_SNAPSHOT_FILENAME_FORMAT, testVersion, name))_								.withTestData(_										String.format(DEFAULT_TEST_DATA_FILENAME_FORMAT, testVersion, name),_										DEFAULT_TEST_DATA_COUNT)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,p,this,method,adds,the,specification,with,pre,defined,snapshot,and,data,filenames,with,the,format,flink,lt,test,version,gt,lt,spec,name,gt,lt,data,snapshot,gt,and,each,specification,s,test,data,count,is,assumed,to,always,be,10,param,t,type,of,the,test,data;public,t,void,add,with,compatibility,matcher,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,matcher,type,serializer,schema,compatibility,t,schema,compatibility,matcher,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,schema,compatibility,matcher,schema,compatibility,matcher,with,snapshot,data,location,string,format,test,version,name,with,test,data,string,format,test,version,name
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1547725996;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1548860007;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550167822;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550738934;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550738934;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550821415;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550821415;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
TypeSerializerSnapshotMigrationTestBase -> TestSpecifications -> public <T> void add( 				String name, 				Class<? extends TypeSerializer> serializerClass, 				Class<? extends TypeSerializerSnapshot> snapshotClass, 				Supplier<? extends TypeSerializer<T>> serializerProvider, 				TestResourceFilenameSupplier testSnapshotFilenameProvider, 				TestResourceFilenameSupplier testDataFilenameProvider, 				int testDataCount);1550821417;Adds a test specification to be tested for all specified test versions.__@param name test specification name._@param serializerClass class of the current serializer._@param snapshotClass class of the current serializer snapshot class._@param serializerProvider provider for an instance of the current serializer._@param testSnapshotFilenameProvider provider for the filename of the test snapshot._@param testDataFilenameProvider provider for the filename of the test data._@param testDataCount expected number of records to be read in the test data files.__@param <T> type of the test data.;public <T> void add(_				String name,_				Class<? extends TypeSerializer> serializerClass,_				Class<? extends TypeSerializerSnapshot> snapshotClass,_				Supplier<? extends TypeSerializer<T>> serializerProvider,_				TestResourceFilenameSupplier testSnapshotFilenameProvider,_				TestResourceFilenameSupplier testDataFilenameProvider,_				int testDataCount) {_			for (MigrationVersion testVersion : testVersions) {_				testSpecifications.add(_					TestSpecification.<T>builder(_						getSpecNameForVersion(name, testVersion),_						serializerClass,_						snapshotClass,_						testVersion)_					.withNewSerializerProvider(serializerProvider)_					.withSnapshotDataLocation(testSnapshotFilenameProvider.get(testVersion))_					.withTestData(testDataFilenameProvider.get(testVersion), testDataCount)_				)__			}_		};adds,a,test,specification,to,be,tested,for,all,specified,test,versions,param,name,test,specification,name,param,serializer,class,class,of,the,current,serializer,param,snapshot,class,class,of,the,current,serializer,snapshot,class,param,serializer,provider,provider,for,an,instance,of,the,current,serializer,param,test,snapshot,filename,provider,provider,for,the,filename,of,the,test,snapshot,param,test,data,filename,provider,provider,for,the,filename,of,the,test,data,param,test,data,count,expected,number,of,records,to,be,read,in,the,test,data,files,param,t,type,of,the,test,data;public,t,void,add,string,name,class,extends,type,serializer,serializer,class,class,extends,type,serializer,snapshot,snapshot,class,supplier,extends,type,serializer,t,serializer,provider,test,resource,filename,supplier,test,snapshot,filename,provider,test,resource,filename,supplier,test,data,filename,provider,int,test,data,count,for,migration,version,test,version,test,versions,test,specifications,add,test,specification,t,builder,get,spec,name,for,version,name,test,version,serializer,class,snapshot,class,test,version,with,new,serializer,provider,serializer,provider,with,snapshot,data,location,test,snapshot,filename,provider,get,test,version,with,test,data,test,data,filename,provider,get,test,version,test,data,count
