commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testOfClass() {     assertEquals(BasicTypeInfo.STRING_TYPE_INFO, TypeInformation.of(String.class)). }
false;public;0;11;;@Test public void testOfGenericClassForFlink() {     try {         TypeInformation.of(Tuple3.class).         fail("should fail with an exception").     } catch (FlinkRuntimeException e) {         // check that the error message mentions the TypeHint         assertNotEquals(-1, e.getMessage().indexOf("TypeHint")).     } }
false;public;0;4;;@Test public void testOfGenericClassForGenericType() {     assertEquals(new GenericTypeInfo<>(List.class), TypeInformation.of(List.class)). }
false;public;0;10;;@Test public void testOfTypeHint() {     assertEquals(BasicTypeInfo.STRING_TYPE_INFO, TypeInformation.of(String.class)).     assertEquals(BasicTypeInfo.STRING_TYPE_INFO, TypeInformation.of(new TypeHint<String>() {     })).     TypeInformation<Tuple3<String, Double, Boolean>> tupleInfo = new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.DOUBLE_TYPE_INFO, BasicTypeInfo.BOOLEAN_TYPE_INFO).     assertEquals(tupleInfo, TypeInformation.of(new TypeHint<Tuple3<String, Double, Boolean>>() {     })). }
