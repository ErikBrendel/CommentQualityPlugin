commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testReadSameVersion() throws Exception {     String payload = "test".     TestWriteable testWriteable = new TestWriteable(1, payload).     byte[] serialized.     try (ByteArrayOutputStreamWithPos out = new ByteArrayOutputStreamWithPos()) {         testWriteable.write(new DataOutputViewStreamWrapper(out)).         serialized = out.toByteArray().     }     testWriteable = new TestWriteable(1).     try (ByteArrayInputStreamWithPos in = new ByteArrayInputStreamWithPos(serialized)) {         testWriteable.read(new DataInputViewStreamWrapper(in)).     }     Assert.assertEquals(payload, testWriteable.getData()). }
false;public;0;4;;@Override public int[] getCompatibleVersions() {     return new int[] { 1, 2 }. }
false;public;0;24;;@Test public void testReadCompatibleVersion() throws Exception {     String payload = "test".     TestWriteable testWriteable = new TestWriteable(1, payload).     byte[] serialized.     try (ByteArrayOutputStreamWithPos out = new ByteArrayOutputStreamWithPos()) {         testWriteable.write(new DataOutputViewStreamWrapper(out)).         serialized = out.toByteArray().     }     testWriteable = new TestWriteable(2) {          @Override         public int[] getCompatibleVersions() {             return new int[] { 1, 2 }.         }     }.     try (ByteArrayInputStreamWithPos in = new ByteArrayInputStreamWithPos(serialized)) {         testWriteable.read(new DataInputViewStreamWrapper(in)).     }     Assert.assertEquals(payload, testWriteable.getData()). }
false;public;0;22;;@Test public void testReadMismatchVersion() throws Exception {     String payload = "test".     TestWriteable testWriteable = new TestWriteable(1, payload).     byte[] serialized.     try (ByteArrayOutputStreamWithPos out = new ByteArrayOutputStreamWithPos()) {         testWriteable.write(new DataOutputViewStreamWrapper(out)).         serialized = out.toByteArray().     }     testWriteable = new TestWriteable(2).     try (ByteArrayInputStreamWithPos in = new ByteArrayInputStreamWithPos(serialized)) {         testWriteable.read(new DataInputViewStreamWrapper(in)).         Assert.fail("Version mismatch expected.").     } catch (VersionMismatchException ignored) {     }     Assert.assertEquals(null, testWriteable.getData()). }
false;public;0;4;;@Override public int getVersion() {     return version. }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     super.write(out).     out.writeUTF(data). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     super.read(in).     this.data = in.readUTF(). }
false;public;0;3;;public String getData() {     return data. }
