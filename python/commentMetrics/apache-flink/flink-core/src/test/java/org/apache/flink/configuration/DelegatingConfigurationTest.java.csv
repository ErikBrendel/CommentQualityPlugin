# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatingConfigurationTest -> @Test 	public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException;1469545521;http://stackoverflow.com/questions/22225663/checking-in-a-unit-test-whether-all-methods-are-delegated;@Test_	public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {__		Comparator<Method> methodComparator = new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				String o1Str = o1.getName() + typeParamToString(o1.getParameterTypes())__				String o2Str = o2.getName() + typeParamToString(o2.getParameterTypes())__				return o1Str.compareTo( o2Str )_ _			}__			private String typeParamToString(Class<?>[] classes) {_				String str = ""__				for(Object t : classes) {_					str += t.toString()__				}_				return str__			}_		}__		_		_		Method[] confMethods = Configuration.class.getDeclaredMethods()__		Method[] delegateMethods = DelegatingConfiguration.class.getDeclaredMethods()__		Arrays.sort(confMethods, methodComparator)__		Arrays.sort(delegateMethods, methodComparator)__		match : for (Method configurationMethod : confMethods) {_			boolean hasMethod = false__			if(!Modifier.isPublic(configurationMethod.getModifiers()) ) {_				continue__			}_			_			mismatch: for (Method wrapperMethod : delegateMethods) {_				if (configurationMethod.getName().equals(wrapperMethod.getName())) {_					_					_					Class<?>[] wrapperMethodParams = wrapperMethod.getParameterTypes()__					Class<?>[] configMethodParams = configurationMethod.getParameterTypes()__					if(wrapperMethodParams.length != configMethodParams.length) {_						System.err.println("Length")__						break mismatch__					}_					for(int i = 0_ i < wrapperMethodParams.length_ i++) {_						if(wrapperMethodParams[i] != configMethodParams[i]) {_							break mismatch__						}_					}_					hasMethod = true__					break match__				}_			}_			assertTrue("Foo method '" + configurationMethod.getName() + "' has not been wrapped correctly in DelegatingConfiguration wrapper", hasMethod)__		}_	};http,stackoverflow,com,questions,22225663,checking,in,a,unit,test,whether,all,methods,are,delegated;test,public,void,test,if,delegates,implement,all,methods,throws,illegal,access,exception,illegal,argument,exception,invocation,target,exception,comparator,method,method,comparator,new,comparator,method,override,public,int,compare,method,o1,method,o2,string,o1str,o1,get,name,type,param,to,string,o1,get,parameter,types,string,o2str,o2,get,name,type,param,to,string,o2,get,parameter,types,return,o1str,compare,to,o2str,private,string,type,param,to,string,class,classes,string,str,for,object,t,classes,str,t,to,string,return,str,method,conf,methods,configuration,class,get,declared,methods,method,delegate,methods,delegating,configuration,class,get,declared,methods,arrays,sort,conf,methods,method,comparator,arrays,sort,delegate,methods,method,comparator,match,for,method,configuration,method,conf,methods,boolean,has,method,false,if,modifier,is,public,configuration,method,get,modifiers,continue,mismatch,for,method,wrapper,method,delegate,methods,if,configuration,method,get,name,equals,wrapper,method,get,name,class,wrapper,method,params,wrapper,method,get,parameter,types,class,config,method,params,configuration,method,get,parameter,types,if,wrapper,method,params,length,config,method,params,length,system,err,println,length,break,mismatch,for,int,i,0,i,wrapper,method,params,length,i,if,wrapper,method,params,i,config,method,params,i,break,mismatch,has,method,true,break,match,assert,true,foo,method,configuration,method,get,name,has,not,been,wrapped,correctly,in,delegating,configuration,wrapper,has,method
DelegatingConfigurationTest -> @Test 	public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException;1471343982;http://stackoverflow.com/questions/22225663/checking-in-a-unit-test-whether-all-methods-are-delegated;@Test_	public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {__		Comparator<Method> methodComparator = new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				String o1Str = o1.getName() + typeParamToString(o1.getParameterTypes())__				String o2Str = o2.getName() + typeParamToString(o2.getParameterTypes())__				return o1Str.compareTo( o2Str )_ _			}__			private String typeParamToString(Class<?>[] classes) {_				String str = ""__				for(Object t : classes) {_					str += t.toString()__				}_				return str__			}_		}__		_		_		Method[] confMethods = Configuration.class.getDeclaredMethods()__		Method[] delegateMethods = DelegatingConfiguration.class.getDeclaredMethods()__		Arrays.sort(confMethods, methodComparator)__		Arrays.sort(delegateMethods, methodComparator)__		match : for (Method configurationMethod : confMethods) {_			boolean hasMethod = false__			if(!Modifier.isPublic(configurationMethod.getModifiers()) ) {_				continue__			}_			_			mismatch: for (Method wrapperMethod : delegateMethods) {_				if (configurationMethod.getName().equals(wrapperMethod.getName())) {_					_					_					Class<?>[] wrapperMethodParams = wrapperMethod.getParameterTypes()__					Class<?>[] configMethodParams = configurationMethod.getParameterTypes()__					if(wrapperMethodParams.length != configMethodParams.length) {_						System.err.println("Length")__						break mismatch__					}_					for(int i = 0_ i < wrapperMethodParams.length_ i++) {_						if(wrapperMethodParams[i] != configMethodParams[i]) {_							break mismatch__						}_					}_					hasMethod = true__					break match__				}_			}_			assertTrue("Foo method '" + configurationMethod.getName() + "' has not been wrapped correctly in DelegatingConfiguration wrapper", hasMethod)__		}_	};http,stackoverflow,com,questions,22225663,checking,in,a,unit,test,whether,all,methods,are,delegated;test,public,void,test,if,delegates,implement,all,methods,throws,illegal,access,exception,illegal,argument,exception,invocation,target,exception,comparator,method,method,comparator,new,comparator,method,override,public,int,compare,method,o1,method,o2,string,o1str,o1,get,name,type,param,to,string,o1,get,parameter,types,string,o2str,o2,get,name,type,param,to,string,o2,get,parameter,types,return,o1str,compare,to,o2str,private,string,type,param,to,string,class,classes,string,str,for,object,t,classes,str,t,to,string,return,str,method,conf,methods,configuration,class,get,declared,methods,method,delegate,methods,delegating,configuration,class,get,declared,methods,arrays,sort,conf,methods,method,comparator,arrays,sort,delegate,methods,method,comparator,match,for,method,configuration,method,conf,methods,boolean,has,method,false,if,modifier,is,public,configuration,method,get,modifiers,continue,mismatch,for,method,wrapper,method,delegate,methods,if,configuration,method,get,name,equals,wrapper,method,get,name,class,wrapper,method,params,wrapper,method,get,parameter,types,class,config,method,params,configuration,method,get,parameter,types,if,wrapper,method,params,length,config,method,params,length,system,err,println,length,break,mismatch,for,int,i,0,i,wrapper,method,params,length,i,if,wrapper,method,params,i,config,method,params,i,break,mismatch,has,method,true,break,match,assert,true,foo,method,configuration,method,get,name,has,not,been,wrapped,correctly,in,delegating,configuration,wrapper,has,method
