commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {     // For each method in the Configuration class...     Method[] confMethods = Configuration.class.getDeclaredMethods().     Method[] delegateMethods = DelegatingConfiguration.class.getDeclaredMethods().     for (Method configurationMethod : confMethods) {         if (!Modifier.isPublic(configurationMethod.getModifiers())) {             continue.         }         boolean hasMethod = false.         // Find matching method in wrapper class and call it         lookForWrapper: for (Method wrapperMethod : delegateMethods) {             if (configurationMethod.getName().equals(wrapperMethod.getName())) {                 // Get parameters for method                 Class<?>[] wrapperMethodParams = wrapperMethod.getParameterTypes().                 Class<?>[] configMethodParams = configurationMethod.getParameterTypes().                 if (wrapperMethodParams.length != configMethodParams.length) {                     continue.                 }                 for (int i = 0. i < wrapperMethodParams.length. i++) {                     if (wrapperMethodParams[i] != configMethodParams[i]) {                         continue lookForWrapper.                     }                 }                 hasMethod = true.                 break.             }         }         assertTrue("Configuration method '" + configurationMethod.getName() + "' has not been wrapped correctly in DelegatingConfiguration wrapper", hasMethod).     } }
false;public;0;12;;@Test public void testDelegationConfigurationWithNullPrefix() {     Configuration backingConf = new Configuration().     backingConf.setValueInternal("test-key", "value").     DelegatingConfiguration configuration = new DelegatingConfiguration(backingConf, null).     Set<String> keySet = configuration.keySet().     assertEquals(keySet, backingConf.keySet()). }
false;public;0;28;;@Test public void testDelegationConfigurationWithPrefix() {     String prefix = "pref-".     String expectedKey = "key".     /* 		 * Key matches the prefix 		 */     Configuration backingConf = new Configuration().     backingConf.setValueInternal(prefix + expectedKey, "value").     DelegatingConfiguration configuration = new DelegatingConfiguration(backingConf, prefix).     Set<String> keySet = configuration.keySet().     assertEquals(keySet.size(), 1).     assertEquals(keySet.iterator().next(), expectedKey).     /* 		 * Key does not match the prefix 		 */     backingConf = new Configuration().     backingConf.setValueInternal("test-key", "value").     configuration = new DelegatingConfiguration(backingConf, prefix).     keySet = configuration.keySet().     assertTrue(keySet.isEmpty()). }
