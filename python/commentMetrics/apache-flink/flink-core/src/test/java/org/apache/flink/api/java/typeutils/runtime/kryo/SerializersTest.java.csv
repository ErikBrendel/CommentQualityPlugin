commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testTypeRegistration() {     ExecutionConfig conf = new ExecutionConfig().     Serializers.recursivelyRegisterType(ClassWithNested.class, conf, new HashSet<Class<?>>()).     // we create Kryo from another type.     KryoSerializer<String> kryo = new KryoSerializer<>(String.class, conf).     Assert.assertTrue(kryo.getKryo().getRegistration(FromNested.class).getId() > 0).     Assert.assertTrue(kryo.getKryo().getRegistration(ClassWithNested.class).getId() > 0).     Assert.assertTrue(kryo.getKryo().getRegistration(Path.class).getId() > 0).     // check if the generic type from one field is also registered (its very likely that     // generic types are also used as fields somewhere.     Assert.assertTrue(kryo.getKryo().getRegistration(FromGeneric1.class).getId() > 0).     Assert.assertTrue(kryo.getKryo().getRegistration(FromGeneric2.class).getId() > 0).     Assert.assertTrue(kryo.getKryo().getRegistration(Node.class).getId() > 0).     // register again and make sure classes are still registered     ExecutionConfig conf2 = new ExecutionConfig().     Serializers.recursivelyRegisterType(ClassWithNested.class, conf2, new HashSet<Class<?>>()).     KryoSerializer<String> kryo2 = new KryoSerializer<>(String.class, conf).     assertTrue(kryo2.getKryo().getRegistration(FromNested.class).getId() > 0). }
false;public;0;17;;@Test public void testTypeRegistrationFromTypeInfo() {     ExecutionConfig conf = new ExecutionConfig().     Serializers.recursivelyRegisterType(new GenericTypeInfo<>(ClassWithNested.class), conf, new HashSet<Class<?>>()).     // we create Kryo from another type.     KryoSerializer<String> kryo = new KryoSerializer<>(String.class, conf).     assertTrue(kryo.getKryo().getRegistration(FromNested.class).getId() > 0).     assertTrue(kryo.getKryo().getRegistration(ClassWithNested.class).getId() > 0).     assertTrue(kryo.getKryo().getRegistration(Path.class).getId() > 0).     // check if the generic type from one field is also registered (its very likely that     // generic types are also used as fields somewhere.     assertTrue(kryo.getKryo().getRegistration(FromGeneric1.class).getId() > 0).     assertTrue(kryo.getKryo().getRegistration(FromGeneric2.class).getId() > 0).     assertTrue(kryo.getKryo().getRegistration(Node.class).getId() > 0). }
