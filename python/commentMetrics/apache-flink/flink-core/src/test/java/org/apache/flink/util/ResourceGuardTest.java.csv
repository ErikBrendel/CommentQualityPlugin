commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testClose() {     ResourceGuard resourceGuard = new ResourceGuard().     Assert.assertFalse(resourceGuard.isClosed()).     resourceGuard.close().     Assert.assertTrue(resourceGuard.isClosed()).     try {         resourceGuard.acquireResource().         Assert.fail().     } catch (IOException ignore) {     } }
false;public;0;10;;@Test public void testAcquireReleaseClose() throws IOException {     ResourceGuard resourceGuard = new ResourceGuard().     ResourceGuard.Lease lease = resourceGuard.acquireResource().     Assert.assertEquals(1, resourceGuard.getLeaseCount()).     lease.close().     Assert.assertEquals(0, resourceGuard.getLeaseCount()).     resourceGuard.close().     Assert.assertTrue(resourceGuard.isClosed()). }
false;public;0;6;;@Override public void run() {     // this line should block until all acquires are matched by releases.     resourceGuard.close().     checker.set(false). }
false;public;0;37;;@Test public void testCloseBlockIfAcquired() throws Exception {     ResourceGuard resourceGuard = new ResourceGuard().     ResourceGuard.Lease lease = resourceGuard.acquireResource().     AtomicBoolean checker = new AtomicBoolean(true).     Thread closerThread = new Thread() {          @Override         public void run() {             // this line should block until all acquires are matched by releases.             resourceGuard.close().             checker.set(false).         }     }.     closerThread.start().     // we wait until the close()-call in the other thread happened.     while (!resourceGuard.isClosed()) {         Thread.yield().     }     // validate that the close()-call is still blocked.     Assert.assertTrue(checker.get()).     // validate that the closed-status is already effective.     try {         resourceGuard.acquireResource().         Assert.fail("Resource guard is expected to be already closed.").     } catch (IOException ignore) {     }     // this matches the first acquire and will unblock the close()-call in the other thread.     lease.close().     closerThread.join(60_000).     Assert.assertFalse(checker.get()). }
false;public;0;6;;@Override public void run() {     // this line should block until all acquires are matched by releases.     resourceGuard.close().     checker.set(false). }
false;public;0;36;;@Test public void testInterruptHandledCorrectly() throws Exception {     ResourceGuard resourceGuard = new ResourceGuard().     ResourceGuard.Lease lease = resourceGuard.acquireResource().     AtomicBoolean checker = new AtomicBoolean(true).     Thread closerThread = new Thread() {          @Override         public void run() {             // this line should block until all acquires are matched by releases.             resourceGuard.close().             checker.set(false).         }     }.     closerThread.start().     // we wait until the close()-call in the other thread happened.     while (!resourceGuard.isClosed()) {         Thread.yield().     }     // attempt to unblock the resource guard via interrupt.     closerThread.interrupt().     // wait some time.     closerThread.join(100).     // check that unblock through interrupting failed.     Assert.assertTrue(checker.get()).     // proper unblocking by closing the lease.     lease.close().     closerThread.join(60_000).     Assert.assertFalse(checker.get()). }
false;public;0;20;;@Test public void testLeaseCloseIsIdempotent() throws Exception {     ResourceGuard resourceGuard = new ResourceGuard().     ResourceGuard.Lease lease1 = resourceGuard.acquireResource().     ResourceGuard.Lease lease2 = resourceGuard.acquireResource().     Assert.assertEquals(2, resourceGuard.getLeaseCount()).     lease1.close().     Assert.assertEquals(1, resourceGuard.getLeaseCount()).     lease1.close().     Assert.assertEquals(1, resourceGuard.getLeaseCount()).     lease2.close().     Assert.assertEquals(0, resourceGuard.getLeaseCount()).     ResourceGuard.Lease lease3 = resourceGuard.acquireResource().     Assert.assertEquals(1, resourceGuard.getLeaseCount()).     lease2.close().     Assert.assertEquals(1, resourceGuard.getLeaseCount()).     lease3.close().     Assert.assertEquals(0, resourceGuard.getLeaseCount()).     resourceGuard.close(). }
