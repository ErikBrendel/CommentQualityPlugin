commented;modifiers;parameterAmount;loc;comment;code
false;public;0;51;;@Test public void testWrapAsByteBuffer() {     SerializationTestType randomInt = Util.randomRecord(SerializationTestTypeFactory.INT).     DataOutputSerializer serializer = new DataOutputSerializer(randomInt.length()).     MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(randomInt.length()).     try {         // empty buffer, read buffer should be empty         ByteBuffer wrapper = serializer.wrapAsByteBuffer().         Assert.assertEquals(0, wrapper.position()).         Assert.assertEquals(0, wrapper.limit()).         // write to data output, read buffer should still be empty         randomInt.write(serializer).         Assert.assertEquals(0, wrapper.position()).         Assert.assertEquals(0, wrapper.limit()).         // get updated read buffer, read buffer should contain written data         wrapper = serializer.wrapAsByteBuffer().         Assert.assertEquals(0, wrapper.position()).         Assert.assertEquals(randomInt.length(), wrapper.limit()).         // clear data output, read buffer should still contain written data         serializer.clear().         Assert.assertEquals(0, wrapper.position()).         Assert.assertEquals(randomInt.length(), wrapper.limit()).         // get updated read buffer, should be empty         wrapper = serializer.wrapAsByteBuffer().         Assert.assertEquals(0, wrapper.position()).         Assert.assertEquals(0, wrapper.limit()).         // write to data output and read back to memory         randomInt.write(serializer).         wrapper = serializer.wrapAsByteBuffer().         segment.put(0, wrapper, randomInt.length()).         Assert.assertEquals(randomInt.length(), wrapper.position()).         Assert.assertEquals(randomInt.length(), wrapper.limit()).     } catch (IOException e) {         e.printStackTrace().         Assert.fail("Test encountered an unexpected exception.").     } }
false;public;0;34;;@Test public void testRandomValuesWriteRead() {     final int numElements = 100000.     final ArrayDeque<SerializationTestType> reference = new ArrayDeque<>().     DataOutputSerializer serializer = new DataOutputSerializer(1).     for (SerializationTestType value : Util.randomRecords(numElements)) {         reference.add(value).         try {             value.write(serializer).         } catch (IOException e) {             e.printStackTrace().             Assert.fail("Test encountered an unexpected exception.").         }     }     DataInputDeserializer deserializer = new DataInputDeserializer(serializer.wrapAsByteBuffer()).     for (SerializationTestType expected : reference) {         try {             SerializationTestType actual = expected.getClass().newInstance().             actual.read(deserializer).             Assert.assertEquals(expected, actual).         } catch (Exception e) {             e.printStackTrace().             Assert.fail("Test encountered an unexpected exception.").         }     }     reference.clear(). }
