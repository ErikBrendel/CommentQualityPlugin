# id;timestamp;commentText;codeText;commentWords;codeWords
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileSerializing();1454428544;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileSerializing() {_		try {_			_			String str__			{_				char[] charData = new char[40000]__				Random rnd = new Random()__				_				for (int i = 0_ i < charData.length_ i++) {_					charData[i] = (char) rnd.nextInt(10000)__				}_				_				str = new String(charData)__			}_			_			_			TestDataOutputSerializer target = new TestDataOutputSerializer(10000, 30000)__			KryoSerializer<String> serializer = new KryoSerializer<String>(String.class, new ExecutionConfig())__			_			try {_				serializer.serialize(str, target)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,serializing,try,string,str,char,char,data,new,char,40000,random,rnd,new,random,for,int,i,0,i,char,data,length,i,char,data,i,char,rnd,next,int,10000,str,new,string,char,data,test,data,output,serializer,target,new,test,data,output,serializer,10000,30000,kryo,serializer,string,serializer,new,kryo,serializer,string,string,class,new,execution,config,try,serializer,serialize,str,target,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileSerializing();1460741895;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileSerializing() {_		try {_			_			String str__			{_				char[] charData = new char[40000]__				Random rnd = new Random()__				_				for (int i = 0_ i < charData.length_ i++) {_					charData[i] = (char) rnd.nextInt(10000)__				}_				_				str = new String(charData)__			}_			_			_			TestDataOutputSerializer target = new TestDataOutputSerializer(10000, 30000)__			KryoSerializer<String> serializer = new KryoSerializer<String>(String.class, new ExecutionConfig())__			_			try {_				serializer.serialize(str, target)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,serializing,try,string,str,char,char,data,new,char,40000,random,rnd,new,random,for,int,i,0,i,char,data,length,i,char,data,i,char,rnd,next,int,10000,str,new,string,char,data,test,data,output,serializer,target,new,test,data,output,serializer,10000,30000,kryo,serializer,string,serializer,new,kryo,serializer,string,string,class,new,execution,config,try,serializer,serialize,str,target,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileSerializing();1550856853;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileSerializing() {_		try {_			_			String str__			{_				char[] charData = new char[40000]__				Random rnd = new Random()__				_				for (int i = 0_ i < charData.length_ i++) {_					charData[i] = (char) rnd.nextInt(10000)__				}_				_				str = new String(charData)__			}_			_			_			TestDataOutputSerializer target = new TestDataOutputSerializer(10000, 30000)__			KryoSerializer<String> serializer = new KryoSerializer<String>(String.class, new ExecutionConfig())__			_			try {_				serializer.serialize(str, target)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,serializing,try,string,str,char,char,data,new,char,40000,random,rnd,new,random,for,int,i,0,i,char,data,length,i,char,data,i,char,rnd,next,int,10000,str,new,string,char,data,test,data,output,serializer,target,new,test,data,output,serializer,10000,30000,kryo,serializer,string,serializer,new,kryo,serializer,string,string,class,new,execution,config,try,serializer,serialize,str,target,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileDeserializing();1454428544;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileDeserializing() {_		try {_			int numElements = 100__			_			TestDataOutputSerializer target = new TestDataOutputSerializer(5*numElements, 5*numElements)__			KryoSerializer<Integer> serializer = new KryoSerializer<>(Integer.class, new ExecutionConfig())___			for(int i = 0_ i < numElements_ i++){_				serializer.serialize(i, target)__			}__			ComparatorTestBase.TestInputView source = new ComparatorTestBase.TestInputView(target.copyByteBuffer())___			for(int i = 0_ i < numElements_ i++){_				int value = serializer.deserialize(source)__				assertEquals(i, value)__			}__			try {_				serializer.deserialize(source)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,deserializing,try,int,num,elements,100,test,data,output,serializer,target,new,test,data,output,serializer,5,num,elements,5,num,elements,kryo,serializer,integer,serializer,new,kryo,serializer,integer,class,new,execution,config,for,int,i,0,i,num,elements,i,serializer,serialize,i,target,comparator,test,base,test,input,view,source,new,comparator,test,base,test,input,view,target,copy,byte,buffer,for,int,i,0,i,num,elements,i,int,value,serializer,deserialize,source,assert,equals,i,value,try,serializer,deserialize,source,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileDeserializing();1460741895;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileDeserializing() {_		try {_			int numElements = 100__			_			TestDataOutputSerializer target = new TestDataOutputSerializer(5*numElements, 5*numElements)__			KryoSerializer<Integer> serializer = new KryoSerializer<>(Integer.class, new ExecutionConfig())___			for(int i = 0_ i < numElements_ i++){_				serializer.serialize(i, target)__			}__			ComparatorTestBase.TestInputView source = new ComparatorTestBase.TestInputView(target.copyByteBuffer())___			for(int i = 0_ i < numElements_ i++){_				int value = serializer.deserialize(source)__				assertEquals(i, value)__			}__			try {_				serializer.deserialize(source)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,deserializing,try,int,num,elements,100,test,data,output,serializer,target,new,test,data,output,serializer,5,num,elements,5,num,elements,kryo,serializer,integer,serializer,new,kryo,serializer,integer,class,new,execution,config,for,int,i,0,i,num,elements,i,serializer,serialize,i,target,comparator,test,base,test,input,view,source,new,comparator,test,base,test,input,view,target,copy,byte,buffer,for,int,i,0,i,num,elements,i,int,value,serializer,deserialize,source,assert,equals,i,value,try,serializer,deserialize,source,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
KryoGenericTypeSerializerTest -> @Test 	public void testForwardEOFExceptionWhileDeserializing();1550856853;Make sure that the kryo serializer forwards EOF exceptions properly when serializing;@Test_	public void testForwardEOFExceptionWhileDeserializing() {_		try {_			int numElements = 100__			_			TestDataOutputSerializer target = new TestDataOutputSerializer(5*numElements, 5*numElements)__			KryoSerializer<Integer> serializer = new KryoSerializer<>(Integer.class, new ExecutionConfig())___			for(int i = 0_ i < numElements_ i++){_				serializer.serialize(i, target)__			}__			ComparatorTestBase.TestInputView source = new ComparatorTestBase.TestInputView(target.copyByteBuffer())___			for(int i = 0_ i < numElements_ i++){_				int value = serializer.deserialize(source)__				assertEquals(i, value)__			}__			try {_				serializer.deserialize(source)__				fail("should throw a java.io.EOFException")__			}_			catch (java.io.EOFException e) {_				_			}_			catch (Exception e) {_				fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName())__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};make,sure,that,the,kryo,serializer,forwards,eof,exceptions,properly,when,serializing;test,public,void,test,forward,eofexception,while,deserializing,try,int,num,elements,100,test,data,output,serializer,target,new,test,data,output,serializer,5,num,elements,5,num,elements,kryo,serializer,integer,serializer,new,kryo,serializer,integer,class,new,execution,config,for,int,i,0,i,num,elements,i,serializer,serialize,i,target,comparator,test,base,test,input,view,source,new,comparator,test,base,test,input,view,target,copy,byte,buffer,for,int,i,0,i,num,elements,i,int,value,serializer,deserialize,source,assert,equals,i,value,try,serializer,deserialize,source,fail,should,throw,a,java,io,eofexception,catch,java,io,eofexception,e,catch,exception,e,fail,throws,wrong,exception,should,throw,a,java,io,eofexception,has,thrown,a,e,get,class,get,name,catch,exception,e,e,print,stack,trace,fail,e,get,message
