commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testTypeExtractionTuple() {     TypeInformation<Tuple2<byte[], byte[]>> type = new TupleSchema().getProducedType().     TypeInformation<Tuple2<byte[], byte[]>> expected = TypeInformation.of(new TypeHint<Tuple2<byte[], byte[]>>() {     }).     assertEquals(expected, type). }
false;public;1;4;;@Override public Tuple2<byte[], byte[]> deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;0;12;;@Test public void testTypeExtractionTupleAnonymous() {     TypeInformation<Tuple2<byte[], byte[]>> type = new AbstractDeserializationSchema<Tuple2<byte[], byte[]>>() {          @Override         public Tuple2<byte[], byte[]> deserialize(byte[] message) throws IOException {             throw new UnsupportedOperationException().         }     }.getProducedType().     TypeInformation<Tuple2<byte[], byte[]>> expected = TypeInformation.of(new TypeHint<Tuple2<byte[], byte[]>>() {     }).     assertEquals(expected, type). }
false;public;0;6;;@Test public void testTypeExtractionGeneric() {     TypeInformation<JSONPObject> type = new JsonSchema().getProducedType().     TypeInformation<JSONPObject> expected = TypeInformation.of(new TypeHint<JSONPObject>() {     }).     assertEquals(expected, type). }
false;public;1;4;;@Override public JSONPObject deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;0;12;;@Test public void testTypeExtractionGenericAnonymous() {     TypeInformation<JSONPObject> type = new AbstractDeserializationSchema<JSONPObject>() {          @Override         public JSONPObject deserialize(byte[] message) throws IOException {             throw new UnsupportedOperationException().         }     }.getProducedType().     TypeInformation<JSONPObject> expected = TypeInformation.of(new TypeHint<JSONPObject>() {     }).     assertEquals(expected, type). }
false;public;0;9;;@Test public void testTypeExtractionRawException() {     try {         new RawSchema().         fail().     } catch (FlinkRuntimeException e) {     // expected     } }
false;public;0;9;;@Test public void testTypeExtractionGenericException() {     try {         new GenericSchema<>().         fail().     } catch (FlinkRuntimeException e) {     // expected     } }
false;public;0;5;;@Test public void testIndirectGenericExtension() {     TypeInformation<String> type = new IndirectExtension().getProducedType().     assertEquals(BasicTypeInfo.STRING_TYPE_INFO, type). }
false;public;1;4;;@Override public Tuple2<byte[], byte[]> deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public JSONPObject deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public T deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public String deserialize(byte[] message) throws IOException {     throw new UnsupportedOperationException(). }
