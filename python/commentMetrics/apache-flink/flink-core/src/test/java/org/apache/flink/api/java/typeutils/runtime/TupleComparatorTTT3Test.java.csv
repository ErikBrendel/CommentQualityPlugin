commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;48;;@SuppressWarnings("unchecked") @Override protected TupleComparator<Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>> createComparator(boolean ascending) {     return new TupleComparator<Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>>(new int[] { 0, 1, 2 }, new TypeComparator[] { new TupleComparator<Tuple2<String, Double>>(new int[] { 0, 1 }, new TypeComparator[] { new StringComparator(ascending), new DoubleComparator(ascending) }, new TypeSerializer[] { StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }), new TupleComparator<Tuple2<Long, Long>>(new int[] { 0, 1 }, new TypeComparator[] { new LongComparator(ascending), new LongComparator(ascending) }, new TypeSerializer[] { LongSerializer.INSTANCE, LongSerializer.INSTANCE }), new TupleComparator<Tuple2<Integer, Long>>(new int[] { 0, 1 }, new TypeComparator[] { new IntComparator(ascending), new LongComparator(ascending) }, new TypeSerializer[] { IntSerializer.INSTANCE, LongSerializer.INSTANCE }) }, new TypeSerializer[] { new TupleSerializer<Tuple2<String, Double>>((Class<Tuple2<String, Double>>) (Class<?>) Tuple2.class, new TypeSerializer[] { StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }), new TupleSerializer<Tuple2<Long, Long>>((Class<Tuple2<Long, Long>>) (Class<?>) Tuple2.class, new TypeSerializer[] { LongSerializer.INSTANCE, LongSerializer.INSTANCE }), new TupleSerializer<Tuple2<Integer, Long>>((Class<Tuple2<Integer, Long>>) (Class<?>) Tuple2.class, new TypeSerializer[] { IntSerializer.INSTANCE, LongSerializer.INSTANCE }) }). }
false;protected;0;26;;@SuppressWarnings("unchecked") @Override protected TupleSerializer<Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>> createSerializer() {     return new TupleSerializer<Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>>((Class<Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>>) (Class<?>) Tuple3.class, new TypeSerializer[] { new TupleSerializer<Tuple2<String, Double>>((Class<Tuple2<String, Double>>) (Class<?>) Tuple2.class, new TypeSerializer[] { StringSerializer.INSTANCE, DoubleSerializer.INSTANCE }), new TupleSerializer<Tuple2<Long, Long>>((Class<Tuple2<Long, Long>>) (Class<?>) Tuple2.class, new TypeSerializer[] { LongSerializer.INSTANCE, LongSerializer.INSTANCE }), new TupleSerializer<Tuple2<Integer, Long>>((Class<Tuple2<Integer, Long>>) (Class<?>) Tuple2.class, new TypeSerializer[] { IntSerializer.INSTANCE, LongSerializer.INSTANCE }) }). }
false;protected;0;4;;@Override protected Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>>[] getSortedTestData() {     return this.dataISD. }
false;protected;3;16;;@Override protected void deepEquals(String message, Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>> should, Tuple3<Tuple2<String, Double>, Tuple2<Long, Long>, Tuple2<Integer, Long>> is) {     for (int x = 0. x < should.getArity(). x++) {         // Check whether field is of type Tuple2 because assertEquals must be called on the non Tuple2 fields.         if (should.getField(x) instanceof Tuple2) {             this.deepEquals(message, (Tuple2<?, ?>) should.getField(x), (Tuple2<?, ?>) is.getField(x)).         } else {             assertEquals(message, should.getField(x), is.getField(x)).         }     } // For }
false;protected;3;5;;protected void deepEquals(String message, Tuple2<?, ?> should, Tuple2<?, ?> is) {     for (int x = 0. x < should.getArity(). x++) {         assertEquals(message, (Object) should.getField(x), is.getField(x)).     } }
