# id;timestamp;commentText;codeText;commentWords;codeWords
MapStateDescriptorTest -> @Test 	public void testSerializerDuplication();1521729754;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@Test_	public void testSerializerDuplication() {_		_		_		TypeSerializer<String> keySerializer = new KryoSerializer<>(String.class, new ExecutionConfig())__		TypeSerializer<Long> valueSerializer = new KryoSerializer<>(Long.class, new ExecutionConfig())___		MapStateDescriptor<String, Long> descr = new MapStateDescriptor<>("foobar", keySerializer, valueSerializer)___		TypeSerializer<String> keySerializerA = descr.getKeySerializer()__		TypeSerializer<String> keySerializerB = descr.getKeySerializer()__		TypeSerializer<Long> valueSerializerA = descr.getValueSerializer()__		TypeSerializer<Long> valueSerializerB = descr.getValueSerializer()___		_		assertNotSame(keySerializerA, keySerializerB)__		assertNotSame(valueSerializerA, valueSerializerB)___		TypeSerializer<Map<String, Long>> serializerA = descr.getSerializer()__		TypeSerializer<Map<String, Long>> serializerB = descr.getSerializer()___		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;test,public,void,test,serializer,duplication,type,serializer,string,key,serializer,new,kryo,serializer,string,class,new,execution,config,type,serializer,long,value,serializer,new,kryo,serializer,long,class,new,execution,config,map,state,descriptor,string,long,descr,new,map,state,descriptor,foobar,key,serializer,value,serializer,type,serializer,string,key,serializer,a,descr,get,key,serializer,type,serializer,string,key,serializer,b,descr,get,key,serializer,type,serializer,long,value,serializer,a,descr,get,value,serializer,type,serializer,long,value,serializer,b,descr,get,value,serializer,assert,not,same,key,serializer,a,key,serializer,b,assert,not,same,value,serializer,a,value,serializer,b,type,serializer,map,string,long,serializer,a,descr,get,serializer,type,serializer,map,string,long,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
MapStateDescriptorTest -> @Test 	public void testSerializerDuplication();1521729954;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@Test_	public void testSerializerDuplication() {_		_		_		TypeSerializer<String> keySerializer = new KryoSerializer<>(String.class, new ExecutionConfig())__		TypeSerializer<Long> valueSerializer = new KryoSerializer<>(Long.class, new ExecutionConfig())___		MapStateDescriptor<String, Long> descr = new MapStateDescriptor<>("foobar", keySerializer, valueSerializer)___		TypeSerializer<String> keySerializerA = descr.getKeySerializer()__		TypeSerializer<String> keySerializerB = descr.getKeySerializer()__		TypeSerializer<Long> valueSerializerA = descr.getValueSerializer()__		TypeSerializer<Long> valueSerializerB = descr.getValueSerializer()___		_		assertNotSame(keySerializerA, keySerializerB)__		assertNotSame(valueSerializerA, valueSerializerB)___		TypeSerializer<Map<String, Long>> serializerA = descr.getSerializer()__		TypeSerializer<Map<String, Long>> serializerB = descr.getSerializer()___		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;test,public,void,test,serializer,duplication,type,serializer,string,key,serializer,new,kryo,serializer,string,class,new,execution,config,type,serializer,long,value,serializer,new,kryo,serializer,long,class,new,execution,config,map,state,descriptor,string,long,descr,new,map,state,descriptor,foobar,key,serializer,value,serializer,type,serializer,string,key,serializer,a,descr,get,key,serializer,type,serializer,string,key,serializer,b,descr,get,key,serializer,type,serializer,long,value,serializer,a,descr,get,value,serializer,type,serializer,long,value,serializer,b,descr,get,value,serializer,assert,not,same,key,serializer,a,key,serializer,b,assert,not,same,value,serializer,a,value,serializer,b,type,serializer,map,string,long,serializer,a,descr,get,serializer,type,serializer,map,string,long,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
MapStateDescriptorTest -> @Test 	public void testSerializerDuplication();1521729969;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@Test_	public void testSerializerDuplication() {_		_		_		TypeSerializer<String> keySerializer = new KryoSerializer<>(String.class, new ExecutionConfig())__		TypeSerializer<Long> valueSerializer = new KryoSerializer<>(Long.class, new ExecutionConfig())___		MapStateDescriptor<String, Long> descr = new MapStateDescriptor<>("foobar", keySerializer, valueSerializer)___		TypeSerializer<String> keySerializerA = descr.getKeySerializer()__		TypeSerializer<String> keySerializerB = descr.getKeySerializer()__		TypeSerializer<Long> valueSerializerA = descr.getValueSerializer()__		TypeSerializer<Long> valueSerializerB = descr.getValueSerializer()___		_		assertNotSame(keySerializerA, keySerializerB)__		assertNotSame(valueSerializerA, valueSerializerB)___		TypeSerializer<Map<String, Long>> serializerA = descr.getSerializer()__		TypeSerializer<Map<String, Long>> serializerB = descr.getSerializer()___		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;test,public,void,test,serializer,duplication,type,serializer,string,key,serializer,new,kryo,serializer,string,class,new,execution,config,type,serializer,long,value,serializer,new,kryo,serializer,long,class,new,execution,config,map,state,descriptor,string,long,descr,new,map,state,descriptor,foobar,key,serializer,value,serializer,type,serializer,string,key,serializer,a,descr,get,key,serializer,type,serializer,string,key,serializer,b,descr,get,key,serializer,type,serializer,long,value,serializer,a,descr,get,value,serializer,type,serializer,long,value,serializer,b,descr,get,value,serializer,assert,not,same,key,serializer,a,key,serializer,b,assert,not,same,value,serializer,a,value,serializer,b,type,serializer,map,string,long,serializer,a,descr,get,serializer,type,serializer,map,string,long,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
MapStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1496332245;FLINK-6775__Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		TypeSerializer<String> keySerializer = mock(TypeSerializer.class)__		TypeSerializer<Long> valueSerializer = mock(TypeSerializer.class)__		when(keySerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<String>>() {_			@Override_			public TypeSerializer<String> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})__		when(valueSerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<Long>>() {_			@Override_			public TypeSerializer<Long> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})___		MapStateDescriptor<String, Long> descr = new MapStateDescriptor<>("foobar", keySerializer, valueSerializer)___		TypeSerializer<String> keySerializerA = descr.getKeySerializer()__		TypeSerializer<String> keySerializerB = descr.getKeySerializer()__		TypeSerializer<Long> valueSerializerA = descr.getValueSerializer()__		TypeSerializer<Long> valueSerializerB = descr.getValueSerializer()___		_		assertNotSame(keySerializerA, keySerializerB)__		assertNotSame(valueSerializerA, valueSerializerB)___		TypeSerializer<Map<String, Long>> serializerA = descr.getSerializer()__		TypeSerializer<Map<String, Long>> serializerB = descr.getSerializer()___		assertNotSame(serializerA, serializerB)__	};flink,6775,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,key,serializer,mock,type,serializer,class,type,serializer,long,value,serializer,mock,type,serializer,class,when,key,serializer,duplicate,then,answer,new,answer,type,serializer,string,override,public,type,serializer,string,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,when,value,serializer,duplicate,then,answer,new,answer,type,serializer,long,override,public,type,serializer,long,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,map,state,descriptor,string,long,descr,new,map,state,descriptor,foobar,key,serializer,value,serializer,type,serializer,string,key,serializer,a,descr,get,key,serializer,type,serializer,string,key,serializer,b,descr,get,key,serializer,type,serializer,long,value,serializer,a,descr,get,value,serializer,type,serializer,long,value,serializer,b,descr,get,value,serializer,assert,not,same,key,serializer,a,key,serializer,b,assert,not,same,value,serializer,a,value,serializer,b,type,serializer,map,string,long,serializer,a,descr,get,serializer,type,serializer,map,string,long,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
MapStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1521628649;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		TypeSerializer<String> keySerializer = mock(TypeSerializer.class)__		TypeSerializer<Long> valueSerializer = mock(TypeSerializer.class)__		when(keySerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<String>>() {_			@Override_			public TypeSerializer<String> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})__		when(valueSerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<Long>>() {_			@Override_			public TypeSerializer<Long> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})___		MapStateDescriptor<String, Long> descr = new MapStateDescriptor<>("foobar", keySerializer, valueSerializer)___		TypeSerializer<String> keySerializerA = descr.getKeySerializer()__		TypeSerializer<String> keySerializerB = descr.getKeySerializer()__		TypeSerializer<Long> valueSerializerA = descr.getValueSerializer()__		TypeSerializer<Long> valueSerializerB = descr.getValueSerializer()___		_		assertNotSame(keySerializerA, keySerializerB)__		assertNotSame(valueSerializerA, valueSerializerB)___		TypeSerializer<Map<String, Long>> serializerA = descr.getSerializer()__		TypeSerializer<Map<String, Long>> serializerB = descr.getSerializer()___		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,key,serializer,mock,type,serializer,class,type,serializer,long,value,serializer,mock,type,serializer,class,when,key,serializer,duplicate,then,answer,new,answer,type,serializer,string,override,public,type,serializer,string,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,when,value,serializer,duplicate,then,answer,new,answer,type,serializer,long,override,public,type,serializer,long,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,map,state,descriptor,string,long,descr,new,map,state,descriptor,foobar,key,serializer,value,serializer,type,serializer,string,key,serializer,a,descr,get,key,serializer,type,serializer,string,key,serializer,b,descr,get,key,serializer,type,serializer,long,value,serializer,a,descr,get,value,serializer,type,serializer,long,value,serializer,b,descr,get,value,serializer,assert,not,same,key,serializer,a,key,serializer,b,assert,not,same,value,serializer,a,value,serializer,b,type,serializer,map,string,long,serializer,a,descr,get,serializer,type,serializer,map,string,long,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
