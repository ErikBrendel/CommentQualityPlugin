commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setupClassLoader() {     originalClassLoader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(CLASS_LOADER). }
false;public;0;4;;@After public void restoreOriginalClassLoader() {     Thread.currentThread().setContextClassLoader(originalClassLoader). }
false;public;0;10;;// ------------------------------------------------------------------------ @Test public void guardTestAssumptions() {     try {         Class.forName(OBJECT_OUT_OF_CLASSPATH.getClass().getName()).         fail("This test's assumptions are broken").     } catch (ClassNotFoundException ignored) {     // expected     } }
false;protected;0;4;;// ------------------------------------------------------------------------ @Override protected TypeSerializer<Object> createSerializer() {     return new KryoSerializer<>(Object.class, new ExecutionConfig()). }
false;protected;0;4;;@Override protected int getLength() {     return -1. }
false;protected;0;4;;@Override protected Class<Object> getTypeClass() {     return Object.class. }
false;protected;0;13;;@Override protected Object[] getTestData() {     return new Object[] { new Integer(7), // an object whose class is not on the classpath     OBJECT_OUT_OF_CLASSPATH, // is NOT on the classpath     new Tuple1<>(OBJECT_OUT_OF_CLASSPATH) }. }
false;public;0;4;;@Override public void testInstantiate() { // this serializer does not support instantiation }
