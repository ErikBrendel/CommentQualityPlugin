commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testSplitRegular() {     testSplitting(new NumberSequenceIterator(0, 10), 2).     testSplitting(new NumberSequenceIterator(100, 100000), 7).     testSplitting(new NumberSequenceIterator(-100, 0), 5).     testSplitting(new NumberSequenceIterator(-100, 100), 3). }
false;public;0;6;;@Test public void testSplittingLargeRangesBy2() {     testSplitting(new NumberSequenceIterator(0, Long.MAX_VALUE), 2).     testSplitting(new NumberSequenceIterator(-1000000000L, Long.MAX_VALUE), 2).     testSplitting(new NumberSequenceIterator(Long.MIN_VALUE, Long.MAX_VALUE), 2). }
false;public;0;7;;@Test public void testSplittingTooSmallRanges() {     testSplitting(new NumberSequenceIterator(0, 0), 2).     testSplitting(new NumberSequenceIterator(-5, -5), 2).     testSplitting(new NumberSequenceIterator(-5, -4), 3).     testSplitting(new NumberSequenceIterator(10, 15), 10). }
false;private,static;2;16;;private static void testSplitting(NumberSequenceIterator iter, int numSplits) {     NumberSequenceIterator[] splits = iter.split(numSplits).     assertEquals(numSplits, splits.length).     // test start and end of range     assertEquals(iter.getCurrent(), splits[0].getCurrent()).     assertEquals(iter.getTo(), splits[numSplits - 1].getTo()).     // test continuous range     for (int i = 1. i < splits.length. i++) {         assertEquals(splits[i - 1].getTo() + 1, splits[i].getCurrent()).     }     testMaxSplitDiff(splits). }
false;private,static;1;21;;private static void testMaxSplitDiff(NumberSequenceIterator[] iters) {     long minSplitSize = Long.MAX_VALUE.     long maxSplitSize = Long.MIN_VALUE.     for (NumberSequenceIterator iter : iters) {         long diff.         if (iter.getTo() < iter.getCurrent()) {             diff = 0.         } else {             diff = iter.getTo() - iter.getCurrent().         }         if (diff < 0) {             diff = Long.MAX_VALUE.         }         minSplitSize = Math.min(minSplitSize, diff).         maxSplitSize = Math.max(maxSplitSize, diff).     }     assertTrue(maxSplitSize == minSplitSize || maxSplitSize - 1 == minSplitSize). }
