commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// -------------------------------------------------------------------------------------------- // Basic Record Statistics // -------------------------------------------------------------------------------------------- public long getOutputSize() {     return outputSize. }
false;public;1;7;;public void setOutputSize(long outputSize) {     if (outputSize < 0) {         throw new IllegalArgumentException("The output size cannot be smaller than zero.").     }     this.outputSize = outputSize. }
false;public;0;3;;public long getOutputCardinality() {     return this.outputCardinality. }
false;public;1;7;;public void setOutputCardinality(long outputCardinality) {     if (outputCardinality < 0) {         throw new IllegalArgumentException("The output cardinality cannot be smaller than zero.").     }     this.outputCardinality = outputCardinality. }
false;public;0;3;;public float getAvgOutputRecordSize() {     return this.avgOutputRecordSize. }
false;public;1;7;;public void setAvgOutputRecordSize(float avgOutputRecordSize) {     if (avgOutputRecordSize <= 0) {         throw new IllegalArgumentException("The size of produced records must be positive.").     }     this.avgOutputRecordSize = avgOutputRecordSize. }
false;public;0;3;;public float getFilterFactor() {     return filterFactor. }
false;public;1;7;;public void setFilterFactor(float filterFactor) {     if (filterFactor < 0) {         throw new IllegalArgumentException("The filter factor cannot be smaller than zero.").     }     this.filterFactor = filterFactor. }
true;public;0;3;/**  * Gets the FieldSets that are unique  *  * @return List of FieldSet that are unique  */ ;// -------------------------------------------------------------------------------------------- // Uniqueness // -------------------------------------------------------------------------------------------- /**  * Gets the FieldSets that are unique  *  * @return List of FieldSet that are unique  */ public Set<FieldSet> getUniqueFields() {     return this.uniqueFields. }
true;public;1;6;/**  * Adds a FieldSet to be unique  *  * @param uniqueFieldSet The unique FieldSet  */ ;/**  * Adds a FieldSet to be unique  *  * @param uniqueFieldSet The unique FieldSet  */ public void addUniqueField(FieldSet uniqueFieldSet) {     if (this.uniqueFields == null) {         this.uniqueFields = new HashSet<FieldSet>().     }     this.uniqueFields.add(uniqueFieldSet). }
true;public;1;6;/**  * Adds a field as having only unique values.  *  * @param field The field with unique values.  */ ;/**  * Adds a field as having only unique values.  *  * @param field The field with unique values.  */ public void addUniqueField(int field) {     if (this.uniqueFields == null) {         this.uniqueFields = new HashSet<FieldSet>().     }     this.uniqueFields.add(new FieldSet(field)). }
true;public;1;6;/**  * Adds multiple FieldSets to be unique  *  * @param uniqueFieldSets A set of unique FieldSet  */ ;/**  * Adds multiple FieldSets to be unique  *  * @param uniqueFieldSets A set of unique FieldSet  */ public void addUniqueFields(Set<FieldSet> uniqueFieldSets) {     if (this.uniqueFields == null) {         this.uniqueFields = new HashSet<FieldSet>().     }     this.uniqueFields.addAll(uniqueFieldSets). }
false;public;0;3;;public void clearUniqueFields() {     this.uniqueFields = null. }
false;protected;1;16;;// -------------------------------------------------------------------------------------------- // Miscellaneous // -------------------------------------------------------------------------------------------- protected void copyFrom(CompilerHints source) {     this.outputSize = source.outputSize.     this.outputCardinality = source.outputCardinality.     this.avgOutputRecordSize = source.avgOutputRecordSize.     this.filterFactor = source.filterFactor.     if (source.uniqueFields != null && source.uniqueFields.size() > 0) {         if (this.uniqueFields == null) {             this.uniqueFields = new HashSet<FieldSet>().         } else {             this.uniqueFields.clear().         }         this.uniqueFields.addAll(source.uniqueFields).     } }
