commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;19;// ScalaTupleComparator ;// We need this because we cannot call the cloning constructor from the // ScalaTupleComparator protected void privateDuplicate(TupleComparatorBase<T> toClone) {     // copy fields and serializer factories     this.keyPositions = toClone.keyPositions.     this.serializers = new TypeSerializer[toClone.serializers.length].     for (int i = 0. i < toClone.serializers.length. i++) {         this.serializers[i] = toClone.serializers[i].duplicate().     }     this.comparators = new TypeComparator[toClone.comparators.length].     for (int i = 0. i < toClone.comparators.length. i++) {         this.comparators[i] = toClone.comparators[i].duplicate().     }     this.normalizedKeyLengths = toClone.normalizedKeyLengths.     this.numLeadingNormalizableKeys = toClone.numLeadingNormalizableKeys.     this.normalizableKeyPrefixLen = toClone.normalizableKeyPrefixLen.     this.invertNormKey = toClone.invertNormKey. }
false;protected;0;3;;// -------------------------------------------------------------------------------------------- // Comparator Methods // -------------------------------------------------------------------------------------------- protected int[] getKeyPositions() {     return this.keyPositions. }
false;public;1;11;;@SuppressWarnings({ "rawtypes", "unchecked" }) @Override public void getFlatComparator(List<TypeComparator> flatComparators) {     for (int i = 0. i < comparators.length. i++) {         if (comparators[i] instanceof CompositeTypeComparator) {             ((CompositeTypeComparator) comparators[i]).getFlatComparator(flatComparators).         } else {             flatComparators.add(comparators[i]).         }     } }
false;public;1;22;;// -------------------------------------------------------------------------------------------- // Comparator Methods // -------------------------------------------------------------------------------------------- @Override public int compareToReference(TypeComparator<T> referencedComparator) {     TupleComparatorBase<T> other = (TupleComparatorBase<T>) referencedComparator.     int i = 0.     try {         for (. i < this.keyPositions.length. i++) {             @SuppressWarnings("unchecked")             int cmp = this.comparators[i].compareToReference(other.comparators[i]).             if (cmp != 0) {                 return cmp.             }         }         return 0.     } catch (NullPointerException npex) {         throw new NullKeyFieldException(keyPositions[i]).     } catch (IndexOutOfBoundsException iobex) {         throw new KeyFieldOutOfBoundsException(keyPositions[i]).     } }
false;public;2;29;;@SuppressWarnings("unchecked") @Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     if (deserializedFields1 == null) {         instantiateDeserializationUtils().     }     int i = 0.     try {         for (. i < serializers.length. i++) {             deserializedFields1[i] = serializers[i].deserialize(deserializedFields1[i], firstSource).             deserializedFields2[i] = serializers[i].deserialize(deserializedFields2[i], secondSource).         }         for (i = 0. i < keyPositions.length. i++) {             int keyPos = keyPositions[i].             int cmp = comparators[i].compare(deserializedFields1[keyPos], deserializedFields2[keyPos]).             if (cmp != 0) {                 return cmp.             }         }         return 0.     } catch (NullPointerException npex) {         throw new NullKeyFieldException(keyPositions[i]).     } catch (IndexOutOfBoundsException iobex) {         throw new KeyFieldOutOfBoundsException(keyPositions[i], iobex).     } }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return this.numLeadingNormalizableKeys > 0. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return this.normalizableKeyPrefixLen. }
false;public;1;6;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return this.numLeadingNormalizableKeys < this.keyPositions.length || this.normalizableKeyPrefixLen == Integer.MAX_VALUE || this.normalizableKeyPrefixLen > keyBytes. }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return this.invertNormKey. }
false;public;0;4;;@Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(T record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
false;protected,final;0;9;;// -------------------------------------------------------------------------------------------- protected final void instantiateDeserializationUtils() {     this.deserializedFields1 = new Object[this.serializers.length].     this.deserializedFields2 = new Object[this.serializers.length].     for (int i = 0. i < this.serializers.length. i++) {         this.deserializedFields1[i] = this.serializers[i].createInstance().         this.deserializedFields2[i] = this.serializers[i].createInstance().     } }
