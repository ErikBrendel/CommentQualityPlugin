commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static <T> OptionalFailure<T> of(T value) {     return new OptionalFailure<>(value, null). }
false;public,static;1;3;;public static <T> OptionalFailure<T> ofFailure(Throwable failureCause) {     return new OptionalFailure<>(null, failureCause). }
true;public,static;1;7;/**  * @return wrapped {@link OptionalFailure} returned by {@code valueSupplier} or wrapped failure if  * {@code valueSupplier} has thrown an {@link Exception}.  */ ;/**  * @return wrapped {@link OptionalFailure} returned by {@code valueSupplier} or wrapped failure if  * {@code valueSupplier} has thrown an {@link Exception}.  */ public static <T> OptionalFailure<T> createFrom(CheckedSupplier<T> valueSupplier) {     try {         return of(valueSupplier.get()).     } catch (Exception ex) {         return ofFailure(ex).     } }
true;public;0;7;/**  * @return stored value or throw a {@link FlinkException} with {@code failureCause}.  */ ;/**  * @return stored value or throw a {@link FlinkException} with {@code failureCause}.  */ public T get() throws FlinkException {     if (value != null) {         return value.     }     checkNotNull(failureCause).     throw new FlinkException(failureCause). }
true;public;0;7;/**  * @return same as {@link #get()} but throws a {@link FlinkRuntimeException}.  */ ;/**  * @return same as {@link #get()} but throws a {@link FlinkRuntimeException}.  */ public T getUnchecked() throws FlinkRuntimeException {     if (value != null) {         return value.     }     checkNotNull(failureCause).     throw new FlinkRuntimeException(failureCause). }
false;public;0;3;;public Throwable getFailureCause() {     return checkNotNull(failureCause). }
false;public;0;3;;public boolean isFailure() {     return failureCause != null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(value, failureCause). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (!(obj instanceof OptionalFailure<?>)) {         return false.     }     OptionalFailure<?> other = (OptionalFailure<?>) obj.     return Objects.equals(value, other.value) && Objects.equals(failureCause, other.failureCause). }
false;private;1;4;;private void writeObject(ObjectOutputStream stream) throws IOException {     stream.defaultWriteObject().     stream.writeObject(value). }
false;private;1;4;;private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {     stream.defaultReadObject().     value = (T) stream.readObject(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "{value=" + value + ", failureCause=" + failureCause + "}". }
