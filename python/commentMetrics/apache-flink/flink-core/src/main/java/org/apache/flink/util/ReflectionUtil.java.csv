commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static <T> T newInstance(Class<T> clazz) {     try {         return clazz.newInstance().     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public,static;2;4;;@SuppressWarnings("unchecked") public static <T> Class<T> getTemplateType(Class<?> clazz, int num) {     return (Class<T>) getSuperTemplateTypes(clazz)[num]. }
false;public,static;3;4;;@SuppressWarnings("unchecked") public static <T> Class<T> getTemplateType(Class<?> clazz, Class<?> classWithParameter, int num) {     return (Class<T>) getSuperTemplateTypes(clazz)[num]. }
false;public,static;1;3;;public static <T> Class<T> getTemplateType1(Class<?> clazz) {     return getTemplateType(clazz, 0). }
false;public,static;1;8;;@SuppressWarnings("unchecked") public static <T> Class<T> getTemplateType1(Type type) {     if (type instanceof ParameterizedType) {         return (Class<T>) getTemplateTypes((ParameterizedType) type)[0].     } else {         throw new IllegalArgumentException().     } }
false;public,static;1;3;;public static <T> Class<T> getTemplateType2(Class<?> clazz) {     return getTemplateType(clazz, 1). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType3(Class<?> clazz) {     return getTemplateType(clazz, 2). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType4(Class<?> clazz) {     return getTemplateType(clazz, 3). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType5(Class<?> clazz) {     return getTemplateType(clazz, 4). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType6(Class<?> clazz) {     return getTemplateType(clazz, 5). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType7(Class<?> clazz) {     return getTemplateType(clazz, 6). }
false;public,static;1;3;;public static <T> Class<T> getTemplateType8(Class<?> clazz) {     return getTemplateType(clazz, 7). }
false;public,static;1;15;;public static Class<?>[] getSuperTemplateTypes(Class<?> clazz) {     Type type = clazz.getGenericSuperclass().     while (true) {         if (type instanceof ParameterizedType) {             return getTemplateTypes((ParameterizedType) type).         }         if (clazz.getGenericSuperclass() == null) {             throw new IllegalArgumentException().         }         type = clazz.getGenericSuperclass().         clazz = clazz.getSuperclass().     } }
false;public,static;2;26;;public static Class<?>[] getSuperTemplateTypes(Class<?> clazz, Class<?> searchedSuperClass) {     if (clazz == null || searchedSuperClass == null) {         throw new NullPointerException().     }     Class<?> superClass.     do {         superClass = clazz.getSuperclass().         if (superClass == searchedSuperClass) {             break.         }     } while ((clazz = superClass) != null).     if (clazz == null) {         throw new IllegalArgumentException("The searched for superclass is not a superclass of the given class.").     }     final Type type = clazz.getGenericSuperclass().     if (type instanceof ParameterizedType) {         return getTemplateTypes((ParameterizedType) type).     } else {         throw new IllegalArgumentException("The searched for superclass is not a generic class.").     } }
false;public,static;1;9;;public static Class<?>[] getTemplateTypes(ParameterizedType paramterizedType) {     Class<?>[] types = new Class<?>[paramterizedType.getActualTypeArguments().length].     int i = 0.     for (Type templateArgument : paramterizedType.getActualTypeArguments()) {         assert templateArgument instanceof Class<?>.         types[i++] = (Class<?>) templateArgument.     }     return types. }
false;public,static;1;12;;public static Class<?>[] getTemplateTypes(Class<?> clazz) {     Type type = clazz.getGenericSuperclass().     assert (type instanceof ParameterizedType).     ParameterizedType paramterizedType = (ParameterizedType) type.     Class<?>[] types = new Class<?>[paramterizedType.getActualTypeArguments().length].     int i = 0.     for (Type templateArgument : paramterizedType.getActualTypeArguments()) {         assert (templateArgument instanceof Class<?>).         types[i++] = (Class<?>) templateArgument.     }     return types. }
true;public,static;2;7;/**  * Extract the full template type information from the given type's template parameter at the  * given position.  *  * @param type type to extract the full template parameter information from  * @param templatePosition describing at which position the template type parameter is  * @return Full type information describing the template parameter's type  */ ;/**  * Extract the full template type information from the given type's template parameter at the  * given position.  *  * @param type type to extract the full template parameter information from  * @param templatePosition describing at which position the template type parameter is  * @return Full type information describing the template parameter's type  */ public static FullTypeInfo getFullTemplateType(Type type, int templatePosition) {     if (type instanceof ParameterizedType) {         return getFullTemplateType(((ParameterizedType) type).getActualTypeArguments()[templatePosition]).     } else {         throw new IllegalArgumentException().     } }
true;public,static;1;15;/**  * Extract the full type information from the given type.  *  * @param type to be analyzed  * @return Full type information describing the given type  */ ;/**  * Extract the full type information from the given type.  *  * @param type to be analyzed  * @return Full type information describing the given type  */ public static FullTypeInfo getFullTemplateType(Type type) {     if (type instanceof ParameterizedType) {         ParameterizedType parameterizedType = (ParameterizedType) type.         FullTypeInfo[] templateTypeInfos = new FullTypeInfo[parameterizedType.getActualTypeArguments().length].         for (int i = 0. i < parameterizedType.getActualTypeArguments().length. i++) {             templateTypeInfos[i] = getFullTemplateType(parameterizedType.getActualTypeArguments()[i]).         }         return new FullTypeInfo((Class<?>) parameterizedType.getRawType(), templateTypeInfos).     } else {         return new FullTypeInfo((Class<?>) type, null).     } }
false;public;0;3;;public Class<?> getClazz() {     return clazz. }
false;public;0;3;;public FullTypeInfo[] getTemplateTypeInfos() {     return templateTypeInfos. }
false;public;0;13;;public Iterator<Class<?>> getClazzIterator() {     UnionIterator<Class<?>> unionIterator = new UnionIterator<>().     unionIterator.add(Collections.<Class<?>>singleton(clazz).iterator()).     if (templateTypeInfos != null) {         for (int i = 0. i < templateTypeInfos.length. i++) {             unionIterator.add(templateTypeInfos[i].getClazzIterator()).         }     }     return unionIterator. }
false;public;0;19;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append(clazz.getSimpleName()).     if (templateTypeInfos != null) {         builder.append("<").         for (int i = 0. i < templateTypeInfos.length - 1. i++) {             builder.append(templateTypeInfos[i]).append(", ").         }         builder.append(templateTypeInfos[templateTypeInfos.length - 1]).         builder.append(">").     }     return builder.toString(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof FullTypeInfo) {         FullTypeInfo other = (FullTypeInfo) obj.         return clazz == other.getClazz() && Arrays.equals(templateTypeInfos, other.getTemplateTypeInfos()).     } else {         return false.     } }
