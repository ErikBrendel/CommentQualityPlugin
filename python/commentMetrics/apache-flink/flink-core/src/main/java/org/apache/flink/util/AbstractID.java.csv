commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the lower 64 bits of the ID.  *  * @return The lower 64 bits of the ID.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the lower 64 bits of the ID.  *  * @return The lower 64 bits of the ID.  */ public long getLowerPart() {     return lowerPart. }
true;public;0;3;/**  * Gets the upper 64 bits of the ID.  *  * @return The upper 64 bits of the ID.  */ ;/**  * Gets the upper 64 bits of the ID.  *  * @return The upper 64 bits of the ID.  */ public long getUpperPart() {     return upperPart. }
true;public;0;6;/**  * Gets the bytes underlying this ID.  *  * @return The bytes underlying this ID.  */ ;/**  * Gets the bytes underlying this ID.  *  * @return The bytes underlying this ID.  */ public byte[] getBytes() {     byte[] bytes = new byte[SIZE].     longToByteArray(lowerPart, bytes, 0).     longToByteArray(upperPart, bytes, SIZE_OF_LONG).     return bytes. }
true;public,final;0;11;/**  * Returns pure String representation of the ID in hexadecimal. This method should be used to construct things like  * paths etc., that require a stable representation and is therefore final.  */ ;/**  * Returns pure String representation of the ID in hexadecimal. This method should be used to construct things like  * paths etc., that require a stable representation and is therefore final.  */ public final String toHexString() {     if (this.hexString == null) {         final byte[] ba = new byte[SIZE].         longToByteArray(this.lowerPart, ba, 0).         longToByteArray(this.upperPart, ba, SIZE_OF_LONG).         this.hexString = StringUtils.byteToHexString(ba).     }     return this.hexString. }
false;public;1;11;;// -------------------------------------------------------------------------------------------- // Standard Utilities // -------------------------------------------------------------------------------------------- @Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj != null && obj.getClass() == getClass()) {         AbstractID that = (AbstractID) obj.         return that.lowerPart == this.lowerPart && that.upperPart == this.upperPart.     } else {         return false.     } }
false;public;0;7;;@Override public int hashCode() {     return ((int) this.lowerPart) ^ ((int) (this.lowerPart >>> 32)) ^ ((int) this.upperPart) ^ ((int) (this.upperPart >>> 32)). }
false;public;0;4;;@Override public String toString() {     return toHexString(). }
false;public;1;6;;@Override public int compareTo(AbstractID o) {     int diff1 = Long.compare(this.upperPart, o.upperPart).     int diff2 = Long.compare(this.lowerPart, o.lowerPart).     return diff1 == 0 ? diff2 : diff1. }
true;private,static;2;9;/**  * Converts the given byte array to a long.  *  * @param ba the byte array to be converted  * @param offset the offset indicating at which byte inside the array the conversion shall begin  * @return the long variable  */ ;// -------------------------------------------------------------------------------------------- // Conversion Utilities // -------------------------------------------------------------------------------------------- /**  * Converts the given byte array to a long.  *  * @param ba the byte array to be converted  * @param offset the offset indicating at which byte inside the array the conversion shall begin  * @return the long variable  */ private static long byteArrayToLong(byte[] ba, int offset) {     long l = 0.     for (int i = 0. i < SIZE_OF_LONG. ++i) {         l |= (ba[offset + SIZE_OF_LONG - 1 - i] & 0xffL) << (i << 3).     }     return l. }
true;private,static;3;6;/**  * Converts a long to a byte array.  *  * @param l the long variable to be converted  * @param ba the byte array to store the result the of the conversion  * @param offset offset indicating at what position inside the byte array the result of the conversion shall be stored  */ ;/**  * Converts a long to a byte array.  *  * @param l the long variable to be converted  * @param ba the byte array to store the result the of the conversion  * @param offset offset indicating at what position inside the byte array the result of the conversion shall be stored  */ private static void longToByteArray(long l, byte[] ba, int offset) {     for (int i = 0. i < SIZE_OF_LONG. ++i) {         // i * 8         final int shift = i << 3.         ba[offset + SIZE_OF_LONG - 1 - i] = (byte) ((l & (0xffL << shift)) >>> shift).     } }
