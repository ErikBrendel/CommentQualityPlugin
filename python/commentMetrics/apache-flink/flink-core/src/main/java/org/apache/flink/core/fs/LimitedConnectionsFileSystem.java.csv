# id;timestamp;commentText;codeText;commentWords;codeWords
LimitedConnectionsFileSystem -> StreamWithTimeout -> StreamProgressTracker getProgressTracker()_;1511520068;Gets the progress tracker for this stream.;StreamProgressTracker getProgressTracker()_;gets,the,progress,tracker,for,this,stream;stream,progress,tracker,get,progress,tracker
LimitedConnectionsFileSystem -> StreamWithTimeout -> StreamProgressTracker getProgressTracker()_;1512472868;Gets the progress tracker for this stream.;StreamProgressTracker getProgressTracker()_;gets,the,progress,tracker,for,this,stream;stream,progress,tracker,get,progress,tracker
LimitedConnectionsFileSystem -> StreamWithTimeout -> StreamProgressTracker getProgressTracker()_;1524407315;Gets the progress tracker for this stream.;StreamProgressTracker getProgressTracker()_;gets,the,progress,tracker,for,this,stream;stream,progress,tracker,get,progress,tracker
LimitedConnectionsFileSystem -> StreamWithTimeout -> StreamProgressTracker getProgressTracker()_;1528105942;Gets the progress tracker for this stream.;StreamProgressTracker getProgressTracker()_;gets,the,progress,tracker,for,this,stream;stream,progress,tracker,get,progress,tracker
LimitedConnectionsFileSystem -> public int getMaxNumOpenOutputStreams();1511520068;Gets the maximum number of concurrently open output streams.;public int getMaxNumOpenOutputStreams() {_		return maxNumOpenOutputStreams__	};gets,the,maximum,number,of,concurrently,open,output,streams;public,int,get,max,num,open,output,streams,return,max,num,open,output,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenOutputStreams();1512472868;Gets the maximum number of concurrently open output streams.;public int getMaxNumOpenOutputStreams() {_		return maxNumOpenOutputStreams__	};gets,the,maximum,number,of,concurrently,open,output,streams;public,int,get,max,num,open,output,streams,return,max,num,open,output,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenOutputStreams();1524407315;Gets the maximum number of concurrently open output streams.;public int getMaxNumOpenOutputStreams() {_		return maxNumOpenOutputStreams__	};gets,the,maximum,number,of,concurrently,open,output,streams;public,int,get,max,num,open,output,streams,return,max,num,open,output,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenOutputStreams();1528105942;Gets the maximum number of concurrently open output streams.;public int getMaxNumOpenOutputStreams() {_		return maxNumOpenOutputStreams__	};gets,the,maximum,number,of,concurrently,open,output,streams;public,int,get,max,num,open,output,streams,return,max,num,open,output,streams
LimitedConnectionsFileSystem -> public int getNumberOfOpenInputStreams();1511520068;Gets the number of currently open input streams.;public int getNumberOfOpenInputStreams() {_		return numReservedInputStreams__	};gets,the,number,of,currently,open,input,streams;public,int,get,number,of,open,input,streams,return,num,reserved,input,streams
LimitedConnectionsFileSystem -> public int getNumberOfOpenInputStreams();1512472868;Gets the number of currently open input streams.;public int getNumberOfOpenInputStreams() {_		return numReservedInputStreams__	};gets,the,number,of,currently,open,input,streams;public,int,get,number,of,open,input,streams,return,num,reserved,input,streams
LimitedConnectionsFileSystem -> public int getNumberOfOpenInputStreams();1524407315;Gets the number of currently open input streams.;public int getNumberOfOpenInputStreams() {_		return numReservedInputStreams__	};gets,the,number,of,currently,open,input,streams;public,int,get,number,of,open,input,streams,return,num,reserved,input,streams
LimitedConnectionsFileSystem -> public int getNumberOfOpenInputStreams();1528105942;Gets the number of currently open input streams.;public int getNumberOfOpenInputStreams() {_		return numReservedInputStreams__	};gets,the,number,of,currently,open,input,streams;public,int,get,number,of,open,input,streams,return,num,reserved,input,streams
LimitedConnectionsFileSystem -> StreamWithTimeout -> void closeDueToTimeout() throws IOException_;1511520068;Closes the stream asynchronously with a special exception that indicates closing due_to lack of progress.;void closeDueToTimeout() throws IOException_;closes,the,stream,asynchronously,with,a,special,exception,that,indicates,closing,due,to,lack,of,progress;void,close,due,to,timeout,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> void closeDueToTimeout() throws IOException_;1512472868;Closes the stream asynchronously with a special exception that indicates closing due_to lack of progress.;void closeDueToTimeout() throws IOException_;closes,the,stream,asynchronously,with,a,special,exception,that,indicates,closing,due,to,lack,of,progress;void,close,due,to,timeout,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> void closeDueToTimeout() throws IOException_;1524407315;Closes the stream asynchronously with a special exception that indicates closing due_to lack of progress.;void closeDueToTimeout() throws IOException_;closes,the,stream,asynchronously,with,a,special,exception,that,indicates,closing,due,to,lack,of,progress;void,close,due,to,timeout,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> void closeDueToTimeout() throws IOException_;1528105942;Closes the stream asynchronously with a special exception that indicates closing due_to lack of progress.;void closeDueToTimeout() throws IOException_;closes,the,stream,asynchronously,with,a,special,exception,that,indicates,closing,due,to,lack,of,progress;void,close,due,to,timeout,throws,ioexception
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> public ConnectionLimitingSettings( 				int limitTotal, 				int limitInput, 				int limitOutput, 				long streamOpenTimeout, 				long streamInactivityTimeout);1511520068;Creates a new ConnectionLimitingSettings with the given parameters.__@param limitTotal The limit for the total number of connections, or 0, if no limit._@param limitInput The limit for the number of input stream connections, or 0, if no limit._@param limitOutput The limit for the number of output stream connections, or 0, if no limit._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public ConnectionLimitingSettings(_				int limitTotal,_				int limitInput,_				int limitOutput,_				long streamOpenTimeout,_				long streamInactivityTimeout) {_			checkArgument(limitTotal >= 0)__			checkArgument(limitInput >= 0)__			checkArgument(limitOutput >= 0)__			checkArgument(streamOpenTimeout >= 0)__			checkArgument(streamInactivityTimeout >= 0)___			this.limitTotal = limitTotal__			this.limitInput = limitInput__			this.limitOutput = limitOutput__			this.streamOpenTimeout = streamOpenTimeout__			this.streamInactivityTimeout = streamInactivityTimeout__		};creates,a,new,connection,limiting,settings,with,the,given,parameters,param,limit,total,the,limit,for,the,total,number,of,connections,or,0,if,no,limit,param,limit,input,the,limit,for,the,number,of,input,stream,connections,or,0,if,no,limit,param,limit,output,the,limit,for,the,number,of,output,stream,connections,or,0,if,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,connection,limiting,settings,int,limit,total,int,limit,input,int,limit,output,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,limit,total,0,check,argument,limit,input,0,check,argument,limit,output,0,check,argument,stream,open,timeout,0,check,argument,stream,inactivity,timeout,0,this,limit,total,limit,total,this,limit,input,limit,input,this,limit,output,limit,output,this,stream,open,timeout,stream,open,timeout,this,stream,inactivity,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> public ConnectionLimitingSettings( 				int limitTotal, 				int limitInput, 				int limitOutput, 				long streamOpenTimeout, 				long streamInactivityTimeout);1512472868;Creates a new ConnectionLimitingSettings with the given parameters.__@param limitTotal The limit for the total number of connections, or 0, if no limit._@param limitInput The limit for the number of input stream connections, or 0, if no limit._@param limitOutput The limit for the number of output stream connections, or 0, if no limit._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public ConnectionLimitingSettings(_				int limitTotal,_				int limitInput,_				int limitOutput,_				long streamOpenTimeout,_				long streamInactivityTimeout) {_			checkArgument(limitTotal >= 0)__			checkArgument(limitInput >= 0)__			checkArgument(limitOutput >= 0)__			checkArgument(streamOpenTimeout >= 0)__			checkArgument(streamInactivityTimeout >= 0)___			this.limitTotal = limitTotal__			this.limitInput = limitInput__			this.limitOutput = limitOutput__			this.streamOpenTimeout = streamOpenTimeout__			this.streamInactivityTimeout = streamInactivityTimeout__		};creates,a,new,connection,limiting,settings,with,the,given,parameters,param,limit,total,the,limit,for,the,total,number,of,connections,or,0,if,no,limit,param,limit,input,the,limit,for,the,number,of,input,stream,connections,or,0,if,no,limit,param,limit,output,the,limit,for,the,number,of,output,stream,connections,or,0,if,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,connection,limiting,settings,int,limit,total,int,limit,input,int,limit,output,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,limit,total,0,check,argument,limit,input,0,check,argument,limit,output,0,check,argument,stream,open,timeout,0,check,argument,stream,inactivity,timeout,0,this,limit,total,limit,total,this,limit,input,limit,input,this,limit,output,limit,output,this,stream,open,timeout,stream,open,timeout,this,stream,inactivity,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> public ConnectionLimitingSettings( 				int limitTotal, 				int limitInput, 				int limitOutput, 				long streamOpenTimeout, 				long streamInactivityTimeout);1524407315;Creates a new ConnectionLimitingSettings with the given parameters.__@param limitTotal The limit for the total number of connections, or 0, if no limit._@param limitInput The limit for the number of input stream connections, or 0, if no limit._@param limitOutput The limit for the number of output stream connections, or 0, if no limit._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public ConnectionLimitingSettings(_				int limitTotal,_				int limitInput,_				int limitOutput,_				long streamOpenTimeout,_				long streamInactivityTimeout) {_			checkArgument(limitTotal >= 0)__			checkArgument(limitInput >= 0)__			checkArgument(limitOutput >= 0)__			checkArgument(streamOpenTimeout >= 0)__			checkArgument(streamInactivityTimeout >= 0)___			this.limitTotal = limitTotal__			this.limitInput = limitInput__			this.limitOutput = limitOutput__			this.streamOpenTimeout = streamOpenTimeout__			this.streamInactivityTimeout = streamInactivityTimeout__		};creates,a,new,connection,limiting,settings,with,the,given,parameters,param,limit,total,the,limit,for,the,total,number,of,connections,or,0,if,no,limit,param,limit,input,the,limit,for,the,number,of,input,stream,connections,or,0,if,no,limit,param,limit,output,the,limit,for,the,number,of,output,stream,connections,or,0,if,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,connection,limiting,settings,int,limit,total,int,limit,input,int,limit,output,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,limit,total,0,check,argument,limit,input,0,check,argument,limit,output,0,check,argument,stream,open,timeout,0,check,argument,stream,inactivity,timeout,0,this,limit,total,limit,total,this,limit,input,limit,input,this,limit,output,limit,output,this,stream,open,timeout,stream,open,timeout,this,stream,inactivity,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> public ConnectionLimitingSettings( 				int limitTotal, 				int limitInput, 				int limitOutput, 				long streamOpenTimeout, 				long streamInactivityTimeout);1528105942;Creates a new ConnectionLimitingSettings with the given parameters.__@param limitTotal The limit for the total number of connections, or 0, if no limit._@param limitInput The limit for the number of input stream connections, or 0, if no limit._@param limitOutput The limit for the number of output stream connections, or 0, if no limit._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public ConnectionLimitingSettings(_				int limitTotal,_				int limitInput,_				int limitOutput,_				long streamOpenTimeout,_				long streamInactivityTimeout) {_			checkArgument(limitTotal >= 0)__			checkArgument(limitInput >= 0)__			checkArgument(limitOutput >= 0)__			checkArgument(streamOpenTimeout >= 0)__			checkArgument(streamInactivityTimeout >= 0)___			this.limitTotal = limitTotal__			this.limitInput = limitInput__			this.limitOutput = limitOutput__			this.streamOpenTimeout = streamOpenTimeout__			this.streamInactivityTimeout = streamInactivityTimeout__		};creates,a,new,connection,limiting,settings,with,the,given,parameters,param,limit,total,the,limit,for,the,total,number,of,connections,or,0,if,no,limit,param,limit,input,the,limit,for,the,number,of,input,stream,connections,or,0,if,no,limit,param,limit,output,the,limit,for,the,number,of,output,stream,connections,or,0,if,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,connection,limiting,settings,int,limit,total,int,limit,input,int,limit,output,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,limit,total,0,check,argument,limit,input,0,check,argument,limit,output,0,check,argument,stream,open,timeout,0,check,argument,stream,inactivity,timeout,0,this,limit,total,limit,total,this,limit,input,limit,input,this,limit,output,limit,output,this,stream,open,timeout,stream,open,timeout,this,stream,inactivity,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			int maxNumOpenOutputStreams, 			int maxNumOpenInputStreams, 			long streamOpenTimeout, 			long streamInactivityTimeout);1511520068;Creates a new output connection limiting file system, limiting input and output streams with_potentially different quotas.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param maxNumOpenOutputStreams The maximum number of concurrent open output streams (0 means no limit)._@param maxNumOpenInputStreams  The maximum number of concurrent open input streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			int maxNumOpenOutputStreams,_			int maxNumOpenInputStreams,_			long streamOpenTimeout,_			long streamInactivityTimeout) {__		checkArgument(maxNumOpenStreamsTotal >= 0, "maxNumOpenStreamsTotal must be >= 0")__		checkArgument(maxNumOpenOutputStreams >= 0, "maxNumOpenOutputStreams must be >= 0")__		checkArgument(maxNumOpenInputStreams >= 0, "maxNumOpenInputStreams must be >= 0")__		checkArgument(streamOpenTimeout >= 0, "stream opening timeout must be >= 0 (0 means infinite timeout)")__		checkArgument(streamInactivityTimeout >= 0, "stream inactivity timeout must be >= 0 (0 means infinite timeout)")___		this.originalFs = checkNotNull(originalFs, "originalFs")__		this.lock = new ReentrantLock(true)__		this.available = lock.newCondition()__		this.openOutputStreams = new HashSet<>()__		this.openInputStreams = new HashSet<>()__		this.maxNumOpenStreamsTotal = maxNumOpenStreamsTotal__		this.maxNumOpenOutputStreams = maxNumOpenOutputStreams__		this.maxNumOpenInputStreams = maxNumOpenInputStreams___		_		final long openTimeoutNanos = streamOpenTimeout * 1_000_000__		final long inactivityTimeoutNanos = streamInactivityTimeout * 1_000_000___		this.streamOpenTimeoutNanos =_				openTimeoutNanos >= streamOpenTimeout ? openTimeoutNanos : Long.MAX_VALUE___		this.streamInactivityTimeoutNanos =_				inactivityTimeoutNanos >= streamInactivityTimeout ? inactivityTimeoutNanos : Long.MAX_VALUE__	};creates,a,new,output,connection,limiting,file,system,limiting,input,and,output,streams,with,potentially,different,quotas,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,max,num,open,output,streams,the,maximum,number,of,concurrent,open,output,streams,0,means,no,limit,param,max,num,open,input,streams,the,maximum,number,of,concurrent,open,input,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,int,max,num,open,output,streams,int,max,num,open,input,streams,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,max,num,open,streams,total,0,max,num,open,streams,total,must,be,0,check,argument,max,num,open,output,streams,0,max,num,open,output,streams,must,be,0,check,argument,max,num,open,input,streams,0,max,num,open,input,streams,must,be,0,check,argument,stream,open,timeout,0,stream,opening,timeout,must,be,0,0,means,infinite,timeout,check,argument,stream,inactivity,timeout,0,stream,inactivity,timeout,must,be,0,0,means,infinite,timeout,this,original,fs,check,not,null,original,fs,original,fs,this,lock,new,reentrant,lock,true,this,available,lock,new,condition,this,open,output,streams,new,hash,set,this,open,input,streams,new,hash,set,this,max,num,open,streams,total,max,num,open,streams,total,this,max,num,open,output,streams,max,num,open,output,streams,this,max,num,open,input,streams,max,num,open,input,streams,final,long,open,timeout,nanos,stream,open,timeout,final,long,inactivity,timeout,nanos,stream,inactivity,timeout,this,stream,open,timeout,nanos,open,timeout,nanos,stream,open,timeout,open,timeout,nanos,long,this,stream,inactivity,timeout,nanos,inactivity,timeout,nanos,stream,inactivity,timeout,inactivity,timeout,nanos,long
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			int maxNumOpenOutputStreams, 			int maxNumOpenInputStreams, 			long streamOpenTimeout, 			long streamInactivityTimeout);1512472868;Creates a new output connection limiting file system, limiting input and output streams with_potentially different quotas.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param maxNumOpenOutputStreams The maximum number of concurrent open output streams (0 means no limit)._@param maxNumOpenInputStreams  The maximum number of concurrent open input streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			int maxNumOpenOutputStreams,_			int maxNumOpenInputStreams,_			long streamOpenTimeout,_			long streamInactivityTimeout) {__		checkArgument(maxNumOpenStreamsTotal >= 0, "maxNumOpenStreamsTotal must be >= 0")__		checkArgument(maxNumOpenOutputStreams >= 0, "maxNumOpenOutputStreams must be >= 0")__		checkArgument(maxNumOpenInputStreams >= 0, "maxNumOpenInputStreams must be >= 0")__		checkArgument(streamOpenTimeout >= 0, "stream opening timeout must be >= 0 (0 means infinite timeout)")__		checkArgument(streamInactivityTimeout >= 0, "stream inactivity timeout must be >= 0 (0 means infinite timeout)")___		this.originalFs = checkNotNull(originalFs, "originalFs")__		this.lock = new ReentrantLock(true)__		this.available = lock.newCondition()__		this.openOutputStreams = new HashSet<>()__		this.openInputStreams = new HashSet<>()__		this.maxNumOpenStreamsTotal = maxNumOpenStreamsTotal__		this.maxNumOpenOutputStreams = maxNumOpenOutputStreams__		this.maxNumOpenInputStreams = maxNumOpenInputStreams___		_		final long openTimeoutNanos = streamOpenTimeout * 1_000_000__		final long inactivityTimeoutNanos = streamInactivityTimeout * 1_000_000___		this.streamOpenTimeoutNanos =_				openTimeoutNanos >= streamOpenTimeout ? openTimeoutNanos : Long.MAX_VALUE___		this.streamInactivityTimeoutNanos =_				inactivityTimeoutNanos >= streamInactivityTimeout ? inactivityTimeoutNanos : Long.MAX_VALUE__	};creates,a,new,output,connection,limiting,file,system,limiting,input,and,output,streams,with,potentially,different,quotas,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,max,num,open,output,streams,the,maximum,number,of,concurrent,open,output,streams,0,means,no,limit,param,max,num,open,input,streams,the,maximum,number,of,concurrent,open,input,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,int,max,num,open,output,streams,int,max,num,open,input,streams,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,max,num,open,streams,total,0,max,num,open,streams,total,must,be,0,check,argument,max,num,open,output,streams,0,max,num,open,output,streams,must,be,0,check,argument,max,num,open,input,streams,0,max,num,open,input,streams,must,be,0,check,argument,stream,open,timeout,0,stream,opening,timeout,must,be,0,0,means,infinite,timeout,check,argument,stream,inactivity,timeout,0,stream,inactivity,timeout,must,be,0,0,means,infinite,timeout,this,original,fs,check,not,null,original,fs,original,fs,this,lock,new,reentrant,lock,true,this,available,lock,new,condition,this,open,output,streams,new,hash,set,this,open,input,streams,new,hash,set,this,max,num,open,streams,total,max,num,open,streams,total,this,max,num,open,output,streams,max,num,open,output,streams,this,max,num,open,input,streams,max,num,open,input,streams,final,long,open,timeout,nanos,stream,open,timeout,final,long,inactivity,timeout,nanos,stream,inactivity,timeout,this,stream,open,timeout,nanos,open,timeout,nanos,stream,open,timeout,open,timeout,nanos,long,this,stream,inactivity,timeout,nanos,inactivity,timeout,nanos,stream,inactivity,timeout,inactivity,timeout,nanos,long
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			int maxNumOpenOutputStreams, 			int maxNumOpenInputStreams, 			long streamOpenTimeout, 			long streamInactivityTimeout);1524407315;Creates a new output connection limiting file system, limiting input and output streams with_potentially different quotas.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param maxNumOpenOutputStreams The maximum number of concurrent open output streams (0 means no limit)._@param maxNumOpenInputStreams  The maximum number of concurrent open input streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			int maxNumOpenOutputStreams,_			int maxNumOpenInputStreams,_			long streamOpenTimeout,_			long streamInactivityTimeout) {__		checkArgument(maxNumOpenStreamsTotal >= 0, "maxNumOpenStreamsTotal must be >= 0")__		checkArgument(maxNumOpenOutputStreams >= 0, "maxNumOpenOutputStreams must be >= 0")__		checkArgument(maxNumOpenInputStreams >= 0, "maxNumOpenInputStreams must be >= 0")__		checkArgument(streamOpenTimeout >= 0, "stream opening timeout must be >= 0 (0 means infinite timeout)")__		checkArgument(streamInactivityTimeout >= 0, "stream inactivity timeout must be >= 0 (0 means infinite timeout)")___		this.originalFs = checkNotNull(originalFs, "originalFs")__		this.lock = new ReentrantLock(true)__		this.available = lock.newCondition()__		this.openOutputStreams = new HashSet<>()__		this.openInputStreams = new HashSet<>()__		this.maxNumOpenStreamsTotal = maxNumOpenStreamsTotal__		this.maxNumOpenOutputStreams = maxNumOpenOutputStreams__		this.maxNumOpenInputStreams = maxNumOpenInputStreams___		_		final long openTimeoutNanos = streamOpenTimeout * 1_000_000__		final long inactivityTimeoutNanos = streamInactivityTimeout * 1_000_000___		this.streamOpenTimeoutNanos =_				openTimeoutNanos >= streamOpenTimeout ? openTimeoutNanos : Long.MAX_VALUE___		this.streamInactivityTimeoutNanos =_				inactivityTimeoutNanos >= streamInactivityTimeout ? inactivityTimeoutNanos : Long.MAX_VALUE__	};creates,a,new,output,connection,limiting,file,system,limiting,input,and,output,streams,with,potentially,different,quotas,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,max,num,open,output,streams,the,maximum,number,of,concurrent,open,output,streams,0,means,no,limit,param,max,num,open,input,streams,the,maximum,number,of,concurrent,open,input,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,int,max,num,open,output,streams,int,max,num,open,input,streams,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,max,num,open,streams,total,0,max,num,open,streams,total,must,be,0,check,argument,max,num,open,output,streams,0,max,num,open,output,streams,must,be,0,check,argument,max,num,open,input,streams,0,max,num,open,input,streams,must,be,0,check,argument,stream,open,timeout,0,stream,opening,timeout,must,be,0,0,means,infinite,timeout,check,argument,stream,inactivity,timeout,0,stream,inactivity,timeout,must,be,0,0,means,infinite,timeout,this,original,fs,check,not,null,original,fs,original,fs,this,lock,new,reentrant,lock,true,this,available,lock,new,condition,this,open,output,streams,new,hash,set,this,open,input,streams,new,hash,set,this,max,num,open,streams,total,max,num,open,streams,total,this,max,num,open,output,streams,max,num,open,output,streams,this,max,num,open,input,streams,max,num,open,input,streams,final,long,open,timeout,nanos,stream,open,timeout,final,long,inactivity,timeout,nanos,stream,inactivity,timeout,this,stream,open,timeout,nanos,open,timeout,nanos,stream,open,timeout,open,timeout,nanos,long,this,stream,inactivity,timeout,nanos,inactivity,timeout,nanos,stream,inactivity,timeout,inactivity,timeout,nanos,long
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			int maxNumOpenOutputStreams, 			int maxNumOpenInputStreams, 			long streamOpenTimeout, 			long streamInactivityTimeout);1528105942;Creates a new output connection limiting file system, limiting input and output streams with_potentially different quotas.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param maxNumOpenOutputStreams The maximum number of concurrent open output streams (0 means no limit)._@param maxNumOpenInputStreams  The maximum number of concurrent open input streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			int maxNumOpenOutputStreams,_			int maxNumOpenInputStreams,_			long streamOpenTimeout,_			long streamInactivityTimeout) {__		checkArgument(maxNumOpenStreamsTotal >= 0, "maxNumOpenStreamsTotal must be >= 0")__		checkArgument(maxNumOpenOutputStreams >= 0, "maxNumOpenOutputStreams must be >= 0")__		checkArgument(maxNumOpenInputStreams >= 0, "maxNumOpenInputStreams must be >= 0")__		checkArgument(streamOpenTimeout >= 0, "stream opening timeout must be >= 0 (0 means infinite timeout)")__		checkArgument(streamInactivityTimeout >= 0, "stream inactivity timeout must be >= 0 (0 means infinite timeout)")___		this.originalFs = checkNotNull(originalFs, "originalFs")__		this.lock = new ReentrantLock(true)__		this.available = lock.newCondition()__		this.openOutputStreams = new HashSet<>()__		this.openInputStreams = new HashSet<>()__		this.maxNumOpenStreamsTotal = maxNumOpenStreamsTotal__		this.maxNumOpenOutputStreams = maxNumOpenOutputStreams__		this.maxNumOpenInputStreams = maxNumOpenInputStreams___		_		final long openTimeoutNanos = streamOpenTimeout * 1_000_000__		final long inactivityTimeoutNanos = streamInactivityTimeout * 1_000_000___		this.streamOpenTimeoutNanos =_				openTimeoutNanos >= streamOpenTimeout ? openTimeoutNanos : Long.MAX_VALUE___		this.streamInactivityTimeoutNanos =_				inactivityTimeoutNanos >= streamInactivityTimeout ? inactivityTimeoutNanos : Long.MAX_VALUE__	};creates,a,new,output,connection,limiting,file,system,limiting,input,and,output,streams,with,potentially,different,quotas,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,max,num,open,output,streams,the,maximum,number,of,concurrent,open,output,streams,0,means,no,limit,param,max,num,open,input,streams,the,maximum,number,of,concurrent,open,input,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,int,max,num,open,output,streams,int,max,num,open,input,streams,long,stream,open,timeout,long,stream,inactivity,timeout,check,argument,max,num,open,streams,total,0,max,num,open,streams,total,must,be,0,check,argument,max,num,open,output,streams,0,max,num,open,output,streams,must,be,0,check,argument,max,num,open,input,streams,0,max,num,open,input,streams,must,be,0,check,argument,stream,open,timeout,0,stream,opening,timeout,must,be,0,0,means,infinite,timeout,check,argument,stream,inactivity,timeout,0,stream,inactivity,timeout,must,be,0,0,means,infinite,timeout,this,original,fs,check,not,null,original,fs,original,fs,this,lock,new,reentrant,lock,true,this,available,lock,new,condition,this,open,output,streams,new,hash,set,this,open,input,streams,new,hash,set,this,max,num,open,streams,total,max,num,open,streams,total,this,max,num,open,output,streams,max,num,open,output,streams,this,max,num,open,input,streams,max,num,open,input,streams,final,long,open,timeout,nanos,stream,open,timeout,final,long,inactivity,timeout,nanos,stream,inactivity,timeout,this,stream,open,timeout,nanos,open,timeout,nanos,stream,open,timeout,open,timeout,nanos,long,this,stream,inactivity,timeout,nanos,inactivity,timeout,nanos,stream,inactivity,timeout,inactivity,timeout,nanos,long
LimitedConnectionsFileSystem -> void unregisterOutputStream(OutStream stream);1511520068;Atomically removes the given output stream from the set of currently open output streams,_and signals that new stream can now be opened.;void unregisterOutputStream(OutStream stream) {_		lock.lock()__		try {_			_			if (openOutputStreams.remove(stream)) {_				numReservedOutputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,output,stream,from,the,set,of,currently,open,output,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,output,stream,out,stream,stream,lock,lock,try,if,open,output,streams,remove,stream,num,reserved,output,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterOutputStream(OutStream stream);1512472868;Atomically removes the given output stream from the set of currently open output streams,_and signals that new stream can now be opened.;void unregisterOutputStream(OutStream stream) {_		lock.lock()__		try {_			_			if (openOutputStreams.remove(stream)) {_				numReservedOutputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,output,stream,from,the,set,of,currently,open,output,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,output,stream,out,stream,stream,lock,lock,try,if,open,output,streams,remove,stream,num,reserved,output,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterOutputStream(OutStream stream);1524407315;Atomically removes the given output stream from the set of currently open output streams,_and signals that new stream can now be opened.;void unregisterOutputStream(OutStream stream) {_		lock.lock()__		try {_			_			if (openOutputStreams.remove(stream)) {_				numReservedOutputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,output,stream,from,the,set,of,currently,open,output,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,output,stream,out,stream,stream,lock,lock,try,if,open,output,streams,remove,stream,num,reserved,output,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterOutputStream(OutStream stream);1528105942;Atomically removes the given output stream from the set of currently open output streams,_and signals that new stream can now be opened.;void unregisterOutputStream(OutStream stream) {_		lock.lock()__		try {_			_			if (openOutputStreams.remove(stream)) {_				numReservedOutputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,output,stream,from,the,set,of,currently,open,output,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,output,stream,out,stream,stream,lock,lock,try,if,open,output,streams,remove,stream,num,reserved,output,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterInputStream(InStream stream);1511520068;Atomically removes the given input stream from the set of currently open input streams,_and signals that new stream can now be opened.;void unregisterInputStream(InStream stream) {_		lock.lock()__		try {_			_			if (openInputStreams.remove(stream)) {_				numReservedInputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,input,stream,from,the,set,of,currently,open,input,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,input,stream,in,stream,stream,lock,lock,try,if,open,input,streams,remove,stream,num,reserved,input,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterInputStream(InStream stream);1512472868;Atomically removes the given input stream from the set of currently open input streams,_and signals that new stream can now be opened.;void unregisterInputStream(InStream stream) {_		lock.lock()__		try {_			_			if (openInputStreams.remove(stream)) {_				numReservedInputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,input,stream,from,the,set,of,currently,open,input,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,input,stream,in,stream,stream,lock,lock,try,if,open,input,streams,remove,stream,num,reserved,input,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterInputStream(InStream stream);1524407315;Atomically removes the given input stream from the set of currently open input streams,_and signals that new stream can now be opened.;void unregisterInputStream(InStream stream) {_		lock.lock()__		try {_			_			if (openInputStreams.remove(stream)) {_				numReservedInputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,input,stream,from,the,set,of,currently,open,input,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,input,stream,in,stream,stream,lock,lock,try,if,open,input,streams,remove,stream,num,reserved,input,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> void unregisterInputStream(InStream stream);1528105942;Atomically removes the given input stream from the set of currently open input streams,_and signals that new stream can now be opened.;void unregisterInputStream(InStream stream) {_		lock.lock()__		try {_			_			if (openInputStreams.remove(stream)) {_				numReservedInputStreams--__				available.signalAll()__			}_		}_		finally {_			lock.unlock()__		}_	};atomically,removes,the,given,input,stream,from,the,set,of,currently,open,input,streams,and,signals,that,new,stream,can,now,be,opened;void,unregister,input,stream,in,stream,stream,lock,lock,try,if,open,input,streams,remove,stream,num,reserved,input,streams,available,signal,all,finally,lock,unlock
LimitedConnectionsFileSystem -> StreamProgressTracker -> public long getLastCheckTimestampNanos();1511520068;Gets the timestamp when the last inactivity evaluation was made.;public long getLastCheckTimestampNanos() {_			return lastCheckTimestampNanos__		};gets,the,timestamp,when,the,last,inactivity,evaluation,was,made;public,long,get,last,check,timestamp,nanos,return,last,check,timestamp,nanos
LimitedConnectionsFileSystem -> StreamProgressTracker -> public long getLastCheckTimestampNanos();1512472868;Gets the timestamp when the last inactivity evaluation was made.;public long getLastCheckTimestampNanos() {_			return lastCheckTimestampNanos__		};gets,the,timestamp,when,the,last,inactivity,evaluation,was,made;public,long,get,last,check,timestamp,nanos,return,last,check,timestamp,nanos
LimitedConnectionsFileSystem -> StreamProgressTracker -> public long getLastCheckTimestampNanos();1524407315;Gets the timestamp when the last inactivity evaluation was made.;public long getLastCheckTimestampNanos() {_			return lastCheckTimestampNanos__		};gets,the,timestamp,when,the,last,inactivity,evaluation,was,made;public,long,get,last,check,timestamp,nanos,return,last,check,timestamp,nanos
LimitedConnectionsFileSystem -> StreamProgressTracker -> public long getLastCheckTimestampNanos();1528105942;Gets the timestamp when the last inactivity evaluation was made.;public long getLastCheckTimestampNanos() {_			return lastCheckTimestampNanos__		};gets,the,timestamp,when,the,last,inactivity,evaluation,was,made;public,long,get,last,check,timestamp,nanos,return,last,check,timestamp,nanos
LimitedConnectionsFileSystem -> StreamProgressTracker -> public boolean checkNewBytesAndMark(long timestamp) throws IOException;1511520068;Checks whether there were new bytes since the last time this method was invoked._This also sets the given timestamp, to be read via {@link #getLastCheckTimestampNanos()}.__@return True, if there were new bytes, false if not.;public boolean checkNewBytesAndMark(long timestamp) throws IOException {_			_			lastCheckTimestampNanos = timestamp___			final long bytesNow = stream.getPos()__			if (bytesNow > lastCheckBytes) {_				lastCheckBytes = bytesNow__				return true__			}_			else {_				return false__			}_		};checks,whether,there,were,new,bytes,since,the,last,time,this,method,was,invoked,this,also,sets,the,given,timestamp,to,be,read,via,link,get,last,check,timestamp,nanos,return,true,if,there,were,new,bytes,false,if,not;public,boolean,check,new,bytes,and,mark,long,timestamp,throws,ioexception,last,check,timestamp,nanos,timestamp,final,long,bytes,now,stream,get,pos,if,bytes,now,last,check,bytes,last,check,bytes,bytes,now,return,true,else,return,false
LimitedConnectionsFileSystem -> StreamProgressTracker -> public boolean checkNewBytesAndMark(long timestamp) throws IOException;1512472868;Checks whether there were new bytes since the last time this method was invoked._This also sets the given timestamp, to be read via {@link #getLastCheckTimestampNanos()}.__@return True, if there were new bytes, false if not.;public boolean checkNewBytesAndMark(long timestamp) throws IOException {_			_			lastCheckTimestampNanos = timestamp___			final long bytesNow = stream.getPos()__			if (bytesNow > lastCheckBytes) {_				lastCheckBytes = bytesNow__				return true__			}_			else {_				return false__			}_		};checks,whether,there,were,new,bytes,since,the,last,time,this,method,was,invoked,this,also,sets,the,given,timestamp,to,be,read,via,link,get,last,check,timestamp,nanos,return,true,if,there,were,new,bytes,false,if,not;public,boolean,check,new,bytes,and,mark,long,timestamp,throws,ioexception,last,check,timestamp,nanos,timestamp,final,long,bytes,now,stream,get,pos,if,bytes,now,last,check,bytes,last,check,bytes,bytes,now,return,true,else,return,false
LimitedConnectionsFileSystem -> StreamProgressTracker -> public boolean checkNewBytesAndMark(long timestamp) throws IOException;1524407315;Checks whether there were new bytes since the last time this method was invoked._This also sets the given timestamp, to be read via {@link #getLastCheckTimestampNanos()}.__@return True, if there were new bytes, false if not.;public boolean checkNewBytesAndMark(long timestamp) throws IOException {_			_			lastCheckTimestampNanos = timestamp___			final long bytesNow = stream.getPos()__			if (bytesNow > lastCheckBytes) {_				lastCheckBytes = bytesNow__				return true__			}_			else {_				return false__			}_		};checks,whether,there,were,new,bytes,since,the,last,time,this,method,was,invoked,this,also,sets,the,given,timestamp,to,be,read,via,link,get,last,check,timestamp,nanos,return,true,if,there,were,new,bytes,false,if,not;public,boolean,check,new,bytes,and,mark,long,timestamp,throws,ioexception,last,check,timestamp,nanos,timestamp,final,long,bytes,now,stream,get,pos,if,bytes,now,last,check,bytes,last,check,bytes,bytes,now,return,true,else,return,false
LimitedConnectionsFileSystem -> StreamProgressTracker -> public boolean checkNewBytesAndMark(long timestamp) throws IOException;1528105942;Checks whether there were new bytes since the last time this method was invoked._This also sets the given timestamp, to be read via {@link #getLastCheckTimestampNanos()}.__@return True, if there were new bytes, false if not.;public boolean checkNewBytesAndMark(long timestamp) throws IOException {_			_			lastCheckTimestampNanos = timestamp___			final long bytesNow = stream.getPos()__			if (bytesNow > lastCheckBytes) {_				lastCheckBytes = bytesNow__				return true__			}_			else {_				return false__			}_		};checks,whether,there,were,new,bytes,since,the,last,time,this,method,was,invoked,this,also,sets,the,given,timestamp,to,be,read,via,link,get,last,check,timestamp,nanos,return,true,if,there,were,new,bytes,false,if,not;public,boolean,check,new,bytes,and,mark,long,timestamp,throws,ioexception,last,check,timestamp,nanos,timestamp,final,long,bytes,now,stream,get,pos,if,bytes,now,last,check,bytes,last,check,bytes,bytes,now,return,true,else,return,false
LimitedConnectionsFileSystem -> public int getNumberOfOpenOutputStreams();1511520068;Gets the number of currently open output streams.;public int getNumberOfOpenOutputStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams__		}_		finally {_			lock.unlock()__		}_	};gets,the,number,of,currently,open,output,streams;public,int,get,number,of,open,output,streams,lock,lock,try,return,num,reserved,output,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getNumberOfOpenOutputStreams();1512472868;Gets the number of currently open output streams.;public int getNumberOfOpenOutputStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams__		}_		finally {_			lock.unlock()__		}_	};gets,the,number,of,currently,open,output,streams;public,int,get,number,of,open,output,streams,lock,lock,try,return,num,reserved,output,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getNumberOfOpenOutputStreams();1524407315;Gets the number of currently open output streams.;public int getNumberOfOpenOutputStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams__		}_		finally {_			lock.unlock()__		}_	};gets,the,number,of,currently,open,output,streams;public,int,get,number,of,open,output,streams,lock,lock,try,return,num,reserved,output,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getNumberOfOpenOutputStreams();1528105942;Gets the number of currently open output streams.;public int getNumberOfOpenOutputStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams__		}_		finally {_			lock.unlock()__		}_	};gets,the,number,of,currently,open,output,streams;public,int,get,number,of,open,output,streams,lock,lock,try,return,num,reserved,output,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> @Nullable 		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme);1511520068;Parses and returns the settings for connection limiting, for the file system with_the given file system scheme.__@param config The configuration to check._@param fsScheme The file system scheme.__@return The parsed configuration, or null, if no connection limiting is configured.;@Nullable_		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme) {_			checkNotNull(fsScheme, "fsScheme")__			checkNotNull(config, "config")___			final ConfigOption<Integer> totalLimitOption = CoreOptions.fileSystemConnectionLimit(fsScheme)__			final ConfigOption<Integer> limitInOption = CoreOptions.fileSystemConnectionLimitIn(fsScheme)__			final ConfigOption<Integer> limitOutOption = CoreOptions.fileSystemConnectionLimitOut(fsScheme)___			final int totalLimit = config.getInteger(totalLimitOption)__			final int limitIn = config.getInteger(limitInOption)__			final int limitOut = config.getInteger(limitOutOption)___			checkLimit(totalLimit, totalLimitOption)__			checkLimit(limitIn, limitInOption)__			checkLimit(limitOut, limitOutOption)___			_			if (totalLimit <= 0 || limitIn <= 0 || limitOut <= 0) {_				_				return null__			}_			else {_				final ConfigOption<Long> openTimeoutOption =_						CoreOptions.fileSystemConnectionLimitTimeout(fsScheme)__				final ConfigOption<Long> inactivityTimeoutOption =_						CoreOptions.fileSystemConnectionLimitStreamInactivityTimeout(fsScheme)___				final long openTimeout = config.getLong(openTimeoutOption)__				final long inactivityTimeout = config.getLong(inactivityTimeoutOption)___				checkTimeout(openTimeout, openTimeoutOption)__				checkTimeout(inactivityTimeout, inactivityTimeoutOption)___				return new ConnectionLimitingSettings(_						totalLimit == -1 ? 0 : totalLimit,_						limitIn == -1 ? 0 : limitIn,_						limitOut == -1 ? 0 : limitOut,_						openTimeout,_						inactivityTimeout)__			}_		};parses,and,returns,the,settings,for,connection,limiting,for,the,file,system,with,the,given,file,system,scheme,param,config,the,configuration,to,check,param,fs,scheme,the,file,system,scheme,return,the,parsed,configuration,or,null,if,no,connection,limiting,is,configured;nullable,public,static,connection,limiting,settings,from,config,configuration,config,string,fs,scheme,check,not,null,fs,scheme,fs,scheme,check,not,null,config,config,final,config,option,integer,total,limit,option,core,options,file,system,connection,limit,fs,scheme,final,config,option,integer,limit,in,option,core,options,file,system,connection,limit,in,fs,scheme,final,config,option,integer,limit,out,option,core,options,file,system,connection,limit,out,fs,scheme,final,int,total,limit,config,get,integer,total,limit,option,final,int,limit,in,config,get,integer,limit,in,option,final,int,limit,out,config,get,integer,limit,out,option,check,limit,total,limit,total,limit,option,check,limit,limit,in,limit,in,option,check,limit,limit,out,limit,out,option,if,total,limit,0,limit,in,0,limit,out,0,return,null,else,final,config,option,long,open,timeout,option,core,options,file,system,connection,limit,timeout,fs,scheme,final,config,option,long,inactivity,timeout,option,core,options,file,system,connection,limit,stream,inactivity,timeout,fs,scheme,final,long,open,timeout,config,get,long,open,timeout,option,final,long,inactivity,timeout,config,get,long,inactivity,timeout,option,check,timeout,open,timeout,open,timeout,option,check,timeout,inactivity,timeout,inactivity,timeout,option,return,new,connection,limiting,settings,total,limit,1,0,total,limit,limit,in,1,0,limit,in,limit,out,1,0,limit,out,open,timeout,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> @Nullable 		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme);1512472868;Parses and returns the settings for connection limiting, for the file system with_the given file system scheme.__@param config The configuration to check._@param fsScheme The file system scheme.__@return The parsed configuration, or null, if no connection limiting is configured.;@Nullable_		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme) {_			checkNotNull(fsScheme, "fsScheme")__			checkNotNull(config, "config")___			final ConfigOption<Integer> totalLimitOption = CoreOptions.fileSystemConnectionLimit(fsScheme)__			final ConfigOption<Integer> limitInOption = CoreOptions.fileSystemConnectionLimitIn(fsScheme)__			final ConfigOption<Integer> limitOutOption = CoreOptions.fileSystemConnectionLimitOut(fsScheme)___			final int totalLimit = config.getInteger(totalLimitOption)__			final int limitIn = config.getInteger(limitInOption)__			final int limitOut = config.getInteger(limitOutOption)___			checkLimit(totalLimit, totalLimitOption)__			checkLimit(limitIn, limitInOption)__			checkLimit(limitOut, limitOutOption)___			_			if (totalLimit <= 0 && limitIn <= 0 && limitOut <= 0) {_				_				return null__			}_			else {_				final ConfigOption<Long> openTimeoutOption =_						CoreOptions.fileSystemConnectionLimitTimeout(fsScheme)__				final ConfigOption<Long> inactivityTimeoutOption =_						CoreOptions.fileSystemConnectionLimitStreamInactivityTimeout(fsScheme)___				final long openTimeout = config.getLong(openTimeoutOption)__				final long inactivityTimeout = config.getLong(inactivityTimeoutOption)___				checkTimeout(openTimeout, openTimeoutOption)__				checkTimeout(inactivityTimeout, inactivityTimeoutOption)___				return new ConnectionLimitingSettings(_						totalLimit == -1 ? 0 : totalLimit,_						limitIn == -1 ? 0 : limitIn,_						limitOut == -1 ? 0 : limitOut,_						openTimeout,_						inactivityTimeout)__			}_		};parses,and,returns,the,settings,for,connection,limiting,for,the,file,system,with,the,given,file,system,scheme,param,config,the,configuration,to,check,param,fs,scheme,the,file,system,scheme,return,the,parsed,configuration,or,null,if,no,connection,limiting,is,configured;nullable,public,static,connection,limiting,settings,from,config,configuration,config,string,fs,scheme,check,not,null,fs,scheme,fs,scheme,check,not,null,config,config,final,config,option,integer,total,limit,option,core,options,file,system,connection,limit,fs,scheme,final,config,option,integer,limit,in,option,core,options,file,system,connection,limit,in,fs,scheme,final,config,option,integer,limit,out,option,core,options,file,system,connection,limit,out,fs,scheme,final,int,total,limit,config,get,integer,total,limit,option,final,int,limit,in,config,get,integer,limit,in,option,final,int,limit,out,config,get,integer,limit,out,option,check,limit,total,limit,total,limit,option,check,limit,limit,in,limit,in,option,check,limit,limit,out,limit,out,option,if,total,limit,0,limit,in,0,limit,out,0,return,null,else,final,config,option,long,open,timeout,option,core,options,file,system,connection,limit,timeout,fs,scheme,final,config,option,long,inactivity,timeout,option,core,options,file,system,connection,limit,stream,inactivity,timeout,fs,scheme,final,long,open,timeout,config,get,long,open,timeout,option,final,long,inactivity,timeout,config,get,long,inactivity,timeout,option,check,timeout,open,timeout,open,timeout,option,check,timeout,inactivity,timeout,inactivity,timeout,option,return,new,connection,limiting,settings,total,limit,1,0,total,limit,limit,in,1,0,limit,in,limit,out,1,0,limit,out,open,timeout,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> @Nullable 		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme);1524407315;Parses and returns the settings for connection limiting, for the file system with_the given file system scheme.__@param config The configuration to check._@param fsScheme The file system scheme.__@return The parsed configuration, or null, if no connection limiting is configured.;@Nullable_		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme) {_			checkNotNull(fsScheme, "fsScheme")__			checkNotNull(config, "config")___			final ConfigOption<Integer> totalLimitOption = CoreOptions.fileSystemConnectionLimit(fsScheme)__			final ConfigOption<Integer> limitInOption = CoreOptions.fileSystemConnectionLimitIn(fsScheme)__			final ConfigOption<Integer> limitOutOption = CoreOptions.fileSystemConnectionLimitOut(fsScheme)___			final int totalLimit = config.getInteger(totalLimitOption)__			final int limitIn = config.getInteger(limitInOption)__			final int limitOut = config.getInteger(limitOutOption)___			checkLimit(totalLimit, totalLimitOption)__			checkLimit(limitIn, limitInOption)__			checkLimit(limitOut, limitOutOption)___			_			if (totalLimit <= 0 && limitIn <= 0 && limitOut <= 0) {_				_				return null__			}_			else {_				final ConfigOption<Long> openTimeoutOption =_						CoreOptions.fileSystemConnectionLimitTimeout(fsScheme)__				final ConfigOption<Long> inactivityTimeoutOption =_						CoreOptions.fileSystemConnectionLimitStreamInactivityTimeout(fsScheme)___				final long openTimeout = config.getLong(openTimeoutOption)__				final long inactivityTimeout = config.getLong(inactivityTimeoutOption)___				checkTimeout(openTimeout, openTimeoutOption)__				checkTimeout(inactivityTimeout, inactivityTimeoutOption)___				return new ConnectionLimitingSettings(_						totalLimit == -1 ? 0 : totalLimit,_						limitIn == -1 ? 0 : limitIn,_						limitOut == -1 ? 0 : limitOut,_						openTimeout,_						inactivityTimeout)__			}_		};parses,and,returns,the,settings,for,connection,limiting,for,the,file,system,with,the,given,file,system,scheme,param,config,the,configuration,to,check,param,fs,scheme,the,file,system,scheme,return,the,parsed,configuration,or,null,if,no,connection,limiting,is,configured;nullable,public,static,connection,limiting,settings,from,config,configuration,config,string,fs,scheme,check,not,null,fs,scheme,fs,scheme,check,not,null,config,config,final,config,option,integer,total,limit,option,core,options,file,system,connection,limit,fs,scheme,final,config,option,integer,limit,in,option,core,options,file,system,connection,limit,in,fs,scheme,final,config,option,integer,limit,out,option,core,options,file,system,connection,limit,out,fs,scheme,final,int,total,limit,config,get,integer,total,limit,option,final,int,limit,in,config,get,integer,limit,in,option,final,int,limit,out,config,get,integer,limit,out,option,check,limit,total,limit,total,limit,option,check,limit,limit,in,limit,in,option,check,limit,limit,out,limit,out,option,if,total,limit,0,limit,in,0,limit,out,0,return,null,else,final,config,option,long,open,timeout,option,core,options,file,system,connection,limit,timeout,fs,scheme,final,config,option,long,inactivity,timeout,option,core,options,file,system,connection,limit,stream,inactivity,timeout,fs,scheme,final,long,open,timeout,config,get,long,open,timeout,option,final,long,inactivity,timeout,config,get,long,inactivity,timeout,option,check,timeout,open,timeout,open,timeout,option,check,timeout,inactivity,timeout,inactivity,timeout,option,return,new,connection,limiting,settings,total,limit,1,0,total,limit,limit,in,1,0,limit,in,limit,out,1,0,limit,out,open,timeout,inactivity,timeout
LimitedConnectionsFileSystem -> ConnectionLimitingSettings -> @Nullable 		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme);1528105942;Parses and returns the settings for connection limiting, for the file system with_the given file system scheme.__@param config The configuration to check._@param fsScheme The file system scheme.__@return The parsed configuration, or null, if no connection limiting is configured.;@Nullable_		public static ConnectionLimitingSettings fromConfig(Configuration config, String fsScheme) {_			checkNotNull(fsScheme, "fsScheme")__			checkNotNull(config, "config")___			final ConfigOption<Integer> totalLimitOption = CoreOptions.fileSystemConnectionLimit(fsScheme)__			final ConfigOption<Integer> limitInOption = CoreOptions.fileSystemConnectionLimitIn(fsScheme)__			final ConfigOption<Integer> limitOutOption = CoreOptions.fileSystemConnectionLimitOut(fsScheme)___			final int totalLimit = config.getInteger(totalLimitOption)__			final int limitIn = config.getInteger(limitInOption)__			final int limitOut = config.getInteger(limitOutOption)___			checkLimit(totalLimit, totalLimitOption)__			checkLimit(limitIn, limitInOption)__			checkLimit(limitOut, limitOutOption)___			_			if (totalLimit <= 0 && limitIn <= 0 && limitOut <= 0) {_				_				return null__			}_			else {_				final ConfigOption<Long> openTimeoutOption =_						CoreOptions.fileSystemConnectionLimitTimeout(fsScheme)__				final ConfigOption<Long> inactivityTimeoutOption =_						CoreOptions.fileSystemConnectionLimitStreamInactivityTimeout(fsScheme)___				final long openTimeout = config.getLong(openTimeoutOption)__				final long inactivityTimeout = config.getLong(inactivityTimeoutOption)___				checkTimeout(openTimeout, openTimeoutOption)__				checkTimeout(inactivityTimeout, inactivityTimeoutOption)___				return new ConnectionLimitingSettings(_						totalLimit == -1 ? 0 : totalLimit,_						limitIn == -1 ? 0 : limitIn,_						limitOut == -1 ? 0 : limitOut,_						openTimeout,_						inactivityTimeout)__			}_		};parses,and,returns,the,settings,for,connection,limiting,for,the,file,system,with,the,given,file,system,scheme,param,config,the,configuration,to,check,param,fs,scheme,the,file,system,scheme,return,the,parsed,configuration,or,null,if,no,connection,limiting,is,configured;nullable,public,static,connection,limiting,settings,from,config,configuration,config,string,fs,scheme,check,not,null,fs,scheme,fs,scheme,check,not,null,config,config,final,config,option,integer,total,limit,option,core,options,file,system,connection,limit,fs,scheme,final,config,option,integer,limit,in,option,core,options,file,system,connection,limit,in,fs,scheme,final,config,option,integer,limit,out,option,core,options,file,system,connection,limit,out,fs,scheme,final,int,total,limit,config,get,integer,total,limit,option,final,int,limit,in,config,get,integer,limit,in,option,final,int,limit,out,config,get,integer,limit,out,option,check,limit,total,limit,total,limit,option,check,limit,limit,in,limit,in,option,check,limit,limit,out,limit,out,option,if,total,limit,0,limit,in,0,limit,out,0,return,null,else,final,config,option,long,open,timeout,option,core,options,file,system,connection,limit,timeout,fs,scheme,final,config,option,long,inactivity,timeout,option,core,options,file,system,connection,limit,stream,inactivity,timeout,fs,scheme,final,long,open,timeout,config,get,long,open,timeout,option,final,long,inactivity,timeout,config,get,long,inactivity,timeout,option,check,timeout,open,timeout,open,timeout,option,check,timeout,inactivity,timeout,inactivity,timeout,option,return,new,connection,limiting,settings,total,limit,1,0,total,limit,limit,in,1,0,limit,in,limit,out,1,0,limit,out,open,timeout,inactivity,timeout
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal);1511520068;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit).;public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,this,original,fs,max,num,open,streams,total,0,0
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal);1512472868;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit).;public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,this,original,fs,max,num,open,streams,total,0,0
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal);1524407315;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit).;public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,this,original,fs,max,num,open,streams,total,0,0
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal);1528105942;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit).;public LimitedConnectionsFileSystem(FileSystem originalFs, int maxNumOpenStreamsTotal) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,this,original,fs,max,num,open,streams,total,0,0
LimitedConnectionsFileSystem -> public int getMaxNumOpenStreamsTotal();1511520068;Gets the maximum number of concurrently open streams (input + output).;public int getMaxNumOpenStreamsTotal() {_		return maxNumOpenStreamsTotal__	};gets,the,maximum,number,of,concurrently,open,streams,input,output;public,int,get,max,num,open,streams,total,return,max,num,open,streams,total
LimitedConnectionsFileSystem -> public int getMaxNumOpenStreamsTotal();1512472868;Gets the maximum number of concurrently open streams (input + output).;public int getMaxNumOpenStreamsTotal() {_		return maxNumOpenStreamsTotal__	};gets,the,maximum,number,of,concurrently,open,streams,input,output;public,int,get,max,num,open,streams,total,return,max,num,open,streams,total
LimitedConnectionsFileSystem -> public int getMaxNumOpenStreamsTotal();1524407315;Gets the maximum number of concurrently open streams (input + output).;public int getMaxNumOpenStreamsTotal() {_		return maxNumOpenStreamsTotal__	};gets,the,maximum,number,of,concurrently,open,streams,input,output;public,int,get,max,num,open,streams,total,return,max,num,open,streams,total
LimitedConnectionsFileSystem -> public int getMaxNumOpenStreamsTotal();1528105942;Gets the maximum number of concurrently open streams (input + output).;public int getMaxNumOpenStreamsTotal() {_		return maxNumOpenStreamsTotal__	};gets,the,maximum,number,of,concurrently,open,streams,input,output;public,int,get,max,num,open,streams,total,return,max,num,open,streams,total
LimitedConnectionsFileSystem -> public long getStreamOpenTimeout();1511520068;Gets the number of milliseconds that a opening a stream may wait for availability in the_connection pool.;public long getStreamOpenTimeout() {_		return streamOpenTimeoutNanos / 1_000_000__	};gets,the,number,of,milliseconds,that,a,opening,a,stream,may,wait,for,availability,in,the,connection,pool;public,long,get,stream,open,timeout,return,stream,open,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamOpenTimeout();1512472868;Gets the number of milliseconds that a opening a stream may wait for availability in the_connection pool.;public long getStreamOpenTimeout() {_		return streamOpenTimeoutNanos / 1_000_000__	};gets,the,number,of,milliseconds,that,a,opening,a,stream,may,wait,for,availability,in,the,connection,pool;public,long,get,stream,open,timeout,return,stream,open,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamOpenTimeout();1524407315;Gets the number of milliseconds that a opening a stream may wait for availability in the_connection pool.;public long getStreamOpenTimeout() {_		return streamOpenTimeoutNanos / 1_000_000__	};gets,the,number,of,milliseconds,that,a,opening,a,stream,may,wait,for,availability,in,the,connection,pool;public,long,get,stream,open,timeout,return,stream,open,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamOpenTimeout();1528105942;Gets the number of milliseconds that a opening a stream may wait for availability in the_connection pool.;public long getStreamOpenTimeout() {_		return streamOpenTimeoutNanos / 1_000_000__	};gets,the,number,of,milliseconds,that,a,opening,a,stream,may,wait,for,availability,in,the,connection,pool;public,long,get,stream,open,timeout,return,stream,open,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamInactivityTimeout();1511520068;Gets the milliseconds that a stream may spend not writing any bytes before it is closed as inactive.;public long getStreamInactivityTimeout() {_		return streamInactivityTimeoutNanos / 1_000_000__	};gets,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,long,get,stream,inactivity,timeout,return,stream,inactivity,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamInactivityTimeout();1512472868;Gets the milliseconds that a stream may spend not writing any bytes before it is closed as inactive.;public long getStreamInactivityTimeout() {_		return streamInactivityTimeoutNanos / 1_000_000__	};gets,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,long,get,stream,inactivity,timeout,return,stream,inactivity,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamInactivityTimeout();1524407315;Gets the milliseconds that a stream may spend not writing any bytes before it is closed as inactive.;public long getStreamInactivityTimeout() {_		return streamInactivityTimeoutNanos / 1_000_000__	};gets,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,long,get,stream,inactivity,timeout,return,stream,inactivity,timeout,nanos
LimitedConnectionsFileSystem -> public long getStreamInactivityTimeout();1528105942;Gets the milliseconds that a stream may spend not writing any bytes before it is closed as inactive.;public long getStreamInactivityTimeout() {_		return streamInactivityTimeoutNanos / 1_000_000__	};gets,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,long,get,stream,inactivity,timeout,return,stream,inactivity,timeout,nanos
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			long streamOpenTimeout, 			long streamInactivityTimeout);1511520068;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			long streamOpenTimeout,_			long streamInactivityTimeout) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0, streamOpenTimeout, streamInactivityTimeout)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,long,stream,open,timeout,long,stream,inactivity,timeout,this,original,fs,max,num,open,streams,total,0,0,stream,open,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			long streamOpenTimeout, 			long streamInactivityTimeout);1512472868;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			long streamOpenTimeout,_			long streamInactivityTimeout) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0, streamOpenTimeout, streamInactivityTimeout)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,long,stream,open,timeout,long,stream,inactivity,timeout,this,original,fs,max,num,open,streams,total,0,0,stream,open,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			long streamOpenTimeout, 			long streamInactivityTimeout);1524407315;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			long streamOpenTimeout,_			long streamInactivityTimeout) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0, streamOpenTimeout, streamInactivityTimeout)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,long,stream,open,timeout,long,stream,inactivity,timeout,this,original,fs,max,num,open,streams,total,0,0,stream,open,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> public LimitedConnectionsFileSystem( 			FileSystem originalFs, 			int maxNumOpenStreamsTotal, 			long streamOpenTimeout, 			long streamInactivityTimeout);1528105942;Creates a new output connection limiting file system.__<p>If streams are inactive (meaning not writing bytes) for longer than the given timeout,_then they are terminated as "inactive", to prevent that the limited number of connections gets_stuck on only blocked threads.__@param originalFs              The original file system to which connections are limited._@param maxNumOpenStreamsTotal  The maximum number of concurrent open streams (0 means no limit)._@param streamOpenTimeout       The maximum number of milliseconds that the file system will wait when_no more connections are currently permitted._@param streamInactivityTimeout The milliseconds that a stream may spend not writing any_bytes before it is closed as inactive.;public LimitedConnectionsFileSystem(_			FileSystem originalFs,_			int maxNumOpenStreamsTotal,_			long streamOpenTimeout,_			long streamInactivityTimeout) {_		this(originalFs, maxNumOpenStreamsTotal, 0, 0, streamOpenTimeout, streamInactivityTimeout)__	};creates,a,new,output,connection,limiting,file,system,p,if,streams,are,inactive,meaning,not,writing,bytes,for,longer,than,the,given,timeout,then,they,are,terminated,as,inactive,to,prevent,that,the,limited,number,of,connections,gets,stuck,on,only,blocked,threads,param,original,fs,the,original,file,system,to,which,connections,are,limited,param,max,num,open,streams,total,the,maximum,number,of,concurrent,open,streams,0,means,no,limit,param,stream,open,timeout,the,maximum,number,of,milliseconds,that,the,file,system,will,wait,when,no,more,connections,are,currently,permitted,param,stream,inactivity,timeout,the,milliseconds,that,a,stream,may,spend,not,writing,any,bytes,before,it,is,closed,as,inactive;public,limited,connections,file,system,file,system,original,fs,int,max,num,open,streams,total,long,stream,open,timeout,long,stream,inactivity,timeout,this,original,fs,max,num,open,streams,total,0,0,stream,open,timeout,stream,inactivity,timeout
LimitedConnectionsFileSystem -> public int getMaxNumOpenInputStreams();1511520068;Gets the maximum number of concurrently open input streams.;public int getMaxNumOpenInputStreams() {_		return maxNumOpenInputStreams__	};gets,the,maximum,number,of,concurrently,open,input,streams;public,int,get,max,num,open,input,streams,return,max,num,open,input,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenInputStreams();1512472868;Gets the maximum number of concurrently open input streams.;public int getMaxNumOpenInputStreams() {_		return maxNumOpenInputStreams__	};gets,the,maximum,number,of,concurrently,open,input,streams;public,int,get,max,num,open,input,streams,return,max,num,open,input,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenInputStreams();1524407315;Gets the maximum number of concurrently open input streams.;public int getMaxNumOpenInputStreams() {_		return maxNumOpenInputStreams__	};gets,the,maximum,number,of,concurrently,open,input,streams;public,int,get,max,num,open,input,streams,return,max,num,open,input,streams
LimitedConnectionsFileSystem -> public int getMaxNumOpenInputStreams();1528105942;Gets the maximum number of concurrently open input streams.;public int getMaxNumOpenInputStreams() {_		return maxNumOpenInputStreams__	};gets,the,maximum,number,of,concurrently,open,input,streams;public,int,get,max,num,open,input,streams,return,max,num,open,input,streams
LimitedConnectionsFileSystem -> StreamWithTimeout -> long getPos() throws IOException_;1511520068;Gets the current position in the stream, as in number of bytes read or written.;long getPos() throws IOException_;gets,the,current,position,in,the,stream,as,in,number,of,bytes,read,or,written;long,get,pos,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> long getPos() throws IOException_;1512472868;Gets the current position in the stream, as in number of bytes read or written.;long getPos() throws IOException_;gets,the,current,position,in,the,stream,as,in,number,of,bytes,read,or,written;long,get,pos,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> long getPos() throws IOException_;1524407315;Gets the current position in the stream, as in number of bytes read or written.;long getPos() throws IOException_;gets,the,current,position,in,the,stream,as,in,number,of,bytes,read,or,written;long,get,pos,throws,ioexception
LimitedConnectionsFileSystem -> StreamWithTimeout -> long getPos() throws IOException_;1528105942;Gets the current position in the stream, as in number of bytes read or written.;long getPos() throws IOException_;gets,the,current,position,in,the,stream,as,in,number,of,bytes,read,or,written;long,get,pos,throws,ioexception
LimitedConnectionsFileSystem -> public int getTotalNumberOfOpenStreams();1511520068;Gets the total number of open streams (input plus output).;public int getTotalNumberOfOpenStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams + numReservedInputStreams__		} finally {_			lock.unlock()__		}_	};gets,the,total,number,of,open,streams,input,plus,output;public,int,get,total,number,of,open,streams,lock,lock,try,return,num,reserved,output,streams,num,reserved,input,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getTotalNumberOfOpenStreams();1512472868;Gets the total number of open streams (input plus output).;public int getTotalNumberOfOpenStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams + numReservedInputStreams__		} finally {_			lock.unlock()__		}_	};gets,the,total,number,of,open,streams,input,plus,output;public,int,get,total,number,of,open,streams,lock,lock,try,return,num,reserved,output,streams,num,reserved,input,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getTotalNumberOfOpenStreams();1524407315;Gets the total number of open streams (input plus output).;public int getTotalNumberOfOpenStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams + numReservedInputStreams__		} finally {_			lock.unlock()__		}_	};gets,the,total,number,of,open,streams,input,plus,output;public,int,get,total,number,of,open,streams,lock,lock,try,return,num,reserved,output,streams,num,reserved,input,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> public int getTotalNumberOfOpenStreams();1528105942;Gets the total number of open streams (input plus output).;public int getTotalNumberOfOpenStreams() {_		lock.lock()__		try {_			return numReservedOutputStreams + numReservedInputStreams__		} finally {_			lock.unlock()__		}_	};gets,the,total,number,of,open,streams,input,plus,output;public,int,get,total,number,of,open,streams,lock,lock,try,return,num,reserved,output,streams,num,reserved,input,streams,finally,lock,unlock
LimitedConnectionsFileSystem -> StreamWithTimeout -> boolean isClosed()_;1511520068;Checks whether the stream was closed already.;boolean isClosed()_;checks,whether,the,stream,was,closed,already;boolean,is,closed
LimitedConnectionsFileSystem -> StreamWithTimeout -> boolean isClosed()_;1512472868;Checks whether the stream was closed already.;boolean isClosed()_;checks,whether,the,stream,was,closed,already;boolean,is,closed
LimitedConnectionsFileSystem -> StreamWithTimeout -> boolean isClosed()_;1524407315;Checks whether the stream was closed already.;boolean isClosed()_;checks,whether,the,stream,was,closed,already;boolean,is,closed
LimitedConnectionsFileSystem -> StreamWithTimeout -> boolean isClosed()_;1528105942;Checks whether the stream was closed already.;boolean isClosed()_;checks,whether,the,stream,was,closed,already;boolean,is,closed
