# id;timestamp;commentText;codeText;commentWords;codeWords
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1405024514;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1405090423;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1411399886;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1411473593;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1412346153;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1415874087;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1427097378;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1443690234;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1455479358;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1460563153;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1488304750;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1488304750;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> protected Operator(OperatorInformation<OUT> operatorInfo, String name);1489671807;Creates a new contract with the given name. The parameters are empty by default and_the compiler hints are not set.__@param name The name that is used to describe the contract.;protected Operator(OperatorInformation<OUT> operatorInfo, String name) {_		this.name = (name == null) ? "(null)" : name__		this.parameters = new Configuration()__		this.compilerHints = new CompilerHints()__		this.operatorInfo = operatorInfo__	};creates,a,new,contract,with,the,given,name,the,parameters,are,empty,by,default,and,the,compiler,hints,are,not,set,param,name,the,name,that,is,used,to,describe,the,contract;protected,operator,operator,information,out,operator,info,string,name,this,name,name,null,null,name,this,parameters,new,configuration,this,compiler,hints,new,compiler,hints,this,operator,info,operator,info
Operator -> public int getParallelism();1427097378;Gets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1443690234;Gets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1455479358;Gets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1460563153;Gets the parallelism for this contract instance. The parallelism denotes how many_parallel instances of the user function will be spawned during the execution. If this_value is {@link ExecutionConfig#PARALLELISM_DEFAULT}, then the system will decide the_number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,link,execution,config,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1488304750;Gets the parallelism for this contract instance. The parallelism denotes how many_parallel instances of the user function will be spawned during the execution. If this_value is {@link ExecutionConfig#PARALLELISM_DEFAULT}, then the system will decide the_number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,link,execution,config,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1488304750;Gets the parallelism for this contract instance. The parallelism denotes how many_parallel instances of the user function will be spawned during the execution. If this_value is {@link ExecutionConfig#PARALLELISM_DEFAULT}, then the system will decide the_number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,link,execution,config,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public int getParallelism();1489671807;Gets the parallelism for this contract instance. The parallelism denotes how many_parallel instances of the user function will be spawned during the execution. If this_value is {@link ExecutionConfig#PARALLELISM_DEFAULT}, then the system will decide the_number of parallel instances by itself.__@return The parallelism.;public int getParallelism() {_		return this.parallelism__	};gets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,link,execution,config,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,parallelism;public,int,get,parallelism,return,this,parallelism
Operator -> public OperatorInformation<OUT> getOperatorInfo();1405024514;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1405090423;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1411399886;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1411473593;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1412346153;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1415874087;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1427097378;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1443690234;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1455479358;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1460563153;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1488304750;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1488304750;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> public OperatorInformation<OUT> getOperatorInfo();1489671807;Gets the information about the operators input/output types.;public OperatorInformation<OUT> getOperatorInfo() {_		return operatorInfo__	};gets,the,information,about,the,operators,input,output,types;public,operator,information,out,get,operator,info,return,operator,info
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1405024514;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1405090423;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1411399886;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1411473593;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1412346153;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1415874087;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1427097378;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1443690234;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1455479358;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1460563153;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1488304750;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1488304750;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> @SuppressWarnings("unchecked") 	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators);1489671807;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;@SuppressWarnings("unchecked")_	public static <T> Operator<T> createUnionCascade(List<? extends Operator<T>> operators) {_		return createUnionCascade((Operator<T>[]) operators.toArray(new Operator[operators.size()]))__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;suppress,warnings,unchecked,public,static,t,operator,t,create,union,cascade,list,extends,operator,t,operators,return,create,union,cascade,operator,t,operators,to,array,new,operator,operators,size
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1405024514;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1405090423;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1411399886;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1411473593;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1412346153;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1415874087;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1427097378;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1443690234;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1455479358;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1460563153;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1488304750;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1488304750;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public UserCodeWrapper<?> getUserCodeWrapper();1489671807;Gets the user code wrapper. In the case of a pact, that object will be the stub with the user function,_in the case of an input or output format, it will be the format object.__@return The class with the user code.;public UserCodeWrapper<?> getUserCodeWrapper() {_		return null__	};gets,the,user,code,wrapper,in,the,case,of,a,pact,that,object,will,be,the,stub,with,the,user,function,in,the,case,of,an,input,or,output,format,it,will,be,the,format,object,return,the,class,with,the,user,code;public,user,code,wrapper,get,user,code,wrapper,return,null
Operator -> public void setParameter(String key, int value);1405024514;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1405090423;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1411399886;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1411473593;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1412346153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1415874087;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1427097378;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1443690234;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1455479358;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1460563153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public void setParameter(String key, int value);1489671807;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, int value) {_		this.parameters.setInteger(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,int,value,this,parameters,set,integer,key,value
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1405024514;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1405090423;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1411399886;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1411473593;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1412346153;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type))__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1415874087;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1427097378;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1443690234;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1455479358;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1460563153;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1488304750;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1488304750;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2);1489671807;Takes a single Operator and a list of operators and creates a cascade of unions of this inputs, if needed._If not needed there was only one operator as input, then this operator is returned.__@param input1 The first input operator._@param input2 The other input operators.__@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T> input1, Operator<T>... input2) {_		_		if (input2 == null || input2.length == 0) {_			return input1__		} else if (input2.length == 1 && input1 == null) {_			return input2[0]__		}__		TypeInformation<T> type = null__		if (input1 != null) {_			type = input1.getOperatorInfo().getOutputType()__		} else if (input2.length > 0 && input2[0] != null) {_			type = input2[0].getOperatorInfo().getOutputType()__		} else {_			throw new IllegalArgumentException("Could not determine type information from inputs.")__		}__		_		Union<T> lastUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")___		int i__		if (input2[0] == null) {_			throw new IllegalArgumentException("The input may not contain null elements.")__		}_		lastUnion.setFirstInput(input2[0])___		if (input1 != null) {_			lastUnion.setSecondInput(input1)__			i = 1__		} else {_			if (input2[1] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			lastUnion.setSecondInput(input2[1])__			i = 2__		}_		for (_ i < input2.length_ i++) {_			Union<T> tmpUnion = new Union<T>(new BinaryOperatorInformation<T, T, T>(type, type, type), "<unknown>")__			tmpUnion.setSecondInput(lastUnion)__			if (input2[i] == null) {_				throw new IllegalArgumentException("The input may not contain null elements.")__			}_			tmpUnion.setFirstInput(input2[i])__			lastUnion = tmpUnion__		}_		return lastUnion__	};takes,a,single,operator,and,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,as,input,then,this,operator,is,returned,param,input1,the,first,input,operator,param,input2,the,other,input,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,input1,operator,t,input2,if,input2,null,input2,length,0,return,input1,else,if,input2,length,1,input1,null,return,input2,0,type,information,t,type,null,if,input1,null,type,input1,get,operator,info,get,output,type,else,if,input2,length,0,input2,0,null,type,input2,0,get,operator,info,get,output,type,else,throw,new,illegal,argument,exception,could,not,determine,type,information,from,inputs,union,t,last,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,int,i,if,input2,0,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,first,input,input2,0,if,input1,null,last,union,set,second,input,input1,i,1,else,if,input2,1,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,last,union,set,second,input,input2,1,i,2,for,i,input2,length,i,union,t,tmp,union,new,union,t,new,binary,operator,information,t,t,t,type,type,type,unknown,tmp,union,set,second,input,last,union,if,input2,i,null,throw,new,illegal,argument,exception,the,input,may,not,contain,null,elements,tmp,union,set,first,input,input2,i,last,union,tmp,union,return,last,union
Operator -> public Configuration getParameters();1405024514;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1405090423;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1411399886;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1411473593;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1412346153;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1415874087;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1427097378;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1443690234;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1455479358;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1460563153;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1488304750;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1488304750;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public Configuration getParameters();1489671807;Gets the stub parameters of this contract. The stub parameters are a map that maps string keys to_string or integer values. The map is accessible by the user code at runtime. Parameters that the_user code needs to access at runtime to configure its behavior are typically stored in that configuration_object.__@return The configuration containing the stub parameters.;public Configuration getParameters() {_		return this.parameters__	};gets,the,stub,parameters,of,this,contract,the,stub,parameters,are,a,map,that,maps,string,keys,to,string,or,integer,values,the,map,is,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,in,that,configuration,object,return,the,configuration,containing,the,stub,parameters;public,configuration,get,parameters,return,this,parameters
Operator -> public void setParameter(String key, String value);1405024514;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1405090423;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1411399886;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1411473593;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1412346153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1415874087;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1427097378;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1443690234;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1455479358;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1460563153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public void setParameter(String key, String value);1489671807;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()__@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, String value) {_		this.parameters.setString(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,string,value,this,parameters,set,string,key,value
Operator -> public String getName();1405024514;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1405090423;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1411399886;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1411473593;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1412346153;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1415874087;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1427097378;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1443690234;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1455479358;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1460563153;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1488304750;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1488304750;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public String getName();1489671807;Gets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@return The contract instance's name.;public String getName() {_		return this.name__	};gets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,return,the,contract,instance,s,name;public,string,get,name,return,this,name
Operator -> public void setName(String name);1405024514;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1405090423;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1411399886;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1411473593;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1412346153;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1415874087;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1427097378;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1443690234;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1455479358;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1460563153;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1488304750;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1488304750;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setName(String name);1489671807;Sets the name of the contract instance. The name is only used to describe the contract instance_in logging output and graphical representations.__@param name The operator's name.;public void setName(String name) {_		this.name = name__	};sets,the,name,of,the,contract,instance,the,name,is,only,used,to,describe,the,contract,instance,in,logging,output,and,graphical,representations,param,name,the,operator,s,name;public,void,set,name,string,name,this,name,name
Operator -> public void setParameter(String key, boolean value);1405024514;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1405090423;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1411399886;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1411473593;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1412346153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1415874087;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1427097378;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1443690234;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1455479358;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1460563153;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1488304750;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public void setParameter(String key, boolean value);1489671807;Sets a stub parameters in the configuration of this contract. The stub parameters are accessible by the user_code at runtime. Parameters that the user code needs to access at runtime to configure its behavior are_typically stored as stub parameters.__@see #getParameters()_@param key_The parameter key._@param value_The parameter value.;public void setParameter(String key, boolean value) {_		this.parameters.setBoolean(key, value)__	};sets,a,stub,parameters,in,the,configuration,of,this,contract,the,stub,parameters,are,accessible,by,the,user,code,at,runtime,parameters,that,the,user,code,needs,to,access,at,runtime,to,configure,its,behavior,are,typically,stored,as,stub,parameters,see,get,parameters,param,key,the,parameter,key,param,value,the,parameter,value;public,void,set,parameter,string,key,boolean,value,this,parameters,set,boolean,key,value
Operator -> public CompilerHints getCompilerHints();1405024514;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1405090423;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1411399886;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1411473593;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1412346153;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1415874087;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1427097378;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1443690234;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1455479358;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1460563153;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1488304750;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1488304750;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public CompilerHints getCompilerHints();1489671807;Gets the compiler hints for this contract instance. In the compiler hints, different fields may_be set (for example the selectivity) that will be evaluated by the pact compiler when generating_plan alternatives.__@return The compiler hints object.;public CompilerHints getCompilerHints() {_		return this.compilerHints__	};gets,the,compiler,hints,for,this,contract,instance,in,the,compiler,hints,different,fields,may,be,set,for,example,the,selectivity,that,will,be,evaluated,by,the,pact,compiler,when,generating,plan,alternatives,return,the,compiler,hints,object;public,compiler,hints,get,compiler,hints,return,this,compiler,hints
Operator -> public void setParallelism(int parallelism);1427097378;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param parallelism The number of parallel instances to spawn. -1, if unspecified.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,parallelism,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1443690234;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param parallelism The number of parallel instances to spawn. -1, if unspecified.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,parallelism,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1455479358;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param parallelism The number of parallel instances to spawn. -1, if unspecified.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,parallelism,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1460563153;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution.__@param parallelism The number of parallel instances to spawn. Set this value to_{@link ExecutionConfig#PARALLELISM_DEFAULT} to let the system decide on its own.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,param,parallelism,the,number,of,parallel,instances,to,spawn,set,this,value,to,link,execution,config,to,let,the,system,decide,on,its,own;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1488304750;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution.__@param parallelism The number of parallel instances to spawn. Set this value to_{@link ExecutionConfig#PARALLELISM_DEFAULT} to let the system decide on its own.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,param,parallelism,the,number,of,parallel,instances,to,spawn,set,this,value,to,link,execution,config,to,let,the,system,decide,on,its,own;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1488304750;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution.__@param parallelism The number of parallel instances to spawn. Set this value to_{@link ExecutionConfig#PARALLELISM_DEFAULT} to let the system decide on its own.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,param,parallelism,the,number,of,parallel,instances,to,spawn,set,this,value,to,link,execution,config,to,let,the,system,decide,on,its,own;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public void setParallelism(int parallelism);1489671807;Sets the parallelism for this contract instance. The parallelism denotes_how many parallel instances of the user function will be spawned during the execution.__@param parallelism The number of parallel instances to spawn. Set this value to_{@link ExecutionConfig#PARALLELISM_DEFAULT} to let the system decide on its own.;public void setParallelism(int parallelism) {_		this.parallelism = parallelism__	};sets,the,parallelism,for,this,contract,instance,the,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,param,parallelism,the,number,of,parallel,instances,to,spawn,set,this,value,to,link,execution,config,to,let,the,system,decide,on,its,own;public,void,set,parallelism,int,parallelism,this,parallelism,parallelism
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1405024514;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1405090423;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1411399886;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1411473593;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1412346153;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1415874087;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1427097378;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1443690234;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1455479358;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1460563153;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1488304750;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1488304750;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public static <T> Operator<T> createUnionCascade(Operator<T>... operators);1489671807;Takes a list of operators and creates a cascade of unions of this inputs, if needed._If not needed (there was only one operator in the list), then that operator is returned.__@param operators The operators._@return The single operator or a cascade of unions of the operators.;public static <T> Operator<T> createUnionCascade(Operator<T>... operators) {_		return createUnionCascade(null, operators)__	};takes,a,list,of,operators,and,creates,a,cascade,of,unions,of,this,inputs,if,needed,if,not,needed,there,was,only,one,operator,in,the,list,then,that,operator,is,returned,param,operators,the,operators,return,the,single,operator,or,a,cascade,of,unions,of,the,operators;public,static,t,operator,t,create,union,cascade,operator,t,operators,return,create,union,cascade,null,operators
Operator -> public int getDegreeOfParallelism();1405024514;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public int getDegreeOfParallelism();1405090423;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public int getDegreeOfParallelism();1411399886;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public int getDegreeOfParallelism();1411473593;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public int getDegreeOfParallelism();1412346153;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public int getDegreeOfParallelism();1415874087;Gets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. If this_value is <code>-1</code>, then the system will decide the number of parallel instances by itself.__@return The degree of parallelism.;public int getDegreeOfParallelism() {_		return this.degreeOfParallelism__	};gets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,if,this,value,is,code,1,code,then,the,system,will,decide,the,number,of,parallel,instances,by,itself,return,the,degree,of,parallelism;public,int,get,degree,of,parallelism,return,this,degree,of,parallelism
Operator -> public void setDegreeOfParallelism(int degree);1405024514;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
Operator -> public void setDegreeOfParallelism(int degree);1405090423;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
Operator -> public void setDegreeOfParallelism(int degree);1411399886;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
Operator -> public void setDegreeOfParallelism(int degree);1411473593;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
Operator -> public void setDegreeOfParallelism(int degree);1412346153;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
Operator -> public void setDegreeOfParallelism(int degree);1415874087;Sets the degree of parallelism for this contract instance. The degree of parallelism denotes_how many parallel instances of the user function will be spawned during the execution. Set this_value to <code>-1</code> to let the system decide on its own.__@param degree The number of parallel instances to spawn. -1, if unspecified.;public void setDegreeOfParallelism(int degree) {_		this.degreeOfParallelism = degree__	};sets,the,degree,of,parallelism,for,this,contract,instance,the,degree,of,parallelism,denotes,how,many,parallel,instances,of,the,user,function,will,be,spawned,during,the,execution,set,this,value,to,code,1,code,to,let,the,system,decide,on,its,own,param,degree,the,number,of,parallel,instances,to,spawn,1,if,unspecified;public,void,set,degree,of,parallelism,int,degree,this,degree,of,parallelism,degree
