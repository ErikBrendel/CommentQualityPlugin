commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setRuntimeContext(RuntimeContext t) {     this.runtimeContext = t. }
false;public;0;8;;public RuntimeContext getRuntimeContext() {     if (this.runtimeContext != null) {         return this.runtimeContext.     } else {         throw new IllegalStateException("The runtime context has not been initialized yet. Try accessing " + "it in one of the other life cycle methods.").     } }
true;public;0;4;/**  * Opens this InputFormat instance. This method is called once per parallel instance.  * Resources should be allocated in this method. (e.g. database connections, cache, etc.)  *  * @see InputFormat  * @throws IOException in case allocating the resources failed.  */ ;/**  * Opens this InputFormat instance. This method is called once per parallel instance.  * Resources should be allocated in this method. (e.g. database connections, cache, etc.)  *  * @see InputFormat  * @throws IOException in case allocating the resources failed.  */ @PublicEvolving public void openInputFormat() throws IOException { // do nothing here, just for subclasses }
true;public;0;4;/**  * Closes this InputFormat instance. This method is called once per parallel instance.  * Resources allocated during {@link #openInputFormat()} should be closed in this method.  *  * @see InputFormat  * @throws IOException in case closing the resources failed  */ ;/**  * Closes this InputFormat instance. This method is called once per parallel instance.  * Resources allocated during {@link #openInputFormat()} should be closed in this method.  *  * @see InputFormat  * @throws IOException in case closing the resources failed  */ @PublicEvolving public void closeInputFormat() throws IOException { // do nothing here, just for subclasses }
