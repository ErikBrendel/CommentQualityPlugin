# id;timestamp;commentText;codeText;commentWords;codeWords
OperatorStateStore -> @Deprecated 	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1492569128;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception__@deprecated since 1.3.0. This was deprecated as part of a refinement to the function names._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception,deprecated,since,1,3,0,this,was,deprecated,as,part,of,a,refinement,to,the,function,names,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> @Deprecated 	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1492569209;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception__@deprecated since 1.3.0. This was deprecated as part of a refinement to the function names._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception,deprecated,since,1,3,0,this,was,deprecated,as,part,of,a,refinement,to,the,function,names,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> @Deprecated 	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1518008821;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception__@deprecated since 1.3.0. This was deprecated as part of a refinement to the function names._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception,deprecated,since,1,3,0,this,was,deprecated,as,part,of,a,refinement,to,the,function,names,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> @Deprecated 	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1521628649;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions.__@deprecated since 1.3.0. This was deprecated as part of a refinement to the function names._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,deprecated,since,1,3,0,this,was,deprecated,as,part,of,a,refinement,to,the,function,names,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1492569128;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1492569209;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a round-robin pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is evenly divided into as many sublists as there are parallel operators.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,round,robin,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,evenly,divided,into,as,many,sublists,as,there,are,parallel,operators,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1518008821;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a round-robin pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is evenly divided into as many sublists as there are parallel operators.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,round,robin,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,evenly,divided,into,as,many,sublists,as,there,are,parallel,operators,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1521628649;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a round-robin pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is evenly divided into as many sublists as there are parallel operators.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions.;<S> ListState<S> getListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,round,robin,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,evenly,divided,into,as,many,sublists,as,there,are,parallel,operators,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions;s,list,state,s,get,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <K, V> BroadcastState<K, V> getBroadcastState(MapStateDescriptor<K, V> stateDescriptor) throws Exception_;1518008821;Creates (or restores) a {@link BroadcastState broadcast state}. This type of state can only be created to store_the state of a {@code BroadcastStream}. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore)._The returned broadcast state has {@code key-value} format.__<p><b>CAUTION: the user has to guarantee that all task instances store the same elements in this type of state.</b>__<p>Each operator instance individually maintains and stores elements in the broadcast state. The fact that the_incoming stream is a broadcast one guarantees that all instances see all the elements. Upon recovery_or re-scaling, the same state is given to each of the instances. To avoid hotspots, each task reads its previous_partition, and if there are more tasks (scale up), then the new instances read from the old instances in a round_robin fashion. This is why each instance has to guarantee that it stores the same elements as the rest. If not,_upon recovery or rescaling you may have unpredictable redistribution of the partitions, thus unpredictable results.__@param stateDescriptor The descriptor for this state, providing a name, a serializer for the keys and one for the_values._@param <K> The type of the keys in the broadcast state._@param <V> The type of the values in the broadcast state.__@return The {@link BroadcastState Broadcast State}._@throws Exception;<K, V> BroadcastState<K, V> getBroadcastState(MapStateDescriptor<K, V> stateDescriptor) throws Exception_;creates,or,restores,a,link,broadcast,state,broadcast,state,this,type,of,state,can,only,be,created,to,store,the,state,of,a,code,broadcast,stream,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,returned,broadcast,state,has,code,key,value,format,p,b,caution,the,user,has,to,guarantee,that,all,task,instances,store,the,same,elements,in,this,type,of,state,b,p,each,operator,instance,individually,maintains,and,stores,elements,in,the,broadcast,state,the,fact,that,the,incoming,stream,is,a,broadcast,one,guarantees,that,all,instances,see,all,the,elements,upon,recovery,or,re,scaling,the,same,state,is,given,to,each,of,the,instances,to,avoid,hotspots,each,task,reads,its,previous,partition,and,if,there,are,more,tasks,scale,up,then,the,new,instances,read,from,the,old,instances,in,a,round,robin,fashion,this,is,why,each,instance,has,to,guarantee,that,it,stores,the,same,elements,as,the,rest,if,not,upon,recovery,or,rescaling,you,may,have,unpredictable,redistribution,of,the,partitions,thus,unpredictable,results,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,a,serializer,for,the,keys,and,one,for,the,values,param,k,the,type,of,the,keys,in,the,broadcast,state,param,v,the,type,of,the,values,in,the,broadcast,state,return,the,link,broadcast,state,broadcast,state,throws,exception;k,v,broadcast,state,k,v,get,broadcast,state,map,state,descriptor,k,v,state,descriptor,throws,exception
OperatorStateStore -> <K, V> BroadcastState<K, V> getBroadcastState(MapStateDescriptor<K, V> stateDescriptor) throws Exception_;1521628649;Creates (or restores) a {@link BroadcastState broadcast state}. This type of state can only be created to store_the state of a {@code BroadcastStream}. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore)._The returned broadcast state has {@code key-value} format.__<p><b>CAUTION: the user has to guarantee that all task instances store the same elements in this type of state.</b>__<p>Each operator instance individually maintains and stores elements in the broadcast state. The fact that the_incoming stream is a broadcast one guarantees that all instances see all the elements. Upon recovery_or re-scaling, the same state is given to each of the instances. To avoid hotspots, each task reads its previous_partition, and if there are more tasks (scale up), then the new instances read from the old instances in a round_robin fashion. This is why each instance has to guarantee that it stores the same elements as the rest. If not,_upon recovery or rescaling you may have unpredictable redistribution of the partitions, thus unpredictable results.__@param stateDescriptor The descriptor for this state, providing a name, a serializer for the keys and one for the_values._@param <K> The type of the keys in the broadcast state._@param <V> The type of the values in the broadcast state.__@return The Broadcast State;<K, V> BroadcastState<K, V> getBroadcastState(MapStateDescriptor<K, V> stateDescriptor) throws Exception_;creates,or,restores,a,link,broadcast,state,broadcast,state,this,type,of,state,can,only,be,created,to,store,the,state,of,a,code,broadcast,stream,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,returned,broadcast,state,has,code,key,value,format,p,b,caution,the,user,has,to,guarantee,that,all,task,instances,store,the,same,elements,in,this,type,of,state,b,p,each,operator,instance,individually,maintains,and,stores,elements,in,the,broadcast,state,the,fact,that,the,incoming,stream,is,a,broadcast,one,guarantees,that,all,instances,see,all,the,elements,upon,recovery,or,re,scaling,the,same,state,is,given,to,each,of,the,instances,to,avoid,hotspots,each,task,reads,its,previous,partition,and,if,there,are,more,tasks,scale,up,then,the,new,instances,read,from,the,old,instances,in,a,round,robin,fashion,this,is,why,each,instance,has,to,guarantee,that,it,stores,the,same,elements,as,the,rest,if,not,upon,recovery,or,rescaling,you,may,have,unpredictable,redistribution,of,the,partitions,thus,unpredictable,results,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,a,serializer,for,the,keys,and,one,for,the,values,param,k,the,type,of,the,keys,in,the,broadcast,state,param,v,the,type,of,the,values,in,the,broadcast,state,return,the,broadcast,state;k,v,broadcast,state,k,v,get,broadcast,state,map,state,descriptor,k,v,state,descriptor,throws,exception
OperatorStateStore -> <T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1476972861;Creates a state descriptor of the given name that uses Java serialization to persist the_state.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getOperatorState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception;<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,descriptor,of,the,given,name,that,uses,java,serialization,to,persist,the,state,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,operator,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception;t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> <T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1484339359;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getOperatorState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception;<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,operator,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception;t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> <T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1484339359;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getOperatorState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception;<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,operator,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception;t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> <S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1475688973;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1476972861;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1484339359;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1484339359;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__The items in the list are repartitionable by the system in case of changed operator parallelism.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getOperatorState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,operator,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> @Deprecated 	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1492569128;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getListState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception__@deprecated since 1.3.0. Using Java serialization for persisting state is not encouraged._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,list,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception,deprecated,since,1,3,0,using,java,serialization,for,persisting,state,is,not,encouraged,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> @Deprecated 	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1492569209;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getListState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception__@deprecated since 1.3.0. Using Java serialization for persisting state is not encouraged._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,list,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception,deprecated,since,1,3,0,using,java,serialization,for,persisting,state,is,not,encouraged,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> @Deprecated 	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1518008821;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getListState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects._@throws Exception__@deprecated since 1.3.0. Using Java serialization for persisting state is not encouraged._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,list,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,throws,exception,deprecated,since,1,3,0,using,java,serialization,for,persisting,state,is,not,encouraged,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> @Deprecated 	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;1521628649;Creates a state of the given name that uses Java serialization to persist the state. The items in the list_are repartitionable by the system in case of changed operator parallelism.__<p>This is a simple convenience method. For more flexibility on how state serialization_should happen, use the {@link #getListState(ListStateDescriptor)} method.__@param stateName The name of state to create_@return A list state using Java serialization to serialize state objects.__@deprecated since 1.3.0. Using Java serialization for persisting state is not encouraged._Please use {@link #getListState(ListStateDescriptor)} instead.;@Deprecated_	<T extends Serializable> ListState<T> getSerializableListState(String stateName) throws Exception_;creates,a,state,of,the,given,name,that,uses,java,serialization,to,persist,the,state,the,items,in,the,list,are,repartitionable,by,the,system,in,case,of,changed,operator,parallelism,p,this,is,a,simple,convenience,method,for,more,flexibility,on,how,state,serialization,should,happen,use,the,link,get,list,state,list,state,descriptor,method,param,state,name,the,name,of,state,to,create,return,a,list,state,using,java,serialization,to,serialize,state,objects,deprecated,since,1,3,0,using,java,serialization,for,persisting,state,is,not,encouraged,please,use,link,get,list,state,list,state,descriptor,instead;deprecated,t,extends,serializable,list,state,t,get,serializable,list,state,string,state,name,throws,exception
OperatorStateStore -> <S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1492569209;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a broadcast pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is restored to all parallel operators so that each of them will get the union of all state_items before the restore.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,broadcast,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,restored,to,all,parallel,operators,so,that,each,of,them,will,get,the,union,of,all,state,items,before,the,restore,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,union,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1518008821;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a broadcast pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is restored to all parallel operators so that each of them will get the union of all state_items before the restore.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions._@throws Exception;<S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,broadcast,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,restored,to,all,parallel,operators,so,that,each,of,them,will,get,the,union,of,all,state,items,before,the,restore,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions,throws,exception;s,list,state,s,get,union,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> <S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;1521628649;Creates (or restores) a list state. Each state is registered under a unique name._The provided serializer is used to de/serialize the state in case of checkpointing (snapshot/restore).__<p>Note the semantic differences between an operator list state and a keyed list state_(see {@link KeyedStateStore#getListState(ListStateDescriptor)}). Under the context of operator state,_the list is a collection of state items that are independent from each other and eligible for redistribution_across operator instances in case of changed operator parallelism. In other words, these state items are_the finest granularity at which non-keyed state can be redistributed, and should not be correlated with_each other.__<p>The redistribution scheme of this list state upon operator rescaling is a broadcast pattern, such that_the logical whole state (a concatenation of all the lists of state elements previously managed by each operator_before the restore) is restored to all parallel operators so that each of them will get the union of all state_items before the restore.__@param stateDescriptor The descriptor for this state, providing a name and serializer._@param <S> The generic type of the state__@return A list for all state partitions.;<S> ListState<S> getUnionListState(ListStateDescriptor<S> stateDescriptor) throws Exception_;creates,or,restores,a,list,state,each,state,is,registered,under,a,unique,name,the,provided,serializer,is,used,to,de,serialize,the,state,in,case,of,checkpointing,snapshot,restore,p,note,the,semantic,differences,between,an,operator,list,state,and,a,keyed,list,state,see,link,keyed,state,store,get,list,state,list,state,descriptor,under,the,context,of,operator,state,the,list,is,a,collection,of,state,items,that,are,independent,from,each,other,and,eligible,for,redistribution,across,operator,instances,in,case,of,changed,operator,parallelism,in,other,words,these,state,items,are,the,finest,granularity,at,which,non,keyed,state,can,be,redistributed,and,should,not,be,correlated,with,each,other,p,the,redistribution,scheme,of,this,list,state,upon,operator,rescaling,is,a,broadcast,pattern,such,that,the,logical,whole,state,a,concatenation,of,all,the,lists,of,state,elements,previously,managed,by,each,operator,before,the,restore,is,restored,to,all,parallel,operators,so,that,each,of,them,will,get,the,union,of,all,state,items,before,the,restore,param,state,descriptor,the,descriptor,for,this,state,providing,a,name,and,serializer,param,s,the,generic,type,of,the,state,return,a,list,for,all,state,partitions;s,list,state,s,get,union,list,state,list,state,descriptor,s,state,descriptor,throws,exception
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1475688973;Returns a set with the names of all currently registered states._@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1476972861;Returns a set with the names of all currently registered states._@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1484339359;Returns a set with the names of all currently registered states._@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1484339359;Returns a set with the names of all currently registered states._@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1492569128;Returns a set with the names of all currently registered states._@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1492569209;Returns a set with the names of all currently registered states.__@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1518008821;Returns a set with the names of all currently registered states.__@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredStateNames()_;1521628649;Returns a set with the names of all currently registered states.__@return set of names for all registered states.;Set<String> getRegisteredStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,states,return,set,of,names,for,all,registered,states;set,string,get,registered,state,names
OperatorStateStore -> Set<String> getRegisteredBroadcastStateNames()_;1518008821;Returns a set with the names of all currently registered broadcast states.__@return set of names for all registered broadcast states.;Set<String> getRegisteredBroadcastStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,broadcast,states,return,set,of,names,for,all,registered,broadcast,states;set,string,get,registered,broadcast,state,names
OperatorStateStore -> Set<String> getRegisteredBroadcastStateNames()_;1521628649;Returns a set with the names of all currently registered broadcast states.__@return set of names for all registered broadcast states.;Set<String> getRegisteredBroadcastStateNames()_;returns,a,set,with,the,names,of,all,currently,registered,broadcast,states,return,set,of,names,for,all,registered,broadcast,states;set,string,get,registered,broadcast,state,names
