commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public String[] createInstance() {     return EMPTY. }
false;public;1;6;;@Override public String[] copy(String[] from) {     String[] target = new String[from.length].     System.arraycopy(from, 0, target, 0, from.length).     return target. }
false;public;2;4;;@Override public String[] copy(String[] from, String[] reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;12;;@Override public void serialize(String[] record, DataOutputView target) throws IOException {     if (record == null) {         throw new IllegalArgumentException("The record must not be null.").     }     final int len = record.length.     target.writeInt(len).     for (int i = 0. i < len. i++) {         StringValue.writeString(record[i], target).     } }
false;public;1;11;;@Override public String[] deserialize(DataInputView source) throws IOException {     final int len = source.readInt().     String[] array = new String[len].     for (int i = 0. i < len. i++) {         array[i] = StringValue.readString(source).     }     return array. }
false;public;2;4;;@Override public String[] deserialize(String[] reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;9;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final int len = source.readInt().     target.writeInt(len).     for (int i = 0. i < len. i++) {         StringValue.copyString(source, target).     } }
false;public;0;4;;@Override public TypeSerializerSnapshot<String[]> snapshotConfiguration() {     return new StringArraySerializerSnapshot(). }
