commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the time unit for this policy's time interval.  * @return The time unit for this policy's time interval.  */ ;// ------------------------------------------------------------------------ // Properties // ------------------------------------------------------------------------ /**  * Gets the time unit for this policy's time interval.  * @return The time unit for this policy's time interval.  */ public TimeUnit getUnit() {     return unit. }
true;public;0;3;/**  * Gets the length of this policy's time interval.  * @return The length of this policy's time interval.  */ ;/**  * Gets the length of this policy's time interval.  * @return The length of this policy's time interval.  */ public long getSize() {     return size. }
true;public;0;3;/**  * Converts the time interval to milliseconds.  * @return The time interval in milliseconds.  */ ;/**  * Converts the time interval to milliseconds.  * @return The time interval in milliseconds.  */ public long toMilliseconds() {     return unit.toMillis(size). }
false;public;0;4;;@Override public String toString() {     return toMilliseconds() + " ms". }
true;public,static;2;3;/**  * Creates a new {@link Time} of the given duration and {@link TimeUnit}.  *  * @param size The duration of time.  * @param unit The unit of time of the duration, for example {@code TimeUnit.SECONDS}.  * @return The time policy.  */ ;// ------------------------------------------------------------------------ // Factory // ------------------------------------------------------------------------ /**  * Creates a new {@link Time} of the given duration and {@link TimeUnit}.  *  * @param size The duration of time.  * @param unit The unit of time of the duration, for example {@code TimeUnit.SECONDS}.  * @return The time policy.  */ public static Time of(long size, TimeUnit unit) {     return new Time(size, unit). }
true;public,static;1;3;/**  * Creates a new {@link Time} that represents the given number of milliseconds.  */ ;/**  * Creates a new {@link Time} that represents the given number of milliseconds.  */ public static Time milliseconds(long milliseconds) {     return of(milliseconds, TimeUnit.MILLISECONDS). }
true;public,static;1;3;/**  * Creates a new {@link Time} that represents the given number of seconds.  */ ;/**  * Creates a new {@link Time} that represents the given number of seconds.  */ public static Time seconds(long seconds) {     return of(seconds, TimeUnit.SECONDS). }
true;public,static;1;3;/**  * Creates a new {@link Time} that represents the given number of minutes.  */ ;/**  * Creates a new {@link Time} that represents the given number of minutes.  */ public static Time minutes(long minutes) {     return of(minutes, TimeUnit.MINUTES). }
true;public,static;1;3;/**  * Creates a new {@link Time} that represents the given number of hours.  */ ;/**  * Creates a new {@link Time} that represents the given number of hours.  */ public static Time hours(long hours) {     return of(hours, TimeUnit.HOURS). }
true;public,static;1;3;/**  * Creates a new {@link Time} that represents the given number of days.  */ ;/**  * Creates a new {@link Time} that represents the given number of days.  */ public static Time days(long days) {     return of(days, TimeUnit.DAYS). }
