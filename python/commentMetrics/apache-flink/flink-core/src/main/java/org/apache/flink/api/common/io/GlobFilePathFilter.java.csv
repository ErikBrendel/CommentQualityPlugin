commented;modifiers;parameterAmount;loc;comment;code
false;private;1;10;;private ArrayList<PathMatcher> buildPatterns(List<String> patterns) {     FileSystem fileSystem = FileSystems.getDefault().     ArrayList<PathMatcher> matchers = new ArrayList<>(patterns.size()).     for (String patternStr : patterns) {         matchers.add(fileSystem.getPathMatcher("glob:" + patternStr)).     }     return matchers. }
false;public;1;21;;@Override public boolean filterPath(Path filePath) {     if (getIncludeMatchers().isEmpty() && getExcludeMatchers().isEmpty()) {         return false.     }     // compensate for the fact that Flink paths are slashed     final String path = filePath.hasWindowsDrive() ? filePath.getPath().substring(1) : filePath.getPath().     final java.nio.file.Path nioPath = Paths.get(path).     for (PathMatcher matcher : getIncludeMatchers()) {         if (matcher.matches(nioPath)) {             return shouldExclude(nioPath).         }     }     return true. }
false;private;0;6;;private ArrayList<PathMatcher> getIncludeMatchers() {     if (includeMatchers == null) {         includeMatchers = buildPatterns(includePatterns).     }     return includeMatchers. }
false;private;0;6;;private ArrayList<PathMatcher> getExcludeMatchers() {     if (excludeMatchers == null) {         excludeMatchers = buildPatterns(excludePatterns).     }     return excludeMatchers. }
false;private;1;8;;private boolean shouldExclude(java.nio.file.Path nioPath) {     for (PathMatcher matcher : getExcludeMatchers()) {         if (matcher.matches(nioPath)) {             return true.         }     }     return false. }
