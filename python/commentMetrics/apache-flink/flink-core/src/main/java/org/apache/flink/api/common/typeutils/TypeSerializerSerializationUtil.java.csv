# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1495466666;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1497328621;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723634;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723636;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1515177485;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1517943539;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1525657109;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149027;Reads from a data input view multiple {@link TypeSerializerConfigSnapshot}s that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshots__@throws IOException;public static TypeSerializerConfigSnapshot[] readSerializerConfigSnapshots(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numFields = in.readInt()__		final TypeSerializerConfigSnapshot[] serializerConfigSnapshots = new TypeSerializerConfigSnapshot[numFields]___		TypeSerializerConfigSnapshotSerializationProxy proxy__		for (int i = 0_ i < numFields_ i++) {_			proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__			proxy.read(in)__			serializerConfigSnapshots[i] = proxy.getSerializerConfigSnapshot()__		}__		return serializerConfigSnapshots__	};reads,from,a,data,input,view,multiple,link,type,serializer,config,snapshot,s,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshots,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshots,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,fields,in,read,int,final,type,serializer,config,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,num,fields,type,serializer,config,snapshot,serialization,proxy,proxy,for,int,i,0,i,num,fields,i,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,serializer,config,snapshots,i,proxy,get,serializer,config,snapshot,return,serializer,config,snapshots
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1495466666;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1497328621;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1509723634;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1509723636;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1515177485;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader);1517943539;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), {@code null} will_be returned instead.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,code,null,will,be,returned,instead,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1495466666;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1497328621;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723634;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723636;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1515177485;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1517943539;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1525657109;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149027;Reads from a data input view a {@link TypeSerializerConfigSnapshot} that was previously_written using {@link #writeSerializerConfigSnapshot(DataOutputView, TypeSerializerConfigSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use__@return the read serializer configuration snapshot__@throws IOException;public static TypeSerializerConfigSnapshot readSerializerConfigSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		final TypeSerializerConfigSnapshotSerializationProxy proxy = new TypeSerializerConfigSnapshotSerializationProxy(userCodeClassLoader)__		proxy.read(in)___		return proxy.getSerializerConfigSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,config,snapshot,that,was,previously,written,using,link,write,serializer,config,snapshot,data,output,view,type,serializer,config,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,type,serializer,config,snapshot,read,serializer,config,snapshot,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,final,type,serializer,config,snapshot,serialization,proxy,proxy,new,type,serializer,config,snapshot,serialization,proxy,user,code,class,loader,proxy,read,in,return,proxy,get,serializer,config,snapshot
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1495466666;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1497328621;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1509723634;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1509723636;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1515177485;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1517943539;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshots( 			DataOutputView out, 			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException;1525657109;Writes multiple {@link TypeSerializerConfigSnapshot}s to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshots(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshots the serializer configuration snapshots to write__@throws IOException;public static void writeSerializerConfigSnapshots(_			DataOutputView out,_			TypeSerializerConfigSnapshot... serializerConfigSnapshots) throws IOException {__		out.writeInt(serializerConfigSnapshots.length)___		for (TypeSerializerConfigSnapshot snapshot : serializerConfigSnapshots) {_			new TypeSerializerConfigSnapshotSerializationProxy(snapshot).write(out)__		}_	};writes,multiple,link,type,serializer,config,snapshot,s,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshots,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshots,the,serializer,configuration,snapshots,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshots,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshots,throws,ioexception,out,write,int,serializer,config,snapshots,length,for,type,serializer,config,snapshot,snapshot,serializer,config,snapshots,new,type,serializer,config,snapshot,serialization,proxy,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1495466666;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1497328621;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1509723634;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1509723636;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1515177485;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1517943539;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static void writeSerializerConfigSnapshot( 			DataOutputView out, 			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException;1525657109;Writes a {@link TypeSerializerConfigSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerConfigSnapshot(DataInputView, ClassLoader)}.__@param out the data output view_@param serializerConfigSnapshot the serializer configuration snapshot to write__@throws IOException;public static void writeSerializerConfigSnapshot(_			DataOutputView out,_			TypeSerializerConfigSnapshot serializerConfigSnapshot) throws IOException {__		new TypeSerializerConfigSnapshotSerializationProxy(serializerConfigSnapshot).write(out)__	};writes,a,link,type,serializer,config,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,config,snapshot,data,input,view,class,loader,param,out,the,data,output,view,param,serializer,config,snapshot,the,serializer,configuration,snapshot,to,write,throws,ioexception;public,static,void,write,serializer,config,snapshot,data,output,view,out,type,serializer,config,snapshot,serializer,config,snapshot,throws,ioexception,new,type,serializer,config,snapshot,serialization,proxy,serializer,config,snapshot,write,out
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1525657109;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1539149027;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1539149040;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1539149047;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1539149114;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes(), e)__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,e,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes(), e.getCause())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,e,get,cause,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes(), e.getCause())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,e,get,cause,else,throw,e
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			boolean useDummyPlaceholder) throws IOException;1550119533;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes, otherwise an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			boolean useDummyPlaceholder) throws IOException {__		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (UnloadableTypeSerializerException e) {_			if (useDummyPlaceholder) {_				LOG.warn("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", e.getCause())__				return new UnloadableDummyTypeSerializer<>(e.getSerializerBytes(), e.getCause())__			} else {_				throw e__			}_		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,throws,ioexception,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,try,proxy,read,in,return,proxy,get,type,serializer,catch,unloadable,type,serializer,exception,e,if,use,dummy,placeholder,log,warn,could,not,read,a,requested,serializer,replaced,with,a,unloadable,dummy,type,serializer,e,get,cause,return,new,unloadable,dummy,type,serializer,e,get,serializer,bytes,e,get,cause,else,throw,e
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1495466666;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1497328621;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723634;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1509723636;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1515177485;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1517943539;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}._This is fault tolerant to any failures when deserializing the serializers. Serializers which_were not successfully deserialized will be replaced by {@code null}.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,this,is,fault,tolerant,to,any,failures,when,deserializing,the,serializers,serializers,which,were,not,successfully,deserialized,will,be,replaced,by,code,null,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1525657109;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149027;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149040;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])__				configSnapshot = TypeSerializerConfigSnapshotSerializationUtil.readSerializerConfigSnapshot(bufferWrapper, userCodeClassLoader)___				serializersAndConfigSnapshots.add(_					new Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,config,snapshot,serialization,util,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializers,and,config,snapshots,add,new,tuple2,type,serializer,type,serializer,config,snapshot,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149047;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerConfigSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				_				_				_				_				configSnapshot = new BackwardsCompatibleConfigSnapshot<>(_					TypeSerializerConfigSnapshotSerializationUtil.readSerializerConfigSnapshot(_						bufferWrapper, userCodeClassLoader),_					serializer)___				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,config,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,config,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,new,backwards,compatible,config,snapshot,type,serializer,config,snapshot,serialization,util,read,serializer,config,snapshot,buffer,wrapper,user,code,class,loader,serializer,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> UnloadableTypeSerializerException -> public UnloadableTypeSerializerException(Exception cause, byte[] serializerBytes);1540907751;Creates a new exception, with the cause of the read error and the original serializer bytes.__@param cause the cause of the read error._@param serializerBytes the original serializer bytes.;public UnloadableTypeSerializerException(Exception cause, byte[] serializerBytes) {_			super(cause)__			this.serializerBytes = Preconditions.checkNotNull(serializerBytes)__		};creates,a,new,exception,with,the,cause,of,the,read,error,and,the,original,serializer,bytes,param,cause,the,cause,of,the,read,error,param,serializer,bytes,the,original,serializer,bytes;public,unloadable,type,serializer,exception,exception,cause,byte,serializer,bytes,super,cause,this,serializer,bytes,preconditions,check,not,null,serializer,bytes
TypeSerializerSerializationUtil -> UnloadableTypeSerializerException -> public UnloadableTypeSerializerException(Exception cause, byte[] serializerBytes);1550119533;Creates a new exception, with the cause of the read error and the original serializer bytes.__@param cause the cause of the read error._@param serializerBytes the original serializer bytes.;public UnloadableTypeSerializerException(Exception cause, byte[] serializerBytes) {_			super(cause)__			this.serializerBytes = Preconditions.checkNotNull(serializerBytes)__		};creates,a,new,exception,with,the,cause,of,the,read,error,and,the,original,serializer,bytes,param,cause,the,cause,of,the,read,error,param,serializer,bytes,the,original,serializer,bytes;public,unloadable,type,serializer,exception,exception,cause,byte,serializer,bytes,super,cause,this,serializer,bytes,preconditions,check,not,null,serializer,bytes
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException;1539149114;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_					bufferWrapper, (TypeSerializerSnapshot) serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,snapshot,serialization,util,write,serializer,snapshot,buffer,wrapper,type,serializer,snapshot,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException;1540907751;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_					bufferWrapper, (TypeSerializerSnapshot) serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,snapshot,serialization,util,write,serializer,snapshot,buffer,wrapper,type,serializer,snapshot,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException;1540907751;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_					bufferWrapper, (TypeSerializerSnapshot) serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,snapshot,serialization,util,write,serializer,snapshot,buffer,wrapper,type,serializer,snapshot,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException;1540907751;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_					bufferWrapper, (TypeSerializerSnapshot) serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,snapshot,serialization,util,write,serializer,snapshot,buffer,wrapper,type,serializer,snapshot,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException;1550119533;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerSnapshotSerializationUtil.writeSerializerSnapshot(_					bufferWrapper, (TypeSerializerSnapshot) serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,snapshot,serialization,util,write,serializer,snapshot,buffer,wrapper,type,serializer,snapshot,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1495466666;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1497328621;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1509723634;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1509723636;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1515177485;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder);1517943539;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails due to {@link ClassNotFoundException} or {@link InvalidClassException},_users can opt to use a dummy {@link UnloadableDummyTypeSerializer} to hold the serializer bytes,_otherwise {@code null} is returned. If the failure is due to a {@link java.io.StreamCorruptedException},_then {@code null} is returned.__@param in the data input view._@param userCodeClassLoader the user code class loader to use._@param useDummyPlaceholder whether or not to use a dummy {@link UnloadableDummyTypeSerializer} to hold the_serializer bytes in the case of a {@link ClassNotFoundException} or_{@link InvalidClassException}.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader, boolean useDummyPlaceholder) {_		final TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<T> proxy =_			new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(userCodeClassLoader, useDummyPlaceholder)___		try {_			proxy.read(in)__			return proxy.getTypeSerializer()__		} catch (IOException e) {_			LOG.warn("Deserialization of serializer errored_ replacing with null.", e)___			return null__		}_	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,due,to,link,class,not,found,exception,or,link,invalid,class,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,otherwise,code,null,is,returned,if,the,failure,is,due,to,a,link,java,io,stream,corrupted,exception,then,code,null,is,returned,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,use,dummy,placeholder,whether,or,not,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,in,the,case,of,a,link,class,not,found,exception,or,link,invalid,class,exception,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,boolean,use,dummy,placeholder,final,type,serializer,serialization,util,type,serializer,serialization,proxy,t,proxy,new,type,serializer,serialization,util,type,serializer,serialization,proxy,user,code,class,loader,use,dummy,placeholder,try,proxy,read,in,return,proxy,get,type,serializer,catch,ioexception,e,log,warn,deserialization,of,serializer,errored,replacing,with,null,e,return,null
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1495466666;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1497328621;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1509723634;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1509723636;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1515177485;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1517943539;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1525657109;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1539149027;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				writeSerializerConfigSnapshot(bufferWrapper, serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1539149040;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerConfigSnapshotSerializationUtil.writeSerializerConfigSnapshot(_					bufferWrapper, serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,config,snapshot,serialization,util,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static void writeSerializersAndConfigsWithResilience( 			DataOutputView out, 			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException;1539149047;Write a list of serializers and their corresponding config snapshots to the provided_data output view. This method writes in a fault tolerant way, so that when read again_using {@link #readSerializersAndConfigsWithResilience(DataInputView, ClassLoader)}, if_deserialization of the serializer fails, its configuration snapshot will remain intact.__<p>Specifically, all written serializers and their config snapshots are indexed by their_offset positions within the serialized bytes. The serialization format is as follows:_<ul>_<li>1. number of serializer and configuration snapshot pairs.</li>_<li>2. offsets of each serializer and configuration snapshot, in order.</li>_<li>3. total number of bytes for the serialized serializers and the config snapshots.</li>_<li>4. serialized serializers and the config snapshots.</li>_</ul>__@param out the data output view._@param serializersAndConfigs serializer and configuration snapshot pairs__@throws IOException;public static void writeSerializersAndConfigsWithResilience(_			DataOutputView out,_			List<Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot>> serializersAndConfigs) throws IOException {__		try (_			ByteArrayOutputStreamWithPos bufferWithPos = new ByteArrayOutputStreamWithPos()__			DataOutputViewStreamWrapper bufferWrapper = new DataOutputViewStreamWrapper(bufferWithPos)) {__			out.writeInt(serializersAndConfigs.size())__			for (Tuple2<TypeSerializer<?>, TypeSerializerConfigSnapshot> serAndConfSnapshot : serializersAndConfigs) {_				out.writeInt(bufferWithPos.getPosition())__				writeSerializer(bufferWrapper, serAndConfSnapshot.f0)___				out.writeInt(bufferWithPos.getPosition())__				TypeSerializerConfigSnapshotSerializationUtil.writeSerializerConfigSnapshot(_					bufferWrapper, serAndConfSnapshot.f1, serAndConfSnapshot.f0)__			}__			out.writeInt(bufferWithPos.getPosition())__			out.write(bufferWithPos.getBuf(), 0, bufferWithPos.getPosition())__		}_	};write,a,list,of,serializers,and,their,corresponding,config,snapshots,to,the,provided,data,output,view,this,method,writes,in,a,fault,tolerant,way,so,that,when,read,again,using,link,read,serializers,and,configs,with,resilience,data,input,view,class,loader,if,deserialization,of,the,serializer,fails,its,configuration,snapshot,will,remain,intact,p,specifically,all,written,serializers,and,their,config,snapshots,are,indexed,by,their,offset,positions,within,the,serialized,bytes,the,serialization,format,is,as,follows,ul,li,1,number,of,serializer,and,configuration,snapshot,pairs,li,li,2,offsets,of,each,serializer,and,configuration,snapshot,in,order,li,li,3,total,number,of,bytes,for,the,serialized,serializers,and,the,config,snapshots,li,li,4,serialized,serializers,and,the,config,snapshots,li,ul,param,out,the,data,output,view,param,serializers,and,configs,serializer,and,configuration,snapshot,pairs,throws,ioexception;public,static,void,write,serializers,and,configs,with,resilience,data,output,view,out,list,tuple2,type,serializer,type,serializer,config,snapshot,serializers,and,configs,throws,ioexception,try,byte,array,output,stream,with,pos,buffer,with,pos,new,byte,array,output,stream,with,pos,data,output,view,stream,wrapper,buffer,wrapper,new,data,output,view,stream,wrapper,buffer,with,pos,out,write,int,serializers,and,configs,size,for,tuple2,type,serializer,type,serializer,config,snapshot,ser,and,conf,snapshot,serializers,and,configs,out,write,int,buffer,with,pos,get,position,write,serializer,buffer,wrapper,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,type,serializer,config,snapshot,serialization,util,write,serializer,config,snapshot,buffer,wrapper,ser,and,conf,snapshot,f1,ser,and,conf,snapshot,f0,out,write,int,buffer,with,pos,get,position,out,write,buffer,with,pos,get,buf,0,buffer,with,pos,get,position
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1539149114;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				configSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_						bufferWrapper, userCodeClassLoader, serializer)___				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,buffer,wrapper,user,code,class,loader,serializer,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				configSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_						bufferWrapper, userCodeClassLoader, serializer)___				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,buffer,wrapper,user,code,class,loader,serializer,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				configSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_						bufferWrapper, userCodeClassLoader, serializer)___				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,buffer,wrapper,user,code,class,loader,serializer,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				configSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_						bufferWrapper, userCodeClassLoader, serializer)___				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,buffer,wrapper,user,code,class,loader,serializer,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience( 			DataInputView in, 			ClassLoader userCodeClassLoader) throws IOException;1550119533;Reads from a data input view a list of serializers and their corresponding config snapshots_written using {@link #writeSerializersAndConfigsWithResilience(DataOutputView, List)}.__<p>If deserialization for serializers fails due to any exception, users can opt to use a dummy_{@link UnloadableDummyTypeSerializer} to hold the serializer bytes__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@return the deserialized serializer and config snapshot pairs.__@throws IOException;public static List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> readSerializersAndConfigsWithResilience(_			DataInputView in,_			ClassLoader userCodeClassLoader) throws IOException {__		int numSerializersAndConfigSnapshots = in.readInt()___		int[] offsets = new int[numSerializersAndConfigSnapshots * 2]___		for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {_			offsets[i * 2] = in.readInt()__			offsets[i * 2 + 1] = in.readInt()__		}__		int totalBytes = in.readInt()__		byte[] buffer = new byte[totalBytes]__		in.readFully(buffer)___		List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigSnapshots =_			new ArrayList<>(numSerializersAndConfigSnapshots)___		TypeSerializer<?> serializer__		TypeSerializerSnapshot<?> configSnapshot__		try (_			ByteArrayInputStreamWithPos bufferWithPos = new ByteArrayInputStreamWithPos(buffer)__			DataInputViewStreamWrapper bufferWrapper = new DataInputViewStreamWrapper(bufferWithPos)) {__			for (int i = 0_ i < numSerializersAndConfigSnapshots_ i++) {__				bufferWithPos.setPosition(offsets[i * 2])__				serializer = tryReadSerializer(bufferWrapper, userCodeClassLoader, true)___				bufferWithPos.setPosition(offsets[i * 2 + 1])___				configSnapshot = TypeSerializerSnapshotSerializationUtil.readSerializerSnapshot(_						bufferWrapper, userCodeClassLoader, serializer)___				if (serializer instanceof LegacySerializerSnapshotTransformer) {_					configSnapshot = transformLegacySnapshot(serializer, configSnapshot)__				}__				serializersAndConfigSnapshots.add(new Tuple2<>(serializer, configSnapshot))__			}_		}__		return serializersAndConfigSnapshots__	};reads,from,a,data,input,view,a,list,of,serializers,and,their,corresponding,config,snapshots,written,using,link,write,serializers,and,configs,with,resilience,data,output,view,list,p,if,deserialization,for,serializers,fails,due,to,any,exception,users,can,opt,to,use,a,dummy,link,unloadable,dummy,type,serializer,to,hold,the,serializer,bytes,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,return,the,deserialized,serializer,and,config,snapshot,pairs,throws,ioexception;public,static,list,tuple2,type,serializer,type,serializer,snapshot,read,serializers,and,configs,with,resilience,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,int,num,serializers,and,config,snapshots,in,read,int,int,offsets,new,int,num,serializers,and,config,snapshots,2,for,int,i,0,i,num,serializers,and,config,snapshots,i,offsets,i,2,in,read,int,offsets,i,2,1,in,read,int,int,total,bytes,in,read,int,byte,buffer,new,byte,total,bytes,in,read,fully,buffer,list,tuple2,type,serializer,type,serializer,snapshot,serializers,and,config,snapshots,new,array,list,num,serializers,and,config,snapshots,type,serializer,serializer,type,serializer,snapshot,config,snapshot,try,byte,array,input,stream,with,pos,buffer,with,pos,new,byte,array,input,stream,with,pos,buffer,data,input,view,stream,wrapper,buffer,wrapper,new,data,input,view,stream,wrapper,buffer,with,pos,for,int,i,0,i,num,serializers,and,config,snapshots,i,buffer,with,pos,set,position,offsets,i,2,serializer,try,read,serializer,buffer,wrapper,user,code,class,loader,true,buffer,with,pos,set,position,offsets,i,2,1,config,snapshot,type,serializer,snapshot,serialization,util,read,serializer,snapshot,buffer,wrapper,user,code,class,loader,serializer,if,serializer,instanceof,legacy,serializer,snapshot,transformer,config,snapshot,transform,legacy,snapshot,serializer,config,snapshot,serializers,and,config,snapshots,add,new,tuple2,serializer,config,snapshot,return,serializers,and,config,snapshots
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1495466666;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1497328621;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1509723634;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1509723636;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1515177485;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1517943539;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1525657109;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1539149027;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1539149040;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1539149047;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1539149114;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException;1550119533;Writes a {@link TypeSerializer} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #tryReadSerializer(DataInputView, ClassLoader, boolean)}.__@param out the data output view._@param serializer the serializer to write.__@param <T> Data type of the serializer.__@throws IOException;public static <T> void writeSerializer(DataOutputView out, TypeSerializer<T> serializer) throws IOException {_		new TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<>(serializer).write(out)__	};writes,a,link,type,serializer,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,try,read,serializer,data,input,view,class,loader,boolean,param,out,the,data,output,view,param,serializer,the,serializer,to,write,param,t,data,type,of,the,serializer,throws,ioexception;public,static,t,void,write,serializer,data,output,view,out,type,serializer,t,serializer,throws,ioexception,new,type,serializer,serialization,util,type,serializer,serialization,proxy,serializer,write,out
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1525657109;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1539149027;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1539149040;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1539149047;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1539149114;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
TypeSerializerSerializationUtil -> public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException;1550119533;Reads from a data input view a {@link TypeSerializer} that was previously_written using {@link #writeSerializer(DataOutputView, TypeSerializer)}.__<p>If deserialization fails for any reason (corrupted serializer bytes, serializer class_no longer in classpath, serializer class no longer valid, etc.), an {@link IOException} is thrown.__@param in the data input view._@param userCodeClassLoader the user code class loader to use.__@param <T> Data type of the serializer.__@return the deserialized serializer.;public static <T> TypeSerializer<T> tryReadSerializer(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {_		return tryReadSerializer(in, userCodeClassLoader, false)__	};reads,from,a,data,input,view,a,link,type,serializer,that,was,previously,written,using,link,write,serializer,data,output,view,type,serializer,p,if,deserialization,fails,for,any,reason,corrupted,serializer,bytes,serializer,class,no,longer,in,classpath,serializer,class,no,longer,valid,etc,an,link,ioexception,is,thrown,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,t,data,type,of,the,serializer,return,the,deserialized,serializer;public,static,t,type,serializer,t,try,read,serializer,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception,return,try,read,serializer,in,user,code,class,loader,false
