commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return The operator representing the partial solution.  */ ;// -------------------------------------------------------------------------------------------- /**  * @return The operator representing the partial solution.  */ public Operator<T> getPartialSolution() {     return this.inputPlaceHolder. }
true;public;1;6;/**  * @param result  */ ;/**  * @param result  */ public void setNextPartialSolution(Operator<T> result) {     if (result == null) {         throw new NullPointerException("Operator producing the next partial solution must not be null.").     }     this.iterationResult = result. }
true;public;0;3;/**  * @return The operator representing the next partial solution.  */ ;/**  * @return The operator representing the next partial solution.  */ public Operator<T> getNextPartialSolution() {     return this.iterationResult. }
true;public;0;3;/**  * @return The operator representing the termination criterion.  */ ;/**  * @return The operator representing the termination criterion.  */ public Operator<?> getTerminationCriterion() {     return this.terminationCriterion. }
true;public;1;14;/**  * @param criterion  */ ;/**  * @param criterion  */ public <X> void setTerminationCriterion(Operator<X> criterion) {     TypeInformation<X> type = criterion.getOperatorInfo().getOutputType().     FlatMapOperatorBase<X, X, TerminationCriterionMapper<X>> mapper = new FlatMapOperatorBase<X, X, TerminationCriterionMapper<X>>(new TerminationCriterionMapper<X>(), new UnaryOperatorInformation<X, X>(type, type), "Termination Criterion Aggregation Wrapper").     mapper.setInput(criterion).     this.terminationCriterion = mapper.     this.getAggregators().registerAggregationConvergenceCriterion(TERMINATION_CRITERION_AGGREGATOR_NAME, new TerminationCriterionAggregator(), new TerminationCriterionAggregationConvergence()). }
true;public;1;6;/**  * @param num  */ ;/**  * @param num  */ public void setMaximumNumberOfIterations(int num) {     if (num < 1) {         throw new IllegalArgumentException("The number of iterations must be at least one.").     }     this.numberOfIterations = num. }
false;public;0;3;;public int getMaximumNumberOfIterations() {     return this.numberOfIterations. }
false;public;0;4;;@Override public AggregatorRegistry getAggregators() {     return this.aggregators. }
true;public;0;13;/**  * @throws InvalidProgramException  */ ;/**  * @throws InvalidProgramException  */ public void validate() throws InvalidProgramException {     if (this.input == null) {         throw new RuntimeException("Operator for initial partial solution is not set.").     }     if (this.iterationResult == null) {         throw new InvalidProgramException("Operator producing the next version of the partial " + "solution (iteration result) is not set.").     }     if (this.terminationCriterion == null && this.numberOfIterations <= 0) {         throw new InvalidProgramException("No termination condition is set " + "(neither fix number of iteration nor termination criterion).").     } }
true;public;0;3;/**  * The BulkIteration meta operator cannot have broadcast inputs.  *  * @return An empty map.  */ ;/**  * The BulkIteration meta operator cannot have broadcast inputs.  *  * @return An empty map.  */ public Map<String, Operator<?>> getBroadcastInputs() {     return Collections.emptyMap(). }
true;public;2;3;/**  * The BulkIteration meta operator cannot have broadcast inputs.  * This method always throws an exception.  *  * @param name Ignored.  * @param root Ignored.  */ ;/**  * The BulkIteration meta operator cannot have broadcast inputs.  * This method always throws an exception.  *  * @param name Ignored.  * @param root Ignored.  */ public void setBroadcastVariable(String name, Operator<?> root) {     throw new UnsupportedOperationException("The BulkIteration meta operator cannot have broadcast inputs."). }
true;public;1;3;/**  * The BulkIteration meta operator cannot have broadcast inputs.  * This method always throws an exception.  *  * @param inputs Ignored  */ ;/**  * The BulkIteration meta operator cannot have broadcast inputs.  * This method always throws an exception.  *  * @param inputs Ignored  */ public <X> void setBroadcastVariables(Map<String, Operator<X>> inputs) {     throw new UnsupportedOperationException("The BulkIteration meta operator cannot have broadcast inputs."). }
false;public;0;3;;public BulkIterationBase<OT> getContainingBulkIteration() {     return this.containingIteration. }
false;public;1;5;;@Override public void accept(Visitor<Operator<?>> visitor) {     visitor.preVisit(this).     visitor.postVisit(this). }
false;public;0;4;;@Override public UserCodeWrapper<?> getUserCodeWrapper() {     return null. }
false;public;1;4;;@Override public void open(Configuration parameters) {     aggregator = getIterationRuntimeContext().getIterationAggregator(TERMINATION_CRITERION_AGGREGATOR_NAME). }
false;public;2;4;;@Override public void flatMap(X in, Collector<X> out) {     aggregator.aggregate(1L). }
false;public;0;4;;@Override public LongValue getAggregate() {     return new LongValue(count). }
false;public;1;3;;public void aggregate(long count) {     this.count += count. }
false;public;1;4;;@Override public void aggregate(LongValue count) {     this.count += count.getValue(). }
false;public;0;4;;@Override public void reset() {     count = 0. }
false;public;2;10;;@Override public boolean isConverged(int iteration, LongValue countAggregate) {     long count = countAggregate.getValue().     if (log.isInfoEnabled()) {         log.info("Termination criterion stats in iteration [" + iteration + "]: " + count).     }     return count == 0. }
false;protected;3;4;;@Override protected List<T> executeOnCollections(List<T> inputData, RuntimeContext runtimeContext, ExecutionConfig executionConfig) {     throw new UnsupportedOperationException(). }
