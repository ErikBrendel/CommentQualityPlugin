# id;timestamp;commentText;codeText;commentWords;codeWords
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1412346153;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1418030815;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1422957090;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1423570503;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1424115592;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1439469746;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1449526281;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1455479358;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(List<Operator<IN>> inputs);1460741894;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(List<Operator<IN>> inputs) {_		checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,list,operator,in,inputs,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> public Operator<IN> getInput();1412346153;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1418030815;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1422957090;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1423570503;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1424115592;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1439469746;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1449526281;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1455479358;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> public Operator<IN> getInput();1460741894;Returns this operator's input operator.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,this,operator,s,input,operator,return,this,operator,s,input;public,operator,in,get,input,return,this,input
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1412346153;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1418030815;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1422957090;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1423570503;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1424115592;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1439469746;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1449526281;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1455479358;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper();1460741894;Gets the class describing the output format._<p>_This method is basically identical to {@link #getFormatWrapper()}.__@return The class describing the output format.__@see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper();@Override_	public UserCodeWrapper<? extends OutputFormat<IN>> getUserCodeWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,the,output,format,p,this,method,is,basically,identical,to,link,get,format,wrapper,return,the,class,describing,the,output,format,see,org,apache,flink,api,common,operators,operator,get,user,code,wrapper;override,public,user,code,wrapper,extends,output,format,in,get,user,code,wrapper,return,this,format,wrapper
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1412346153;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1418030815;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1422957090;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1423570503;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1424115592;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1439469746;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1449526281;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1455479358;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Override 	public void accept(Visitor<Operator<?>> visitor);1460741894;Accepts the visitor and applies it this instance. This method applies the visitor in a depth-first traversal._The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		boolean descend = visitor.preVisit(this)__		if (descend) {_			this.input.accept(visitor)__			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,this,method,applies,the,visitor,in,a,depth,first,traversal,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,boolean,descend,visitor,pre,visit,this,if,descend,this,input,accept,visitor,visitor,post,visit,this
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1412346153;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1418030815;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1422957090;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1423570503;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1424115592;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1439469746;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1449526281;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1455479358;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> @Deprecated 	public void setInputs(Operator<IN>... inputs);1460741894;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void setInputs(Operator<IN>... inputs) {_		checkNotNull(inputs, "The inputs may not be null.")__		this.input = Operator.createUnionCascade(inputs)__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,set,inputs,operator,in,inputs,check,not,null,inputs,the,inputs,may,not,be,null,this,input,operator,create,union,cascade,inputs
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1412346153;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1418030815;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1422957090;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1423570503;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1424115592;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering);1439469746;Sets the sink to partition the records into ranges over the given ordering.__@param partitionOrdering The record ordering over which to partition in ranges.;public void setRangePartitioned(Ordering partitionOrdering) {_		throw new UnsupportedOperationException(_			"Range partitioning is currently only supported with a user supplied data distribution.")__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges;public,void,set,range,partitioned,ordering,partition,ordering,throw,new,unsupported,operation,exception,range,partitioning,is,currently,only,supported,with,a,user,supplied,data,distribution
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1412346153;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1418030815;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1422957090;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1423570503;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1424115592;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1439469746;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1449526281;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1455479358;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setLocalOrder(Ordering localOrder);1460741894;Sets the order in which the sink must write its data within each fragment in the distributed_file system. For any value other then <tt>NONE</tt>, this will cause the system to perform a_local sort, or try to reuse an order from a previous operation.__@param localOrder The local order to write the data in.;public void setLocalOrder(Ordering localOrder) {_		this.localOrdering = localOrder__	};sets,the,order,in,which,the,sink,must,write,its,data,within,each,fragment,in,the,distributed,file,system,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,local,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,local,order,the,local,order,to,write,the,data,in;public,void,set,local,order,ordering,local,order,this,local,ordering,local,order
GenericDataSinkBase -> public void setInput(Operator<IN> input);1412346153;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1418030815;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1422957090;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1423570503;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1424115592;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1439469746;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1449526281;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1455479358;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		Preconditions.checkNotNull(input, "The input may not be null.")__		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,preconditions,check,not,null,input,the,input,may,not,be,null,this,input,input
GenericDataSinkBase -> public void setInput(Operator<IN> input);1460741894;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = checkNotNull(input, "The input may not be null.")__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,check,not,null,input,the,input,may,not,be,null
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1412346153;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1418030815;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1422957090;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1423570503;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1424115592;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1439469746;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1449526281;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1455479358;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		Preconditions.checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,preconditions,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> @SuppressWarnings("unchecked") 	@Deprecated 	public void addInputs(List<? extends Operator<IN>> inputs);1460741894;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@SuppressWarnings("unchecked")_	@Deprecated_	public void addInputs(List<? extends Operator<IN>> inputs) {_		checkNotNull(inputs, "The inputs may not be null.")__		this.input = createUnionCascade(this.input, (Operator<IN>[]) inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;suppress,warnings,unchecked,deprecated,public,void,add,inputs,list,extends,operator,in,inputs,check,not,null,inputs,the,inputs,may,not,be,null,this,input,create,union,cascade,this,input,operator,in,inputs,to,array,new,operator,inputs,size
GenericDataSinkBase -> public Ordering getPartitionOrdering();1412346153;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public Ordering getPartitionOrdering();1418030815;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public Ordering getPartitionOrdering();1422957090;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public Ordering getPartitionOrdering();1423570503;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public Ordering getPartitionOrdering();1424115592;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public Ordering getPartitionOrdering();1439469746;Gets the record ordering over which the sink partitions in ranges.__@return The record ordering over which to partition in ranges.;public Ordering getPartitionOrdering() {_		return this.partitionOrdering__	};gets,the,record,ordering,over,which,the,sink,partitions,in,ranges,return,the,record,ordering,over,which,to,partition,in,ranges;public,ordering,get,partition,ordering,return,this,partition,ordering
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1412346153;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1418030815;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1422957090;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1423570503;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1424115592;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder);1439469746;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in.;public void setGlobalOrder(Ordering globalOrder) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in;public,void,set,global,order,ordering,global,order,this,local,ordering,global,order,set,range,partitioned,global,order
GenericDataSinkBase -> public Ordering getLocalOrder();1412346153;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1418030815;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1422957090;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1423570503;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1424115592;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1439469746;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1449526281;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1455479358;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public Ordering getLocalOrder();1460741894;Gets the order, in which the data sink writes its data locally. Local order means that_with in each fragment of the file inside the distributed file system, the data is ordered,_but not across file fragments.__@return NONE, if the sink writes data in any order, or ASCENDING (resp. DESCENDING),_if the sink writes it data with a local ascending (resp. descending) order.;public Ordering getLocalOrder() {_		return this.localOrdering__	};gets,the,order,in,which,the,data,sink,writes,its,data,locally,local,order,means,that,with,in,each,fragment,of,the,file,inside,the,distributed,file,system,the,data,is,ordered,but,not,across,file,fragments,return,none,if,the,sink,writes,data,in,any,order,or,ascending,resp,descending,if,the,sink,writes,it,data,with,a,local,ascending,resp,descending,order;public,ordering,get,local,order,return,this,local,ordering
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1412346153;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1418030815;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1422957090;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1423570503;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1424115592;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1439469746;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1449526281;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1455479358;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper();1460741894;Gets the class describing this sinks output format.__@return The output format class.;public UserCodeWrapper<? extends OutputFormat<IN>> getFormatWrapper() {_		return this.formatWrapper__	};gets,the,class,describing,this,sinks,output,format,return,the,output,format,class;public,user,code,wrapper,extends,output,format,in,get,format,wrapper,return,this,format,wrapper
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1412346153;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1418030815;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1422957090;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1423570503;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1424115592;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1439469746;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1449526281;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1455479358;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		Preconditions.checkNotNull(f, "The OutputFormat class may not be null.")__		this.formatWrapper = f__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,class,may,not,be,null,this,format,wrapper,f
GenericDataSinkBase -> public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1460741894;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(UserCodeWrapper<? extends OutputFormat<IN>> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)__		this.formatWrapper = checkNotNull(f, "The OutputFormat class may not be null.")__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,user,code,wrapper,extends,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,this,format,wrapper,check,not,null,f,the,output,format,class,may,not,be,null
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1412346153;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1418030815;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1422957090;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1423570503;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1424115592;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution);1439469746;Sets the order in which the sink must write its data. For any value other then <tt>NONE</tt>,_this will cause the system to perform a global sort, or try to reuse an order from a_previous operation.__@param globalOrder The order to write the data in._@param distribution The distribution to use for the range partitioning.;public void setGlobalOrder(Ordering globalOrder, DataDistribution distribution) {_		this.localOrdering = globalOrder__		setRangePartitioned(globalOrder, distribution)__	};sets,the,order,in,which,the,sink,must,write,its,data,for,any,value,other,then,tt,none,tt,this,will,cause,the,system,to,perform,a,global,sort,or,try,to,reuse,an,order,from,a,previous,operation,param,global,order,the,order,to,write,the,data,in,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,global,order,ordering,global,order,data,distribution,distribution,this,local,ordering,global,order,set,range,partitioned,global,order,distribution
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1412346153;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1418030815;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1422957090;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1423570503;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1424115592;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1439469746;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1449526281;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1455479358;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		Preconditions.checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,preconditions,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> @Deprecated 	public void addInput(Operator<IN>... inputs);1460741894;Adds to the input the union of the given operators.__@param inputs The operator(s) to be unioned with the input._@deprecated This method will be removed in future versions. Use the {@link org.apache.flink.api.common.operators.Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... inputs) {_		checkNotNull(inputs, "The input may not be null.")__		this.input = Operator.createUnionCascade(this.input, inputs)__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,to,be,unioned,with,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,org,apache,flink,api,common,operators,union,operator,instead;deprecated,public,void,add,input,operator,in,inputs,check,not,null,inputs,the,input,may,not,be,null,this,input,operator,create,union,cascade,this,input,inputs
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1412346153;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1418030815;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1422957090;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1423570503;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1424115592;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution);1439469746;Sets the sink to partition the records into ranges over the given ordering._The bucket boundaries are determined using the given data distribution.__@param partitionOrdering The record ordering over which to partition in ranges._@param distribution The distribution to use for the range partitioning.;public void setRangePartitioned(Ordering partitionOrdering, DataDistribution distribution) {_		if (partitionOrdering.getNumberOfFields() != distribution.getNumberOfFields()) {_			throw new IllegalArgumentException("The number of keys in the distribution must match number of ordered fields.")__		}_		_		_		_		_		this.partitionOrdering = partitionOrdering__		this.distribution = distribution__	};sets,the,sink,to,partition,the,records,into,ranges,over,the,given,ordering,the,bucket,boundaries,are,determined,using,the,given,data,distribution,param,partition,ordering,the,record,ordering,over,which,to,partition,in,ranges,param,distribution,the,distribution,to,use,for,the,range,partitioning;public,void,set,range,partitioned,ordering,partition,ordering,data,distribution,distribution,if,partition,ordering,get,number,of,fields,distribution,get,number,of,fields,throw,new,illegal,argument,exception,the,number,of,keys,in,the,distribution,must,match,number,of,ordered,fields,this,partition,ordering,partition,ordering,this,distribution,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1412346153;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1418030815;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1422957090;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1423570503;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1424115592;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public DataDistribution getDataDistribution();1439469746;Gets the distribution to use for the range partitioning.__@return The distribution to use for the range partitioning.;public DataDistribution getDataDistribution() {_		return this.distribution__	};gets,the,distribution,to,use,for,the,range,partitioning,return,the,distribution,to,use,for,the,range,partitioning;public,data,distribution,get,data,distribution,return,this,distribution
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1412346153;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1418030815;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1422957090;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1423570503;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1424115592;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1439469746;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1449526281;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1455479358;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		Preconditions.checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,preconditions,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
GenericDataSinkBase -> public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name);1460741894;Creates a GenericDataSink with the provided {@link org.apache.flink.api.common.io.OutputFormat} implementation_and the given name.__@param f The {@link org.apache.flink.api.common.io.OutputFormat} implementation used to sink the data._@param name The given name for the sink, used in plans, logs and progress messages.;public GenericDataSinkBase(OutputFormat<IN> f, UnaryOperatorInformation<IN, Nothing> operatorInfo, String name) {_		super(operatorInfo, name)___		checkNotNull(f, "The OutputFormat may not be null.")__		this.formatWrapper = new UserCodeObjectWrapper<OutputFormat<IN>>(f)__	};creates,a,generic,data,sink,with,the,provided,link,org,apache,flink,api,common,io,output,format,implementation,and,the,given,name,param,f,the,link,org,apache,flink,api,common,io,output,format,implementation,used,to,sink,the,data,param,name,the,given,name,for,the,sink,used,in,plans,logs,and,progress,messages;public,generic,data,sink,base,output,format,in,f,unary,operator,information,in,nothing,operator,info,string,name,super,operator,info,name,check,not,null,f,the,output,format,may,not,be,null,this,format,wrapper,new,user,code,object,wrapper,output,format,in,f
