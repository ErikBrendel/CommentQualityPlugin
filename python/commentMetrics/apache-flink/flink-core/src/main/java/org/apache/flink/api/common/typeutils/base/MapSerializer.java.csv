commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ // MapSerializer specific properties // ------------------------------------------------------------------------ public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;3;;public TypeSerializer<V> getValueSerializer() {     return valueSerializer. }
false;public;0;4;;// ------------------------------------------------------------------------ // Type Serializer implementation // ------------------------------------------------------------------------ @Override public boolean isImmutableType() {     return false. }
false;public;0;9;;@Override public TypeSerializer<Map<K, V>> duplicate() {     TypeSerializer<K> duplicateKeySerializer = keySerializer.duplicate().     TypeSerializer<V> duplicateValueSerializer = valueSerializer.duplicate().     return (duplicateKeySerializer == keySerializer) && (duplicateValueSerializer == valueSerializer) ? this : new MapSerializer<>(duplicateKeySerializer, duplicateValueSerializer). }
false;public;0;4;;@Override public Map<K, V> createInstance() {     return new HashMap<>(). }
false;public;1;13;;@Override public Map<K, V> copy(Map<K, V> from) {     Map<K, V> newMap = new HashMap<>(from.size()).     for (Map.Entry<K, V> entry : from.entrySet()) {         K newKey = keySerializer.copy(entry.getKey()).         V newValue = entry.getValue() == null ? null : valueSerializer.copy(entry.getValue()).         newMap.put(newKey, newValue).     }     return newMap. }
false;public;2;4;;@Override public Map<K, V> copy(Map<K, V> from, Map<K, V> reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     // var length     return -1. }
false;public;2;16;;@Override public void serialize(Map<K, V> map, DataOutputView target) throws IOException {     final int size = map.size().     target.writeInt(size).     for (Map.Entry<K, V> entry : map.entrySet()) {         keySerializer.serialize(entry.getKey(), target).         if (entry.getValue() == null) {             target.writeBoolean(true).         } else {             target.writeBoolean(false).             valueSerializer.serialize(entry.getValue(), target).         }     } }
false;public;1;16;;@Override public Map<K, V> deserialize(DataInputView source) throws IOException {     final int size = source.readInt().     final Map<K, V> map = new HashMap<>(size).     for (int i = 0. i < size. ++i) {         K key = keySerializer.deserialize(source).         boolean isNull = source.readBoolean().         V value = isNull ? null : valueSerializer.deserialize(source).         map.put(key, value).     }     return map. }
false;public;2;4;;@Override public Map<K, V> deserialize(Map<K, V> reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;16;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final int size = source.readInt().     target.writeInt(size).     for (int i = 0. i < size. ++i) {         keySerializer.copy(source, target).         boolean isNull = source.readBoolean().         target.writeBoolean(isNull).         if (!isNull) {             valueSerializer.copy(source, target).         }     } }
false;public;1;7;;@Override public boolean equals(Object obj) {     return obj == this || (obj != null && obj.getClass() == getClass() && keySerializer.equals(((MapSerializer<?, ?>) obj).getKeySerializer()) && valueSerializer.equals(((MapSerializer<?, ?>) obj).getValueSerializer())). }
false;public;0;4;;@Override public int hashCode() {     return keySerializer.hashCode() * 31 + valueSerializer.hashCode(). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<Map<K, V>> snapshotConfiguration() {     return new MapSerializerSnapshot<>(this). }
