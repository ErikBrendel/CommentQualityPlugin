commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Ensures all data so far is persistent (similar to {@link #sync()}) and returns  * a handle to recover the stream at the current position.  */ ;/**  * Ensures all data so far is persistent (similar to {@link #sync()}) and returns  * a handle to recover the stream at the current position.  */ public abstract ResumeRecoverable persist() throws IOException.
true;public,abstract;0;1;/**  * Closes the stream, ensuring persistence of all data (similar to {@link #sync()}).  * This returns a Committer that can be used to publish (make visible) the file  * that the stream was writing to.  */ ;/**  * Closes the stream, ensuring persistence of all data (similar to {@link #sync()}).  * This returns a Committer that can be used to publish (make visible) the file  * that the stream was writing to.  */ public abstract Committer closeForCommit() throws IOException.
true;public,abstract;0;2;/**  * Closes this stream. Closing the steam releases the local resources that the stream  * uses, but does NOT result in durability of previously written data. This method  * should be interpreted as a "close in order to dispose" or "close on failure".  *  * <p>In order to persist all previously written data, one needs to call the  * {@link #closeForCommit()} method and call {@link Committer#commit()} on the retured  * committer object.  *  * @throws IOException Thrown if an error occurred during closing.  */ ;/**  * Closes this stream. Closing the steam releases the local resources that the stream  * uses, but does NOT result in durability of previously written data. This method  * should be interpreted as a "close in order to dispose" or "close on failure".  *  * <p>In order to persist all previously written data, one needs to call the  * {@link #closeForCommit()} method and call {@link Committer#commit()} on the retured  * committer object.  *  * @throws IOException Thrown if an error occurred during closing.  */ @Override public abstract void close() throws IOException.
true;;0;1;/**  * Commits the file, making it visible. The file will contain the exact data  * as when the committer was created.  *  * @throws IOException Thrown if committing fails.  */ ;/**  * Commits the file, making it visible. The file will contain the exact data  * as when the committer was created.  *  * @throws IOException Thrown if committing fails.  */ void commit() throws IOException.
true;;0;1;/**  * Commits the file, making it visible. The file will contain the exact data  * as when the committer was created.  *  * <p>This method tolerates situations where the file was already committed and  * will not raise an exception in that case. This is important for idempotent  * commit retries as they need to happen after recovery.  *  * @throws IOException Thrown if committing fails.  */ ;/**  * Commits the file, making it visible. The file will contain the exact data  * as when the committer was created.  *  * <p>This method tolerates situations where the file was already committed and  * will not raise an exception in that case. This is important for idempotent  * commit retries as they need to happen after recovery.  *  * @throws IOException Thrown if committing fails.  */ void commitAfterRecovery() throws IOException.
true;;0;1;/**  * Gets a recoverable object to recover the committer. The recovered committer  * will commit the file with the exact same data as this committer would commit  * it.  */ ;/**  * Gets a recoverable object to recover the committer. The recovered committer  * will commit the file with the exact same data as this committer would commit  * it.  */ CommitRecoverable getRecoverable().
