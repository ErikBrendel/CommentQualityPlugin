commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getArity() {     return 1. }
false;public;1;8;;@Override @SuppressWarnings("unchecked") public <T> T getField(int pos) {     switch(pos) {         case 0:             return (T) this.f0.         default:             throw new IndexOutOfBoundsException(String.valueOf(pos)).     } }
false;public;2;10;;@Override @SuppressWarnings("unchecked") public <T> void setField(T value, int pos) {     switch(pos) {         case 0:             this.f0 = (T0) value.             break.         default:             throw new IndexOutOfBoundsException(String.valueOf(pos)).     } }
true;public;1;3;/**  * Sets new values to all fields of the tuple.  *  * @param value0 The value for field 0  */ ;/**  * Sets new values to all fields of the tuple.  *  * @param value0 The value for field 0  */ public void setFields(T0 value0) {     this.f0 = value0. }
true;public;0;5;/**  * Creates a string representation of the tuple in the form  * (f0),  * where the individual fields are the value returned by calling {@link Object#toString} on that field.  * @return The string representation of the tuple.  */ ;// ------------------------------------------------------------------------------------------------- // standard utilities // ------------------------------------------------------------------------------------------------- /**  * Creates a string representation of the tuple in the form  * (f0),  * where the individual fields are the value returned by calling {@link Object#toString} on that field.  * @return The string representation of the tuple.  */ @Override public String toString() {     return "(" + StringUtils.arrayAwareToString(this.f0) + ")". }
true;public;1;15;/**  * Deep equality for tuples by calling equals() on the tuple members.  * @param o the object checked for equality  * @return true if this is equal to o.  */ ;/**  * Deep equality for tuples by calling equals() on the tuple members.  * @param o the object checked for equality  * @return true if this is equal to o.  */ @Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof Tuple1)) {         return false.     }     @SuppressWarnings("rawtypes")     Tuple1 tuple = (Tuple1) o.     if (f0 != null ? !f0.equals(tuple.f0) : tuple.f0 != null) {         return false.     }     return true. }
false;public;0;5;;@Override public int hashCode() {     int result = f0 != null ? f0.hashCode() : 0.     return result. }
true;public;0;5;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ ;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ @Override @SuppressWarnings("unchecked") public Tuple1<T0> copy() {     return new Tuple1<>(this.f0). }
true;public,static;1;3;/**  * Creates a new tuple and assigns the given values to the tuple's fields.  * This is more convenient than using the constructor, because the compiler can  * infer the generic type arguments implicitly. For example:  * {@code Tuple3.of(n, x, s)}  * instead of  * {@code new Tuple3<Integer, Double, String>(n, x, s)}  */ ;/**  * Creates a new tuple and assigns the given values to the tuple's fields.  * This is more convenient than using the constructor, because the compiler can  * infer the generic type arguments implicitly. For example:  * {@code Tuple3.of(n, x, s)}  * instead of  * {@code new Tuple3<Integer, Double, String>(n, x, s)}  */ public static <T0> Tuple1<T0> of(T0 value0) {     return new Tuple1<>(value0). }
