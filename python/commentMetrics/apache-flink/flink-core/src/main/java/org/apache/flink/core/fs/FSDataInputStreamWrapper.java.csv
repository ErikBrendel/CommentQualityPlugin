commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void seek(long desired) throws IOException {     inputStream.seek(desired). }
false;public;0;4;;@Override public long getPos() throws IOException {     return inputStream.getPos(). }
false;public;0;4;;@Override public int read() throws IOException {     return inputStream.read(). }
false;public;1;4;;@Override public int read(byte[] b) throws IOException {     return inputStream.read(b). }
false;public;3;4;;@Override public int read(byte[] b, int off, int len) throws IOException {     return inputStream.read(b, off, len). }
false;public;1;4;;@Override public long skip(long n) throws IOException {     return inputStream.skip(n). }
false;public;0;4;;@Override public int available() throws IOException {     return inputStream.available(). }
false;public;0;4;;@Override public void close() throws IOException {     inputStream.close(). }
false;public;1;4;;@Override public void mark(int readlimit) {     inputStream.mark(readlimit). }
false;public;0;4;;@Override public void reset() throws IOException {     inputStream.reset(). }
false;public;0;4;;@Override public boolean markSupported() {     return inputStream.markSupported(). }
false;public;0;4;;@Override public FSDataInputStream getWrappedDelegate() {     return inputStream. }
