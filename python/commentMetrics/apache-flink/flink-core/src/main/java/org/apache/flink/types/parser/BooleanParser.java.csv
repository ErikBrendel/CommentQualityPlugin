commented;modifiers;parameterAmount;loc;comment;code
false;public;5;26;;@Override public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, Boolean reuse) {     final int i = nextStringEndPos(bytes, startPos, limit, delimiter).     if (i < 0) {         return -1.     }     for (byte[] aTRUE : TRUE) {         if (byteArrayEquals(bytes, startPos, i - startPos, aTRUE)) {             result = true.             return (i == limit) ? limit : i + delimiter.length.         }     }     for (byte[] aFALSE : FALSE) {         if (byteArrayEquals(bytes, startPos, i - startPos, aFALSE)) {             result = false.             return (i == limit) ? limit : i + delimiter.length.         }     }     setErrorState(ParseErrorState.BOOLEAN_INVALID).     return -1. }
false;public;0;4;;@Override public Boolean getLastResult() {     return result. }
false;public;0;4;;@Override public Boolean createValue() {     return false. }
true;private,static;4;11;/**  * Checks if a part of a byte array matches another byte array with chars (case-insensitive).  * @param source The source byte array.  * @param start The offset into the source byte array.  * @param length The length of the match.  * @param other The byte array which is fully compared to the part of the source array.  * @return true if other can be found in the specified part of source, false otherwise.  */ ;/**  * Checks if a part of a byte array matches another byte array with chars (case-insensitive).  * @param source The source byte array.  * @param start The offset into the source byte array.  * @param length The length of the match.  * @param other The byte array which is fully compared to the part of the source array.  * @return true if other can be found in the specified part of source, false otherwise.  */ private static boolean byteArrayEquals(byte[] source, int start, int length, byte[] other) {     if (length != other.length) {         return false.     }     for (int i = 0. i < other.length. i++) {         if (Character.toLowerCase(source[i + start]) != other[i]) {             return false.         }     }     return true. }
