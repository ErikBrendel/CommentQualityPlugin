commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;4;;private static byte[] createPadding(int originalSerializerLength, boolean padNullValueIfFixedLen) {     boolean padNullValue = originalSerializerLength > 0 && padNullValueIfFixedLen.     return padNullValue ? new byte[originalSerializerLength] : EMPTY_BYTE_ARRAY. }
true;public,static;2;5;/**  * This method tries to serialize {@code null} value with the {@code originalSerializer}  * and wraps it in case of {@link NullPointerException}, otherwise it returns the {@code originalSerializer}.  *  * @param originalSerializer     serializer to wrap and add {@code null} support  * @param padNullValueIfFixedLen pad null value to preserve the fixed length of original serializer  * @return serializer which supports {@code null} values  */ ;/**  * This method tries to serialize {@code null} value with the {@code originalSerializer}  * and wraps it in case of {@link NullPointerException}, otherwise it returns the {@code originalSerializer}.  *  * @param originalSerializer     serializer to wrap and add {@code null} support  * @param padNullValueIfFixedLen pad null value to preserve the fixed length of original serializer  * @return serializer which supports {@code null} values  */ public static <T> TypeSerializer<T> wrapIfNullIsNotSupported(@Nonnull TypeSerializer<T> originalSerializer, boolean padNullValueIfFixedLen) {     return checkIfNullSupported(originalSerializer) ? originalSerializer : wrap(originalSerializer, padNullValueIfFixedLen). }
true;public,static;1;28;/**  * This method checks if {@code serializer} supports {@code null} value.  *  * @param serializer serializer to check  */ ;/**  * This method checks if {@code serializer} supports {@code null} value.  *  * @param serializer serializer to check  */ public static <T> boolean checkIfNullSupported(@Nonnull TypeSerializer<T> serializer) {     int length = serializer.getLength() > 0 ? serializer.getLength() : 1.     DataOutputSerializer dos = new DataOutputSerializer(length).     try {         serializer.serialize(null, dos).     } catch (IOException | RuntimeException e) {         return false.     }     checkArgument(serializer.getLength() < 0 || serializer.getLength() == dos.getCopyOfBuffer().length, "The serialized form of the null value should have the same length " + "as any other if the length is fixed in the serializer").     DataInputDeserializer dis = new DataInputDeserializer(dos.getSharedBuffer()).     try {         checkArgument(serializer.deserialize(dis) == null).     } catch (IOException e) {         throw new RuntimeException(String.format("Unexpected failure to deserialize just serialized null value with %s", serializer.getClass().getName()), e).     }     checkArgument(serializer.copy(null) == null, "Serializer %s has to be able properly copy null value if it can serialize it", serializer.getClass().getName()).     return true. }
false;private;0;3;;private boolean padNullValue() {     return padding.length > 0. }
false;private;0;3;;private int nullPaddingLength() {     return padding.length. }
false;private;0;3;;private TypeSerializer<T> originalSerializer() {     return originalSerializer. }
true;public,static;2;5;/**  * This method wraps the {@code originalSerializer} with the {@code NullableSerializer} if not already wrapped.  *  * @param originalSerializer     serializer to wrap and add {@code null} support  * @param padNullValueIfFixedLen pad null value to preserve the fixed length of original serializer  * @return wrapped serializer which supports {@code null} values  */ ;/**  * This method wraps the {@code originalSerializer} with the {@code NullableSerializer} if not already wrapped.  *  * @param originalSerializer     serializer to wrap and add {@code null} support  * @param padNullValueIfFixedLen pad null value to preserve the fixed length of original serializer  * @return wrapped serializer which supports {@code null} values  */ public static <T> TypeSerializer<T> wrap(@Nonnull TypeSerializer<T> originalSerializer, boolean padNullValueIfFixedLen) {     return originalSerializer instanceof NullableSerializer ? originalSerializer : new NullableSerializer<>(originalSerializer, padNullValueIfFixedLen). }
false;public;0;4;;@Override public boolean isImmutableType() {     return originalSerializer.isImmutableType(). }
false;public;0;6;;@Override public TypeSerializer<T> duplicate() {     TypeSerializer<T> duplicateOriginalSerializer = originalSerializer.duplicate().     return duplicateOriginalSerializer == originalSerializer ? this : new NullableSerializer<>(originalSerializer.duplicate(), padNullValue()). }
false;public;0;4;;@Override public T createInstance() {     return originalSerializer.createInstance(). }
false;public;1;4;;@Override public T copy(T from) {     return from == null ? null : originalSerializer.copy(from). }
false;public;2;5;;@Override public T copy(T from, T reuse) {     return from == null ? null : (reuse == null ? originalSerializer.copy(from) : originalSerializer.copy(from, reuse)). }
false;public;0;4;;@Override public int getLength() {     return padNullValue() ? 1 + padding.length : -1. }
false;public;2;11;;@Override public void serialize(T record, DataOutputView target) throws IOException {     if (record == null) {         target.writeBoolean(true).         target.write(padding).     } else {         target.writeBoolean(false).         originalSerializer.serialize(record, target).     } }
false;public;1;5;;@Override public T deserialize(DataInputView source) throws IOException {     boolean isNull = deserializeNull(source).     return isNull ? null : originalSerializer.deserialize(source). }
false;public;2;6;;@Override public T deserialize(T reuse, DataInputView source) throws IOException {     boolean isNull = deserializeNull(source).     return isNull ? null : (reuse == null ? originalSerializer.deserialize(source) : originalSerializer.deserialize(reuse, source)). }
false;private;1;7;;private boolean deserializeNull(DataInputView source) throws IOException {     boolean isNull = source.readBoolean().     if (isNull) {         source.skipBytesToRead(padding.length).     }     return isNull. }
false;public;2;11;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     boolean isNull = source.readBoolean().     target.writeBoolean(isNull).     if (isNull) {         target.write(padding).     } else {         originalSerializer.copy(source, target).     } }
false;public;1;6;;@Override public boolean equals(Object obj) {     return obj == this || (obj != null && obj.getClass() == getClass() && originalSerializer.equals(((NullableSerializer) obj).originalSerializer)). }
false;public;0;4;;@Override public int hashCode() {     return originalSerializer.hashCode(). }
false;public;0;4;;@Override public TypeSerializerSnapshot<T> snapshotConfiguration() {     return new NullableSerializerSnapshot<>(this). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;11;;@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer) {     NullableSerializer<T> previousSerializer = (NullableSerializer<T>) restoreSerializer().     NullableSerializerSnapshot<T> newCompositeSnapshot = new NullableSerializerSnapshot<>(previousSerializer.nullPaddingLength()).     return CompositeTypeSerializerUtil.delegateCompatibilityCheckToNewSnapshot(newSerializer, newCompositeSnapshot, getSingleNestedSerializerAndConfig().f1). }
false;protected;0;4;;@Override protected int getCurrentOuterSnapshotVersion() {     return VERSION. }
false;protected;1;4;;@Override protected TypeSerializer<?>[] getNestedSerializers(NullableSerializer<T> outerSerializer) {     return new TypeSerializer[] { outerSerializer.originalSerializer() }. }
false;protected;1;10;;@Override protected NullableSerializer<T> createOuterSerializerWithNestedSerializers(TypeSerializer<?>[] nestedSerializers) {     checkState(nullPaddingLength >= 0, "Negative padding size after serializer construction: %d", nullPaddingLength).     final byte[] padding = (nullPaddingLength == 0) ? EMPTY_BYTE_ARRAY : new byte[nullPaddingLength].     TypeSerializer<T> nestedSerializer = (TypeSerializer<T>) nestedSerializers[0].     return new NullableSerializer<>(nestedSerializer, padding). }
false;protected;1;4;;@Override protected void writeOuterSnapshot(DataOutputView out) throws IOException {     out.writeInt(nullPaddingLength). }
false;protected;3;4;;@Override protected void readOuterSnapshot(int readOuterSnapshotVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     nullPaddingLength = in.readInt(). }
false;protected;1;4;;@Override protected boolean isOuterSnapshotCompatible(NullableSerializer<T> newSerializer) {     return nullPaddingLength == newSerializer.nullPaddingLength(). }
