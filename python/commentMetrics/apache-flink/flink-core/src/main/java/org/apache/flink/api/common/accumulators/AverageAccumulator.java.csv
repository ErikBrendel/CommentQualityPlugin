commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void add(Double value) {     this.count++.     this.sum += value. }
false;public;1;4;;public void add(double value) {     this.count++.     this.sum += value. }
false;public;1;4;;public void add(long value) {     this.count++.     this.sum += value. }
false;public;1;4;;public void add(int value) {     this.count++.     this.sum += value. }
false;public;0;7;;@Override public Double getLocalValue() {     if (this.count == 0) {         return 0.0.     }     return this.sum / this.count. }
false;public;0;5;;@Override public void resetLocal() {     this.count = 0.     this.sum = 0. }
false;public;1;10;;@Override public void merge(Accumulator<Double, Double> other) {     if (other instanceof AverageAccumulator) {         AverageAccumulator avg = (AverageAccumulator) other.         this.count += avg.count.         this.sum += avg.sum.     } else {         throw new IllegalArgumentException("The merged accumulator must be AverageAccumulator.").     } }
false;public;0;7;;@Override public AverageAccumulator clone() {     AverageAccumulator average = new AverageAccumulator().     average.count = this.count.     average.sum = this.sum.     return average. }
false;public;0;4;;@Override public String toString() {     return "AverageAccumulator " + this.getLocalValue() + " for " + this.count + " elements". }
