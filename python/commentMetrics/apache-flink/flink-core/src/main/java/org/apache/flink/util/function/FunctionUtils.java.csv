# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionUtils -> public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer);1536930104;Converts a {@link ThrowingConsumer} into a {@link Consumer} which throws checked exceptions_as unchecked.__@param throwingConsumer to convert into a {@link Consumer}_@param <A> input type_@return {@link Consumer} which throws all checked exceptions as unchecked;public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer) {_		return (A value) -> {_			try {_				throwingConsumer.accept(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__			}_		}__	};converts,a,link,throwing,consumer,into,a,link,consumer,which,throws,checked,exceptions,as,unchecked,param,throwing,consumer,to,convert,into,a,link,consumer,param,a,input,type,return,link,consumer,which,throws,all,checked,exceptions,as,unchecked;public,static,a,consumer,a,unchecked,consumer,throwing,consumer,a,throwing,consumer,return,a,value,try,throwing,consumer,accept,value,catch,throwable,t,exception,utils,rethrow,t
FunctionUtils -> public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer);1536954663;Converts a {@link ThrowingConsumer} into a {@link Consumer} which throws checked exceptions_as unchecked.__@param throwingConsumer to convert into a {@link Consumer}_@param <A> input type_@return {@link Consumer} which throws all checked exceptions as unchecked;public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer) {_		return (A value) -> {_			try {_				throwingConsumer.accept(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__			}_		}__	};converts,a,link,throwing,consumer,into,a,link,consumer,which,throws,checked,exceptions,as,unchecked,param,throwing,consumer,to,convert,into,a,link,consumer,param,a,input,type,return,link,consumer,which,throws,all,checked,exceptions,as,unchecked;public,static,a,consumer,a,unchecked,consumer,throwing,consumer,a,throwing,consumer,return,a,value,try,throwing,consumer,accept,value,catch,throwable,t,exception,utils,rethrow,t
FunctionUtils -> public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer);1539176686;Converts a {@link ThrowingConsumer} into a {@link Consumer} which throws checked exceptions_as unchecked.__@param throwingConsumer to convert into a {@link Consumer}_@param <A> input type_@return {@link Consumer} which throws all checked exceptions as unchecked;public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer) {_		return (A value) -> {_			try {_				throwingConsumer.accept(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__			}_		}__	};converts,a,link,throwing,consumer,into,a,link,consumer,which,throws,checked,exceptions,as,unchecked,param,throwing,consumer,to,convert,into,a,link,consumer,param,a,input,type,return,link,consumer,which,throws,all,checked,exceptions,as,unchecked;public,static,a,consumer,a,unchecked,consumer,throwing,consumer,a,throwing,consumer,return,a,value,try,throwing,consumer,accept,value,catch,throwable,t,exception,utils,rethrow,t
FunctionUtils -> public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer);1549365080;Converts a {@link ThrowingConsumer} into a {@link Consumer} which throws checked exceptions_as unchecked.__@param throwingConsumer to convert into a {@link Consumer}_@param <A> input type_@return {@link Consumer} which throws all checked exceptions as unchecked;public static <A> Consumer<A> uncheckedConsumer(ThrowingConsumer<A, ?> throwingConsumer) {_		return (A value) -> {_			try {_				throwingConsumer.accept(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__			}_		}__	};converts,a,link,throwing,consumer,into,a,link,consumer,which,throws,checked,exceptions,as,unchecked,param,throwing,consumer,to,convert,into,a,link,consumer,param,a,input,type,return,link,consumer,which,throws,all,checked,exceptions,as,unchecked;public,static,a,consumer,a,unchecked,consumer,throwing,consumer,a,throwing,consumer,return,a,value,try,throwing,consumer,accept,value,catch,throwable,t,exception,utils,rethrow,t
FunctionUtils -> @SuppressWarnings("unchecked") 	public static <T> Consumer<T> ignoreFn();1539176686;Consumer which ignores the input.__@param <T> type of the input_@return Ignoring {@link Consumer};@SuppressWarnings("unchecked")_	public static <T> Consumer<T> ignoreFn() {_		return (Consumer<T>) IGNORE_FN__	};consumer,which,ignores,the,input,param,t,type,of,the,input,return,ignoring,link,consumer;suppress,warnings,unchecked,public,static,t,consumer,t,ignore,fn,return,consumer,t
FunctionUtils -> @SuppressWarnings("unchecked") 	public static <T> Consumer<T> ignoreFn();1549365080;Consumer which ignores the input.__@param <T> type of the input_@return Ignoring {@link Consumer};@SuppressWarnings("unchecked")_	public static <T> Consumer<T> ignoreFn() {_		return (Consumer<T>) IGNORE_FN__	};consumer,which,ignores,the,input,param,t,type,of,the,input,return,ignoring,link,consumer;suppress,warnings,unchecked,public,static,t,consumer,t,ignore,fn,return,consumer,t
FunctionUtils -> public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException);1536930103;Convert at {@link FunctionWithException} into a {@link Function}.__@param functionWithException function with exception to convert into a function_@param <A> input type_@param <B> output type_@return {@link Function} which throws all checked exception as an unchecked exception.;public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException) {_		return (A value) -> {_			try {_				return functionWithException.apply(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__				_				return null__			}_		}__	};convert,at,link,function,with,exception,into,a,link,function,param,function,with,exception,function,with,exception,to,convert,into,a,function,param,a,input,type,param,b,output,type,return,link,function,which,throws,all,checked,exception,as,an,unchecked,exception;public,static,a,b,function,a,b,unchecked,function,function,with,exception,a,b,function,with,exception,return,a,value,try,return,function,with,exception,apply,value,catch,throwable,t,exception,utils,rethrow,t,return,null
FunctionUtils -> public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException);1536930104;Convert at {@link FunctionWithException} into a {@link Function}.__@param functionWithException function with exception to convert into a function_@param <A> input type_@param <B> output type_@return {@link Function} which throws all checked exception as an unchecked exception.;public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException) {_		return (A value) -> {_			try {_				return functionWithException.apply(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__				_				return null__			}_		}__	};convert,at,link,function,with,exception,into,a,link,function,param,function,with,exception,function,with,exception,to,convert,into,a,function,param,a,input,type,param,b,output,type,return,link,function,which,throws,all,checked,exception,as,an,unchecked,exception;public,static,a,b,function,a,b,unchecked,function,function,with,exception,a,b,function,with,exception,return,a,value,try,return,function,with,exception,apply,value,catch,throwable,t,exception,utils,rethrow,t,return,null
FunctionUtils -> public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException);1536954663;Convert at {@link FunctionWithException} into a {@link Function}.__@param functionWithException function with exception to convert into a function_@param <A> input type_@param <B> output type_@return {@link Function} which throws all checked exception as an unchecked exception.;public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException) {_		return (A value) -> {_			try {_				return functionWithException.apply(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__				_				return null__			}_		}__	};convert,at,link,function,with,exception,into,a,link,function,param,function,with,exception,function,with,exception,to,convert,into,a,function,param,a,input,type,param,b,output,type,return,link,function,which,throws,all,checked,exception,as,an,unchecked,exception;public,static,a,b,function,a,b,unchecked,function,function,with,exception,a,b,function,with,exception,return,a,value,try,return,function,with,exception,apply,value,catch,throwable,t,exception,utils,rethrow,t,return,null
FunctionUtils -> public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException);1539176686;Convert at {@link FunctionWithException} into a {@link Function}.__@param functionWithException function with exception to convert into a function_@param <A> input type_@param <B> output type_@return {@link Function} which throws all checked exception as an unchecked exception.;public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException) {_		return (A value) -> {_			try {_				return functionWithException.apply(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__				_				return null__			}_		}__	};convert,at,link,function,with,exception,into,a,link,function,param,function,with,exception,function,with,exception,to,convert,into,a,function,param,a,input,type,param,b,output,type,return,link,function,which,throws,all,checked,exception,as,an,unchecked,exception;public,static,a,b,function,a,b,unchecked,function,function,with,exception,a,b,function,with,exception,return,a,value,try,return,function,with,exception,apply,value,catch,throwable,t,exception,utils,rethrow,t,return,null
FunctionUtils -> public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException);1549365080;Convert at {@link FunctionWithException} into a {@link Function}.__@param functionWithException function with exception to convert into a function_@param <A> input type_@param <B> output type_@return {@link Function} which throws all checked exception as an unchecked exception.;public static <A, B> Function<A, B> uncheckedFunction(FunctionWithException<A, B, ?> functionWithException) {_		return (A value) -> {_			try {_				return functionWithException.apply(value)__			} catch (Throwable t) {_				ExceptionUtils.rethrow(t)__				_				return null__			}_		}__	};convert,at,link,function,with,exception,into,a,link,function,param,function,with,exception,function,with,exception,to,convert,into,a,function,param,a,input,type,param,b,output,type,return,link,function,which,throws,all,checked,exception,as,an,unchecked,exception;public,static,a,b,function,a,b,unchecked,function,function,with,exception,a,b,function,with,exception,return,a,value,try,return,function,with,exception,apply,value,catch,throwable,t,exception,utils,rethrow,t,return,null
FunctionUtils -> @SuppressWarnings("unchecked") 	public static <T> Function<T, Void> nullFn();1536954663;Function which returns {@code null} (type: Void).__@param <T> input type_@return Function which returns {@code null}.;@SuppressWarnings("unchecked")_	public static <T> Function<T, Void> nullFn() {_		return (Function<T, Void>) NULL_FN__	};function,which,returns,code,null,type,void,param,t,input,type,return,function,which,returns,code,null;suppress,warnings,unchecked,public,static,t,function,t,void,null,fn,return,function,t,void
FunctionUtils -> @SuppressWarnings("unchecked") 	public static <T> Function<T, Void> nullFn();1539176686;Function which returns {@code null} (type: Void).__@param <T> input type_@return Function which returns {@code null}.;@SuppressWarnings("unchecked")_	public static <T> Function<T, Void> nullFn() {_		return (Function<T, Void>) NULL_FN__	};function,which,returns,code,null,type,void,param,t,input,type,return,function,which,returns,code,null;suppress,warnings,unchecked,public,static,t,function,t,void,null,fn,return,function,t,void
FunctionUtils -> @SuppressWarnings("unchecked") 	public static <T> Function<T, Void> nullFn();1549365080;Function which returns {@code null} (type: Void).__@param <T> input type_@return Function which returns {@code null}.;@SuppressWarnings("unchecked")_	public static <T> Function<T, Void> nullFn() {_		return (Function<T, Void>) NULL_FN__	};function,which,returns,code,null,type,void,param,t,input,type,return,function,which,returns,code,null;suppress,warnings,unchecked,public,static,t,function,t,void,null,fn,return,function,t,void
