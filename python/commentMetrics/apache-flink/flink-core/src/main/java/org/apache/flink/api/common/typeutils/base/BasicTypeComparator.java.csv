commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(T value) {     return value.hashCode(). }
false;public;1;4;;@Override public void setReference(T toCompare) {     this.reference = toCompare. }
false;public;1;4;;@Override public boolean equalToReference(T candidate) {     return candidate.equals(reference). }
false;public;1;5;;@Override public int compareToReference(TypeComparator<T> referencedComparator) {     int comp = ((BasicTypeComparator<T>) referencedComparator).reference.compareTo(reference).     return ascendingComparison ? comp : -comp. }
false;public;2;5;;@Override public int compare(T first, T second) {     int cmp = first.compareTo(second).     return ascendingComparison ? cmp : -cmp. }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return !ascendingComparison. }
false;public;0;4;;@Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(T record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;5;;@SuppressWarnings("rawtypes") @Override public TypeComparator[] getFlatComparators() {     return comparators. }
false;public;2;4;;@Override public T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
