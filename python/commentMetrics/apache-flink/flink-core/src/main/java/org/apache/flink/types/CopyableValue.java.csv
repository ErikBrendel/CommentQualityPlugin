commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the length of the data type when it is serialized, in bytes.  *  * @return The length of the data type, or {@code -1}, if variable length.  */ ;/**  * Gets the length of the data type when it is serialized, in bytes.  *  * @return The length of the data type, or {@code -1}, if variable length.  */ int getBinaryLength().
true;;1;1;/**  * Performs a deep copy of this object into the {@code target} instance.  *  * @param target Object to copy into.  */ ;/**  * Performs a deep copy of this object into the {@code target} instance.  *  * @param target Object to copy into.  */ void copyTo(T target).
true;;0;1;/**  * Performs a deep copy of this object into a new instance.  *  * This method is useful for generic user-defined functions to clone a  * {@link CopyableValue} when storing multiple objects. With object reuse  * a deep copy must be created and type erasure prevents calling new.  *  * @return New object with copied fields.  */ ;/**  * Performs a deep copy of this object into a new instance.  *  * This method is useful for generic user-defined functions to clone a  * {@link CopyableValue} when storing multiple objects. With object reuse  * a deep copy must be created and type erasure prevents calling new.  *  * @return New object with copied fields.  */ T copy().
true;;2;1;/**  * Copies the next serialized instance from {@code source} to {@code target}.  *  * This method is equivalent to calling {@code IOReadableWritable.read(DataInputView)}  * followed by {@code IOReadableWritable.write(DataOutputView)} but does not require  * intermediate deserialization.  *  * @param source Data source for serialized instance.  * @param target Data target for serialized instance.  *  * @see org.apache.flink.core.io.IOReadableWritable  */ ;/**  * Copies the next serialized instance from {@code source} to {@code target}.  *  * This method is equivalent to calling {@code IOReadableWritable.read(DataInputView)}  * followed by {@code IOReadableWritable.write(DataOutputView)} but does not require  * intermediate deserialization.  *  * @param source Data source for serialized instance.  * @param target Data target for serialized instance.  *  * @see org.apache.flink.core.io.IOReadableWritable  */ void copy(DataInputView source, DataOutputView target) throws IOException.
