# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeTypeSerializerUtil -> public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot( 			TypeSerializer<T> newSerializer, 			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot, 			TypeSerializerSnapshot<?>... legacyNestedSnapshots);1547801274;Delegates compatibility checks to a {@link CompositeTypeSerializerSnapshot} instance._This can be used by legacy snapshot classes, which have a newer implementation_implemented as a {@link CompositeTypeSerializerSnapshot}.__@param newSerializer the new serializer to check for compatibility._@param newCompositeSnapshot an instance of the new snapshot class to delegate compatibility checks to._This instance should already contain the outer snapshot information._@param legacyNestedSnapshots the nested serializer snapshots of the legacy composite snapshot.__@return the result compatibility.;public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot(_			TypeSerializer<T> newSerializer,_			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot,_			TypeSerializerSnapshot<?>... legacyNestedSnapshots) {__		checkArgument(legacyNestedSnapshots.length > 0)__		return newCompositeSnapshot.internalResolveSchemaCompatibility(newSerializer, legacyNestedSnapshots)__	};delegates,compatibility,checks,to,a,link,composite,type,serializer,snapshot,instance,this,can,be,used,by,legacy,snapshot,classes,which,have,a,newer,implementation,implemented,as,a,link,composite,type,serializer,snapshot,param,new,serializer,the,new,serializer,to,check,for,compatibility,param,new,composite,snapshot,an,instance,of,the,new,snapshot,class,to,delegate,compatibility,checks,to,this,instance,should,already,contain,the,outer,snapshot,information,param,legacy,nested,snapshots,the,nested,serializer,snapshots,of,the,legacy,composite,snapshot,return,the,result,compatibility;public,static,t,type,serializer,schema,compatibility,t,delegate,compatibility,check,to,new,snapshot,type,serializer,t,new,serializer,composite,type,serializer,snapshot,t,extends,type,serializer,new,composite,snapshot,type,serializer,snapshot,legacy,nested,snapshots,check,argument,legacy,nested,snapshots,length,0,return,new,composite,snapshot,internal,resolve,schema,compatibility,new,serializer,legacy,nested,snapshots
CompositeTypeSerializerUtil -> public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot( 			TypeSerializer<T> newSerializer, 			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot, 			TypeSerializerSnapshot<?>... legacyNestedSnapshots);1550119574;Delegates compatibility checks to a {@link CompositeTypeSerializerSnapshot} instance._This can be used by legacy snapshot classes, which have a newer implementation_implemented as a {@link CompositeTypeSerializerSnapshot}.__@param newSerializer the new serializer to check for compatibility._@param newCompositeSnapshot an instance of the new snapshot class to delegate compatibility checks to._This instance should already contain the outer snapshot information._@param legacyNestedSnapshots the nested serializer snapshots of the legacy composite snapshot.__@return the result compatibility.;public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot(_			TypeSerializer<T> newSerializer,_			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot,_			TypeSerializerSnapshot<?>... legacyNestedSnapshots) {__		checkArgument(legacyNestedSnapshots.length > 0)__		return newCompositeSnapshot.internalResolveSchemaCompatibility(newSerializer, legacyNestedSnapshots)__	};delegates,compatibility,checks,to,a,link,composite,type,serializer,snapshot,instance,this,can,be,used,by,legacy,snapshot,classes,which,have,a,newer,implementation,implemented,as,a,link,composite,type,serializer,snapshot,param,new,serializer,the,new,serializer,to,check,for,compatibility,param,new,composite,snapshot,an,instance,of,the,new,snapshot,class,to,delegate,compatibility,checks,to,this,instance,should,already,contain,the,outer,snapshot,information,param,legacy,nested,snapshots,the,nested,serializer,snapshots,of,the,legacy,composite,snapshot,return,the,result,compatibility;public,static,t,type,serializer,schema,compatibility,t,delegate,compatibility,check,to,new,snapshot,type,serializer,t,new,serializer,composite,type,serializer,snapshot,t,extends,type,serializer,new,composite,snapshot,type,serializer,snapshot,legacy,nested,snapshots,check,argument,legacy,nested,snapshots,length,0,return,new,composite,snapshot,internal,resolve,schema,compatibility,new,serializer,legacy,nested,snapshots
CompositeTypeSerializerUtil -> public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot( 			TypeSerializer<T> newSerializer, 			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot, 			TypeSerializerSnapshot<?>... legacyNestedSnapshots);1550821416;Delegates compatibility checks to a {@link CompositeTypeSerializerSnapshot} instance._This can be used by legacy snapshot classes, which have a newer implementation_implemented as a {@link CompositeTypeSerializerSnapshot}.__@param newSerializer the new serializer to check for compatibility._@param newCompositeSnapshot an instance of the new snapshot class to delegate compatibility checks to._This instance should already contain the outer snapshot information._@param legacyNestedSnapshots the nested serializer snapshots of the legacy composite snapshot.__@return the result compatibility.;public static <T> TypeSerializerSchemaCompatibility<T> delegateCompatibilityCheckToNewSnapshot(_			TypeSerializer<T> newSerializer,_			CompositeTypeSerializerSnapshot<T, ? extends TypeSerializer> newCompositeSnapshot,_			TypeSerializerSnapshot<?>... legacyNestedSnapshots) {__		checkArgument(legacyNestedSnapshots.length > 0)__		return newCompositeSnapshot.internalResolveSchemaCompatibility(newSerializer, legacyNestedSnapshots)__	};delegates,compatibility,checks,to,a,link,composite,type,serializer,snapshot,instance,this,can,be,used,by,legacy,snapshot,classes,which,have,a,newer,implementation,implemented,as,a,link,composite,type,serializer,snapshot,param,new,serializer,the,new,serializer,to,check,for,compatibility,param,new,composite,snapshot,an,instance,of,the,new,snapshot,class,to,delegate,compatibility,checks,to,this,instance,should,already,contain,the,outer,snapshot,information,param,legacy,nested,snapshots,the,nested,serializer,snapshots,of,the,legacy,composite,snapshot,return,the,result,compatibility;public,static,t,type,serializer,schema,compatibility,t,delegate,compatibility,check,to,new,snapshot,type,serializer,t,new,serializer,composite,type,serializer,snapshot,t,extends,type,serializer,new,composite,snapshot,type,serializer,snapshot,legacy,nested,snapshots,check,argument,legacy,nested,snapshots,length,0,return,new,composite,snapshot,internal,resolve,schema,compatibility,new,serializer,legacy,nested,snapshots
CompositeTypeSerializerUtil -> public static void setNestedSerializersSnapshots( 		CompositeTypeSerializerSnapshot<?, ?> compositeSnapshot, 		TypeSerializerSnapshot<?>... nestedSnapshots);1550119574;Overrides the existing nested serializer's snapshots with the provided {@code nestedSnapshots}.__@param compositeSnapshot the composite snapshot to overwrite its nested serializers._@param nestedSnapshots the nested snapshots to overwrite with.;public static void setNestedSerializersSnapshots(_		CompositeTypeSerializerSnapshot<?, ?> compositeSnapshot,_		TypeSerializerSnapshot<?>... nestedSnapshots) {__		NestedSerializersSnapshotDelegate delegate = new NestedSerializersSnapshotDelegate(nestedSnapshots)__		compositeSnapshot.setNestedSerializersSnapshotDelegate(delegate)__	};overrides,the,existing,nested,serializer,s,snapshots,with,the,provided,code,nested,snapshots,param,composite,snapshot,the,composite,snapshot,to,overwrite,its,nested,serializers,param,nested,snapshots,the,nested,snapshots,to,overwrite,with;public,static,void,set,nested,serializers,snapshots,composite,type,serializer,snapshot,composite,snapshot,type,serializer,snapshot,nested,snapshots,nested,serializers,snapshot,delegate,delegate,new,nested,serializers,snapshot,delegate,nested,snapshots,composite,snapshot,set,nested,serializers,snapshot,delegate,delegate
CompositeTypeSerializerUtil -> public static void setNestedSerializersSnapshots( 		CompositeTypeSerializerSnapshot<?, ?> compositeSnapshot, 		TypeSerializerSnapshot<?>... nestedSnapshots);1550821416;Overrides the existing nested serializer's snapshots with the provided {@code nestedSnapshots}.__@param compositeSnapshot the composite snapshot to overwrite its nested serializers._@param nestedSnapshots the nested snapshots to overwrite with.;public static void setNestedSerializersSnapshots(_		CompositeTypeSerializerSnapshot<?, ?> compositeSnapshot,_		TypeSerializerSnapshot<?>... nestedSnapshots) {__		NestedSerializersSnapshotDelegate delegate = new NestedSerializersSnapshotDelegate(nestedSnapshots)__		compositeSnapshot.setNestedSerializersSnapshotDelegate(delegate)__	};overrides,the,existing,nested,serializer,s,snapshots,with,the,provided,code,nested,snapshots,param,composite,snapshot,the,composite,snapshot,to,overwrite,its,nested,serializers,param,nested,snapshots,the,nested,snapshots,to,overwrite,with;public,static,void,set,nested,serializers,snapshots,composite,type,serializer,snapshot,composite,snapshot,type,serializer,snapshot,nested,snapshots,nested,serializers,snapshot,delegate,delegate,new,nested,serializers,snapshot,delegate,nested,snapshots,composite,snapshot,set,nested,serializers,snapshot,delegate,delegate
