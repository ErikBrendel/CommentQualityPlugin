commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value of the encapsulated primitive float.  *  * @return the value of the encapsulated primitive float.  */ ;/**  * Returns the value of the encapsulated primitive float.  *  * @return the value of the encapsulated primitive float.  */ public float getValue() {     return this.value. }
true;public;1;3;/**  * Sets the value of the encapsulated primitive float.  *  * @param value  *        the new value of the encapsulated primitive float.  */ ;/**  * Sets the value of the encapsulated primitive float.  *  * @param value  *        the new value of the encapsulated primitive float.  */ public void setValue(float value) {     this.value = value. }
false;public;1;4;;@Override public void setValue(FloatValue value) {     this.value = value.value. }
false;public;1;4;;// -------------------------------------------------------------------------------------------- @Override public void read(DataInputView in) throws IOException {     this.value = in.readFloat(). }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeFloat(this.value). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     return String.valueOf(this.value). }
false;public;1;5;;@Override public int compareTo(FloatValue o) {     final double other = o.value.     return this.value < other ? -1 : this.value > other ? 1 : 0. }
false;public;0;4;;@Override public int hashCode() {     return Float.floatToIntBits(this.value). }
false;public;1;8;;@Override public boolean equals(final Object obj) {     if (obj instanceof FloatValue) {         final FloatValue other = (FloatValue) obj.         return Float.floatToIntBits(this.value) == Float.floatToIntBits(other.value).     }     return false. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getBinaryLength() {     return 4. }
false;public;1;4;;@Override public void copyTo(FloatValue target) {     target.value = this.value. }
false;public;0;4;;@Override public FloatValue copy() {     return new FloatValue(this.value). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, 4). }
