# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeType -> @PublicEvolving 	public boolean hasField(String fieldName);1455101486;Returns true when this type has a composite field with the given name.;@PublicEvolving_	public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,evolving,public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> @PublicEvolving 	public boolean hasField(String fieldName);1460741894;Returns true when this type has a composite field with the given name.;@PublicEvolving_	public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,evolving,public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> @PublicEvolving 	public boolean hasField(String fieldName);1480022562;Returns true when this type has a composite field with the given name.;@PublicEvolving_	public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,evolving,public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> @PublicEvolving 	public boolean hasField(String fieldName);1480022575;Returns true when this type has a composite field with the given name.;@PublicEvolving_	public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,evolving,public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1422405541;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1423570503;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1424115592;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1424271128;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1424693094;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1425398551;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1427624873;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1428086525;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1442481573;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> public abstract int getFieldIndex(String fieldName)_;1424693094;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,abstract,int,get,field,index,string,field,name
CompositeType -> public abstract int getFieldIndex(String fieldName)_;1425398551;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,abstract,int,get,field,index,string,field,name
CompositeType -> public abstract int getFieldIndex(String fieldName)_;1427624873;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,abstract,int,get,field,index,string,field,name
CompositeType -> public abstract int getFieldIndex(String fieldName)_;1428086525;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,abstract,int,get,field,index,string,field,name
CompositeType -> public abstract int getFieldIndex(String fieldName)_;1442481573;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,abstract,int,get,field,index,string,field,name
CompositeType -> @PublicEvolving 	public abstract String[] getFieldNames()_;1455101486;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;@PublicEvolving_	public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,evolving,public,abstract,string,get,field,names
CompositeType -> @PublicEvolving 	public abstract String[] getFieldNames()_;1460741894;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;@PublicEvolving_	public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,evolving,public,abstract,string,get,field,names
CompositeType -> @PublicEvolving 	public abstract String[] getFieldNames()_;1480022562;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;@PublicEvolving_	public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,evolving,public,abstract,string,get,field,names
CompositeType -> @PublicEvolving 	public abstract String[] getFieldNames()_;1480022575;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;@PublicEvolving_	public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,evolving,public,abstract,string,get,field,names
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset);1412761141;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex]) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, orders, logicalField))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator()__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,orders,logical,field,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset);1412761141;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex]) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, orders, logicalField))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator()__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,orders,logical,field,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset);1412761141;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex]) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator()__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset);1417117375;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex]) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator()__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset);1422405541;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex]) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator()__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1412761141;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1412761141;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1412761141;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1417117375;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1422405541;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1423570503;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1424115592;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1424271128;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1424693094;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1425398551;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1427624873;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;1428086525;Add a field for comparison in this type.;protected abstract void addCompareField(int fieldId, TypeComparator<?> comparator)_;add,a,field,for,comparison,in,this,type;protected,abstract,void,add,compare,field,int,field,id,type,comparator,comparator
CompositeType -> public abstract String[] getFieldNames()_;1424693094;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,abstract,string,get,field,names
CompositeType -> public abstract String[] getFieldNames()_;1425398551;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,abstract,string,get,field,names
CompositeType -> public abstract String[] getFieldNames()_;1427624873;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,abstract,string,get,field,names
CompositeType -> public abstract String[] getFieldNames()_;1428086525;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,abstract,string,get,field,names
CompositeType -> public abstract String[] getFieldNames()_;1442481573;Returns the names of the composite fields of this type. The order of the returned array must_be consistent with the internal field index ordering.;public abstract String[] getFieldNames()_;returns,the,names,of,the,composite,fields,of,this,type,the,order,of,the,returned,array,must,be,consistent,with,the,internal,field,index,ordering;public,abstract,string,get,field,names
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1455101486;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,evolving,public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1460741894;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,evolving,public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1480022562;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,evolving,public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1480022575;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,evolving,public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public boolean hasDeterministicFieldOrder();1427624873;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,boolean,has,deterministic,field,order,return,false
CompositeType -> public boolean hasDeterministicFieldOrder();1428086525;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,boolean,has,deterministic,field,order,return,false
CompositeType -> public boolean hasDeterministicFieldOrder();1442481573;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,boolean,has,deterministic,field,order,return,false
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1412761141;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1412761141;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1412761141;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1417117375;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1422405541;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1423570503;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1424115592;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1424271128;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1424693094;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1425398551;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1427624873;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> protected abstract void initializeNewComparator(int localKeyCount)_;1428086525;Initializes the internal state inside a Composite type to create a new comparator_(such as the lists / arrays for the fields and field comparators)_@param localKeyCount;protected abstract void initializeNewComparator(int localKeyCount)_;initializes,the,internal,state,inside,a,composite,type,to,create,a,new,comparator,such,as,the,lists,arrays,for,the,fields,and,field,comparators,param,local,key,count;protected,abstract,void,initialize,new,comparator,int,local,key,count
CompositeType -> @PublicEvolving 	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1455101486;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;@PublicEvolving_	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,evolving,public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> @PublicEvolving 	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1460741894;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;@PublicEvolving_	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,evolving,public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> @PublicEvolving 	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1480022562;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;@PublicEvolving_	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,evolving,public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> @PublicEvolving 	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression);1480022575;Returns the flat field descriptors for the given field expression.__@param fieldExpression The field expression for which the flat field descriptors are computed._@return The list of descriptors for the flat fields which are specified by the field expression.;@PublicEvolving_	public List<FlatFieldDescriptor> getFlatFields(String fieldExpression) {_		List<FlatFieldDescriptor> result = new ArrayList<FlatFieldDescriptor>()__		this.getFlatFields(fieldExpression, 0, result)__		return result__	};returns,the,flat,field,descriptors,for,the,given,field,expression,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,return,the,list,of,descriptors,for,the,flat,fields,which,are,specified,by,the,field,expression;public,evolving,public,list,flat,field,descriptor,get,flat,fields,string,field,expression,list,flat,field,descriptor,result,new,array,list,flat,field,descriptor,this,get,flat,fields,field,expression,0,result,return,result
CompositeType -> @PublicEvolving 	public boolean hasDeterministicFieldOrder();1455101486;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;@PublicEvolving_	public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,evolving,public,boolean,has,deterministic,field,order,return,false
CompositeType -> @PublicEvolving 	public boolean hasDeterministicFieldOrder();1460741894;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;@PublicEvolving_	public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,evolving,public,boolean,has,deterministic,field,order,return,false
CompositeType -> @PublicEvolving 	public boolean hasDeterministicFieldOrder();1480022562;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;@PublicEvolving_	public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,evolving,public,boolean,has,deterministic,field,order,return,false
CompositeType -> @PublicEvolving 	public boolean hasDeterministicFieldOrder();1480022575;True if this type has an inherent ordering of the fields, such that a user can_always be sure in which order the fields will be in. This is true for Tuples and_Case Classes. It is not true for Regular Java Objects, since there, the ordering of_the fields can be arbitrary.__This is used when translating a DataSet or DataStream to an Expression Table, when_initially renaming the fields of the underlying type.;@PublicEvolving_	public boolean hasDeterministicFieldOrder() {_		return false__	};true,if,this,type,has,an,inherent,ordering,of,the,fields,such,that,a,user,can,always,be,sure,in,which,order,the,fields,will,be,in,this,is,true,for,tuples,and,case,classes,it,is,not,true,for,regular,java,objects,since,there,the,ordering,of,the,fields,can,be,arbitrary,this,is,used,when,translating,a,data,set,or,data,stream,to,an,expression,table,when,initially,renaming,the,fields,of,the,underlying,type;public,evolving,public,boolean,has,deterministic,field,order,return,false
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1422405541;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1423570503;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1424115592;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1424271128;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1424693094;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1425398551;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1427624873;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1428086525;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;1442481573;Returns the type of the (nested) field at the given field expression position._Wildcards are not allowed.__@param fieldExpression The field expression for which the field of which the type is returned._@return The type of the field at the given field expression.;public abstract <X> TypeInformation<X> getTypeAt(String fieldExpression)_;returns,the,type,of,the,nested,field,at,the,given,field,expression,position,wildcards,are,not,allowed,param,field,expression,the,field,expression,for,which,the,field,of,which,the,type,is,returned,return,the,type,of,the,field,at,the,given,field,expression;public,abstract,x,type,information,x,get,type,at,string,field,expression
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1422405541;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1423570503;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1424115592;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1424271128;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1424693094;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1425398551;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1427624873;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1428086525;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1442481573;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1412761141;Returns the keyPosition for the given fieldPosition, offsetted by the given offset;public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;returns,the,key,position,for,the,given,field,position,offsetted,by,the,given,offset;public,abstract,void,get,key,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1412761141;Returns the keyPosition for the given fieldPosition, offsetted by the given offset;public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;returns,the,key,position,for,the,given,field,position,offsetted,by,the,given,offset;public,abstract,void,get,key,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1412761141;Returns the keyPosition for the given fieldPosition, offsetted by the given offset;public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;returns,the,key,position,for,the,given,field,position,offsetted,by,the,given,offset;public,abstract,void,get,key,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1417117375;Returns the keyPosition for the given fieldPosition, offsetted by the given offset;public abstract void getKey(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;returns,the,key,position,for,the,given,field,position,offsetted,by,the,given,offset;public,abstract,void,get,key,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> @PublicEvolving 	public Class<T> getTypeClass();1455101486;Returns the type class of the composite type__@return Type class of the composite type;@PublicEvolving_	public Class<T> getTypeClass() {_		return typeClass__	};returns,the,type,class,of,the,composite,type,return,type,class,of,the,composite,type;public,evolving,public,class,t,get,type,class,return,type,class
CompositeType -> @PublicEvolving 	public Class<T> getTypeClass();1460741894;Returns the type class of the composite type__@return Type class of the composite type;@PublicEvolving_	public Class<T> getTypeClass() {_		return typeClass__	};returns,the,type,class,of,the,composite,type,return,type,class,of,the,composite,type;public,evolving,public,class,t,get,type,class,return,type,class
CompositeType -> @PublicEvolving 	public Class<T> getTypeClass();1480022562;Returns the type class of the composite type__@return Type class of the composite type;@PublicEvolving_	public Class<T> getTypeClass() {_		return typeClass__	};returns,the,type,class,of,the,composite,type,return,type,class,of,the,composite,type;public,evolving,public,class,t,get,type,class,return,type,class
CompositeType -> @PublicEvolving 	public Class<T> getTypeClass();1480022575;Returns the type class of the composite type__@return Type class of the composite type;@PublicEvolving_	public Class<T> getTypeClass() {_		return typeClass__	};returns,the,type,class,of,the,composite,type,return,type,class,of,the,composite,type;public,evolving,public,class,t,get,type,class,return,type,class
CompositeType -> protected abstract TypeComparator<T> getNewComparator()_;1412761141;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator()_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator
CompositeType -> protected abstract TypeComparator<T> getNewComparator()_;1412761141;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator()_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator
CompositeType -> protected abstract TypeComparator<T> getNewComparator()_;1412761141;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator()_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator
CompositeType -> protected abstract TypeComparator<T> getNewComparator()_;1417117375;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator()_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator
CompositeType -> protected abstract TypeComparator<T> getNewComparator()_;1422405541;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator()_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1423570503;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1424115592;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1424271128;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1424693094;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1425398551;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1427624873;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;1428086525;Get the actual comparator we've initialized.;protected abstract TypeComparator<T> getNewComparator(ExecutionConfig config)_;get,the,actual,comparator,we,ve,initialized;protected,abstract,type,comparator,t,get,new,comparator,execution,config,config
CompositeType -> @PublicEvolving 	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1455101486;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;@PublicEvolving_	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {__		TypeComparatorBuilder<T> builder = createTypeComparatorBuilder()___		builder.initializeTypeComparatorBuilder(logicalKeyFields.length)___		for (int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			boolean comparatorAdded = false___			for (int localFieldId = 0_ localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					builder.addComparatorField(_						localFieldId,_						((AtomicType<?>) localFieldType).createComparator(_							orders[logicalKeyFieldIndex],_							config))___					comparatorAdded = true__				}_				_				_				else if (localFieldType instanceof CompositeType &&_					logicalField <= logicalKeyField &&_					logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {_					_					builder.addComparatorField(_						localFieldId,_						((CompositeType<?>) localFieldType).createComparator(_							new int[]{logicalKeyField},_							new boolean[]{orders[logicalKeyFieldIndex]},_							logicalField,_							config)_					)___					comparatorAdded = true__				}__				if (localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				_				logicalField++__			}__			if (!comparatorAdded) {_				throw new IllegalArgumentException("Could not add a comparator for the logical" +_					"key field index " + logicalKeyFieldIndex + ".")__			}_		}__		return builder.createTypeComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,evolving,public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,type,comparator,builder,t,builder,create,type,comparator,builder,builder,initialize,type,comparator,builder,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,boolean,comparator,added,false,for,int,local,field,id,0,local,field,id,this,get,arity,logical,field,logical,key,field,comparator,added,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,builder,add,comparator,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,comparator,added,true,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,builder,add,comparator,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,comparator,added,true,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,if,comparator,added,throw,new,illegal,argument,exception,could,not,add,a,comparator,for,the,logical,key,field,index,logical,key,field,index,return,builder,create,type,comparator,config
CompositeType -> @PublicEvolving 	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1460741894;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;@PublicEvolving_	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {__		TypeComparatorBuilder<T> builder = createTypeComparatorBuilder()___		builder.initializeTypeComparatorBuilder(logicalKeyFields.length)___		for (int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			boolean comparatorAdded = false___			for (int localFieldId = 0_ localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					builder.addComparatorField(_						localFieldId,_						((AtomicType<?>) localFieldType).createComparator(_							orders[logicalKeyFieldIndex],_							config))___					comparatorAdded = true__				}_				_				_				else if (localFieldType instanceof CompositeType &&_					logicalField <= logicalKeyField &&_					logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {_					_					builder.addComparatorField(_						localFieldId,_						((CompositeType<?>) localFieldType).createComparator(_							new int[]{logicalKeyField},_							new boolean[]{orders[logicalKeyFieldIndex]},_							logicalField,_							config)_					)___					comparatorAdded = true__				}__				if (localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				_				logicalField++__			}__			if (!comparatorAdded) {_				throw new IllegalArgumentException("Could not add a comparator for the logical" +_					"key field index " + logicalKeyFieldIndex + ".")__			}_		}__		return builder.createTypeComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,evolving,public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,type,comparator,builder,t,builder,create,type,comparator,builder,builder,initialize,type,comparator,builder,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,boolean,comparator,added,false,for,int,local,field,id,0,local,field,id,this,get,arity,logical,field,logical,key,field,comparator,added,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,builder,add,comparator,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,comparator,added,true,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,builder,add,comparator,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,comparator,added,true,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,if,comparator,added,throw,new,illegal,argument,exception,could,not,add,a,comparator,for,the,logical,key,field,index,logical,key,field,index,return,builder,create,type,comparator,config
CompositeType -> @PublicEvolving 	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1480022562;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;@PublicEvolving_	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {__		TypeComparatorBuilder<T> builder = createTypeComparatorBuilder()___		builder.initializeTypeComparatorBuilder(logicalKeyFields.length)___		for (int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			boolean comparatorAdded = false___			for (int localFieldId = 0_ localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					builder.addComparatorField(_						localFieldId,_						((AtomicType<?>) localFieldType).createComparator(_							orders[logicalKeyFieldIndex],_							config))___					comparatorAdded = true__				}_				_				_				else if (localFieldType instanceof CompositeType &&_					logicalField <= logicalKeyField &&_					logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {_					_					builder.addComparatorField(_						localFieldId,_						((CompositeType<?>) localFieldType).createComparator(_							new int[]{logicalKeyField},_							new boolean[]{orders[logicalKeyFieldIndex]},_							logicalField,_							config)_					)___					comparatorAdded = true__				}__				if (localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				_				logicalField++__			}__			if (!comparatorAdded) {_				throw new IllegalArgumentException("Could not add a comparator for the logical" +_					"key field index " + logicalKeyFieldIndex + ".")__			}_		}__		return builder.createTypeComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,evolving,public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,type,comparator,builder,t,builder,create,type,comparator,builder,builder,initialize,type,comparator,builder,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,boolean,comparator,added,false,for,int,local,field,id,0,local,field,id,this,get,arity,logical,field,logical,key,field,comparator,added,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,builder,add,comparator,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,comparator,added,true,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,builder,add,comparator,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,comparator,added,true,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,if,comparator,added,throw,new,illegal,argument,exception,could,not,add,a,comparator,for,the,logical,key,field,index,logical,key,field,index,return,builder,create,type,comparator,config
CompositeType -> @PublicEvolving 	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1480022575;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;@PublicEvolving_	public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {__		TypeComparatorBuilder<T> builder = createTypeComparatorBuilder()___		builder.initializeTypeComparatorBuilder(logicalKeyFields.length)___		for (int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			boolean comparatorAdded = false___			for (int localFieldId = 0_ localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					builder.addComparatorField(_						localFieldId,_						((AtomicType<?>) localFieldType).createComparator(_							orders[logicalKeyFieldIndex],_							config))___					comparatorAdded = true__				}_				_				_				else if (localFieldType instanceof CompositeType &&_					logicalField <= logicalKeyField &&_					logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {_					_					builder.addComparatorField(_						localFieldId,_						((CompositeType<?>) localFieldType).createComparator(_							new int[]{logicalKeyField},_							new boolean[]{orders[logicalKeyFieldIndex]},_							logicalField,_							config)_					)___					comparatorAdded = true__				}__				if (localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				_				logicalField++__			}__			if (!comparatorAdded) {_				throw new IllegalArgumentException("Could not add a comparator for the logical" +_					"key field index " + logicalKeyFieldIndex + ".")__			}_		}__		return builder.createTypeComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,evolving,public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,type,comparator,builder,t,builder,create,type,comparator,builder,builder,initialize,type,comparator,builder,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,boolean,comparator,added,false,for,int,local,field,id,0,local,field,id,this,get,arity,logical,field,logical,key,field,comparator,added,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,builder,add,comparator,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,comparator,added,true,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,builder,add,comparator,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,comparator,added,true,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,if,comparator,added,throw,new,illegal,argument,exception,could,not,add,a,comparator,for,the,logical,key,field,index,logical,key,field,index,return,builder,create,type,comparator,config
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1422405541;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1423570503;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1424115592;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1424271128;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1424693094;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1425398551;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1427624873;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1428086525;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1442481573;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> public boolean hasField(String fieldName);1424693094;Returns true when this type has a composite field with the given name.;public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> public boolean hasField(String fieldName);1425398551;Returns true when this type has a composite field with the given name.;public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> public boolean hasField(String fieldName);1427624873;Returns true when this type has a composite field with the given name.;public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> public boolean hasField(String fieldName);1428086525;Returns true when this type has a composite field with the given name.;public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> public boolean hasField(String fieldName);1442481573;Returns true when this type has a composite field with the given name.;public boolean hasField(String fieldName) {_		return getFieldIndex(fieldName) >= 0__	};returns,true,when,this,type,has,a,composite,field,with,the,given,name;public,boolean,has,field,string,field,name,return,get,field,index,field,name,0
CompositeType -> @PublicEvolving 	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1455101486;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;@PublicEvolving_	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,evolving,public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> @PublicEvolving 	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1460741894;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;@PublicEvolving_	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,evolving,public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> @PublicEvolving 	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1480022562;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;@PublicEvolving_	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,evolving,public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> @PublicEvolving 	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;1480022575;Computes the flat field descriptors for the given field expression with the given offset.__@param fieldExpression The field expression for which the FlatFieldDescriptors are computed._@param offset The offset to use when computing the positions of the flat fields._@param result The list into which all flat field descriptors are inserted.;@PublicEvolving_	public abstract void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)_;computes,the,flat,field,descriptors,for,the,given,field,expression,with,the,given,offset,param,field,expression,the,field,expression,for,which,the,flat,field,descriptors,are,computed,param,offset,the,offset,to,use,when,computing,the,positions,of,the,flat,fields,param,result,the,list,into,which,all,flat,field,descriptors,are,inserted;public,evolving,public,abstract,void,get,flat,fields,string,field,expression,int,offset,list,flat,field,descriptor,result
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1455101486;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,evolving,public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1460741894;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,evolving,public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1480022562;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,evolving,public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> @PublicEvolving 	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;1480022575;Returns the type of the (unnested) field at the given field position.__@param pos The position of the (unnested) field in this composite type._@return The type of the field at the given position.;@PublicEvolving_	public abstract <X> TypeInformation<X> getTypeAt(int pos)_;returns,the,type,of,the,unnested,field,at,the,given,field,position,param,pos,the,position,of,the,unnested,field,in,this,composite,type,return,the,type,of,the,field,at,the,given,position;public,evolving,public,abstract,x,type,information,x,get,type,at,int,pos
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1423570503;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1424115592;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1424271128;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1424693094;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1425398551;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1427624873;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1428086525;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {_		initializeNewComparator(logicalKeyFields.length)__		_		for(int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			for(int localFieldId = 0_ localFieldId < this.getArity()_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if(localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					addCompareField(localFieldId, ((AtomicType<?>) localFieldType).createComparator(orders[logicalKeyFieldIndex], config) )__				} else if(localFieldType instanceof CompositeType  && _						( logicalField <= logicalKeyField _						&& logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1) ) _						) {_					_					addCompareField(localFieldId, ((CompositeType<?>) localFieldType).createComparator(new int[] {logicalKeyField}, new boolean[] {orders[logicalKeyFieldIndex]}, logicalField, config))__				}_				_				_				if(localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				logicalField++__			}_		}_		return getNewComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,initialize,new,comparator,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,for,int,local,field,id,0,local,field,id,this,get,arity,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,add,compare,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,add,compare,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,return,get,new,comparator,config
CompositeType -> public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config);1442481573;Generic implementation of the comparator creation. Composite types are supplying the infrastructure_to create the actual comparators_@return The comparator;public TypeComparator<T> createComparator(int[] logicalKeyFields, boolean[] orders, int logicalFieldOffset, ExecutionConfig config) {__		TypeComparatorBuilder<T> builder = createTypeComparatorBuilder()___		builder.initializeTypeComparatorBuilder(logicalKeyFields.length)___		for (int logicalKeyFieldIndex = 0_ logicalKeyFieldIndex < logicalKeyFields.length_ logicalKeyFieldIndex++) {_			int logicalKeyField = logicalKeyFields[logicalKeyFieldIndex]__			int logicalField = logicalFieldOffset_ _			boolean comparatorAdded = false___			for (int localFieldId = 0_ localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded_ localFieldId++) {_				TypeInformation<?> localFieldType = this.getTypeAt(localFieldId)__				_				if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {_					_					builder.addComparatorField(_						localFieldId,_						((AtomicType<?>) localFieldType).createComparator(_							orders[logicalKeyFieldIndex],_							config))___					comparatorAdded = true__				}_				_				_				else if (localFieldType instanceof CompositeType &&_					logicalField <= logicalKeyField &&_					logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {_					_					builder.addComparatorField(_						localFieldId,_						((CompositeType<?>) localFieldType).createComparator(_							new int[]{logicalKeyField},_							new boolean[]{orders[logicalKeyFieldIndex]},_							logicalField,_							config)_					)___					comparatorAdded = true__				}__				if (localFieldType instanceof CompositeType) {_					_					logicalField += localFieldType.getTotalFields() - 1__				}_				_				logicalField++__			}__			if (!comparatorAdded) {_				throw new IllegalArgumentException("Could not add a comparator for the logical" +_					"key field index " + logicalKeyFieldIndex + ".")__			}_		}__		return builder.createTypeComparator(config)__	};generic,implementation,of,the,comparator,creation,composite,types,are,supplying,the,infrastructure,to,create,the,actual,comparators,return,the,comparator;public,type,comparator,t,create,comparator,int,logical,key,fields,boolean,orders,int,logical,field,offset,execution,config,config,type,comparator,builder,t,builder,create,type,comparator,builder,builder,initialize,type,comparator,builder,logical,key,fields,length,for,int,logical,key,field,index,0,logical,key,field,index,logical,key,fields,length,logical,key,field,index,int,logical,key,field,logical,key,fields,logical,key,field,index,int,logical,field,logical,field,offset,boolean,comparator,added,false,for,int,local,field,id,0,local,field,id,this,get,arity,logical,field,logical,key,field,comparator,added,local,field,id,type,information,local,field,type,this,get,type,at,local,field,id,if,local,field,type,instanceof,atomic,type,logical,field,logical,key,field,builder,add,comparator,field,local,field,id,atomic,type,local,field,type,create,comparator,orders,logical,key,field,index,config,comparator,added,true,else,if,local,field,type,instanceof,composite,type,logical,field,logical,key,field,logical,key,field,logical,field,local,field,type,get,total,fields,1,builder,add,comparator,field,local,field,id,composite,type,local,field,type,create,comparator,new,int,logical,key,field,new,boolean,orders,logical,key,field,index,logical,field,config,comparator,added,true,if,local,field,type,instanceof,composite,type,logical,field,local,field,type,get,total,fields,1,logical,field,if,comparator,added,throw,new,illegal,argument,exception,could,not,add,a,comparator,for,the,logical,key,field,index,logical,key,field,index,return,builder,create,type,comparator,config
CompositeType -> @PublicEvolving 	public abstract int getFieldIndex(String fieldName)_;1455101486;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;@PublicEvolving_	public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,evolving,public,abstract,int,get,field,index,string,field,name
CompositeType -> @PublicEvolving 	public abstract int getFieldIndex(String fieldName)_;1460741894;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;@PublicEvolving_	public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,evolving,public,abstract,int,get,field,index,string,field,name
CompositeType -> @PublicEvolving 	public abstract int getFieldIndex(String fieldName)_;1480022562;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;@PublicEvolving_	public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,evolving,public,abstract,int,get,field,index,string,field,name
CompositeType -> @PublicEvolving 	public abstract int getFieldIndex(String fieldName)_;1480022575;Returns the field index of the composite field of the given name.__@return The field index or -1 if this type does not have a field of the given name.;@PublicEvolving_	public abstract int getFieldIndex(String fieldName)_;returns,the,field,index,of,the,composite,field,of,the,given,name,return,the,field,index,or,1,if,this,type,does,not,have,a,field,of,the,given,name;public,evolving,public,abstract,int,get,field,index,string,field,name
