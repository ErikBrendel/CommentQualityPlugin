# id;timestamp;commentText;codeText;commentWords;codeWords
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1405024514;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset).__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1405090423;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset).__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1411473593;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset).__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1422280244;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset).__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1431989549;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes    The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length   The length of the byte sequence (counting from the offset)._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1431989549;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes    The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length   The length of the byte sequence (counting from the offset)._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1455479358;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes    The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length   The length of the byte sequence (counting from the offset)._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1474288559;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes    The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length   The length of the byte sequence (counting from the offset)._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length);1515168359;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes    The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length   The length of the byte sequence (counting from the offset)._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length) {_		return parseField(bytes, startPos, length, (char) 0xffff)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,return,parse,field,bytes,start,pos,length,char,0xffff
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1405024514;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field.__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		if (length <= 0) {_			throw new NumberFormatException("Invalid input: Empty string")__		}_		long val = 0__		boolean neg = false__		_		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}_		_		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48__			_			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,if,length,0,throw,new,number,format,exception,invalid,input,empty,string,long,val,0,boolean,neg,false,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1405090423;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field.__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		if (length <= 0) {_			throw new NumberFormatException("Invalid input: Empty string")__		}_		long val = 0__		boolean neg = false__		_		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}_		_		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48__			_			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,if,length,0,throw,new,number,format,exception,invalid,input,empty,string,long,val,0,boolean,neg,false,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1411473593;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field.__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		if (length <= 0) {_			throw new NumberFormatException("Invalid input: Empty string")__		}_		long val = 0__		boolean neg = false__		_		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}_		_		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48__			_			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,if,length,0,throw,new,number,format,exception,invalid,input,empty,string,long,val,0,boolean,neg,false,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1422280244;Static utility to parse a field of type byte from a byte sequence that represents text characters_(such as when read from a file stream).__@param bytes The bytes containing the text data that should be parsed._@param startPos The offset to start the parsing._@param length The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field.__@return The parsed value.__@throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		if (length <= 0) {_			throw new NumberFormatException("Invalid input: Empty string")__		}_		long val = 0__		boolean neg = false__		_		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}_		_		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48__			_			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,if,length,0,throw,new,number,format,exception,invalid,input,empty,string,long,val,0,boolean,neg,false,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1431989549;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes     The bytes containing the text data that should be parsed._@param startPos  The offset to start the parsing._@param length    The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		long val = 0__		boolean neg = false___		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}__		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				throw new NumberFormatException("Empty field.")__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48___			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,long,val,0,boolean,neg,false,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,throw,new,number,format,exception,empty,field,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1431989549;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes     The bytes containing the text data that should be parsed._@param startPos  The offset to start the parsing._@param length    The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		long val = 0__		boolean neg = false___		if(bytes[startPos] == delimiter) {_			throw new NumberFormatException("Empty field.")__		}__		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}__		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48___			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,long,val,0,boolean,neg,false,if,bytes,start,pos,delimiter,throw,new,number,format,exception,empty,field,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1455479358;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes     The bytes containing the text data that should be parsed._@param startPos  The offset to start the parsing._@param length    The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		long val = 0__		boolean neg = false___		if(bytes[startPos] == delimiter) {_			throw new NumberFormatException("Empty field.")__		}__		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}__		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48___			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,long,val,0,boolean,neg,false,if,bytes,start,pos,delimiter,throw,new,number,format,exception,empty,field,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1474288559;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes     The bytes containing the text data that should be parsed._@param startPos  The offset to start the parsing._@param length    The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		long val = 0__		boolean neg = false___		if(bytes[startPos] == delimiter) {_			throw new NumberFormatException("Empty field.")__		}__		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}__		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48___			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,long,val,0,boolean,neg,false,if,bytes,start,pos,delimiter,throw,new,number,format,exception,empty,field,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
ByteParser -> public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter);1515168359;Static utility to parse a field of type byte from a byte sequence that represents text_characters_(such as when read from a file stream).__@param bytes     The bytes containing the text data that should be parsed._@param startPos  The offset to start the parsing._@param length    The length of the byte sequence (counting from the offset)._@param delimiter The delimiter that terminates the field._@return The parsed value._@throws NumberFormatException Thrown when the value cannot be parsed because the text_represents not a correct number.;public static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {_		long val = 0__		boolean neg = false___		if(bytes[startPos] == delimiter) {_			throw new NumberFormatException("Empty field.")__		}__		if (bytes[startPos] == '-') {_			neg = true__			startPos++__			length--__			if (length == 0 || bytes[startPos] == delimiter) {_				throw new NumberFormatException("Orphaned minus sign.")__			}_		}__		for (_ length > 0_ startPos++, length--) {_			if (bytes[startPos] == delimiter) {_				return (byte) (neg ? -val : val)__			}_			if (bytes[startPos] < 48 || bytes[startPos] > 57) {_				throw new NumberFormatException("Invalid character.")__			}_			val *= 10__			val += bytes[startPos] - 48___			if (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {_				throw new NumberFormatException("Value overflow/underflow")__			}_		}_		return (byte) (neg ? -val : val)__	};static,utility,to,parse,a,field,of,type,byte,from,a,byte,sequence,that,represents,text,characters,such,as,when,read,from,a,file,stream,param,bytes,the,bytes,containing,the,text,data,that,should,be,parsed,param,start,pos,the,offset,to,start,the,parsing,param,length,the,length,of,the,byte,sequence,counting,from,the,offset,param,delimiter,the,delimiter,that,terminates,the,field,return,the,parsed,value,throws,number,format,exception,thrown,when,the,value,cannot,be,parsed,because,the,text,represents,not,a,correct,number;public,static,final,byte,parse,field,byte,bytes,int,start,pos,int,length,char,delimiter,long,val,0,boolean,neg,false,if,bytes,start,pos,delimiter,throw,new,number,format,exception,empty,field,if,bytes,start,pos,neg,true,start,pos,length,if,length,0,bytes,start,pos,delimiter,throw,new,number,format,exception,orphaned,minus,sign,for,length,0,start,pos,length,if,bytes,start,pos,delimiter,return,byte,neg,val,val,if,bytes,start,pos,48,bytes,start,pos,57,throw,new,number,format,exception,invalid,character,val,10,val,bytes,start,pos,48,if,val,byte,neg,val,byte,throw,new,number,format,exception,value,overflow,underflow,return,byte,neg,val,val
