commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the scheme of the file system created by this factory.  */ ;/**  * Gets the scheme of the file system created by this factory.  */ String getScheme().
true;;1;1;/**  * Applies the given configuration to this factory. All future file system  * instantiations via {@link #create(URI)} should take the configuration into  * account.  *  * @param config The configuration to apply.  */ ;/**  * Applies the given configuration to this factory. All future file system  * instantiations via {@link #create(URI)} should take the configuration into  * account.  *  * @param config The configuration to apply.  */ void configure(Configuration config).
true;;1;1;/**  * Creates a new file system for the given file system URI.  * The URI describes the type of file system (via its scheme) and optionally the  * authority (for example the host) of the file system.  *  * @param fsUri The URI that describes the file system.  * @return A new instance of the specified file system.  *  * @throws IOException Thrown if the file system could not be instantiated.  */ ;/**  * Creates a new file system for the given file system URI.  * The URI describes the type of file system (via its scheme) and optionally the  * authority (for example the host) of the file system.  *  * @param fsUri The URI that describes the file system.  * @return A new instance of the specified file system.  *  * @throws IOException Thrown if the file system could not be instantiated.  */ FileSystem create(URI fsUri) throws IOException.
