# id;timestamp;commentText;codeText;commentWords;codeWords
RecoverableWriter -> RecoverableFsDataOutputStream open(Path path) throws IOException_;1531689536;Opens a new recoverable stream to write to the given path._Whether existing files will be overwritten is implementation specific and should_not be relied upon.__@param path The path of the file/object to write to._@return A new RecoverableFsDataOutputStream writing a new file/object.__@throws IOException Thrown if the stream could not be opened/initialized.;RecoverableFsDataOutputStream open(Path path) throws IOException_;opens,a,new,recoverable,stream,to,write,to,the,given,path,whether,existing,files,will,be,overwritten,is,implementation,specific,and,should,not,be,relied,upon,param,path,the,path,of,the,file,object,to,write,to,return,a,new,recoverable,fs,data,output,stream,writing,a,new,file,object,throws,ioexception,thrown,if,the,stream,could,not,be,opened,initialized;recoverable,fs,data,output,stream,open,path,path,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream open(Path path) throws IOException_;1539271394;Opens a new recoverable stream to write to the given path._Whether existing files will be overwritten is implementation specific and should_not be relied upon.__@param path The path of the file/object to write to._@return A new RecoverableFsDataOutputStream writing a new file/object.__@throws IOException Thrown if the stream could not be opened/initialized.;RecoverableFsDataOutputStream open(Path path) throws IOException_;opens,a,new,recoverable,stream,to,write,to,the,given,path,whether,existing,files,will,be,overwritten,is,implementation,specific,and,should,not,be,relied,upon,param,path,the,path,of,the,file,object,to,write,to,return,a,new,recoverable,fs,data,output,stream,writing,a,new,file,object,throws,ioexception,thrown,if,the,stream,could,not,be,opened,initialized;recoverable,fs,data,output,stream,open,path,path,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream open(Path path) throws IOException_;1543940476;Opens a new recoverable stream to write to the given path._Whether existing files will be overwritten is implementation specific and should_not be relied upon.__@param path The path of the file/object to write to._@return A new RecoverableFsDataOutputStream writing a new file/object.__@throws IOException Thrown if the stream could not be opened/initialized.;RecoverableFsDataOutputStream open(Path path) throws IOException_;opens,a,new,recoverable,stream,to,write,to,the,given,path,whether,existing,files,will,be,overwritten,is,implementation,specific,and,should,not,be,relied,upon,param,path,the,path,of,the,file,object,to,write,to,return,a,new,recoverable,fs,data,output,stream,writing,a,new,file,object,throws,ioexception,thrown,if,the,stream,could,not,be,opened,initialized;recoverable,fs,data,output,stream,open,path,path,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;1531689536;Resumes a recoverable stream consistently at the point indicated by the given ResumeRecoverable._Future writes to the stream will continue / append the file as of that point.__<p>This method is optional and whether it is supported is indicated through the_{@link #supportsResume()} method.__@param resumable The opaque handle with the recovery information._@return A recoverable stream writing to the file/object as it was at the point when the_ResumeRecoverable was created.__@throws IOException Thrown, if resuming fails._@throws UnsupportedOperationException Thrown if this optional method is not supported.;RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;resumes,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,resume,recoverable,future,writes,to,the,stream,will,continue,append,the,file,as,of,that,point,p,this,method,is,optional,and,whether,it,is,supported,is,indicated,through,the,link,supports,resume,method,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,recoverable,stream,writing,to,the,file,object,as,it,was,at,the,point,when,the,resume,recoverable,was,created,throws,ioexception,thrown,if,resuming,fails,throws,unsupported,operation,exception,thrown,if,this,optional,method,is,not,supported;recoverable,fs,data,output,stream,recover,resume,recoverable,resumable,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;1539271394;Resumes a recoverable stream consistently at the point indicated by the given ResumeRecoverable._Future writes to the stream will continue / append the file as of that point.__<p>This method is optional and whether it is supported is indicated through the_{@link #supportsResume()} method.__@param resumable The opaque handle with the recovery information._@return A recoverable stream writing to the file/object as it was at the point when the_ResumeRecoverable was created.__@throws IOException Thrown, if resuming fails._@throws UnsupportedOperationException Thrown if this optional method is not supported.;RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;resumes,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,resume,recoverable,future,writes,to,the,stream,will,continue,append,the,file,as,of,that,point,p,this,method,is,optional,and,whether,it,is,supported,is,indicated,through,the,link,supports,resume,method,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,recoverable,stream,writing,to,the,file,object,as,it,was,at,the,point,when,the,resume,recoverable,was,created,throws,ioexception,thrown,if,resuming,fails,throws,unsupported,operation,exception,thrown,if,this,optional,method,is,not,supported;recoverable,fs,data,output,stream,recover,resume,recoverable,resumable,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;1543940476;Resumes a recoverable stream consistently at the point indicated by the given ResumeRecoverable._Future writes to the stream will continue / append the file as of that point.__<p>This method is optional and whether it is supported is indicated through the_{@link #supportsResume()} method.__@param resumable The opaque handle with the recovery information._@return A recoverable stream writing to the file/object as it was at the point when the_ResumeRecoverable was created.__@throws IOException Thrown, if resuming fails._@throws UnsupportedOperationException Thrown if this optional method is not supported.;RecoverableFsDataOutputStream recover(ResumeRecoverable resumable) throws IOException_;resumes,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,resume,recoverable,future,writes,to,the,stream,will,continue,append,the,file,as,of,that,point,p,this,method,is,optional,and,whether,it,is,supported,is,indicated,through,the,link,supports,resume,method,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,recoverable,stream,writing,to,the,file,object,as,it,was,at,the,point,when,the,resume,recoverable,was,created,throws,ioexception,thrown,if,resuming,fails,throws,unsupported,operation,exception,thrown,if,this,optional,method,is,not,supported;recoverable,fs,data,output,stream,recover,resume,recoverable,resumable,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;1531689536;Recovers a recoverable stream consistently at the point indicated by the given CommitRecoverable_for finalizing and committing. This will publish the target file with exactly the data_that was written up to the point then the CommitRecoverable was created.__@param resumable The opaque handle with the recovery information._@return A committer that publishes the target file.__@throws IOException Thrown, if recovery fails.;RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;recovers,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,commit,recoverable,for,finalizing,and,committing,this,will,publish,the,target,file,with,exactly,the,data,that,was,written,up,to,the,point,then,the,commit,recoverable,was,created,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,committer,that,publishes,the,target,file,throws,ioexception,thrown,if,recovery,fails;recoverable,fs,data,output,stream,committer,recover,for,commit,commit,recoverable,resumable,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;1539271394;Recovers a recoverable stream consistently at the point indicated by the given CommitRecoverable_for finalizing and committing. This will publish the target file with exactly the data_that was written up to the point then the CommitRecoverable was created.__@param resumable The opaque handle with the recovery information._@return A committer that publishes the target file.__@throws IOException Thrown, if recovery fails.;RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;recovers,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,commit,recoverable,for,finalizing,and,committing,this,will,publish,the,target,file,with,exactly,the,data,that,was,written,up,to,the,point,then,the,commit,recoverable,was,created,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,committer,that,publishes,the,target,file,throws,ioexception,thrown,if,recovery,fails;recoverable,fs,data,output,stream,committer,recover,for,commit,commit,recoverable,resumable,throws,ioexception
RecoverableWriter -> RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;1543940476;Recovers a recoverable stream consistently at the point indicated by the given CommitRecoverable_for finalizing and committing. This will publish the target file with exactly the data_that was written up to the point then the CommitRecoverable was created.__@param resumable The opaque handle with the recovery information._@return A committer that publishes the target file.__@throws IOException Thrown, if recovery fails.;RecoverableFsDataOutputStream.Committer recoverForCommit(CommitRecoverable resumable) throws IOException_;recovers,a,recoverable,stream,consistently,at,the,point,indicated,by,the,given,commit,recoverable,for,finalizing,and,committing,this,will,publish,the,target,file,with,exactly,the,data,that,was,written,up,to,the,point,then,the,commit,recoverable,was,created,param,resumable,the,opaque,handle,with,the,recovery,information,return,a,committer,that,publishes,the,target,file,throws,ioexception,thrown,if,recovery,fails;recoverable,fs,data,output,stream,committer,recover,for,commit,commit,recoverable,resumable,throws,ioexception
RecoverableWriter -> boolean supportsResume()_;1531689536;Checks whether the writer and its streams support resuming (appending to) files after_recovery (via the {@link #recover(ResumeRecoverable)} method).__<p>If true, then this writer supports the {@link #recover(ResumeRecoverable)} method._If false, then that method may not be supported and streams can only be recovered via_{@link #recoverForCommit(CommitRecoverable)}.;boolean supportsResume()_;checks,whether,the,writer,and,its,streams,support,resuming,appending,to,files,after,recovery,via,the,link,recover,resume,recoverable,method,p,if,true,then,this,writer,supports,the,link,recover,resume,recoverable,method,if,false,then,that,method,may,not,be,supported,and,streams,can,only,be,recovered,via,link,recover,for,commit,commit,recoverable;boolean,supports,resume
RecoverableWriter -> boolean supportsResume()_;1539271394;Checks whether the writer and its streams support resuming (appending to) files after_recovery (via the {@link #recover(ResumeRecoverable)} method).__<p>If true, then this writer supports the {@link #recover(ResumeRecoverable)} method._If false, then that method may not be supported and streams can only be recovered via_{@link #recoverForCommit(CommitRecoverable)}.;boolean supportsResume()_;checks,whether,the,writer,and,its,streams,support,resuming,appending,to,files,after,recovery,via,the,link,recover,resume,recoverable,method,p,if,true,then,this,writer,supports,the,link,recover,resume,recoverable,method,if,false,then,that,method,may,not,be,supported,and,streams,can,only,be,recovered,via,link,recover,for,commit,commit,recoverable;boolean,supports,resume
RecoverableWriter -> boolean supportsResume()_;1543940476;Checks whether the writer and its streams support resuming (appending to) files after_recovery (via the {@link #recover(ResumeRecoverable)} method).__<p>If true, then this writer supports the {@link #recover(ResumeRecoverable)} method._If false, then that method may not be supported and streams can only be recovered via_{@link #recoverForCommit(CommitRecoverable)}.;boolean supportsResume()_;checks,whether,the,writer,and,its,streams,support,resuming,appending,to,files,after,recovery,via,the,link,recover,resume,recoverable,method,p,if,true,then,this,writer,supports,the,link,recover,resume,recoverable,method,if,false,then,that,method,may,not,be,supported,and,streams,can,only,be,recovered,via,link,recover,for,commit,commit,recoverable;boolean,supports,resume
RecoverableWriter -> SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;1531689536;The serializer for the CommitRecoverable types created in this writer._This serializer should be used to store the CommitRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;the,serializer,for,the,commit,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,commit,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,commit,recoverable,get,commit,recoverable,serializer
RecoverableWriter -> SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;1539271394;The serializer for the CommitRecoverable types created in this writer._This serializer should be used to store the CommitRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;the,serializer,for,the,commit,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,commit,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,commit,recoverable,get,commit,recoverable,serializer
RecoverableWriter -> SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;1543940476;The serializer for the CommitRecoverable types created in this writer._This serializer should be used to store the CommitRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer()_;the,serializer,for,the,commit,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,commit,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,commit,recoverable,get,commit,recoverable,serializer
RecoverableWriter -> SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;1531689536;The serializer for the ResumeRecoverable types created in this writer._This serializer should be used to store the ResumeRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;the,serializer,for,the,resume,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,resume,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,resume,recoverable,get,resume,recoverable,serializer
RecoverableWriter -> SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;1539271394;The serializer for the ResumeRecoverable types created in this writer._This serializer should be used to store the ResumeRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;the,serializer,for,the,resume,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,resume,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,resume,recoverable,get,resume,recoverable,serializer
RecoverableWriter -> SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;1543940476;The serializer for the ResumeRecoverable types created in this writer._This serializer should be used to store the ResumeRecoverable in checkpoint_state or other forms of persistent state.;SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer()_;the,serializer,for,the,resume,recoverable,types,created,in,this,writer,this,serializer,should,be,used,to,store,the,resume,recoverable,in,checkpoint,state,or,other,forms,of,persistent,state;simple,versioned,serializer,resume,recoverable,get,resume,recoverable,serializer
