commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void read(final DataInputView in) throws IOException {     int size = in.readInt().     this.map.clear().     try {         for (. size > 0. size--) {             final K key = this.keyClass.newInstance().             final V val = this.valueClass.newInstance().             key.read(in).             val.read(in).             this.map.put(key, val).         }     } catch (final InstantiationException | IllegalAccessException e) {         throw new RuntimeException(e).     } }
false;public;1;8;;@Override public void write(final DataOutputView out) throws IOException {     out.writeInt(this.map.size()).     for (final Entry<K, V> entry : this.map.entrySet()) {         entry.getKey().write(out).         entry.getValue().write(out).     } }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#toString() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#toString() 	 */ @Override public String toString() {     return this.map.toString(). }
true;public;0;7;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#hashCode() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#hashCode() 	 */ @Override public int hashCode() {     final int prime = 47.     int result = 1.     result = prime * result + this.map.hashCode().     return result. }
true;public;1;21;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ @Override public boolean equals(final Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (this.getClass() != obj.getClass()) {         return false.     }     final MapValue<?, ?> other = (MapValue<?, ?>) obj.     if (this.map == null) {         if (other.map != null) {             return false.         }     } else if (!this.map.equals(other.map)) {         return false.     }     return true. }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#clear() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#clear() 	 */ @Override public void clear() {     this.map.clear(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#containsKey(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#containsKey(java.lang.Object) 	 */ @Override public boolean containsKey(final Object key) {     return this.map.containsKey(key). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#containsValue(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#containsValue(java.lang.Object) 	 */ @Override public boolean containsValue(final Object value) {     return this.map.containsValue(value). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#entrySet() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#entrySet() 	 */ @Override public Set<Entry<K, V>> entrySet() {     return this.map.entrySet(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#get(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#get(java.lang.Object) 	 */ @Override public V get(final Object key) {     return this.map.get(key). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#isEmpty() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#isEmpty() 	 */ @Override public boolean isEmpty() {     return this.map.isEmpty(). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#keySet() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#keySet() 	 */ @Override public Set<K> keySet() {     return this.map.keySet(). }
true;public;2;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#put(java.lang.Object, java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#put(java.lang.Object, java.lang.Object) 	 */ @Override public V put(final K key, final V value) {     return this.map.put(key, value). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#putAll(java.util.Map) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#putAll(java.util.Map) 	 */ @Override public void putAll(final Map<? extends K, ? extends V> m) {     this.map.putAll(m). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#remove(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#remove(java.lang.Object) 	 */ @Override public V remove(final Object key) {     return this.map.remove(key). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#size() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#size() 	 */ @Override public int size() {     return this.map.size(). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.Map#values() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.Map#values() 	 */ @Override public Collection<V> values() {     return this.map.values(). }
