# id;timestamp;commentText;codeText;commentWords;codeWords
RichFunction -> void open(Configuration parameters) throws Exception_;1406821655;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep._<p>_The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre><blockquote>_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____</blockquote></pre>_<p>_By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,blockquote,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,blockquote,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void open(Configuration parameters) throws Exception_;1406830680;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep._<p>_The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre><blockquote>_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____</blockquote></pre>_<p>_By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,blockquote,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,blockquote,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void open(Configuration parameters) throws Exception_;1411473593;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep._<p>_The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre><blockquote>_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____</blockquote></pre>_<p>_By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,blockquote,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,blockquote,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void open(Configuration parameters) throws Exception_;1445001970;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep._<p>_The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre>{@code_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____}</pre>_<p>_By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,code,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void open(Configuration parameters) throws Exception_;1452178883;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep._<p>_The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre>{@code_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____}</pre>_<p>_By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,code,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void open(Configuration parameters) throws Exception_;1526630739;Initialization method for the function. It is called before the actual working methods_(like <i>map</i> or <i>join</i>) and thus suitable for one time setup work. For functions that_are part of an iteration, this method will be invoked at the beginning of each iteration superstep.__<p>The configuration object passed to the function can be used for configuration and initialization._The configuration contains all parameters that were configured on the function in the program_composition.__<pre>{@code_public class MyMapper extends FilterFunction<String> {__private String searchString___public void open(Configuration parameters) {_this.searchString = parameters.getString("foo")____public boolean filter(String value) {_return value.equals(searchString)____}</pre>__<p>By default, this method does nothing.__@param parameters The configuration containing the parameters attached to the contract.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.__@see org.apache.flink.configuration.Configuration;void open(Configuration parameters) throws Exception_;initialization,method,for,the,function,it,is,called,before,the,actual,working,methods,like,i,map,i,or,i,join,i,and,thus,suitable,for,one,time,setup,work,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,at,the,beginning,of,each,iteration,superstep,p,the,configuration,object,passed,to,the,function,can,be,used,for,configuration,and,initialization,the,configuration,contains,all,parameters,that,were,configured,on,the,function,in,the,program,composition,pre,code,public,class,my,mapper,extends,filter,function,string,private,string,search,string,public,void,open,configuration,parameters,this,search,string,parameters,get,string,foo,public,boolean,filter,string,value,return,value,equals,search,string,pre,p,by,default,this,method,does,nothing,param,parameters,the,configuration,containing,the,parameters,attached,to,the,contract,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution,see,org,apache,flink,configuration,configuration;void,open,configuration,parameters,throws,exception
RichFunction -> void close() throws Exception_;1406821655;Teardown method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep._<p>_This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;teardown,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> void close() throws Exception_;1406830680;Teardown method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep._<p>_This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;teardown,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> void close() throws Exception_;1411473593;Teardown method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep._<p>_This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;teardown,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> void close() throws Exception_;1445001970;Tear-down method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep._<p>_This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;tear,down,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> void close() throws Exception_;1452178883;Tear-down method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep._<p>_This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;tear,down,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> void close() throws Exception_;1526630739;Tear-down method for the user code. It is called after the last call to the main working methods_(e.g. <i>map</i> or <i>join</i>). For functions that  are part of an iteration, this method will_be invoked after each iteration superstep.__<p>This method can be used for clean up work.__@throws Exception Implementations may forward exceptions, which are caught by the runtime. When the_runtime catches an exception, it aborts the task and lets the fail-over logic_decide whether to retry the task execution.;void close() throws Exception_;tear,down,method,for,the,user,code,it,is,called,after,the,last,call,to,the,main,working,methods,e,g,i,map,i,or,i,join,i,for,functions,that,are,part,of,an,iteration,this,method,will,be,invoked,after,each,iteration,superstep,p,this,method,can,be,used,for,clean,up,work,throws,exception,implementations,may,forward,exceptions,which,are,caught,by,the,runtime,when,the,runtime,catches,an,exception,it,aborts,the,task,and,lets,the,fail,over,logic,decide,whether,to,retry,the,task,execution;void,close,throws,exception
RichFunction -> RuntimeContext getRuntimeContext()_;1406821655;Gets the context that contains information about the UDF's runtime.__Context information are for example {@link org.apache.flink.api.common.accumulators.Accumulator}s_or the {@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,context,information,are,for,example,link,org,apache,flink,api,common,accumulators,accumulator,s,or,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> RuntimeContext getRuntimeContext()_;1406830680;Gets the context that contains information about the UDF's runtime.__Context information are for example {@link org.apache.flink.api.common.accumulators.Accumulator}s_or the {@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,context,information,are,for,example,link,org,apache,flink,api,common,accumulators,accumulator,s,or,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> RuntimeContext getRuntimeContext()_;1411473593;Gets the context that contains information about the UDF's runtime.__Context information are for example {@link org.apache.flink.api.common.accumulators.Accumulator}s_or the {@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,context,information,are,for,example,link,org,apache,flink,api,common,accumulators,accumulator,s,or,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> RuntimeContext getRuntimeContext()_;1445001970;Gets the context that contains information about the UDF's runtime, such as the_parallelism of the function, the subtask index of the function, or the name of_the of the task that executes the function.__<p>The RuntimeContext also gives access to the_{@link org.apache.flink.api.common.accumulators.Accumulator}s and the_{@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,such,as,the,parallelism,of,the,function,the,subtask,index,of,the,function,or,the,name,of,the,of,the,task,that,executes,the,function,p,the,runtime,context,also,gives,access,to,the,link,org,apache,flink,api,common,accumulators,accumulator,s,and,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> RuntimeContext getRuntimeContext()_;1452178883;Gets the context that contains information about the UDF's runtime, such as the_parallelism of the function, the subtask index of the function, or the name of_the of the task that executes the function.__<p>The RuntimeContext also gives access to the_{@link org.apache.flink.api.common.accumulators.Accumulator}s and the_{@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,such,as,the,parallelism,of,the,function,the,subtask,index,of,the,function,or,the,name,of,the,of,the,task,that,executes,the,function,p,the,runtime,context,also,gives,access,to,the,link,org,apache,flink,api,common,accumulators,accumulator,s,and,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> RuntimeContext getRuntimeContext()_;1526630739;Gets the context that contains information about the UDF's runtime, such as the_parallelism of the function, the subtask index of the function, or the name of_the of the task that executes the function.__<p>The RuntimeContext also gives access to the_{@link org.apache.flink.api.common.accumulators.Accumulator}s and the_{@link org.apache.flink.api.common.cache.DistributedCache}.__@return The UDF's runtime context.;RuntimeContext getRuntimeContext()_;gets,the,context,that,contains,information,about,the,udf,s,runtime,such,as,the,parallelism,of,the,function,the,subtask,index,of,the,function,or,the,name,of,the,of,the,task,that,executes,the,function,p,the,runtime,context,also,gives,access,to,the,link,org,apache,flink,api,common,accumulators,accumulator,s,and,the,link,org,apache,flink,api,common,cache,distributed,cache,return,the,udf,s,runtime,context;runtime,context,get,runtime,context
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1406821655;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1406830680;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1411473593;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1445001970;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1452178883;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> void setRuntimeContext(RuntimeContext t)_;1526630739;Sets the function's runtime context. Called by the framework when creating a parallel instance of the function.__@param t The runtime context.;void setRuntimeContext(RuntimeContext t)_;sets,the,function,s,runtime,context,called,by,the,framework,when,creating,a,parallel,instance,of,the,function,param,t,the,runtime,context;void,set,runtime,context,runtime,context,t
RichFunction -> IterationRuntimeContext getIterationRuntimeContext()_;1445001970;Gets a specialized version of the {@link RuntimeContext}, which has additional information_about the iteration in which the function is executed. This IterationRuntimeContext is only_available if the function is part of an iteration. Otherwise, this method throws an exception.__@return The IterationRuntimeContext._@throws java.lang.IllegalStateException Thrown, if the function is not executed as part of an iteration.;IterationRuntimeContext getIterationRuntimeContext()_;gets,a,specialized,version,of,the,link,runtime,context,which,has,additional,information,about,the,iteration,in,which,the,function,is,executed,this,iteration,runtime,context,is,only,available,if,the,function,is,part,of,an,iteration,otherwise,this,method,throws,an,exception,return,the,iteration,runtime,context,throws,java,lang,illegal,state,exception,thrown,if,the,function,is,not,executed,as,part,of,an,iteration;iteration,runtime,context,get,iteration,runtime,context
RichFunction -> IterationRuntimeContext getIterationRuntimeContext()_;1452178883;Gets a specialized version of the {@link RuntimeContext}, which has additional information_about the iteration in which the function is executed. This IterationRuntimeContext is only_available if the function is part of an iteration. Otherwise, this method throws an exception.__@return The IterationRuntimeContext._@throws java.lang.IllegalStateException Thrown, if the function is not executed as part of an iteration.;IterationRuntimeContext getIterationRuntimeContext()_;gets,a,specialized,version,of,the,link,runtime,context,which,has,additional,information,about,the,iteration,in,which,the,function,is,executed,this,iteration,runtime,context,is,only,available,if,the,function,is,part,of,an,iteration,otherwise,this,method,throws,an,exception,return,the,iteration,runtime,context,throws,java,lang,illegal,state,exception,thrown,if,the,function,is,not,executed,as,part,of,an,iteration;iteration,runtime,context,get,iteration,runtime,context
RichFunction -> IterationRuntimeContext getIterationRuntimeContext()_;1526630739;Gets a specialized version of the {@link RuntimeContext}, which has additional information_about the iteration in which the function is executed. This IterationRuntimeContext is only_available if the function is part of an iteration. Otherwise, this method throws an exception.__@return The IterationRuntimeContext._@throws java.lang.IllegalStateException Thrown, if the function is not executed as part of an iteration.;IterationRuntimeContext getIterationRuntimeContext()_;gets,a,specialized,version,of,the,link,runtime,context,which,has,additional,information,about,the,iteration,in,which,the,function,is,executed,this,iteration,runtime,context,is,only,available,if,the,function,is,part,of,an,iteration,otherwise,this,method,throws,an,exception,return,the,iteration,runtime,context,throws,java,lang,illegal,state,exception,thrown,if,the,function,is,not,executed,as,part,of,an,iteration;iteration,runtime,context,get,iteration,runtime,context
