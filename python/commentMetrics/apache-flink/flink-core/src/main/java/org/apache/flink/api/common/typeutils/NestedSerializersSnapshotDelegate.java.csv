commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Produces a restore serializer from each contained serializer configuration snapshot.  * The serializers are returned in the same order as the snapshots are stored.  */ ;// ------------------------------------------------------------------------ // Nested Serializers and Compatibility // ------------------------------------------------------------------------ /**  * Produces a restore serializer from each contained serializer configuration snapshot.  * The serializers are returned in the same order as the snapshots are stored.  */ public TypeSerializer<?>[] getRestoredNestedSerializers() {     return snapshotsToRestoreSerializers(nestedSnapshots). }
true;public;1;8;/**  * Creates the restore serializer from the pos-th config snapshot.  */ ;/**  * Creates the restore serializer from the pos-th config snapshot.  */ public <T> TypeSerializer<T> getRestoredNestedSerializer(int pos) {     checkArgument(pos < nestedSnapshots.length).     @SuppressWarnings("unchecked")     TypeSerializerSnapshot<T> snapshot = (TypeSerializerSnapshot<T>) nestedSnapshots[pos].     return snapshot.restoreSerializer(). }
true;public;0;3;/**  * Returns the snapshots of the nested serializers.  *  * @return the snapshots of the nested serializers.  */ ;/**  * Returns the snapshots of the nested serializers.  *  * @return the snapshots of the nested serializers.  */ public TypeSerializerSnapshot<?>[] getNestedSerializerSnapshots() {     return nestedSnapshots. }
true;public;2;31;/**  * Resolves the compatibility of the nested serializer snapshots with the nested  * serializers of the new outer serializer.  *  * @deprecated this no method will be removed in the future. Resolving compatibility for nested  *             serializers is now handled by {@link CompositeTypeSerializerSnapshot}.  */ ;/**  * Resolves the compatibility of the nested serializer snapshots with the nested  * serializers of the new outer serializer.  *  * @deprecated this no method will be removed in the future. Resolving compatibility for nested  *             serializers is now handled by {@link CompositeTypeSerializerSnapshot}.  */ @Deprecated public <T> TypeSerializerSchemaCompatibility<T> resolveCompatibilityWithNested(TypeSerializerSchemaCompatibility<?> outerCompatibility, TypeSerializer<?>... newNestedSerializers) {     checkArgument(newNestedSerializers.length == nestedSnapshots.length, "Different number of new serializers and existing serializer configuration snapshots").     // compatibility of the outer serializer's format     if (outerCompatibility.isIncompatible()) {         return TypeSerializerSchemaCompatibility.incompatible().     }     // check nested serializers for compatibility     boolean nestedSerializerRequiresMigration = false.     for (int i = 0. i < nestedSnapshots.length. i++) {         TypeSerializerSchemaCompatibility<?> compatibility = resolveCompatibility(newNestedSerializers[i], nestedSnapshots[i]).         if (compatibility.isIncompatible()) {             return TypeSerializerSchemaCompatibility.incompatible().         }         if (compatibility.isCompatibleAfterMigration()) {             nestedSerializerRequiresMigration = true.         }     }     return (nestedSerializerRequiresMigration || !outerCompatibility.isCompatibleAsIs()) ? TypeSerializerSchemaCompatibility.compatibleAfterMigration() : TypeSerializerSchemaCompatibility.compatibleAsIs(). }
true;public,final;1;9;/**  * Writes the composite snapshot of all the contained serializers.  */ ;// ------------------------------------------------------------------------ // Serialization // ------------------------------------------------------------------------ /**  * Writes the composite snapshot of all the contained serializers.  */ public final void writeNestedSerializerSnapshots(DataOutputView out) throws IOException {     out.writeInt(MAGIC_NUMBER).     out.writeInt(VERSION).     out.writeInt(nestedSnapshots.length).     for (TypeSerializerSnapshot<?> snap : nestedSnapshots) {         TypeSerializerSnapshot.writeVersionedSnapshot(out, snap).     } }
true;public,static;2;21;/**  * Reads the composite snapshot of all the contained serializers.  */ ;/**  * Reads the composite snapshot of all the contained serializers.  */ public static NestedSerializersSnapshotDelegate readNestedSerializerSnapshots(DataInputView in, ClassLoader cl) throws IOException {     final int magicNumber = in.readInt().     if (magicNumber != MAGIC_NUMBER) {         throw new IOException(String.format("Corrupt data, magic number mismatch. Expected %8x, found %8x", MAGIC_NUMBER, magicNumber)).     }     final int version = in.readInt().     if (version != VERSION) {         throw new IOException("Unrecognized version: " + version).     }     final int numSnapshots = in.readInt().     final TypeSerializerSnapshot<?>[] nestedSnapshots = new TypeSerializerSnapshot<?>[numSnapshots].     for (int i = 0. i < numSnapshots. i++) {         nestedSnapshots[i] = TypeSerializerSnapshot.readVersionedSnapshot(in, cl).     }     return new NestedSerializersSnapshotDelegate(nestedSnapshots). }
true;public,static;2;11;/**  * Reads the composite snapshot of all the contained serializers in a way that is compatible  * with Version 1 of the deprecated {@link CompositeTypeSerializerConfigSnapshot}.  */ ;/**  * Reads the composite snapshot of all the contained serializers in a way that is compatible  * with Version 1 of the deprecated {@link CompositeTypeSerializerConfigSnapshot}.  */ public static NestedSerializersSnapshotDelegate legacyReadNestedSerializerSnapshots(DataInputView in, ClassLoader cl) throws IOException {     @SuppressWarnings("deprecation")     final List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndSnapshots = TypeSerializerSerializationUtil.readSerializersAndConfigsWithResilience(in, cl).     final TypeSerializerSnapshot<?>[] nestedSnapshots = serializersAndSnapshots.stream().map(t -> t.f1).toArray(TypeSerializerSnapshot<?>[]::new).     return new NestedSerializersSnapshotDelegate(nestedSnapshots). }
true;private,static;2;10;/**  * Utility method to conjure up a new scope for the generic parameters.  */ ;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ /**  * Utility method to conjure up a new scope for the generic parameters.  */ @SuppressWarnings("unchecked") private static <E> TypeSerializerSchemaCompatibility<E> resolveCompatibility(TypeSerializer<?> serializer, TypeSerializerSnapshot<?> snapshot) {     TypeSerializer<E> typedSerializer = (TypeSerializer<E>) serializer.     TypeSerializerSnapshot<E> typedSnapshot = (TypeSerializerSnapshot<E>) snapshot.     return typedSnapshot.resolveSchemaCompatibility(typedSerializer). }
false;private,static;1;5;;private static TypeSerializer<?>[] snapshotsToRestoreSerializers(TypeSerializerSnapshot<?>... snapshots) {     return Arrays.stream(snapshots).map(TypeSerializerSnapshot::restoreSerializer).toArray(TypeSerializer[]::new). }
