commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Deadline plus(Duration other) {     return new Deadline(Math.addExact(timeNanos, other.toNanos())). }
true;public;0;3;/**  * Returns the time left between the deadline and now. The result is negative if the deadline  * has passed.  */ ;/**  * Returns the time left between the deadline and now. The result is negative if the deadline  * has passed.  */ public Duration timeLeft() {     return Duration.ofNanos(Math.subtractExact(timeNanos, System.nanoTime())). }
true;public;0;3;/**  * Returns whether there is any time left between the deadline and now.  */ ;/**  * Returns whether there is any time left between the deadline and now.  */ public boolean hasTimeLeft() {     return !isOverdue(). }
true;public;0;3;/**  * Determines whether the deadline is in the past, i.e. whether the time left is negative.  */ ;/**  * Determines whether the deadline is in the past, i.e. whether the time left is negative.  */ public boolean isOverdue() {     return timeNanos < System.nanoTime(). }
true;public,static;0;3;/**  * Constructs a {@link Deadline} that has now as the deadline. Use this and then extend via  * {@link #plus(Duration)} to specify a deadline in the future.  */ ;// ------------------------------------------------------------------------ // Creating Deadlines // ------------------------------------------------------------------------ /**  * Constructs a {@link Deadline} that has now as the deadline. Use this and then extend via  * {@link #plus(Duration)} to specify a deadline in the future.  */ public static Deadline now() {     return new Deadline(System.nanoTime()). }
true;public,static;1;3;/**  * Constructs a Deadline that is a given duration after now.  */ ;/**  * Constructs a Deadline that is a given duration after now.  */ public static Deadline fromNow(Duration duration) {     return new Deadline(Math.addExact(System.nanoTime(), duration.toNanos())). }
