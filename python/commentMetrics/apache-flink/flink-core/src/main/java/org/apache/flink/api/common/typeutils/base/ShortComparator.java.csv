commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     short s1 = firstSource.readShort().     short s2 = secondSource.readShort().     int comp = (s1 < s2 ? -1 : (s1 == s2 ? 0 : 1)).     return ascendingComparison ? comp : -comp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return true. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return 2. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < 2. }
false;public;4;26;;@Override public void putNormalizedKey(Short value, MemorySegment target, int offset, int numBytes) {     if (numBytes == 2) {         // default case, full normalized key         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).         target.put(offset + 1, (byte) ((value) & 0xff)).     } else if (numBytes <= 0) {     } else if (numBytes == 1) {         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).     } else {         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).         target.put(offset + 1, (byte) ((value) & 0xff)).         for (int i = 2. i < numBytes. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;0;4;;@Override public ShortComparator duplicate() {     return new ShortComparator(ascendingComparison). }
