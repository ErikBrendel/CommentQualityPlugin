commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Consider using {@link #add(double)} instead for primitive double values  */ ;// ------------------------------------------------------------------------ // Accumulator // ------------------------------------------------------------------------ /**  * Consider using {@link #add(double)} instead for primitive double values  */ @Override public void add(Double value) {     this.max = Math.max(this.max, value). }
false;public;0;4;;@Override public Double getLocalValue() {     return this.max. }
false;public;1;4;;@Override public void merge(Accumulator<Double, Double> other) {     this.max = Math.max(this.max, other.getLocalValue()). }
false;public;0;4;;@Override public void resetLocal() {     this.max = Double.NEGATIVE_INFINITY. }
false;public;0;6;;@Override public DoubleMaximum clone() {     DoubleMaximum clone = new DoubleMaximum().     clone.max = this.max.     return clone. }
false;public;1;3;;// ------------------------------------------------------------------------ // Primitive Specializations // ------------------------------------------------------------------------ public void add(double value) {     this.max = Math.max(this.max, value). }
false;public;0;3;;public double getLocalValuePrimitive() {     return this.max. }
false;public;0;4;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ @Override public String toString() {     return "DoubleMaximum " + this.max. }
