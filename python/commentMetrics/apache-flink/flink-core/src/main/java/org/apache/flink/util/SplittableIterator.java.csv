commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Splits this iterator into a number disjoint iterators.  * The union of these iterators returns the original iterator values.  *  * @param numPartitions The number of iterators to split into.  * @return An array with the split iterators.  */ ;/**  * Splits this iterator into a number disjoint iterators.  * The union of these iterators returns the original iterator values.  *  * @param numPartitions The number of iterators to split into.  * @return An array with the split iterators.  */ public abstract Iterator<T>[] split(int numPartitions).
true;public;2;7;/**  * Splits this iterator into <i>n</i> partitions and returns the <i>i-th</i> partition  * out of those.  *  * @param num The partition to return (<i>i</i>).  * @param numPartitions The number of partitions to split into (<i>n</i>).  * @return The iterator for the partition.  */ ;/**  * Splits this iterator into <i>n</i> partitions and returns the <i>i-th</i> partition  * out of those.  *  * @param num The partition to return (<i>i</i>).  * @param numPartitions The number of partitions to split into (<i>n</i>).  * @return The iterator for the partition.  */ public Iterator<T> getSplit(int num, int numPartitions) {     if (numPartitions < 1 || num < 0 || num >= numPartitions) {         throw new IllegalArgumentException().     }     return split(numPartitions)[num]. }
true;public,abstract;0;1;/**  * The maximum number of splits into which this iterator can be split up.  *  * @return The maximum number of splits into which this iterator can be split up.  */ ;/**  * The maximum number of splits into which this iterator can be split up.  *  * @return The maximum number of splits into which this iterator can be split up.  */ public abstract int getMaximumNumberOfSplits().
