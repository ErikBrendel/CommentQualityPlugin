# id;timestamp;commentText;codeText;commentWords;codeWords
Preconditions -> public static void checkArgument(boolean condition);1460502654;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition);1460741894;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition);1462899491;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition);1465991918;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition);1474401809;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition);1516295284;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition) {_		if (!condition) {_			throw new IllegalArgumentException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,if,condition,throw,new,illegal,argument,exception
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1460502654;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {_		_		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1460741894;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {_		_		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1462899491;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {_		_		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1465991918;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {_		_		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1474401809;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {_		_		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkArgument(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1516295284;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalArgumentException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,argument,exception,format,error,message,template,error,message,args
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1460502654;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ _		_		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1460741894;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ _		_		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1462899491;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ _		_		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1465991918;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ _		_		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1474401809;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ _		_		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> private static String format(@Nullable String template, @Nullable Object... args);1516295284;A simplified formatting method. Similar to {@link String#format(String, Object...)}, but_with lower overhead (only String parameters, no locale, no format validation).__<p>This method is taken quasi verbatim from the Guava Preconditions class.;private static String format(@Nullable String template, @Nullable Object... args) {_		final int numArgs = args == null ? 0 : args.length__		template = String.valueOf(template)_ __		_		StringBuilder builder = new StringBuilder(template.length() + 16 * numArgs)__		int templateStart = 0__		int i = 0__		while (i < numArgs) {_			int placeholderStart = template.indexOf("%s", templateStart)__			if (placeholderStart == -1) {_				break__			}_			builder.append(template.substring(templateStart, placeholderStart))__			builder.append(args[i++])__			templateStart = placeholderStart + 2__		}_		builder.append(template.substring(templateStart))___		_		if (i < numArgs) {_			builder.append(" [")__			builder.append(args[i++])__			while (i < numArgs) {_				builder.append(", ")__				builder.append(args[i++])__			}_			builder.append(']')__		}__		return builder.toString()__	};a,simplified,formatting,method,similar,to,link,string,format,string,object,but,with,lower,overhead,only,string,parameters,no,locale,no,format,validation,p,this,method,is,taken,quasi,verbatim,from,the,guava,preconditions,class;private,static,string,format,nullable,string,template,nullable,object,args,final,int,num,args,args,null,0,args,length,template,string,value,of,template,string,builder,builder,new,string,builder,template,length,16,num,args,int,template,start,0,int,i,0,while,i,num,args,int,placeholder,start,template,index,of,s,template,start,if,placeholder,start,1,break,builder,append,template,substring,template,start,placeholder,start,builder,append,args,i,template,start,placeholder,start,2,builder,append,template,substring,template,start,if,i,num,args,builder,append,builder,append,args,i,while,i,num,args,builder,append,builder,append,args,i,builder,append,return,builder,to,string
Preconditions -> public static void checkElementIndex(int index, int size);1462899491;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,index,index,size,size
Preconditions -> public static void checkElementIndex(int index, int size);1465991918;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,index,index,size,size
Preconditions -> public static void checkElementIndex(int index, int size);1474401809;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,index,index,size,size
Preconditions -> public static void checkElementIndex(int index, int size);1516295284;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,index,index,size,size
Preconditions -> public static void checkState(boolean condition, @Nullable Object errorMessage);1460741894;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalStateException} that is thrown if the check fails.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalStateException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,state,exception,string,value,of,error,message
Preconditions -> public static void checkState(boolean condition, @Nullable Object errorMessage);1462899491;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalStateException} that is thrown if the check fails.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalStateException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,state,exception,string,value,of,error,message
Preconditions -> public static void checkState(boolean condition, @Nullable Object errorMessage);1465991918;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalStateException} that is thrown if the check fails.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalStateException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,state,exception,string,value,of,error,message
Preconditions -> public static void checkState(boolean condition, @Nullable Object errorMessage);1474401809;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalStateException} that is thrown if the check fails.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalStateException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,state,exception,string,value,of,error,message
Preconditions -> public static void checkState(boolean condition, @Nullable Object errorMessage);1516295284;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalStateException} that is thrown if the check fails.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalStateException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,state,exception,string,value,of,error,message
Preconditions -> public static void checkElementIndex(int index, int size, @Nullable String errorMessage);1465991918;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string_@param errorMessage The message for the {@code IndexOutOfBoundsException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size, @Nullable String errorMessage) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException(String.valueOf(errorMessage) + " Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,param,error,message,the,message,for,the,code,index,out,of,bounds,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,nullable,string,error,message,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,string,value,of,error,message,index,index,size,size
Preconditions -> public static void checkElementIndex(int index, int size, @Nullable String errorMessage);1474401809;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string_@param errorMessage The message for the {@code IndexOutOfBoundsException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size, @Nullable String errorMessage) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException(String.valueOf(errorMessage) + " Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,param,error,message,the,message,for,the,code,index,out,of,bounds,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,nullable,string,error,message,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,string,value,of,error,message,index,index,size,size
Preconditions -> public static void checkElementIndex(int index, int size, @Nullable String errorMessage);1516295284;Ensures that the given index is valid for an array, list or string of the given size.__@param index index to check_@param size size of the array, list or string_@param errorMessage The message for the {@code IndexOutOfBoundsException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if size is negative._@throws IndexOutOfBoundsException Thrown, if the index negative or greater than or equal to size;public static void checkElementIndex(int index, int size, @Nullable String errorMessage) {_		checkArgument(size >= 0, "Size was negative.")__		if (index < 0 || index >= size) {_			throw new IndexOutOfBoundsException(String.valueOf(errorMessage) + " Index: " + index + ", Size: " + size)__		}_	};ensures,that,the,given,index,is,valid,for,an,array,list,or,string,of,the,given,size,param,index,index,to,check,param,size,size,of,the,array,list,or,string,param,error,message,the,message,for,the,code,index,out,of,bounds,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,size,is,negative,throws,index,out,of,bounds,exception,thrown,if,the,index,negative,or,greater,than,or,equal,to,size;public,static,void,check,element,index,int,index,int,size,nullable,string,error,message,check,argument,size,0,size,was,negative,if,index,0,index,size,throw,new,index,out,of,bounds,exception,string,value,of,error,message,index,index,size,size
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1460502654;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1460741894;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1462899491;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1465991918;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1474401809;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> public static void checkArgument(boolean condition, @Nullable Object errorMessage);1516295284;Checks the given boolean condition, and throws an {@code IllegalArgumentException} if_the condition is not met (evaluates to {@code false}). The exception will have the_given error message.__@param condition The condition to check_@param errorMessage The message for the {@code IllegalArgumentException} that is thrown if the check fails.__@throws IllegalArgumentException Thrown, if the condition is violated.;public static void checkArgument(boolean condition, @Nullable Object errorMessage) {_		if (!condition) {_			throw new IllegalArgumentException(String.valueOf(errorMessage))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,argument,exception,if,the,condition,is,not,met,evaluates,to,code,false,the,exception,will,have,the,given,error,message,param,condition,the,condition,to,check,param,error,message,the,message,for,the,code,illegal,argument,exception,that,is,thrown,if,the,check,fails,throws,illegal,argument,exception,thrown,if,the,condition,is,violated;public,static,void,check,argument,boolean,condition,nullable,object,error,message,if,condition,throw,new,illegal,argument,exception,string,value,of,error,message
Preconditions -> private Preconditions();1460502654;Private constructor to prevent instantiation;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> private Preconditions();1460741894;Private constructor to prevent instantiation;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> private Preconditions();1462899491;Private constructor to prevent instantiation;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> private Preconditions();1465991918;Private constructor to prevent instantiation;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> private Preconditions();1474401809;Private constructor to prevent instantiation;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> private Preconditions();1516295284;Private constructor to prevent instantiation.;private Preconditions() {};private,constructor,to,prevent,instantiation;private,preconditions
Preconditions -> public static <T> T checkNotNull(T reference);1460502654;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference);1460741894;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference);1462899491;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference);1465991918;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference);1474401809;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference);1516295284;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with no message is thrown.__@param reference The object reference_@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference) {_		if (reference == null) {_			throw new NullPointerException()__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,no,message,is,thrown,param,reference,the,object,reference,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,if,reference,null,throw,new,null,pointer,exception,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1460502654;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1460741894;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1462899491;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1465991918;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1474401809;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, @Nullable String errorMessage);1516295284;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__@param reference The object reference_@param errorMessage The message for the {@code NullPointerException} that is thrown if the check fails._@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference, @Nullable String errorMessage) {_		if (reference == null) {_			throw new NullPointerException(String.valueOf(errorMessage))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,param,reference,the,object,reference,param,error,message,the,message,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,if,reference,null,throw,new,null,pointer,exception,string,value,of,error,message,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1460502654;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {_		_		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1460741894;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {_		_		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1462899491;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {_		_		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1465991918;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {_		_		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1474401809;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {_		_		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static <T> T checkNotNull(T reference, 				@Nullable String errorMessageTemplate, 				@Nullable Object... errorMessageArgs);1516295284;Ensures that the given object reference is not null._Upon violation, a {@code NullPointerException} with the given message is thrown.__<p>The error message is constructed from a template and an arguments array, after_a similar fashion as {@link String#format(String, Object...)}, but supporting only_{@code %s} as a placeholder.__@param reference The object reference_@param errorMessageTemplate The message template for the {@code NullPointerException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@return The object reference itself (generically typed).__@throws NullPointerException Thrown, if the passed reference was null.;public static <T> T checkNotNull(T reference,_				@Nullable String errorMessageTemplate,_				@Nullable Object... errorMessageArgs) {__		if (reference == null) {_			throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs))__		}_		return reference__	};ensures,that,the,given,object,reference,is,not,null,upon,violation,a,code,null,pointer,exception,with,the,given,message,is,thrown,p,the,error,message,is,constructed,from,a,template,and,an,arguments,array,after,a,similar,fashion,as,link,string,format,string,object,but,supporting,only,code,s,as,a,placeholder,param,reference,the,object,reference,param,error,message,template,the,message,template,for,the,code,null,pointer,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,return,the,object,reference,itself,generically,typed,throws,null,pointer,exception,thrown,if,the,passed,reference,was,null;public,static,t,t,check,not,null,t,reference,nullable,string,error,message,template,nullable,object,error,message,args,if,reference,null,throw,new,null,pointer,exception,format,error,message,template,error,message,args,return,reference
Preconditions -> public static void checkState(boolean condition);1460741894;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition) {_		if (!condition) {_			throw new IllegalStateException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,if,condition,throw,new,illegal,state,exception
Preconditions -> public static void checkState(boolean condition);1462899491;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition) {_		if (!condition) {_			throw new IllegalStateException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,if,condition,throw,new,illegal,state,exception
Preconditions -> public static void checkState(boolean condition);1465991918;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition) {_		if (!condition) {_			throw new IllegalStateException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,if,condition,throw,new,illegal,state,exception
Preconditions -> public static void checkState(boolean condition);1474401809;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition) {_		if (!condition) {_			throw new IllegalStateException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,if,condition,throw,new,illegal,state,exception
Preconditions -> public static void checkState(boolean condition);1516295284;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition) {_		if (!condition) {_			throw new IllegalStateException()__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,if,condition,throw,new,illegal,state,exception
Preconditions -> public static void checkState(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1460741894;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalStateException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,state,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkState(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1462899491;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalStateException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,state,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkState(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1465991918;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalStateException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,state,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkState(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1474401809;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalStateException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,state,exception,format,error,message,template,error,message,args
Preconditions -> public static void checkState(boolean condition, 			@Nullable String errorMessageTemplate, 			@Nullable Object... errorMessageArgs);1516295284;Checks the given boolean condition, and throws an {@code IllegalStateException} if_the condition is not met (evaluates to {@code false}).__@param condition The condition to check_@param errorMessageTemplate The message template for the {@code IllegalStateException}_that is thrown if the check fails. The template substitutes its_{@code %s} placeholders with the error message arguments._@param errorMessageArgs The arguments for the error message, to be inserted into the_message template for the {@code %s} placeholders.__@throws IllegalStateException Thrown, if the condition is violated.;public static void checkState(boolean condition,_			@Nullable String errorMessageTemplate,_			@Nullable Object... errorMessageArgs) {__		if (!condition) {_			throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs))__		}_	};checks,the,given,boolean,condition,and,throws,an,code,illegal,state,exception,if,the,condition,is,not,met,evaluates,to,code,false,param,condition,the,condition,to,check,param,error,message,template,the,message,template,for,the,code,illegal,state,exception,that,is,thrown,if,the,check,fails,the,template,substitutes,its,code,s,placeholders,with,the,error,message,arguments,param,error,message,args,the,arguments,for,the,error,message,to,be,inserted,into,the,message,template,for,the,code,s,placeholders,throws,illegal,state,exception,thrown,if,the,condition,is,violated;public,static,void,check,state,boolean,condition,nullable,string,error,message,template,nullable,object,error,message,args,if,condition,throw,new,illegal,state,exception,format,error,message,template,error,message,args
