commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     final long lSeconds = firstSource.readLong().     final long rSeconds = secondSource.readLong().     final int comp.     if (lSeconds == rSeconds) {         final int lNanos = firstSource.readInt().         final int rNanos = secondSource.readInt().         comp = (lNanos < rNanos ? -1 : (lNanos == rNanos ? 0 : 1)).     } else {         comp = lSeconds < rSeconds ? -1 : 1.     }     return ascendingComparison ? comp : -comp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return true. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return InstantSerializer.SECONDS_BYTES + InstantSerializer.NANOS_BYTES. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < getNormalizeKeyLen(). }
false;public;4;29;;@Override public void putNormalizedKey(Instant record, MemorySegment target, int offset, int numBytes) {     final int secondsBytes = InstantSerializer.SECONDS_BYTES.     final long normalizedSeconds = record.getEpochSecond() - SECONDS_MIN_VALUE.     if (numBytes >= secondsBytes) {         target.putLongBigEndian(offset, normalizedSeconds).         offset += secondsBytes.         numBytes -= secondsBytes.         final int nanosBytes = InstantSerializer.NANOS_BYTES.         if (numBytes >= nanosBytes) {             target.putIntBigEndian(offset, record.getNano()).             offset += nanosBytes.             numBytes -= nanosBytes.             for (int i = 0. i < numBytes. i++) {                 target.put(offset + i, (byte) 0).             }         } else {             final int nanos = record.getNano().             for (int i = 0. i < numBytes. i++) {                 target.put(offset + i, (byte) (nanos >>> ((3 - i) << 3))).             }         }     } else {         for (int i = 0. i < numBytes. i++) {             target.put(offset + i, (byte) (normalizedSeconds >>> ((7 - i) << 3))).         }     } }
false;public;0;4;;@Override public TypeComparator<Instant> duplicate() {     return new InstantComparator(ascendingComparison). }
