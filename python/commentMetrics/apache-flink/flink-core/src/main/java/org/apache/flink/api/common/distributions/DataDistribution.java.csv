commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Returns the i'th bucket's upper bound, given that the distribution is to be  * split into {@code totalBuckets} buckets.  * <p>  * Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},  * then the distribution will partition the data domain in the following fashion:  * <pre>  * (-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)  * </pre>  *  * <p>  * Note: The last bucket's upper bound is actually discarded by many algorithms.  * The last bucket is assumed to hold all values <i>v</i> such that  * {@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.  *  * @param bucketNum The number of the bucket for which to get the upper bound.  * @param totalNumBuckets The number of buckets to split the data into.  *  * @return A record whose values act as bucket boundaries for the specified bucket.  */ ;/**  * Returns the i'th bucket's upper bound, given that the distribution is to be  * split into {@code totalBuckets} buckets.  * <p>  * Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},  * then the distribution will partition the data domain in the following fashion:  * <pre>  * (-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)  * </pre>  *  * <p>  * Note: The last bucket's upper bound is actually discarded by many algorithms.  * The last bucket is assumed to hold all values <i>v</i> such that  * {@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.  *  * @param bucketNum The number of the bucket for which to get the upper bound.  * @param totalNumBuckets The number of buckets to split the data into.  *  * @return A record whose values act as bucket boundaries for the specified bucket.  */ Object[] getBucketBoundary(int bucketNum, int totalNumBuckets).
true;;0;1;/**  * The number of fields in the (composite) key. This determines how many fields in the records define  * the bucket. The number of fields must be the size of the array returned by the function  * {@link #getBucketBoundary(int, int)}.  *  * @return The number of fields in the (composite) key.  */ ;/**  * The number of fields in the (composite) key. This determines how many fields in the records define  * the bucket. The number of fields must be the size of the array returned by the function  * {@link #getBucketBoundary(int, int)}.  *  * @return The number of fields in the (composite) key.  */ int getNumberOfFields().
true;;0;1;/**  * Gets the type of the key by which the dataSet is partitioned.  * @return The type of the key by which the dataSet is partitioned.  */ ;/**  * Gets the type of the key by which the dataSet is partitioned.  * @return The type of the key by which the dataSet is partitioned.  */ TypeInformation[] getKeyTypes().
