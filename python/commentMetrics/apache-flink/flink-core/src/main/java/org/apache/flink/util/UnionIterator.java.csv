commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;// ------------------------------------------------------------------------ public void clear() {     currentIterator = null.     furtherIterators.clear().     nextIterator = 0.     iteratorAvailable = true. }
false;public;1;3;;public void addList(List<T> list) {     add(list.iterator()). }
false;public;1;8;;public void add(Iterator<T> iterator) {     if (currentIterator == null) {         currentIterator = iterator.     } else {         furtherIterators.add(iterator).     } }
false;public;0;9;;// ------------------------------------------------------------------------ @Override public Iterator<T> iterator() {     if (iteratorAvailable) {         iteratorAvailable = false.         return this.     } else {         throw new TraversableOnceException().     } }
false;public;0;17;;@Override public boolean hasNext() {     while (currentIterator != null) {         if (currentIterator.hasNext()) {             return true.         } else if (nextIterator < furtherIterators.size()) {             currentIterator = furtherIterators.get(nextIterator).             nextIterator++.         } else {             currentIterator = null.         }     }     return false. }
false;public;0;9;;@Override public T next() {     if (hasNext()) {         return currentIterator.next().     } else {         throw new NoSuchElementException().     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
