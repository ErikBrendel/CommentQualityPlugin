commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Gets the field at the specified position.  *  * @param pos The position of the field, zero indexed.  * @return The field at the specified position.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  */ ;/**  * Gets the field at the specified position.  *  * @param pos The position of the field, zero indexed.  * @return The field at the specified position.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  */ public abstract <T> T getField(int pos).
true;public;1;8;/**  * Gets the field at the specified position, throws NullFieldException if the field is null. Used for comparing key fields.  *  * @param pos The position of the field, zero indexed.  * @return The field at the specified position.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  * @throws NullFieldException Thrown, if the field at pos is null.  */ ;/**  * Gets the field at the specified position, throws NullFieldException if the field is null. Used for comparing key fields.  *  * @param pos The position of the field, zero indexed.  * @return The field at the specified position.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  * @throws NullFieldException Thrown, if the field at pos is null.  */ public <T> T getFieldNotNull(int pos) {     T field = getField(pos).     if (field != null) {         return field.     } else {         throw new NullFieldException(pos).     } }
true;public,abstract;2;1;/**  * Sets the field at the specified position.  *  * @param value The value to be assigned to the field at the specified position.  * @param pos The position of the field, zero indexed.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  */ ;/**  * Sets the field at the specified position.  *  * @param value The value to be assigned to the field at the specified position.  * @param pos The position of the field, zero indexed.  * @throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.  */ public abstract <T> void setField(T value, int pos).
true;public,abstract;0;1;/**  * Gets the number of field in the tuple (the tuple arity).  *  * @return The number of fields in the tuple.  */ ;/**  * Gets the number of field in the tuple (the tuple arity).  *  * @return The number of fields in the tuple.  */ public abstract int getArity().
true;public,abstract;0;1;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ ;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ public abstract <T extends Tuple> T copy().
true;public,static;1;7;/**  * Gets the class corresponding to the tuple of the given arity (dimensions). For  * example, {@code getTupleClass(3)} will return the {@code Tuple3.class}.  *  * @param arity The arity of the tuple class to get.  * @return The tuple class with the given arity.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the class corresponding to the tuple of the given arity (dimensions). For  * example, {@code getTupleClass(3)} will return the {@code Tuple3.class}.  *  * @param arity The arity of the tuple class to get.  * @return The tuple class with the given arity.  */ @SuppressWarnings("unchecked") public static Class<? extends Tuple> getTupleClass(int arity) {     if (arity < 0 || arity > MAX_ARITY) {         throw new IllegalArgumentException("The tuple arity must be in [0, " + MAX_ARITY + "].").     }     return (Class<? extends Tuple>) CLASSES[arity]. }
true;public,static;1;31;// GENERATED FROM org.apache.flink.api.java.tuple.TupleGenerator. ;// -------------------------------------------------------------------------------------------- // The following lines are generated. // -------------------------------------------------------------------------------------------- // BEGIN_OF_TUPLE_DEPENDENT_CODE // GENERATED FROM org.apache.flink.api.java.tuple.TupleGenerator. public static Tuple newInstance(int arity) {     switch(arity) {         case 0:             return Tuple0.INSTANCE.         case 1:             return new Tuple1().         case 2:             return new Tuple2().         case 3:             return new Tuple3().         case 4:             return new Tuple4().         case 5:             return new Tuple5().         case 6:             return new Tuple6().         case 7:             return new Tuple7().         case 8:             return new Tuple8().         case 9:             return new Tuple9().         case 10:             return new Tuple10().         case 11:             return new Tuple11().         case 12:             return new Tuple12().         case 13:             return new Tuple13().         case 14:             return new Tuple14().         case 15:             return new Tuple15().         case 16:             return new Tuple16().         case 17:             return new Tuple17().         case 18:             return new Tuple18().         case 19:             return new Tuple19().         case 20:             return new Tuple20().         case 21:             return new Tuple21().         case 22:             return new Tuple22().         case 23:             return new Tuple23().         case 24:             return new Tuple24().         case 25:             return new Tuple25().         default:             throw new IllegalArgumentException("The tuple arity must be in [0, " + MAX_ARITY + "].").     } }
