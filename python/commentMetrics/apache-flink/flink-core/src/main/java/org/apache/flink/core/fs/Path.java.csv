# id;timestamp;commentText;codeText;commentWords;codeWords
Path -> public Path(String scheme, String authority, String path);1405024514;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1405090423;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1408366366;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1411473593;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1416482279;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1418636270;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1420538822;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		checkPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,check,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1425574594;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1428330445;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1428410755;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1428410775;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1432679948;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1452178883;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1472134098;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1483634119;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1511520068;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1515177487;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> public Path(String scheme, String authority, String path);1515177487;Construct a Path from a scheme, an authority and a path string.__@param scheme_the scheme string_@param authority_the authority string_@param path_the path string;public Path(String scheme, String authority, String path) {_		path = checkAndTrimPathArg(path)__		initialize(scheme, authority, path)__	};construct,a,path,from,a,scheme,an,authority,and,a,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;public,path,string,scheme,string,authority,string,path,path,check,and,trim,path,arg,path,initialize,scheme,authority,path
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1405024514;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (slashed ? path.charAt(0) == '/' : true)_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,true,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1405090423;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (slashed ? path.charAt(0) == '/' : true)_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,true,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1408366366;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (slashed ? path.charAt(0) == '/' : true)_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,true,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1411473593;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (slashed ? path.charAt(0) == '/' : true)_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,true,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1416482279;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1418636270;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1420538822;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1425574594;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1428330445;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		if (!OperatingSystem.isWindows()) {_			return false__		}_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,if,operating,system,is,windows,return,false,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1428410755;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1428410775;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1432679948;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1452178883;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1472134098;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_<code>true</code> to indicate the first character of the string is a slash, <code>false</code> otherwise_@return <code>true</code> if the path string contains a windows drive letter, <code>false</code> otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_			&& (!slashed || path.charAt(0) == '/')_			&& path.charAt(start + 1) == ':'_			&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,code,true,code,to,indicate,the,first,character,of,the,string,is,a,slash,code,false,code,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,code,false,code,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1483634119;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_true to indicate the first character of the string is a slash, false otherwise__@return <code>true</code> if the path string contains a windows drive letter, false otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_				&& (!slashed || path.charAt(0) == '/')_				&& path.charAt(start + 1) == ':'_				&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,true,to,indicate,the,first,character,of,the,string,is,a,slash,false,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1511520068;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_true to indicate the first character of the string is a slash, false otherwise__@return <code>true</code> if the path string contains a windows drive letter, false otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_				&& (!slashed || path.charAt(0) == '/')_				&& path.charAt(start + 1) == ':'_				&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,true,to,indicate,the,first,character,of,the,string,is,a,slash,false,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1515177487;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_true to indicate the first character of the string is a slash, false otherwise__@return <code>true</code> if the path string contains a windows drive letter, false otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_				&& (!slashed || path.charAt(0) == '/')_				&& path.charAt(start + 1) == ':'_				&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,true,to,indicate,the,first,character,of,the,string,is,a,slash,false,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private boolean hasWindowsDrive(String path, boolean slashed);1515177487;Checks if the provided path string contains a windows drive letter.__@param path_the path to check_@param slashed_true to indicate the first character of the string is a slash, false otherwise__@return <code>true</code> if the path string contains a windows drive letter, false otherwise;private boolean hasWindowsDrive(String path, boolean slashed) {_		final int start = slashed ? 1 : 0__		return path.length() >= start + 2_				&& (!slashed || path.charAt(0) == '/')_				&& path.charAt(start + 1) == ':'_				&& ((path.charAt(start) >= 'A' && path.charAt(start) <= 'Z') || (path.charAt(start) >= 'a' && path_				.charAt(start) <= 'z'))__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,param,path,the,path,to,check,param,slashed,true,to,indicate,the,first,character,of,the,string,is,a,slash,false,otherwise,return,code,true,code,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;private,boolean,has,windows,drive,string,path,boolean,slashed,final,int,start,slashed,1,0,return,path,length,start,2,slashed,path,char,at,0,path,char,at,start,1,path,char,at,start,a,path,char,at,start,z,path,char,at,start,a,path,char,at,start,z
Path -> private String checkAndTrimPathArg(String path);1425574594;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1428330445;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1428410755;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1428410775;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1432679948;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1452178883;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1472134098;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1483634119;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1511520068;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1515177487;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> private String checkAndTrimPathArg(String path);1515177487;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply._In addition, leading and tailing whitespaces are removed.__@param path_the path string to be checked_@return The checked and trimmed path.;private String checkAndTrimPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		path = path.trim()__		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_		return path__	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,in,addition,leading,and,tailing,whitespaces,are,removed,param,path,the,path,string,to,be,checked,return,the,checked,and,trimmed,path;private,string,check,and,trim,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,path,path,trim,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string,return,path
Path -> public URI toUri();1405024514;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1405090423;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1408366366;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1411473593;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1416482279;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1418636270;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1420538822;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1425574594;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1428330445;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1428410755;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1428410775;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1432679948;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1452178883;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1472134098;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1483634119;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1511520068;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1515177487;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public URI toUri();1515177487;Converts the path object to a {@link URI}.__@return the {@link URI} object converted from the path object;public URI toUri() {_		return uri__	};converts,the,path,object,to,a,link,uri,return,the,link,uri,object,converted,from,the,path,object;public,uri,to,uri,return,uri
Path -> public String getPath();1472134098;Return full path._@return full path;public String getPath() {_		return uri.getPath()__	};return,full,path,return,full,path;public,string,get,path,return,uri,get,path
Path -> public String getPath();1483634119;Return full path._@return full path;public String getPath() {_		return uri.getPath()__	};return,full,path,return,full,path;public,string,get,path,return,uri,get,path
Path -> public String getPath();1511520068;Return full path._@return full path;public String getPath() {_		return uri.getPath()__	};return,full,path,return,full,path;public,string,get,path,return,uri,get,path
Path -> public String getPath();1515177487;Return full path._@return full path;public String getPath() {_		return uri.getPath()__	};return,full,path,return,full,path;public,string,get,path,return,uri,get,path
Path -> public String getPath();1515177487;Return full path._@return full path;public String getPath() {_		return uri.getPath()__	};return,full,path,return,full,path;public,string,get,path,return,uri,get,path
Path -> public Path(Path parent, String child);1405024514;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1405090423;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1408366366;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1411473593;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1416482279;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1418636270;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1420538822;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1425574594;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1428330445;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1428410755;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1428410775;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1432679948;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1452178883;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1472134098;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1483634119;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1511520068;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(Path parent, String child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, String child) {_		this(parent, new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,string,child,this,parent,new,path,child
Path -> public Path(URI uri);1405024514;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1405090423;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1408366366;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1411473593;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1416482279;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1418636270;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1420538822;Constructs a path object from a given URI.__@param uri_the URI to contruct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,contruct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1425574594;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1428330445;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1428410755;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1428410775;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1432679948;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1452178883;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1472134098;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1483634119;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1511520068;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1515177487;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(URI uri);1515177487;Constructs a path object from a given URI.__@param uri_the URI to construct the path object from;public Path(URI uri) {_		this.uri = uri__	};constructs,a,path,object,from,a,given,uri,param,uri,the,uri,to,construct,the,path,object,from;public,path,uri,uri,this,uri,uri
Path -> public Path(String pathString);1405024514;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1405090423;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1408366366;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1411473593;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1416482279;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1418636270;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1420538822;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		checkPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,check,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1425574594;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1428330445;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1428410755;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1428410775;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1432679948;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1452178883;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1472134098;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1483634119;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1511520068;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1515177487;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String pathString);1515177487;Construct a path from a String. Path strings are URIs, but with unescaped_elements and some additional normalization.__@param pathString_the string to construct a path from;public Path(String pathString) {_		pathString = checkAndTrimPathArg(pathString)___		_		__		_		if (hasWindowsDrive(pathString, false)) {_			pathString = "/" + pathString__		}__		_		String scheme = null__		String authority = null___		int start = 0___		_		final int colon = pathString.indexOf(':')__		final int slash = pathString.indexOf('/')__		if ((colon != -1) && ((slash == -1) || (colon < slash))) { _			_			scheme = pathString.substring(0, colon)__			start = colon + 1__		}__		_		if (pathString.startsWith("//", start) && (pathString.length() - start > 2)) { _			final int nextSlash = pathString.indexOf('/', start + 2)__			final int authEnd = nextSlash > 0 ? nextSlash : pathString.length()__			authority = pathString.substring(start + 2, authEnd)__			start = authEnd__		}__		_		final String path = pathString.substring(start, pathString.length())___		initialize(scheme, authority, path)__	};construct,a,path,from,a,string,path,strings,are,uris,but,with,unescaped,elements,and,some,additional,normalization,param,path,string,the,string,to,construct,a,path,from;public,path,string,path,string,path,string,check,and,trim,path,arg,path,string,if,has,windows,drive,path,string,false,path,string,path,string,string,scheme,null,string,authority,null,int,start,0,final,int,colon,path,string,index,of,final,int,slash,path,string,index,of,if,colon,1,slash,1,colon,slash,scheme,path,string,substring,0,colon,start,colon,1,if,path,string,starts,with,start,path,string,length,start,2,final,int,next,slash,path,string,index,of,start,2,final,int,auth,end,next,slash,0,next,slash,path,string,length,authority,path,string,substring,start,2,auth,end,start,auth,end,final,string,path,path,string,substring,start,path,string,length,initialize,scheme,authority,path
Path -> public Path(String parent, String child);1405024514;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1405090423;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1408366366;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1411473593;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1416482279;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1418636270;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1420538822;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1425574594;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1428330445;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1428410755;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1428410775;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1432679948;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1452178883;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1472134098;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1483634119;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1511520068;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path(String parent, String child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, String child) {_		this(new Path(parent), new Path(child))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,string,child,this,new,path,parent,new,path,child
Path -> public Path();1405024514;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1405090423;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1408366366;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1411473593;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1416482279;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1418636270;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1420538822;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1425574594;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1428330445;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1428410755;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1428410775;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1432679948;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1452178883;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1472134098;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1483634119;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1511520068;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1515177487;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public Path();1515177487;Constructs a new (empty) path object (used to reconstruct path object after RPC call).;public Path() {};constructs,a,new,empty,path,object,used,to,reconstruct,path,object,after,rpc,call;public,path
Path -> public FileSystem getFileSystem() throws IOException;1405024514;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1405090423;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1408366366;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1411473593;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1416482279;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1418636270;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1420538822;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1425574594;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1428330445;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1428410755;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1428410775;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1432679948;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1452178883;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1472134098;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1483634119;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1511520068;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1515177487;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public FileSystem getFileSystem() throws IOException;1515177487;Returns the FileSystem that owns this Path.__@return the FileSystem that owns this Path_@throws IOException_thrown if the file system could not be retrieved;public FileSystem getFileSystem() throws IOException {_		return FileSystem.get(this.toUri())__	};returns,the,file,system,that,owns,this,path,return,the,file,system,that,owns,this,path,throws,ioexception,thrown,if,the,file,system,could,not,be,retrieved;public,file,system,get,file,system,throws,ioexception,return,file,system,get,this,to,uri
Path -> public Path getParent();1405024514;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1405090423;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1408366366;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1411473593;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1416482279;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1418636270;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1420538822;Returns the parent of a path or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1425574594;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1428330445;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1428410755;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1428410775;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1432679948;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1452178883;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1472134098;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1483634119;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1511520068;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1515177487;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path getParent();1515177487;Returns the parent of a path, i.e., everything that precedes the last separator_or <code>null</code> if at root.__@return the parent of a path or <code>null</code> if at root.;public Path getParent() {_		final String path = uri.getPath()__		final int lastSlash = path.lastIndexOf('/')__		final int start = hasWindowsDrive(path, true) ? 3 : 0__		if ((path.length() == start) || _			(lastSlash == start && path.length() == start + 1)) { _			return null__		}_		String parent__		if (lastSlash == -1) {_			parent = CUR_DIR__		} else {_			final int end = hasWindowsDrive(path, true) ? 3 : 0__			parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash)__		}_		return new Path(uri.getScheme(), uri.getAuthority(), parent)__	};returns,the,parent,of,a,path,i,e,everything,that,precedes,the,last,separator,or,code,null,code,if,at,root,return,the,parent,of,a,path,or,code,null,code,if,at,root;public,path,get,parent,final,string,path,uri,get,path,final,int,last,slash,path,last,index,of,final,int,start,has,windows,drive,path,true,3,0,if,path,length,start,last,slash,start,path,length,start,1,return,null,string,parent,if,last,slash,1,parent,else,final,int,end,has,windows,drive,path,true,3,0,parent,path,substring,0,last,slash,end,end,1,last,slash,return,new,path,uri,get,scheme,uri,get,authority,parent
Path -> public Path(String parent, Path child);1405024514;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1405090423;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1408366366;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1411473593;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1416482279;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1418636270;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1420538822;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1425574594;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1428330445;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1428410755;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1428410775;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1432679948;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1452178883;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1472134098;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1483634119;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1511520068;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path(String parent, Path child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(String parent, Path child) {_		this(new Path(parent), child)__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,string,parent,path,child,this,new,path,parent,child
Path -> public Path suffix(String suffix);1405024514;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1405090423;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1408366366;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1411473593;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1416482279;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1418636270;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1420538822;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1425574594;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1428330445;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1428410755;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1428410775;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1432679948;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1452178883;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1472134098;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1483634119;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1511520068;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1515177487;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path suffix(String suffix);1515177487;Adds a suffix to the final name in the path.__@param suffix The suffix to be added_@return the new path including the suffix;public Path suffix(String suffix) {_		return new Path(getParent(), getName() + suffix)__	};adds,a,suffix,to,the,final,name,in,the,path,param,suffix,the,suffix,to,be,added,return,the,new,path,including,the,suffix;public,path,suffix,string,suffix,return,new,path,get,parent,get,name,suffix
Path -> public Path makeQualified(FileSystem fs);1405024514;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1405090423;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1408366366;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1411473593;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1416482279;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1418636270;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1420538822;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1425574594;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1428330445;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1428410755;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1428410775;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1432679948;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1452178883;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1472134098;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1483634119;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1511520068;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1515177487;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public Path makeQualified(FileSystem fs);1515177487;Returns a qualified path object.__@param fs_the FileSystem that should be used to obtain the current working directory_@return the qualified path object;public Path makeQualified(FileSystem fs) {_		Path path = this__		if (!isAbsolute()) {_			path = new Path(fs.getWorkingDirectory(), this)__		}__		final URI pathUri = path.toUri()__		final URI fsUri = fs.getUri()___		String scheme = pathUri.getScheme()__		String authority = pathUri.getAuthority()___		if (scheme != null && (authority != null || fsUri.getAuthority() == null)) {_			return path__		}__		if (scheme == null) {_			scheme = fsUri.getScheme()__		}__		if (authority == null) {_			authority = fsUri.getAuthority()__			if (authority == null) {_				authority = ""__			}_		}__		return new Path(scheme + ":" + "//" + authority + pathUri.getPath())__	};returns,a,qualified,path,object,param,fs,the,file,system,that,should,be,used,to,obtain,the,current,working,directory,return,the,qualified,path,object;public,path,make,qualified,file,system,fs,path,path,this,if,is,absolute,path,new,path,fs,get,working,directory,this,final,uri,path,uri,path,to,uri,final,uri,fs,uri,fs,get,uri,string,scheme,path,uri,get,scheme,string,authority,path,uri,get,authority,if,scheme,null,authority,null,fs,uri,get,authority,null,return,path,if,scheme,null,scheme,fs,uri,get,scheme,if,authority,null,authority,fs,uri,get,authority,if,authority,null,authority,return,new,path,scheme,authority,path,uri,get,path
Path -> public boolean hasWindowsDrive();1483634119;Checks if the provided path string contains a windows drive letter.__@return True, if the path string contains a windows drive letter, false otherwise.;public boolean hasWindowsDrive() {_		return hasWindowsDrive(uri.getPath(), true)__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,return,true,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;public,boolean,has,windows,drive,return,has,windows,drive,uri,get,path,true
Path -> public boolean hasWindowsDrive();1511520068;Checks if the provided path string contains a windows drive letter.__@return True, if the path string contains a windows drive letter, false otherwise.;public boolean hasWindowsDrive() {_		return hasWindowsDrive(uri.getPath(), true)__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,return,true,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;public,boolean,has,windows,drive,return,has,windows,drive,uri,get,path,true
Path -> public boolean hasWindowsDrive();1515177487;Checks if the provided path string contains a windows drive letter.__@return True, if the path string contains a windows drive letter, false otherwise.;public boolean hasWindowsDrive() {_		return hasWindowsDrive(uri.getPath(), true)__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,return,true,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;public,boolean,has,windows,drive,return,has,windows,drive,uri,get,path,true
Path -> public boolean hasWindowsDrive();1515177487;Checks if the provided path string contains a windows drive letter.__@return True, if the path string contains a windows drive letter, false otherwise.;public boolean hasWindowsDrive() {_		return hasWindowsDrive(uri.getPath(), true)__	};checks,if,the,provided,path,string,contains,a,windows,drive,letter,return,true,if,the,path,string,contains,a,windows,drive,letter,false,otherwise;public,boolean,has,windows,drive,return,has,windows,drive,uri,get,path,true
Path -> private void initialize(String scheme, String authority, String path);1405024514;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1405090423;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1408366366;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1411473593;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1416482279;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1418636270;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1420538822;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1425574594;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1428330445;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1428410755;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1428410775;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1432679948;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1452178883;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1472134098;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1483634119;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1511520068;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1515177487;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> private void initialize(String scheme, String authority, String path);1515177487;Initializes a path object given the scheme, authority and path string.__@param scheme_the scheme string._@param authority_the authority string._@param path_the path string.;private void initialize(String scheme, String authority, String path) {_		try {_			this.uri = new URI(scheme, authority, normalizePath(path), null, null).normalize()__		} catch (URISyntaxException e) {_			throw new IllegalArgumentException(e)__		}_	};initializes,a,path,object,given,the,scheme,authority,and,path,string,param,scheme,the,scheme,string,param,authority,the,authority,string,param,path,the,path,string;private,void,initialize,string,scheme,string,authority,string,path,try,this,uri,new,uri,scheme,authority,normalize,path,path,null,null,normalize,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e
Path -> public boolean isAbsolute();1405024514;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1405090423;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1408366366;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1411473593;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1416482279;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1418636270;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1420538822;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1425574594;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1428330445;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1428410755;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		if (uri.getPath().length() > start) {_			return uri.getPath().startsWith(SEPARATOR, start)__		}_		return true__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,if,uri,get,path,length,start,return,uri,get,path,starts,with,separator,start,return,true
Path -> public boolean isAbsolute();1428410775;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1432679948;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1452178883;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1472134098;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1483634119;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1511520068;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1515177487;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> public boolean isAbsolute();1515177487;Checks if the directory of this path is absolute.__@return <code>true</code> if the directory of this path is absolute, <code>false</code> otherwise;public boolean isAbsolute() {_		final int start = hasWindowsDrive(uri.getPath(), true) ? 3 : 0__		return uri.getPath().startsWith(SEPARATOR, start)__	};checks,if,the,directory,of,this,path,is,absolute,return,code,true,code,if,the,directory,of,this,path,is,absolute,code,false,code,otherwise;public,boolean,is,absolute,final,int,start,has,windows,drive,uri,get,path,true,3,0,return,uri,get,path,starts,with,separator,start
Path -> private String normalizePath(String path);1405024514;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1405090423;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1408366366;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1411473593;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1416482279;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1418636270;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1420538822;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {_		_		path = path.replace("//", "/")__		path = path.replace("\\", "/")___		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,replace,path,path,replace,return,path
Path -> private String normalizePath(String path);1425574594;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) && path.endsWith(SEPARATOR)) {_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1428330445;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) && path.endsWith(SEPARATOR)) {_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1428410755;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) && path.endsWith(SEPARATOR)) {_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1428410775;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) && path.endsWith(SEPARATOR)) {_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1432679948;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) &&         		_				!path.matches("/\\p{Alpha}+:/") &&  _				path.endsWith(SEPARATOR))_		{_			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,matches,p,alpha,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1452178883;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) &&         		_				!path.matches("/\\p{Alpha}+:/") &&  _				path.endsWith(SEPARATOR))_		{_			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,matches,p,alpha,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1472134098;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) &&         		_				!path.matches("/\\p{Alpha}+:/") &&  _				path.endsWith(SEPARATOR))_		{_			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,matches,p,alpha,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1483634119;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if(!path.equals(SEPARATOR) &&         		_				!path.matches("/\\p{Alpha}+:/") &&  _				path.endsWith(SEPARATOR))_		{_			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,matches,p,alpha,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1511520068;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if (!path.equals(SEPARATOR) &&              _				!path.matches("/\\p{Alpha}+:/") &&  _				path.endsWith(SEPARATOR)) {__			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,equals,separator,path,matches,p,alpha,path,ends,with,separator,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1515177487;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if (path.endsWith(SEPARATOR) &&_				!path.equals(SEPARATOR) &&              _				!WINDOWS_ROOT_DIR_REGEX.matcher(path).matches()) {  __			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,ends,with,separator,path,equals,separator,matcher,path,matches,path,path,substring,0,path,length,separator,length,return,path
Path -> private String normalizePath(String path);1515177487;Normalizes a path string.__@param path_the path string to normalize_@return the normalized path string;private String normalizePath(String path) {__		_		path = path.trim()___		_		path = path.replace("\\", "/")__		path = path.replaceAll("/+", "/")___		_		if (path.endsWith(SEPARATOR) &&_				!path.equals(SEPARATOR) &&              _				!WINDOWS_ROOT_DIR_REGEX.matcher(path).matches()) {  __			_			path = path.substring(0, path.length() - SEPARATOR.length())__		}__		return path__	};normalizes,a,path,string,param,path,the,path,string,to,normalize,return,the,normalized,path,string;private,string,normalize,path,string,path,path,path,trim,path,path,replace,path,path,replace,all,if,path,ends,with,separator,path,equals,separator,matcher,path,matches,path,path,substring,0,path,length,separator,length,return,path
Path -> public int depth();1405024514;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1405090423;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1408366366;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1411473593;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1416482279;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1418636270;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1420538822;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1425574594;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1428330445;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1428410755;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1428410775;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1432679948;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1452178883;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1472134098;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1483634119;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1511520068;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1515177487;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public int depth();1515177487;Returns the number of elements in this path.__@return the number of elements in this path;public int depth() {_		String path = uri.getPath()__		int depth = 0__		int slash = path.length() == 1 && path.charAt(0) == '/' ? -1 : 0__		while (slash != -1) {_			depth++__			slash = path.indexOf(SEPARATOR, slash + 1)__		}_		return depth__	};returns,the,number,of,elements,in,this,path,return,the,number,of,elements,in,this,path;public,int,depth,string,path,uri,get,path,int,depth,0,int,slash,path,length,1,path,char,at,0,1,0,while,slash,1,depth,slash,path,index,of,separator,slash,1,return,depth
Path -> public Path(Path parent, Path child);1405024514;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1405090423;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1408366366;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1411473593;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1416482279;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1418636270;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1420538822;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1425574594;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1428330445;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1428410755;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1428410775;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1432679948;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1452178883;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1472134098;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1483634119;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1511520068;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> public Path(Path parent, Path child);1515177487;Resolve a child path against a parent path.__@param parent_the parent path_@param child_the child path;public Path(Path parent, Path child) {_		_		URI parentUri = parent.uri__		final String parentPath = parentUri.getPath()__		if (!(parentPath.equals("/") || parentPath.equals(""))) {_			try {_				parentUri = new URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + "/", null,_					null)__			} catch (URISyntaxException e) {_				throw new IllegalArgumentException(e)__			}_		}__		if (child.uri.getPath().startsWith(Path.SEPARATOR)) {_			child = new Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1))__		}__		final URI resolved = parentUri.resolve(child.uri)__		initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()))__	};resolve,a,child,path,against,a,parent,path,param,parent,the,parent,path,param,child,the,child,path;public,path,path,parent,path,child,uri,parent,uri,parent,uri,final,string,parent,path,parent,uri,get,path,if,parent,path,equals,parent,path,equals,try,parent,uri,new,uri,parent,uri,get,scheme,parent,uri,get,authority,parent,uri,get,path,null,null,catch,urisyntax,exception,e,throw,new,illegal,argument,exception,e,if,child,uri,get,path,starts,with,path,separator,child,new,path,child,uri,get,scheme,child,uri,get,authority,child,uri,get,path,substring,1,final,uri,resolved,parent,uri,resolve,child,uri,initialize,resolved,get,scheme,resolved,get,authority,normalize,path,resolved,get,path
Path -> private void checkPathArg(String path);1405024514;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1405090423;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1408366366;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1411473593;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1416482279;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1418636270;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> private void checkPathArg(String path);1420538822;Checks if the provided path string is either null or has zero length and throws_a {@link IllegalArgumentException} if any of the two conditions apply.__@param path_the path string to be checked;private void checkPathArg(String path) {_		_		if (path == null) {_			throw new IllegalArgumentException("Can not create a Path from a null string")__		}_		if (path.length() == 0) {_			throw new IllegalArgumentException("Can not create a Path from an empty string")__		}_	};checks,if,the,provided,path,string,is,either,null,or,has,zero,length,and,throws,a,link,illegal,argument,exception,if,any,of,the,two,conditions,apply,param,path,the,path,string,to,be,checked;private,void,check,path,arg,string,path,if,path,null,throw,new,illegal,argument,exception,can,not,create,a,path,from,a,null,string,if,path,length,0,throw,new,illegal,argument,exception,can,not,create,a,path,from,an,empty,string
Path -> public String getName();1405024514;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1405090423;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1408366366;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1411473593;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1416482279;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1418636270;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		if (path.endsWith(SEPARATOR)) {_			final int slash = path.lastIndexOf(SEPARATOR, path.length() - SEPARATOR.length() - 1)__			return path.substring(slash + 1, path.length() - SEPARATOR.length())__		} else {_			final int slash = path.lastIndexOf(SEPARATOR)__			return path.substring(slash + 1)__		}_	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,if,path,ends,with,separator,final,int,slash,path,last,index,of,separator,path,length,separator,length,1,return,path,substring,slash,1,path,length,separator,length,else,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1420538822;Returns the final component of this path.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		if (path.endsWith(SEPARATOR)) {_			final int slash = path.lastIndexOf(SEPARATOR, path.length() - SEPARATOR.length() - 1)__			return path.substring(slash + 1, path.length() - SEPARATOR.length())__		} else {_			final int slash = path.lastIndexOf(SEPARATOR)__			return path.substring(slash + 1)__		}_	};returns,the,final,component,of,this,path,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,if,path,ends,with,separator,final,int,slash,path,last,index,of,separator,path,length,separator,length,1,return,path,substring,slash,1,path,length,separator,length,else,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1425574594;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1428330445;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1428410755;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1428410775;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1432679948;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1452178883;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1472134098;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1483634119;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1511520068;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1515177487;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
Path -> public String getName();1515177487;Returns the final component of this path, i.e., everything that follows the last separator.__@return the final component of the path;public String getName() {_		final String path = uri.getPath()__		final int slash = path.lastIndexOf(SEPARATOR)__		return path.substring(slash + 1)__	};returns,the,final,component,of,this,path,i,e,everything,that,follows,the,last,separator,return,the,final,component,of,the,path;public,string,get,name,final,string,path,uri,get,path,final,int,slash,path,last,index,of,separator,return,path,substring,slash,1
