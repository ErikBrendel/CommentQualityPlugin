# id;timestamp;commentText;codeText;commentWords;codeWords
FileInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1405024514;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit split) throws IOException {_		_		if (!(split instanceof FileInputSplit)) {_			throw new IllegalArgumentException("File Input Formats can only be used with FileInputSplits.")__		}_		_		final FileInputSplit fileSplit = (FileInputSplit) split__		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,split,throws,ioexception,if,split,instanceof,file,input,split,throw,new,illegal,argument,exception,file,input,formats,can,only,be,used,with,file,input,splits,final,file,input,split,file,split,file,input,split,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1405090423;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit split) throws IOException {_		_		if (!(split instanceof FileInputSplit)) {_			throw new IllegalArgumentException("File Input Formats can only be used with FileInputSplits.")__		}_		_		final FileInputSplit fileSplit = (FileInputSplit) split__		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,split,throws,ioexception,if,split,instanceof,file,input,split,throw,new,illegal,argument,exception,file,input,formats,can,only,be,used,with,file,input,splits,final,file,input,split,file,split,file,input,split,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1409911022;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit split) throws IOException {_		_		if (!(split instanceof FileInputSplit)) {_			throw new IllegalArgumentException("File Input Formats can only be used with FileInputSplits.")__		}_		_		final FileInputSplit fileSplit = (FileInputSplit) split__		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,split,throws,ioexception,if,split,instanceof,file,input,split,throw,new,illegal,argument,exception,file,input,formats,can,only,be,used,with,file,input,splits,final,file,input,split,file,split,file,input,split,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1411236168;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit split) throws IOException {_		_		if (!(split instanceof FileInputSplit)) {_			throw new IllegalArgumentException("File Input Formats can only be used with FileInputSplits.")__		}_		_		final FileInputSplit fileSplit = (FileInputSplit) split__		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,split,throws,ioexception,if,split,instanceof,file,input,split,throw,new,illegal,argument,exception,file,input,formats,can,only,be,used,with,file,input,splits,final,file,input,split,file,split,file,input,split,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1411473593;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit split) throws IOException {_		_		if (!(split instanceof FileInputSplit)) {_			throw new IllegalArgumentException("File Input Formats can only be used with FileInputSplits.")__		}_		_		final FileInputSplit fileSplit = (FileInputSplit) split__		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,split,throws,ioexception,if,split,instanceof,file,input,split,throw,new,illegal,argument,exception,file,input,formats,can,only,be,used,with,file,input,splits,final,file,input,split,file,split,file,input,split,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1405024514;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1405090423;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1409911022;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1411236168;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1411473593;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1411724090;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1412346153;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1414786554;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1418636270;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1418636270;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1422823634;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1423747257;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1431981454;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1432128952;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1432652854;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1432654748;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1432722957;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1433170803;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1433713723;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1433753025;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1436793281;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1439469746;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1448901852;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1452178883;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1460741894;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1469030375;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1469630409;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1472134098;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1475688973;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1484866639;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1485529393;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1499314317;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1511814440;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1515177485;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1518772855;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1518772855;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public float getAverageRecordWidth();1550483152;Gets the estimated average number of bytes per record.__@return The average number of bytes per record._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getAverageRecordWidth();@Override_		public float getAverageRecordWidth() {_			return this.avgBytesPerRecord__		};gets,the,estimated,average,number,of,bytes,per,record,return,the,average,number,of,bytes,per,record,see,org,apache,flink,api,common,io,statistics,base,statistics,get,average,record,width;override,public,float,get,average,record,width,return,this,avg,bytes,per,record
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1405024514;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1405090423;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1409911022;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1411236168;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1411473593;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1411724090;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private final void abortWait();1412346153;Double checked procedure setting the abort flag and closing the stream.;private final void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,final,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1405024514;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1405090423;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1409911022;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1411236168;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1411473593;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1411724090;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1412346153;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1414786554;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1418636270;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1418636270;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1422823634;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1423747257;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1431981454;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1432128952;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1432652854;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1432654748;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1432722957;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1433170803;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1433713723;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1433753025;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1436793281;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1439469746;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1448901852;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1452178883;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1460741894;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1469030375;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1469630409;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1472134098;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1475688973;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1484866639;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1485529393;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1499314317;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1511814440;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1515177485;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1518772855;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1518772855;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord);1550483152;Creates a new statistics object.__@param fileModTime_The timestamp of the latest modification of any of the involved files._@param fileSize_The size of the file, in bytes. <code>-1</code>, if unknown._@param avgBytesPerRecord_The average number of byte in a record, or <code>-1.0f</code>, if unknown.;public FileBaseStatistics(long fileModTime, long fileSize, float avgBytesPerRecord) {_			this.fileModTime = fileModTime__			this.fileSize = fileSize__			this.avgBytesPerRecord = avgBytesPerRecord__		};creates,a,new,statistics,object,param,file,mod,time,the,timestamp,of,the,latest,modification,of,any,of,the,involved,files,param,file,size,the,size,of,the,file,in,bytes,code,1,code,if,unknown,param,avg,bytes,per,record,the,average,number,of,byte,in,a,record,or,code,1,0f,code,if,unknown;public,file,base,statistics,long,file,mod,time,long,file,size,float,avg,bytes,per,record,this,file,mod,time,file,mod,time,this,file,size,file,size,this,avg,bytes,per,record,avg,bytes,per,record
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1405024514;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1405090423;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1409911022;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1411236168;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1411473593;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1411724090;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1412346153;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1414786554;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1418636270;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problen,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1418636270;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1422823634;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1423747257;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1431981454;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1432128952;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1432652854;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1432654748;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1432722957;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1433170803;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1433713723;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1433753025;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1436793281;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1439469746;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1448901852;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1452178883;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1460741894;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1469030375;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1469630409;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1472134098;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1475688973;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1484866639;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1485529393;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1499314317;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics) ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1511814440;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = cachedStats instanceof FileBaseStatistics ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1515177485;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = cachedStats instanceof FileBaseStatistics ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			final Path path = this.filePath__			final FileSystem fs = FileSystem.get(path.toUri())__			_			return getFileStats(cachedFileStats, path, fs, new ArrayList<FileStatus>(1))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for file '" + this.filePath + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,final,path,path,this,file,path,final,file,system,fs,file,system,get,path,to,uri,return,get,file,stats,cached,file,stats,path,fs,new,array,list,file,status,1,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,file,this,file,path,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,file,this,file,path,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1518772855;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {__		final FileBaseStatistics cachedFileStats = (cachedStats != null && cachedStats instanceof FileBaseStatistics)_				? (FileBaseStatistics) cachedStats : null__		final FileBaseStatistics statistics = getFileStats(cachedFileStats, this.filePathList, new ArrayList<FileStatus>(1))___		_		return (statistics.fileSize == BaseStatistics.SIZE_UNKNOWN) ? null : statistics__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,null,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,final,file,base,statistics,statistics,get,file,stats,cached,file,stats,this,file,path,list,new,array,list,file,status,1,return,statistics,file,size,base,statistics,null,statistics
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1518772855;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = cachedStats instanceof FileBaseStatistics ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			return getFileStats(cachedFileStats, getFilePaths(), new ArrayList<>(getFilePaths().length))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for paths '" + Arrays.toString(getFilePaths()) + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for paths '" + Arrays.toString(getFilePaths()) + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,return,get,file,stats,cached,file,stats,get,file,paths,new,array,list,get,file,paths,length,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,paths,arrays,to,string,get,file,paths,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,paths,arrays,to,string,get,file,paths,t,get,message,t,return,null
FileInputFormat -> @Override 	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException;1550483152;Obtains basic file statistics containing only file size. If the input is a directory, then the size is the sum of all contained files.__@see org.apache.flink.api.common.io.InputFormat#getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics);@Override_	public FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {_		_		final FileBaseStatistics cachedFileStats = cachedStats instanceof FileBaseStatistics ?_			(FileBaseStatistics) cachedStats : null__				_		try {_			return getFileStats(cachedFileStats, getFilePaths(), new ArrayList<>(getFilePaths().length))__		} catch (IOException ioex) {_			if (LOG.isWarnEnabled()) {_				LOG.warn("Could not determine statistics for paths '" + Arrays.toString(getFilePaths()) + "' due to an io error: "_						+ ioex.getMessage())__			}_		}_		catch (Throwable t) {_			if (LOG.isErrorEnabled()) {_				LOG.error("Unexpected problem while getting the file statistics for paths '" + Arrays.toString(getFilePaths()) + "': "_						+ t.getMessage(), t)__			}_		}_		_		_		return null__	};obtains,basic,file,statistics,containing,only,file,size,if,the,input,is,a,directory,then,the,size,is,the,sum,of,all,contained,files,see,org,apache,flink,api,common,io,input,format,get,statistics,org,apache,flink,api,common,io,statistics,base,statistics;override,public,file,base,statistics,get,statistics,base,statistics,cached,stats,throws,ioexception,final,file,base,statistics,cached,file,stats,cached,stats,instanceof,file,base,statistics,file,base,statistics,cached,stats,null,try,return,get,file,stats,cached,file,stats,get,file,paths,new,array,list,get,file,paths,length,catch,ioexception,ioex,if,log,is,warn,enabled,log,warn,could,not,determine,statistics,for,paths,arrays,to,string,get,file,paths,due,to,an,io,error,ioex,get,message,catch,throwable,t,if,log,is,error,enabled,log,error,unexpected,problem,while,getting,the,file,statistics,for,paths,arrays,to,string,get,file,paths,t,get,message,t,return,null
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1405024514;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1405090423;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1409911022;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1411236168;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1411473593;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1411724090;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1412346153;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1414786554;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1418636270;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1418636270;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1422823634;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1423747257;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1431981454;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1432128952;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1432652854;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1432654748;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1432722957;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1433170803;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1433713723;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1433753025;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1436793281;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1439469746;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1448901852;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1452178883;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1460741894;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1469030375;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1469630409;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1472134098;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1475688973;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1484866639;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1485529393;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1499314317;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1511814440;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1515177485;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1518772855;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1518772855;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex);1550483152;Retrieves the index of the <tt>BlockLocation</tt> that contains the part of the file described by the given_offset.__@param blocks The different blocks of the file. Must be ordered by their offset._@param offset The offset of the position in the file._@param startIndex The earliest index to look at._@return The index of the block containing the given position.;private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex) {_		_		for (int i = startIndex_ i < blocks.length_ i++) {_			long blockStart = blocks[i].getOffset()__			long blockEnd = blockStart + blocks[i].getLength()___			if (offset >= blockStart && offset < blockEnd) {_				_				_				if (i < blocks.length - 1 && blockEnd - offset < halfSplitSize) {_					return i + 1__				} else {_					return i__				}_			}_		}_		throw new IllegalArgumentException("The given offset is not contained in the any block.")__	};retrieves,the,index,of,the,tt,block,location,tt,that,contains,the,part,of,the,file,described,by,the,given,offset,param,blocks,the,different,blocks,of,the,file,must,be,ordered,by,their,offset,param,offset,the,offset,of,the,position,in,the,file,param,start,index,the,earliest,index,to,look,at,return,the,index,of,the,block,containing,the,given,position;private,int,get,block,index,for,position,block,location,blocks,long,offset,long,half,split,size,int,start,index,for,int,i,start,index,i,blocks,length,i,long,block,start,blocks,i,get,offset,long,block,end,block,start,blocks,i,get,length,if,offset,block,start,offset,block,end,if,i,blocks,length,1,block,end,offset,half,split,size,return,i,1,else,return,i,throw,new,illegal,argument,exception,the,given,offset,is,not,contained,in,the,any,block
FileInputFormat -> @Deprecated 	public Path getFilePath();1518772855;@return The path of the file to read.__@deprecated Please use getFilePaths() instead.;@Deprecated_	public Path getFilePath() {__		if (supportsMultiPaths()) {_			if (this.filePaths == null || this.filePaths.length == 0) {_				return null__			} else if (this.filePaths.length == 1) {_				return this.filePaths[0]__			} else {_				throw new UnsupportedOperationException(_					"FileInputFormat is configured with multiple paths. Use getFilePaths() instead.")__			}_		} else {_			return filePath__		}_	};return,the,path,of,the,file,to,read,deprecated,please,use,get,file,paths,instead;deprecated,public,path,get,file,path,if,supports,multi,paths,if,this,file,paths,null,this,file,paths,length,0,return,null,else,if,this,file,paths,length,1,return,this,file,paths,0,else,throw,new,unsupported,operation,exception,file,input,format,is,configured,with,multiple,paths,use,get,file,paths,instead,else,return,file,path
FileInputFormat -> @Deprecated 	public Path getFilePath();1550483152;@return The path of the file to read.__@deprecated Please use getFilePaths() instead.;@Deprecated_	public Path getFilePath() {__		if (supportsMultiPaths()) {_			if (this.filePaths == null || this.filePaths.length == 0) {_				return null__			} else if (this.filePaths.length == 1) {_				return this.filePaths[0]__			} else {_				throw new UnsupportedOperationException(_					"FileInputFormat is configured with multiple paths. Use getFilePaths() instead.")__			}_		} else {_			return filePath__		}_	};return,the,path,of,the,file,to,read,deprecated,please,use,get,file,paths,instead;deprecated,public,path,get,file,path,if,supports,multi,paths,if,this,file,paths,null,this,file,paths,length,0,return,null,else,if,this,file,paths,length,1,return,this,file,paths,0,else,throw,new,unsupported,operation,exception,file,input,format,is,configured,with,multiple,paths,use,get,file,paths,instead,else,return,file,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1484866639;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1485529393;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1499314317;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1511814440;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1515177485;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1518772855;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1518772855;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> public boolean acceptFile(FileStatus fileStatus);1550483152;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;public boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;public,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> @Override 	public void configure(Configuration parameters);1405024514;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1405090423;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1409911022;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1411236168;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1411473593;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1411724090;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1412346153;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1414786554;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration
FileInputFormat -> @Override 	public void configure(Configuration parameters);1418636270;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}__		Boolean nestedFilesFlag = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		this.enumerateNestedFiles = nestedFilesFlag__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,boolean,nested,files,flag,parameters,get,boolean,false,this,enumerate,nested,files,nested,files,flag
FileInputFormat -> @Override 	public void configure(Configuration parameters);1418636270;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}__		Boolean nestedFilesFlag = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		this.enumerateNestedFiles = nestedFilesFlag__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,boolean,nested,files,flag,parameters,get,boolean,false,this,enumerate,nested,files,nested,files,flag
FileInputFormat -> @Override 	public void configure(Configuration parameters);1422823634;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}__		Boolean nestedFilesFlag = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		this.enumerateNestedFiles = nestedFilesFlag__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,boolean,nested,files,flag,parameters,get,boolean,false,this,enumerate,nested,files,nested,files,flag
FileInputFormat -> @Override 	public void configure(Configuration parameters);1423747257;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}__		Boolean nestedFilesFlag = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		this.enumerateNestedFiles = nestedFilesFlag__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,boolean,nested,files,flag,parameters,get,boolean,false,this,enumerate,nested,files,nested,files,flag
FileInputFormat -> @Override 	public void configure(Configuration parameters);1431981454;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1432128952;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1432652854;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1432654748;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1432722957;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1433170803;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1433713723;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1433753025;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1436793281;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1439469746;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1448901852;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1452178883;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1460741894;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {_		_		String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__		if (filePath != null) {_			try {_				this.filePath = new Path(filePath)__			}_			catch (RuntimeException rex) {_				throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage())_ _			}_		}_		else if (this.filePath == null) {_			throw new IllegalArgumentException("File path was not specified in input format, or configuration.")_ _		}_		_		this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,string,file,path,parameters,get,string,null,if,file,path,null,try,this,file,path,new,path,file,path,catch,runtime,exception,rex,throw,new,runtime,exception,could,not,create,a,valid,uri,from,the,given,file,path,name,rex,get,message,else,if,this,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1469030375;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1469630409;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1472134098;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1475688973;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1484866639;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1485529393;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1499314317;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1511814440;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1515177485;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePath == null) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,null,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1518772855;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		_		__		if (filePathList == null || filePathList.isEmpty()) {_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			setFilePath(filePath)__		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,file,path,list,null,file,path,list,is,empty,string,file,path,parameters,get,string,null,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1518772855;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		if (getFilePaths().length == 0) {_			_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			if (filePath == null) {_				throw new IllegalArgumentException("File path was not specified in input format or configuration.")__			} else {_				setFilePath(filePath)__			}_		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,get,file,paths,length,0,string,file,path,parameters,get,string,null,if,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,else,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> @Override 	public void configure(Configuration parameters);1550483152;Configures the file input format by reading the file path from the configuration.__@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration);@Override_	public void configure(Configuration parameters) {__		if (getFilePaths().length == 0) {_			_			String filePath = parameters.getString(FILE_PARAMETER_KEY, null)__			if (filePath == null) {_				throw new IllegalArgumentException("File path was not specified in input format or configuration.")__			} else {_				setFilePath(filePath)__			}_		}__		if (!this.enumerateNestedFiles) {_			this.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false)__		}_	};configures,the,file,input,format,by,reading,the,file,path,from,the,configuration,see,org,apache,flink,api,common,io,input,format,configure,org,apache,flink,configuration,configuration;override,public,void,configure,configuration,parameters,if,get,file,paths,length,0,string,file,path,parameters,get,string,null,if,file,path,null,throw,new,illegal,argument,exception,file,path,was,not,specified,in,input,format,or,configuration,else,set,file,path,file,path,if,this,enumerate,nested,files,this,enumerate,nested,files,parameters,get,boolean,false
FileInputFormat -> public void setFilePath(Path filePath);1518772855;Sets a single path of a file to be read.__@param filePath The path of the file to read.;public void setFilePath(Path filePath) {_		if (filePath == null) {_			throw new IllegalArgumentException("File path must not be null.")__		}__		setFilePaths(filePath)__	};sets,a,single,path,of,a,file,to,be,read,param,file,path,the,path,of,the,file,to,read;public,void,set,file,path,path,file,path,if,file,path,null,throw,new,illegal,argument,exception,file,path,must,not,be,null,set,file,paths,file,path
FileInputFormat -> public void setFilePath(Path filePath);1550483152;Sets a single path of a file to be read.__@param filePath The path of the file to read.;public void setFilePath(Path filePath) {_		if (filePath == null) {_			throw new IllegalArgumentException("File path must not be null.")__		}__		setFilePaths(filePath)__	};sets,a,single,path,of,a,file,to,be,read,param,file,path,the,path,of,the,file,to,read;public,void,set,file,path,path,file,path,if,file,path,null,throw,new,illegal,argument,exception,file,path,must,not,be,null,set,file,paths,file,path
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1405024514;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1405090423;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1409911022;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1411236168;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1411473593;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1411724090;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1412346153;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1414786554;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1418636270;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1418636270;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1422823634;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1423747257;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1431981454;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1432128952;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1432652854;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1432654748;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1432722957;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1433170803;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1433713723;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1433753025;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1436793281;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target);1439469746;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(GenericDataSourceBase<?, ?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,generic,data,source,base,target,return,new,config,builder,target,get,parameters
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1405024514;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1405090423;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1409911022;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1411236168;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1411473593;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1411724090;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1412346153;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1414786554;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may by a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (!dir[i].isDir() && acceptFile(dir[i])) {_					files.add(dir[i])__					totalLength += dir[i].getLen()__					_					testForUnsplittable(dir[i])__				}_			}_		} else {_			testForUnsplittable(pathFile)__			_			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,by,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1418636270;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if(!acceptFile(pathFile)) {_			throw new IOException("The given file does not pass the file-filter")__		}_		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						totalLength += addNestedFiles(dir[i].getPath(), files, 0)__					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,accept,file,path,file,throw,new,ioexception,the,given,file,does,not,pass,the,file,filter,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,total,length,add,nested,files,dir,i,get,path,files,0,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1418636270;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1422823634;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1423747257;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1431981454;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1432128952;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1432652854;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1432654748;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			_			final FileStatus[] dir = fs.listStatus(path)__			for (int i = 0_ i < dir.length_ i++) {_				if (dir[i].isDir()) {_					if (enumerateNestedFiles) {_						if(acceptFile(dir[i])) {_							totalLength += addNestedFiles(dir[i].getPath(), files, 0, true)__						} else {_							if (LOG.isDebugEnabled()) {_								LOG.debug("Directory "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__							}_						}_					}_				}_				else {_					if (acceptFile(dir[i])) {_						files.add(dir[i])__						totalLength += dir[i].getLen()__						_						testForUnsplittable(dir[i])__					} else {_						if (LOG.isDebugEnabled()) {_							LOG.debug("File "+dir[i].getPath().toString()+" did not pass the file-filter and is excluded.")__						}_					}_				}_			}_		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,final,file,status,dir,fs,list,status,path,for,int,i,0,i,dir,length,i,if,dir,i,is,dir,if,enumerate,nested,files,if,accept,file,dir,i,total,length,add,nested,files,dir,i,get,path,files,0,true,else,if,log,is,debug,enabled,log,debug,directory,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,i,files,add,dir,i,total,length,dir,i,get,len,test,for,unsplittable,dir,i,else,if,log,is,debug,enabled,log,debug,file,dir,i,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1432722957;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, totalLength, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,total,length,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1433170803;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1433713723;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1433753025;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1436793281;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1439469746;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1448901852;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1452178883;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1460741894;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1469030375;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1469630409;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1472134098;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1475688973;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1484866639;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if(unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1485529393;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = (minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits +_					(totalLength % minNumSplits == 0 ? 0 : 1))___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,min,num,splits,1,long,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1499314317;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1)___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1511814440;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1)___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1515177485;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final Path path = this.filePath__		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<FileStatus>()__		long totalLength = 0___		final FileSystem fs = path.getFileSystem()__		final FileStatus pathFile = fs.getFileStatus(path)___		if (pathFile.isDir()) {_			totalLength += addFilesInDir(path, files, true)__		} else {_			testForUnsplittable(pathFile)___			files.add(pathFile)__			totalLength += pathFile.getLen()__		}_		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1)___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,path,path,this,file,path,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,file,status,long,total,length,0,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1518772855;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)__		for (Path file : filePathList) {_			inputSplits.addAll(createInputSplits(file, minNumSplits))__		}_		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,for,path,file,file,path,list,input,splits,add,all,create,input,splits,file,min,num,splits,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1518772855;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<>()__		long totalLength = 0___		for (Path path : getFilePaths()) {_			final FileSystem fs = path.getFileSystem()__			final FileStatus pathFile = fs.getFileStatus(path)___			if (pathFile.isDir()) {_				totalLength += addFilesInDir(path, files, true)__			} else {_				testForUnsplittable(pathFile)___				files.add(pathFile)__				totalLength += pathFile.getLen()__			}_		}__		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final FileSystem fs = file.getPath().getFileSystem()__				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1)___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final FileSystem fs = file.getPath().getFileSystem()__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,long,total,length,0,for,path,path,get,file,paths,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,file,system,fs,file,get,path,get,file,system,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,file,system,fs,file,get,path,get,file,system,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> @Override 	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException;1550483152;Computes the input splits for the file. By default, one file block is one split. If more splits_are requested than blocks are available, then a split may be a fraction of a block and splits may cross_block boundaries.__@param minNumSplits The minimum desired number of file splits._@return The computed file splits.__@see org.apache.flink.api.common.io.InputFormat#createInputSplits(int);@Override_	public FileInputSplit[] createInputSplits(int minNumSplits) throws IOException {_		if (minNumSplits < 1) {_			throw new IllegalArgumentException("Number of input splits has to be at least 1.")__		}_		_		_		minNumSplits = Math.max(minNumSplits, this.numSplits)__		_		final List<FileInputSplit> inputSplits = new ArrayList<FileInputSplit>(minNumSplits)___		_		List<FileStatus> files = new ArrayList<>()__		long totalLength = 0___		for (Path path : getFilePaths()) {_			final FileSystem fs = path.getFileSystem()__			final FileStatus pathFile = fs.getFileStatus(path)___			if (pathFile.isDir()) {_				totalLength += addFilesInDir(path, files, true)__			} else {_				testForUnsplittable(pathFile)___				files.add(pathFile)__				totalLength += pathFile.getLen()__			}_		}__		_		if (unsplittable) {_			int splitNum = 0__			for (final FileStatus file : files) {_				final FileSystem fs = file.getPath().getFileSystem()__				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, file.getLen())__				Set<String> hosts = new HashSet<String>()__				for(BlockLocation block : blocks) {_					hosts.addAll(Arrays.asList(block.getHosts()))__				}_				long len = file.getLen()__				if(testForUnsplittable(file)) {_					len = READ_WHOLE_SPLIT_FLAG__				}_				FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, len,_						hosts.toArray(new String[hosts.size()]))__				inputSplits.add(fis)__			}_			return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__		}_		__		final long maxSplitSize = totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1)___		_		int splitNum = 0__		for (final FileStatus file : files) {__			final FileSystem fs = file.getPath().getFileSystem()__			final long len = file.getLen()__			final long blockSize = file.getBlockSize()__			_			final long minSplitSize__			if (this.minSplitSize <= blockSize) {_				minSplitSize = this.minSplitSize__			}_			else {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of " + _						blockSize + ". Decreasing minimal split size to block size.")__				}_				minSplitSize = blockSize__			}__			final long splitSize = Math.max(minSplitSize, Math.min(maxSplitSize, blockSize))__			final long halfSplit = splitSize >>> 1___			final long maxBytesForLastSplit = (long) (splitSize * MAX_SPLIT_SIZE_DISCREPANCY)___			if (len > 0) {__				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, len)__				Arrays.sort(blocks)___				long bytesUnassigned = len__				long position = 0___				int blockIndex = 0___				while (bytesUnassigned > maxBytesForLastSplit) {_					_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					_					FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position, splitSize,_						blocks[blockIndex].getHosts())__					inputSplits.add(fis)___					_					position += splitSize__					bytesUnassigned -= splitSize__				}__				_				if (bytesUnassigned > 0) {_					blockIndex = getBlockIndexForPosition(blocks, position, halfSplit, blockIndex)__					final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), position,_						bytesUnassigned, blocks[blockIndex].getHosts())__					inputSplits.add(fis)__				}_			} else {_				_				final BlockLocation[] blocks = fs.getFileBlockLocations(file, 0, 0)__				String[] hosts__				if (blocks.length > 0) {_					hosts = blocks[0].getHosts()__				} else {_					hosts = new String[0]__				}_				final FileInputSplit fis = new FileInputSplit(splitNum++, file.getPath(), 0, 0, hosts)__				inputSplits.add(fis)__			}_		}__		return inputSplits.toArray(new FileInputSplit[inputSplits.size()])__	};computes,the,input,splits,for,the,file,by,default,one,file,block,is,one,split,if,more,splits,are,requested,than,blocks,are,available,then,a,split,may,be,a,fraction,of,a,block,and,splits,may,cross,block,boundaries,param,min,num,splits,the,minimum,desired,number,of,file,splits,return,the,computed,file,splits,see,org,apache,flink,api,common,io,input,format,create,input,splits,int;override,public,file,input,split,create,input,splits,int,min,num,splits,throws,ioexception,if,min,num,splits,1,throw,new,illegal,argument,exception,number,of,input,splits,has,to,be,at,least,1,min,num,splits,math,max,min,num,splits,this,num,splits,final,list,file,input,split,input,splits,new,array,list,file,input,split,min,num,splits,list,file,status,files,new,array,list,long,total,length,0,for,path,path,get,file,paths,final,file,system,fs,path,get,file,system,final,file,status,path,file,fs,get,file,status,path,if,path,file,is,dir,total,length,add,files,in,dir,path,files,true,else,test,for,unsplittable,path,file,files,add,path,file,total,length,path,file,get,len,if,unsplittable,int,split,num,0,for,final,file,status,file,files,final,file,system,fs,file,get,path,get,file,system,final,block,location,blocks,fs,get,file,block,locations,file,0,file,get,len,set,string,hosts,new,hash,set,string,for,block,location,block,blocks,hosts,add,all,arrays,as,list,block,get,hosts,long,len,file,get,len,if,test,for,unsplittable,file,len,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,len,hosts,to,array,new,string,hosts,size,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size,final,long,max,split,size,total,length,min,num,splits,total,length,min,num,splits,0,0,1,int,split,num,0,for,final,file,status,file,files,final,file,system,fs,file,get,path,get,file,system,final,long,len,file,get,len,final,long,block,size,file,get,block,size,final,long,min,split,size,if,this,min,split,size,block,size,min,split,size,this,min,split,size,else,if,log,is,warn,enabled,log,warn,minimal,split,size,of,this,min,split,size,is,larger,than,the,block,size,of,block,size,decreasing,minimal,split,size,to,block,size,min,split,size,block,size,final,long,split,size,math,max,min,split,size,math,min,max,split,size,block,size,final,long,half,split,split,size,1,final,long,max,bytes,for,last,split,long,split,size,if,len,0,final,block,location,blocks,fs,get,file,block,locations,file,0,len,arrays,sort,blocks,long,bytes,unassigned,len,long,position,0,int,block,index,0,while,bytes,unassigned,max,bytes,for,last,split,block,index,get,block,index,for,position,blocks,position,half,split,block,index,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,split,size,blocks,block,index,get,hosts,input,splits,add,fis,position,split,size,bytes,unassigned,split,size,if,bytes,unassigned,0,block,index,get,block,index,for,position,blocks,position,half,split,block,index,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,position,bytes,unassigned,blocks,block,index,get,hosts,input,splits,add,fis,else,final,block,location,blocks,fs,get,file,block,locations,file,0,0,string,hosts,if,blocks,length,0,hosts,blocks,0,get,hosts,else,hosts,new,string,0,final,file,input,split,fis,new,file,input,split,split,num,file,get,path,0,0,hosts,input,splits,add,fis,return,input,splits,to,array,new,file,input,split,input,splits,size
FileInputFormat -> public void setFilePaths(Path... filePaths);1518772855;Sets multiple paths of files to be read.__@param filePaths The paths of the files to read.;public void setFilePaths(Path... filePaths) {_		if (!supportsMultiPaths() && filePaths.length > 1) {_			throw new UnsupportedOperationException(_				"Multiple paths are not supported by this FileInputFormat.")__		}_		if (filePaths.length < 1) {_			throw new IllegalArgumentException("At least one file path must be specified.")__		}_		if (filePaths.length == 1) {_			_			this.filePath = filePaths[0]__		} else {_			_			this.filePath = null__		}__		this.filePaths = filePaths__	};sets,multiple,paths,of,files,to,be,read,param,file,paths,the,paths,of,the,files,to,read;public,void,set,file,paths,path,file,paths,if,supports,multi,paths,file,paths,length,1,throw,new,unsupported,operation,exception,multiple,paths,are,not,supported,by,this,file,input,format,if,file,paths,length,1,throw,new,illegal,argument,exception,at,least,one,file,path,must,be,specified,if,file,paths,length,1,this,file,path,file,paths,0,else,this,file,path,null,this,file,paths,file,paths
FileInputFormat -> public void setFilePaths(Path... filePaths);1550483152;Sets multiple paths of files to be read.__@param filePaths The paths of the files to read.;public void setFilePaths(Path... filePaths) {_		if (!supportsMultiPaths() && filePaths.length > 1) {_			throw new UnsupportedOperationException(_				"Multiple paths are not supported by this FileInputFormat.")__		}_		if (filePaths.length < 1) {_			throw new IllegalArgumentException("At least one file path must be specified.")__		}_		if (filePaths.length == 1) {_			_			this.filePath = filePaths[0]__		} else {_			_			this.filePath = null__		}__		this.filePaths = filePaths__	};sets,multiple,paths,of,files,to,be,read,param,file,paths,the,paths,of,the,files,to,read;public,void,set,file,paths,path,file,paths,if,supports,multi,paths,file,paths,length,1,throw,new,unsupported,operation,exception,multiple,paths,are,not,supported,by,this,file,input,format,if,file,paths,length,1,throw,new,illegal,argument,exception,at,least,one,file,path,must,be,specified,if,file,paths,length,1,this,file,path,file,paths,0,else,this,file,path,null,this,file,paths,file,paths
FileInputFormat -> public long getSplitLength();1405024514;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1405090423;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1409911022;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1411236168;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1411473593;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1411724090;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1412346153;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1414786554;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1418636270;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1418636270;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1422823634;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1423747257;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1431981454;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1432128952;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1432652854;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1432654748;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1432722957;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1433170803;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1433713723;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1433753025;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1436793281;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1439469746;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1448901852;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1452178883;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1460741894;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1469030375;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1469630409;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1472134098;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1475688973;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1484866639;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1485529393;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1499314317;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1511814440;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1515177485;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1518772855;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1518772855;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> public long getSplitLength();1550483152;Gets the length or remaining length of the current split.__@return The length or remaining length of the current split.;public long getSplitLength() {_		return splitLength__	};gets,the,length,or,remaining,length,of,the,current,split,return,the,length,or,remaining,length,of,the,current,split;public,long,get,split,length,return,split,length
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1432128952;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1432652854;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1432654748;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1432722957;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1433170803;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1433713723;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		if (fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_			return new InflaterInputStreamFSInputWrapper(stream)__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,if,file,split,get,path,get,name,ends,with,return,new,inflater,input,stream,fsinput,wrapper,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1433753025;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1436793281;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1439469746;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1448901852;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1452178883;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1460741894;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1469030375;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1469630409;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1472134098;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1475688973;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1484866639;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1485529393;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1499314317;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1511814440;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1515177485;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1518772855;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1518772855;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable;1550483152;This method allows to wrap/decorate the raw {@link FSDataInputStream} for a certain file split, e.g., for decoding._When overriding this method, also consider adapting {@link FileInputFormat#testForUnsplittable} if your_stream decoration renders the input file unsplittable. Also consider calling existing superclass implementations.__@param inputStream is the input stream to decorated_@param fileSplit   is the file split for which the input stream shall be decorated_@return the decorated input stream_@throws Throwable if the decoration fails_@see org.apache.flink.api.common.io.InputStreamFSInputWrapper;protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {_		_		InflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath())__		if (inflaterInputStreamFactory != null) {_			return new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream))__		}__		return inputStream__	};this,method,allows,to,wrap,decorate,the,raw,link,fsdata,input,stream,for,a,certain,file,split,e,g,for,decoding,when,overriding,this,method,also,consider,adapting,link,file,input,format,test,for,unsplittable,if,your,stream,decoration,renders,the,input,file,unsplittable,also,consider,calling,existing,superclass,implementations,param,input,stream,is,the,input,stream,to,decorated,param,file,split,is,the,file,split,for,which,the,input,stream,shall,be,decorated,return,the,decorated,input,stream,throws,throwable,if,the,decoration,fails,see,org,apache,flink,api,common,io,input,stream,fsinput,wrapper;protected,fsdata,input,stream,decorate,input,stream,fsdata,input,stream,input,stream,file,input,split,file,split,throws,throwable,inflater,input,stream,factory,inflater,input,stream,factory,get,inflater,input,stream,factory,file,split,get,path,if,inflater,input,stream,factory,null,return,new,input,stream,fsinput,wrapper,inflater,input,stream,factory,create,stream,return,input,stream
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1469630409;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1472134098;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1475688973;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1484866639;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1485529393;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1499314317;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1511814440;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1515177485;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1518772855;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1518772855;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1550483152;Initialize defaults for input format. Needs to be a static method because it is configured for local_cluster execution._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final long to = configuration.getLong(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,_			ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__		if (to < 0) {_			LOG.error("Invalid timeout value for filesystem stream opening: " + to + ". Using default value of " +_				ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT)__			DEFAULT_OPENING_TIMEOUT = ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT__		} else if (to == 0) {_			DEFAULT_OPENING_TIMEOUT = 300000_ _		} else {_			DEFAULT_OPENING_TIMEOUT = to__		}_	};initialize,defaults,for,input,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,long,to,configuration,get,long,config,constants,config,constants,if,to,0,log,error,invalid,timeout,value,for,filesystem,stream,opening,to,using,default,value,of,config,constants,config,constants,else,if,to,0,300000,else,to
FileInputFormat -> @Deprecated 	public boolean supportsMultiPaths();1518772855;Override this method to supports multiple paths._When this method will be removed, all FileInputFormats have to support multiple paths.__@return True if the FileInputFormat supports multiple paths, false otherwise.__@deprecated Will be removed for Flink 2.0.;@Deprecated_	public boolean supportsMultiPaths() {_		return false__	};override,this,method,to,supports,multiple,paths,when,this,method,will,be,removed,all,file,input,formats,have,to,support,multiple,paths,return,true,if,the,file,input,format,supports,multiple,paths,false,otherwise,deprecated,will,be,removed,for,flink,2,0;deprecated,public,boolean,supports,multi,paths,return,false
FileInputFormat -> @Deprecated 	public boolean supportsMultiPaths();1550483152;Override this method to supports multiple paths._When this method will be removed, all FileInputFormats have to support multiple paths.__@return True if the FileInputFormat supports multiple paths, false otherwise.__@deprecated Will be removed for Flink 2.0.;@Deprecated_	public boolean supportsMultiPaths() {_		return false__	};override,this,method,to,supports,multiple,paths,when,this,method,will,be,removed,all,file,input,formats,have,to,support,multiple,paths,return,true,if,the,file,input,format,supports,multiple,paths,false,otherwise,deprecated,will,be,removed,for,flink,2,0;deprecated,public,boolean,supports,multi,paths,return,false
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1405024514;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1405090423;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1409911022;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1411236168;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1411473593;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1411724090;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1412346153;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1414786554;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1418636270;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1418636270;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1422823634;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1423747257;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1431981454;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1432128952;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1432652854;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1432654748;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1432722957;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1433170803;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1433713723;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1433753025;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1436793281;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> AbstractConfigBuilder -> public T filePath(String filePath);1439469746;Sets the path to the file or directory to be read by this file input format.__@param filePath The path to the file or directory._@return The builder itself.;public T filePath(String filePath) {_			this.config.setString(FILE_PARAMETER_KEY, filePath)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,path,to,the,file,or,directory,to,be,read,by,this,file,input,format,param,file,path,the,path,to,the,file,or,directory,return,the,builder,itself;public,t,file,path,string,file,path,this,config,set,string,file,path,suppress,warnings,unchecked,t,ret,t,this,return,ret
FileInputFormat -> public void setFilePaths(String... filePaths);1518772855;@param filePaths the paths to set;public void setFilePaths(String... filePaths) {_		if (filePaths.length < 1) {_			throw new IllegalArgumentException("At least one file path must be given.")__		}_		this.filePathList = new ArrayList<Path>()__		for (String filePath : filePaths) {_			if (filePath == null) {_				throw new IllegalArgumentException("The file path must not be null.")__			}_			_			if (!filePath.isEmpty()) {_				this.filePathList.add(new Path(filePath))__			}_		}_	};param,file,paths,the,paths,to,set;public,void,set,file,paths,string,file,paths,if,file,paths,length,1,throw,new,illegal,argument,exception,at,least,one,file,path,must,be,given,this,file,path,list,new,array,list,path,for,string,file,path,file,paths,if,file,path,null,throw,new,illegal,argument,exception,the,file,path,must,not,be,null,if,file,path,is,empty,this,file,path,list,add,new,path,file,path
FileInputFormat -> public void setFilePaths(String... filePaths);1518772855;Sets multiple paths of files to be read.__@param filePaths The paths of the files to read.;public void setFilePaths(String... filePaths) {_		Path[] paths = new Path[filePaths.length]__		for (int i = 0_ i < paths.length_ i++) {_			paths[i] = new Path(filePaths[i])__		}_		setFilePaths(paths)__	};sets,multiple,paths,of,files,to,be,read,param,file,paths,the,paths,of,the,files,to,read;public,void,set,file,paths,string,file,paths,path,paths,new,path,file,paths,length,for,int,i,0,i,paths,length,i,paths,i,new,path,file,paths,i,set,file,paths,paths
FileInputFormat -> public void setFilePaths(String... filePaths);1550483152;Sets multiple paths of files to be read.__@param filePaths The paths of the files to read.;public void setFilePaths(String... filePaths) {_		Path[] paths = new Path[filePaths.length]__		for (int i = 0_ i < paths.length_ i++) {_			paths[i] = new Path(filePaths[i])__		}_		setFilePaths(paths)__	};sets,multiple,paths,of,files,to,be,read,param,file,paths,the,paths,of,the,files,to,read;public,void,set,file,paths,string,file,paths,path,paths,new,path,file,paths,length,for,int,i,0,i,paths,length,i,paths,i,new,path,file,paths,i,set,file,paths,paths
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1433170803;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1433713723;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1433753025;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1436793281;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1439469746;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1448901852;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1452178883;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1460741894;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1469030375;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1469630409;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1472134098;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1475688973;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1484866639;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1485529393;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1499314317;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1511814440;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1515177485;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1518772855;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1518772855;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles) 			throws IOException;1550483152;Enumerate all files in the directory and recursive if enumerateNestedFiles is true._@return the total length of accepted files.;private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		long length = 0___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir) && enumerateNestedFiles) {_					length += addFilesInDir(dir.getPath(), files, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};enumerate,all,files,in,the,directory,and,recursive,if,enumerate,nested,files,is,true,return,the,total,length,of,accepted,files;private,long,add,files,in,dir,path,path,list,file,status,files,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,long,length,0,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,enumerate,nested,files,length,add,files,in,dir,dir,get,path,files,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1405024514;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1405090423;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1409911022;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1411236168;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1411473593;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1411724090;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1412346153;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1414786554;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1418636270;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1418636270;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1422823634;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1423747257;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1431981454;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1432128952;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1432652854;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1432654748;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1432722957;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1433170803;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1433713723;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1433753025;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1436793281;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1439469746;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1448901852;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1452178883;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1460741894;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1469030375;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1469630409;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1472134098;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1475688973;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1484866639;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1485529393;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1499314317;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1511814440;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1515177485;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1518772855;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1518772855;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> FileBaseStatistics -> @Override 		public long getNumberOfRecords();1550483152;Gets the estimates number of records in the file, computed as the file size divided by the_average record width, rounded up.__@return The estimated number of records in the file._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getNumberOfRecords();@Override_		public long getNumberOfRecords() {_			return (this.fileSize == SIZE_UNKNOWN || this.avgBytesPerRecord == AVG_RECORD_BYTES_UNKNOWN) ? _				NUM_RECORDS_UNKNOWN : (long) Math.ceil(this.fileSize / this.avgBytesPerRecord)__		};gets,the,estimates,number,of,records,in,the,file,computed,as,the,file,size,divided,by,the,average,record,width,rounded,up,return,the,estimated,number,of,records,in,the,file,see,org,apache,flink,api,common,io,statistics,base,statistics,get,number,of,records;override,public,long,get,number,of,records,return,this,file,size,this,avg,bytes,per,record,long,math,ceil,this,file,size,this,avg,bytes,per,record
FileInputFormat -> public Path[] getFilePaths();1518772855;@return the list of all file paths;public Path[] getFilePaths() {_		if (this.filePathList == null) {_			return new Path[0]__		}_		return this.filePathList.toArray(new Path[this.filePathList.size()])__	};return,the,list,of,all,file,paths;public,path,get,file,paths,if,this,file,path,list,null,return,new,path,0,return,this,file,path,list,to,array,new,path,this,file,path,list,size
FileInputFormat -> public Path[] getFilePaths();1518772855;Returns the paths of all files to be read by the FileInputFormat.__@return The list of all paths to read.;public Path[] getFilePaths() {__		if (supportsMultiPaths()) {_			if (this.filePaths == null) {_				return new Path[0]__			}_			return this.filePaths__		} else {_			if (this.filePath == null) {_				return new Path[0]__			}_			return new Path[] {filePath}__		}_	};returns,the,paths,of,all,files,to,be,read,by,the,file,input,format,return,the,list,of,all,paths,to,read;public,path,get,file,paths,if,supports,multi,paths,if,this,file,paths,null,return,new,path,0,return,this,file,paths,else,if,this,file,path,null,return,new,path,0,return,new,path,file,path
FileInputFormat -> public Path[] getFilePaths();1550483152;Returns the paths of all files to be read by the FileInputFormat.__@return The list of all paths to read.;public Path[] getFilePaths() {__		if (supportsMultiPaths()) {_			if (this.filePaths == null) {_				return new Path[0]__			}_			return this.filePaths__		} else {_			if (this.filePath == null) {_				return new Path[0]__			}_			return new Path[] {filePath}__		}_	};returns,the,paths,of,all,files,to,be,read,by,the,file,input,format,return,the,list,of,all,paths,to,read;public,path,get,file,paths,if,supports,multi,paths,if,this,file,paths,null,return,new,path,0,return,this,file,paths,else,if,this,file,path,null,return,new,path,0,return,new,path,file,path
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1405024514;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1405090423;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1409911022;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1411236168;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1411473593;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1411724090;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1412346153;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1414786554;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1418636270;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1418636270;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1422823634;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1423747257;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1431981454;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1432128952;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1432652854;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1432654748;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1432722957;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1433170803;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1433713723;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1433753025;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus_@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1436793281;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1439469746;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1448901852;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1452178883;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1460741894;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1469030375;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1469630409;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_") && !name.startsWith(".")__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1472134098;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> protected boolean acceptFile(FileStatus fileStatus);1475688973;A simple hook to filter files and directories from the input._The method may be overridden. Hadoop's FileInputFormat has a similar mechanism and applies the_same filters by default.__@param fileStatus The file status to check._@return true, if the given file or directory is accepted;protected boolean acceptFile(FileStatus fileStatus) {_		final String name = fileStatus.getPath().getName()__		return !name.startsWith("_")_			&& !name.startsWith(".")_			&& !filesFilter.filterPath(fileStatus.getPath())__	};a,simple,hook,to,filter,files,and,directories,from,the,input,the,method,may,be,overridden,hadoop,s,file,input,format,has,a,similar,mechanism,and,applies,the,same,filters,by,default,param,file,status,the,file,status,to,check,return,true,if,the,given,file,or,directory,is,accepted;protected,boolean,accept,file,file,status,file,status,final,string,name,file,status,get,path,get,name,return,name,starts,with,name,starts,with,files,filter,filter,path,file,status,get,path
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1411724090;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1412346153;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1414786554;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1418636270;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1418636270;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1422823634;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1423747257;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1431981454;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			_			if(fileSplit.getPath().getName().endsWith(DEFLATE_SUFFIX)) {_				this.stream = new InflaterInputStreamFSInputWrapper(stream)__			}_			_		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,if,file,split,get,path,get,name,ends,with,this,stream,new,inflater,input,stream,fsinput,wrapper,stream,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1432128952;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1432652854;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1432654748;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1432722957;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1433170803;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {_		_		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1433713723;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1433753025;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1436793281;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1439469746;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1448901852;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1452178883;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1460741894;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1469030375;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1469630409;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1472134098;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1475688973;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1484866639;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1485529393;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1499314317;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1511814440;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1515177485;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1518772855;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1518772855;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> @Override 	public void open(FileInputSplit fileSplit) throws IOException;1550483152;Opens an input stream to the file defined in the input format._The stream is positioned at the beginning of the given split._<p>_The stream is actually opened in an asynchronous thread to make sure any interruptions to the thread_working on the input format do not reach the file system.;@Override_	public void open(FileInputSplit fileSplit) throws IOException {__		this.currentSplit = fileSplit__		this.splitStart = fileSplit.getStart()__		this.splitLength = fileSplit.getLength()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Opening input split " + fileSplit.getPath() + " [" + this.splitStart + "," + this.splitLength + "]")__		}__		_		_		final InputSplitOpenThread isot = new InputSplitOpenThread(fileSplit, this.openTimeout)__		isot.start()__		_		try {_			this.stream = isot.waitForCompletion()__			this.stream = decorateInputStream(this.stream, fileSplit)__		}_		catch (Throwable t) {_			throw new IOException("Error opening the Input Split " + fileSplit.getPath() + _					" [" + splitStart + "," + splitLength + "]: " + t.getMessage(), t)__		}_		_		_		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__		}_	};opens,an,input,stream,to,the,file,defined,in,the,input,format,the,stream,is,positioned,at,the,beginning,of,the,given,split,p,the,stream,is,actually,opened,in,an,asynchronous,thread,to,make,sure,any,interruptions,to,the,thread,working,on,the,input,format,do,not,reach,the,file,system;override,public,void,open,file,input,split,file,split,throws,ioexception,this,current,split,file,split,this,split,start,file,split,get,start,this,split,length,file,split,get,length,if,log,is,debug,enabled,log,debug,opening,input,split,file,split,get,path,this,split,start,this,split,length,final,input,split,open,thread,isot,new,input,split,open,thread,file,split,this,open,timeout,isot,start,try,this,stream,isot,wait,for,completion,this,stream,decorate,input,stream,this,stream,file,split,catch,throwable,t,throw,new,ioexception,error,opening,the,input,split,file,split,get,path,split,start,split,length,t,get,message,t,if,this,split,start,0,this,stream,seek,this,split,start
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1405024514;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1405090423;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1409911022;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1411236168;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1411473593;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1411724090;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1412346153;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1414786554;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1418636270;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1418636270;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1422823634;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1423747257;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1431981454;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1432128952;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1432652854;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1432654748;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1432722957;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1433170803;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1433713723;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1433753025;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1436793281;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1439469746;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1433753025;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1436793281;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1439469746;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1448901852;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1452178883;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1460741894;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1469030375;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1469630409;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1472134098;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1475688973;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1484866639;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1485529393;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1499314317;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1511814440;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1515177485;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1518772855;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1518772855;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory);1550483152;Registers a decompression algorithm through a {@link org.apache.flink.api.common.io.compression.InflaterInputStreamFactory}_with a file extension for transparent decompression._@param fileExtension of the compressed files_@param factory to create an {@link java.util.zip.InflaterInputStream} that handles the decompression format;public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory) {_		synchronized (INFLATER_INPUT_STREAM_FACTORIES) {_			if (INFLATER_INPUT_STREAM_FACTORIES.put(fileExtension, factory) != null) {_				LOG.warn("Overwriting an existing decompression algorithm for \"{}\" files.", fileExtension)__			}_		}_	};registers,a,decompression,algorithm,through,a,link,org,apache,flink,api,common,io,compression,inflater,input,stream,factory,with,a,file,extension,for,transparent,decompression,param,file,extension,of,the,compressed,files,param,factory,to,create,an,link,java,util,zip,inflater,input,stream,that,handles,the,decompression,format;public,static,void,register,inflater,input,stream,factory,string,file,extension,inflater,input,stream,factory,factory,synchronized,if,put,file,extension,factory,null,log,warn,overwriting,an,existing,decompression,algorithm,for,files,file,extension
FileInputFormat -> @Override 	public void close() throws IOException;1405024514;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1405090423;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1409911022;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1411236168;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1411473593;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1411724090;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1412346153;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1414786554;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1418636270;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1418636270;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1422823634;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1423747257;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1431981454;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1432128952;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1432652854;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1432654748;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1432722957;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1433170803;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1433713723;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1433753025;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1436793281;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1439469746;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1448901852;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1452178883;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1460741894;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1469030375;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1469630409;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1472134098;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1475688973;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1484866639;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1485529393;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1499314317;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1511814440;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1515177485;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1518772855;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1518772855;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> @Override 	public void close() throws IOException;1550483152;Closes the file input stream of the input format.;@Override_	public void close() throws IOException {_		if (this.stream != null) {_			_			this.stream.close()__			stream = null__		}_	};closes,the,file,input,stream,of,the,input,format;override,public,void,close,throws,ioexception,if,this,stream,null,this,stream,close,stream,null
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405024514;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405090423;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1409911022;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411236168;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411473593;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411724090;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1412346153;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1414786554;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1418636270;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1418636270;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1422823634;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1423747257;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1431981454;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1432128952;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1432652854;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1432654748;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1432722957;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1433170803;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1433713723;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1433753025;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1436793281;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1439469746;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1414786554;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1418636270;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1418636270;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1422823634;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1423747257;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1431981454;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1432128952;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1432652854;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1432654748;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1432722957;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1433170803;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1433713723;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1433753025;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1436793281;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1439469746;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1448901852;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1452178883;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1460741894;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1469030375;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1469630409;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1472134098;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1475688973;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1484866639;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1485529393;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1499314317;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1511814440;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1515177485;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1518772855;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1518772855;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> InputSplitOpenThread -> private void abortWait();1550483152;Double checked procedure setting the abort flag and closing the stream.;private void abortWait() {_			this.aborted = true__			final FSDataInputStream inStream = this.fdis__			this.fdis = null__			if (inStream != null) {_				try {_					inStream.close()__				} catch (Throwable t) {}_			}_		};double,checked,procedure,setting,the,abort,flag,and,closing,the,stream;private,void,abort,wait,this,aborted,true,final,fsdata,input,stream,in,stream,this,fdis,this,fdis,null,if,in,stream,null,try,in,stream,close,catch,throwable,t
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1418636270;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1422823634;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1423747257;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1431981454;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1432128952;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1432652854;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles) 			throws IOException;1432654748;Recursively traverse the input directory structure_and enumerate all accepted nested files._@return the total length of accepted files.;private long addNestedFiles(Path path, List<FileStatus> files, long length, boolean logExcludedFiles)_			throws IOException {_		final FileSystem fs = path.getFileSystem()___		for(FileStatus dir: fs.listStatus(path)) {_			if (dir.isDir()) {_				if (acceptFile(dir)) {_					length += addNestedFiles(dir.getPath(), files, length, logExcludedFiles)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_			else {_				if(acceptFile(dir)) {_					files.add(dir)__					length += dir.getLen()__					testForUnsplittable(dir)__				} else {_					if (logExcludedFiles && LOG.isDebugEnabled()) {_						LOG.debug("Directory "+dir.getPath().toString()+" did not pass the file-filter and is excluded.")__					}_				}_			}_		}_		return length__	};recursively,traverse,the,input,directory,structure,and,enumerate,all,accepted,nested,files,return,the,total,length,of,accepted,files;private,long,add,nested,files,path,path,list,file,status,files,long,length,boolean,log,excluded,files,throws,ioexception,final,file,system,fs,path,get,file,system,for,file,status,dir,fs,list,status,path,if,dir,is,dir,if,accept,file,dir,length,add,nested,files,dir,get,path,files,length,log,excluded,files,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,else,if,accept,file,dir,files,add,dir,length,dir,get,len,test,for,unsplittable,dir,else,if,log,excluded,files,log,is,debug,enabled,log,debug,directory,dir,get,path,to,string,did,not,pass,the,file,filter,and,is,excluded,return,length
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1405024514;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1405090423;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1409911022;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1411236168;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1411473593;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1411724090;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1412346153;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1414786554;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1418636270;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1418636270;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1422823634;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1423747257;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1431981454;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1432128952;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1432652854;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1432654748;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1432722957;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1433170803;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1433713723;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1433753025;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1436793281;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1439469746;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1448901852;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1452178883;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1460741894;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1469030375;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1469630409;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1472134098;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1475688973;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1484866639;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1485529393;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1499314317;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1511814440;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1515177485;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1518772855;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1518772855;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> public long getLastModificationTime();1550483152;Gets the timestamp of the last modification.__@return The timestamp of the last modification.;public long getLastModificationTime() {_			return fileModTime__		};gets,the,timestamp,of,the,last,modification,return,the,timestamp,of,the,last,modification;public,long,get,last,modification,time,return,file,mod,time
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1405024514;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1405090423;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1409911022;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1411236168;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1411473593;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1411724090;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1412346153;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1414786554;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1418636270;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1418636270;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1422823634;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1423747257;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1431981454;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1432128952;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1432652854;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1432654748;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1432722957;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1433170803;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1433713723;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1433753025;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1436793281;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1439469746;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1448901852;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1452178883;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1460741894;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1469030375;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1469630409;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1472134098;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1475688973;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1484866639;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1485529393;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1499314317;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1511814440;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1515177485;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1518772855;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1518772855;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> FileBaseStatistics -> @Override 		public long getTotalInputSize();1550483152;Gets the file size.__@return The fileSize._@see org.apache.flink.api.common.io.statistics.BaseStatistics#getTotalInputSize();@Override_		public long getTotalInputSize() {_			return this.fileSize__		};gets,the,file,size,return,the,file,size,see,org,apache,flink,api,common,io,statistics,base,statistics,get,total,input,size;override,public,long,get,total,input,size,return,this,file,size
FileInputFormat -> public long getSplitStart();1405024514;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1405090423;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1409911022;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1411236168;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1411473593;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1411724090;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1412346153;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1414786554;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1418636270;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1418636270;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1422823634;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1423747257;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1431981454;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1432128952;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1432652854;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1432654748;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1432722957;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1433170803;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1433713723;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1433753025;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1436793281;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1439469746;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1448901852;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1452178883;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1460741894;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1469030375;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1469630409;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1472134098;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1475688973;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1484866639;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1485529393;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1499314317;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1511814440;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1515177485;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1518772855;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1518772855;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> public long getSplitStart();1550483152;Gets the start of the current split.__@return The start of the split.;public long getSplitStart() {_		return splitStart__	};gets,the,start,of,the,current,split,return,the,start,of,the,split;public,long,get,split,start,return,split,start
FileInputFormat -> protected static String extractFileExtension(String fileName);1433753025;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		Preconditions.checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,preconditions,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1436793281;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		Preconditions.checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,preconditions,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1439469746;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		Preconditions.checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,preconditions,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1448901852;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		Preconditions.checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,preconditions,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1452178883;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		Preconditions.checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,preconditions,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1460741894;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1469030375;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1469630409;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1472134098;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1475688973;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1484866639;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1485529393;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1499314317;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1511814440;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1515177485;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1518772855;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1518772855;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
FileInputFormat -> protected static String extractFileExtension(String fileName);1550483152;Returns the extension of a file name (!= a path)._@return the extension of the file name or {@code null} if there is no extension.;protected static String extractFileExtension(String fileName) {_		checkNotNull(fileName)__		int lastPeriodIndex = fileName.lastIndexOf('.')__		if (lastPeriodIndex < 0){_			return null__		} else {_			return fileName.substring(lastPeriodIndex + 1)__		}_	};returns,the,extension,of,a,file,name,a,path,return,the,extension,of,the,file,name,or,code,null,if,there,is,no,extension;protected,static,string,extract,file,extension,string,file,name,check,not,null,file,name,int,last,period,index,file,name,last,index,of,if,last,period,index,0,return,null,else,return,file,name,substring,last,period,index,1
