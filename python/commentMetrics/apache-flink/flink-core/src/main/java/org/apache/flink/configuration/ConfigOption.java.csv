commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Creates a new config option, using this option's key and default value, and  * adding the given fallback keys.  *  * <p>When obtaining a value from the configuration via {@link Configuration#getValue(ConfigOption)},  * the fallback keys will be checked in the order provided to this method. The first key for which  * a value is found will be used - that value will be returned.  *  * @param fallbackKeys The fallback keys, in the order in which they should be checked.  * @return A new config options, with the given fallback keys.  */ ;// ------------------------------------------------------------------------ /**  * Creates a new config option, using this option's key and default value, and  * adding the given fallback keys.  *  * <p>When obtaining a value from the configuration via {@link Configuration#getValue(ConfigOption)},  * the fallback keys will be checked in the order provided to this method. The first key for which  * a value is found will be used - that value will be returned.  *  * @param fallbackKeys The fallback keys, in the order in which they should be checked.  * @return A new config options, with the given fallback keys.  */ public ConfigOption<T> withFallbackKeys(String... fallbackKeys) {     final Stream<FallbackKey> newFallbackKeys = Arrays.stream(fallbackKeys).map(FallbackKey::createFallbackKey).     final Stream<FallbackKey> currentAlternativeKeys = Arrays.stream(this.fallbackKeys).     // put fallback keys first so that they are prioritized     final FallbackKey[] mergedAlternativeKeys = Stream.concat(newFallbackKeys, currentAlternativeKeys).toArray(FallbackKey[]::new).     return new ConfigOption<>(key, description, defaultValue, mergedAlternativeKeys). }
true;public;1;9;/**  * Creates a new config option, using this option's key and default value, and  * adding the given deprecated keys.  *  * <p>When obtaining a value from the configuration via {@link Configuration#getValue(ConfigOption)},  * the deprecated keys will be checked in the order provided to this method. The first key for which  * a value is found will be used - that value will be returned.  *  * @param deprecatedKeys The deprecated keys, in the order in which they should be checked.  * @return A new config options, with the given deprecated keys.  */ ;/**  * Creates a new config option, using this option's key and default value, and  * adding the given deprecated keys.  *  * <p>When obtaining a value from the configuration via {@link Configuration#getValue(ConfigOption)},  * the deprecated keys will be checked in the order provided to this method. The first key for which  * a value is found will be used - that value will be returned.  *  * @param deprecatedKeys The deprecated keys, in the order in which they should be checked.  * @return A new config options, with the given deprecated keys.  */ public ConfigOption<T> withDeprecatedKeys(String... deprecatedKeys) {     final Stream<FallbackKey> newDeprecatedKeys = Arrays.stream(deprecatedKeys).map(FallbackKey::createDeprecatedKey).     final Stream<FallbackKey> currentAlternativeKeys = Arrays.stream(this.fallbackKeys).     // put deprecated keys last so that they are de-prioritized     final FallbackKey[] mergedAlternativeKeys = Stream.concat(currentAlternativeKeys, newDeprecatedKeys).toArray(FallbackKey[]::new).     return new ConfigOption<>(key, description, defaultValue, mergedAlternativeKeys). }
true;public;1;3;/**  * Creates a new config option, using this option's key and default value, and  * adding the given description. The given description is used when generation the configuration documention.  *  * @param description The description for this option.  * @return A new config option, with given description.  */ ;/**  * Creates a new config option, using this option's key and default value, and  * adding the given description. The given description is used when generation the configuration documention.  *  * @param description The description for this option.  * @return A new config option, with given description.  */ public ConfigOption<T> withDescription(final String description) {     return withDescription(Description.builder().text(description).build()). }
true;public;1;3;/**  * Creates a new config option, using this option's key and default value, and  * adding the given description. The given description is used when generation the configuration documention.  *  * @param description The description for this option.  * @return A new config option, with given description.  */ ;/**  * Creates a new config option, using this option's key and default value, and  * adding the given description. The given description is used when generation the configuration documention.  *  * @param description The description for this option.  * @return A new config option, with given description.  */ public ConfigOption<T> withDescription(final Description description) {     return new ConfigOption<>(key, description, defaultValue, fallbackKeys). }
true;public;0;3;/**  * Gets the configuration key.  * @return The configuration key  */ ;// ------------------------------------------------------------------------ /**  * Gets the configuration key.  * @return The configuration key  */ public String key() {     return key. }
true;public;0;3;/**  * Checks if this option has a default value.  * @return True if it has a default value, false if not.  */ ;/**  * Checks if this option has a default value.  * @return True if it has a default value, false if not.  */ public boolean hasDefaultValue() {     return defaultValue != null. }
true;public;0;3;/**  * Returns the default value, or null, if there is no default value.  * @return The default value, or null.  */ ;/**  * Returns the default value, or null, if there is no default value.  * @return The default value, or null.  */ public T defaultValue() {     return defaultValue. }
true;public;0;3;/**  * Checks whether this option has fallback keys.  * @return True if the option has fallback keys, false if not.  */ ;/**  * Checks whether this option has fallback keys.  * @return True if the option has fallback keys, false if not.  */ public boolean hasFallbackKeys() {     return fallbackKeys != EMPTY. }
true;public;0;3;/**  * Gets the fallback keys, in the order to be checked.  * @return The option's fallback keys.  */ ;/**  * Gets the fallback keys, in the order to be checked.  * @return The option's fallback keys.  */ public Iterable<FallbackKey> fallbackKeys() {     return (fallbackKeys == EMPTY) ? Collections.emptyList() : Arrays.asList(fallbackKeys). }
true;public;0;3;/**  * Returns the description of this option.  * @return The option's description.  */ ;/**  * Returns the description of this option.  * @return The option's description.  */ public Description description() {     return description. }
false;public;1;16;;// ------------------------------------------------------------------------ @Override public boolean equals(Object o) {     if (this == o) {         return true.     } else if (o != null && o.getClass() == ConfigOption.class) {         ConfigOption<?> that = (ConfigOption<?>) o.         return this.key.equals(that.key) && Arrays.equals(this.fallbackKeys, that.fallbackKeys) && (this.defaultValue == null ? that.defaultValue == null : (that.defaultValue != null && this.defaultValue.equals(that.defaultValue))).     } else {         return false.     } }
false;public;0;6;;@Override public int hashCode() {     return 31 * key.hashCode() + 17 * Arrays.hashCode(fallbackKeys) + (defaultValue != null ? defaultValue.hashCode() : 0). }
false;public;0;5;;@Override public String toString() {     return String.format("Key: '%s' , default: %s (fallback keys: %s)", key, defaultValue, Arrays.toString(fallbackKeys)). }
