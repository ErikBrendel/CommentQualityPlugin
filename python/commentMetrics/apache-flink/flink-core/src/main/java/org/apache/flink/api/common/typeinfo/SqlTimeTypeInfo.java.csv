commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 1. }
false;public;0;4;;@Override public int getTotalFields() {     return 1. }
false;public;0;4;;@Override public Class<T> getTypeClass() {     return clazz. }
false;public;0;4;;@Override public boolean isKeyType() {     return true. }
false;public;1;4;;@Override public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig) {     return serializer. }
false;public;2;4;;@Override public TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig) {     return instantiateComparator(comparatorClass, sortOrderAscending). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return Objects.hash(clazz, serializer, comparatorClass). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof SqlTimeTypeInfo. }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj instanceof SqlTimeTypeInfo) {         @SuppressWarnings("unchecked")         SqlTimeTypeInfo<T> other = (SqlTimeTypeInfo<T>) obj.         return other.canEqual(this) && this.clazz == other.clazz && serializer.equals(other.serializer) && this.comparatorClass == other.comparatorClass.     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return clazz.getSimpleName(). }
false;private,static;2;9;;// -------------------------------------------------------------------------------------------- private static <X> TypeComparator<X> instantiateComparator(Class<? extends TypeComparator<X>> comparatorClass, boolean ascendingOrder) {     try {         Constructor<? extends TypeComparator<X>> constructor = comparatorClass.getConstructor(boolean.class).         return constructor.newInstance(ascendingOrder).     } catch (Exception e) {         throw new RuntimeException("Could not initialize comparator " + comparatorClass.getName(), e).     } }
false;public,static;1;15;;@SuppressWarnings("unchecked") public static <X> SqlTimeTypeInfo<X> getInfoFor(Class<X> type) {     checkNotNull(type).     if (type == Date.class) {         return (SqlTimeTypeInfo<X>) DATE.     } else if (type == Time.class) {         return (SqlTimeTypeInfo<X>) TIME.     } else if (type == Timestamp.class) {         return (SqlTimeTypeInfo<X>) TIMESTAMP.     }     return null. }
