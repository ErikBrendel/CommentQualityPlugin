commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;20;;@Override @SuppressWarnings("unchecked") public TypeSerializerSchemaCompatibility<Either<L, R>> resolveSchemaCompatibility(TypeSerializer<Either<L, R>> newSerializer) {     // Scala Either serializer     if (newSerializer.getClass() == EitherSerializer.class) {         List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> nestedSerializersAndConfigs = getNestedSerializersAndConfigs().         return CompositeTypeSerializerUtil.delegateCompatibilityCheckToNewSnapshot(newSerializer, new JavaEitherSerializerSnapshot<>(), nestedSerializersAndConfigs.get(0).f1, nestedSerializersAndConfigs.get(1).f1).     } else {         // fall back to the backwards compatibility path         return super.resolveSchemaCompatibility(newSerializer).     } }
