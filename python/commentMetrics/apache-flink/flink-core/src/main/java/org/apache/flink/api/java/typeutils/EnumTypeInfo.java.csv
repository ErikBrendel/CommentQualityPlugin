commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override @PublicEvolving public TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig) {     return new EnumComparator<T>(sortOrderAscending). }
false;public;0;5;;@Override @PublicEvolving public boolean isBasicType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public boolean isTupleType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public int getArity() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public int getTotalFields() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public Class<T> getTypeClass() {     return this.typeClass. }
false;public;0;5;;@Override @PublicEvolving public boolean isKeyType() {     return true. }
false;public;1;5;;@Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig) {     return new EnumSerializer<T>(typeClass). }
false;public;0;4;;// ------------------------------------------------------------------------ // Standard utils // ------------------------------------------------------------------------ @Override public String toString() {     return "EnumTypeInfo<" + typeClass.getName() + ">". }
false;public;0;4;;@Override public int hashCode() {     return typeClass.hashCode(). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof EnumTypeInfo. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj instanceof EnumTypeInfo) {         @SuppressWarnings("unchecked")         EnumTypeInfo<T> enumTypeInfo = (EnumTypeInfo<T>) obj.         return enumTypeInfo.canEqual(this) && typeClass == enumTypeInfo.typeClass.     } else {         return false.     } }
