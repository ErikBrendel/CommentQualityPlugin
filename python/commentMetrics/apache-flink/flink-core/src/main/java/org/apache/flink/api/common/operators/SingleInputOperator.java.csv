commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Gets the information about the operators input/output types.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the information about the operators input/output types.  */ @Override @SuppressWarnings("unchecked") public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {     return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo. }
true;public;0;3;/**  * Returns the input operator or data source, or null, if none is set.  *  * @return This operator's input.  */ ;/**  * Returns the input operator or data source, or null, if none is set.  *  * @return This operator's input.  */ public Operator<IN> getInput() {     return this.input. }
true;public;0;3;/**  * Removes all inputs.  */ ;/**  * Removes all inputs.  */ public void clearInputs() {     this.input = null. }
true;public;1;3;/**  * Sets the given operator as the input to this operator.  *  * @param input The operator to use as the input.  */ ;/**  * Sets the given operator as the input to this operator.  *  * @param input The operator to use as the input.  */ public void setInput(Operator<IN> input) {     this.input = input. }
true;public;1;4;/**  * Sets the input to the union of the given operators.  *  * @param input The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the input to the union of the given operators.  *  * @param input The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void setInput(Operator<IN>... input) {     this.input = Operator.createUnionCascade(null, input). }
true;public;1;5;/**  * Sets the input to the union of the given operators.  *  * @param inputs The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the input to the union of the given operators.  *  * @param inputs The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated @SuppressWarnings("unchecked") public void setInputs(List<Operator<IN>> inputs) {     this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()])). }
true;public;1;4;/**  * Adds to the input the union of the given operators.  *  * @param input The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Adds to the input the union of the given operators.  *  * @param input The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void addInput(Operator<IN>... input) {     this.input = Operator.createUnionCascade(this.input, input). }
true;public;1;5;/**  * Adds to the input the union of the given operators.  *  * @param inputs The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Adds to the input the union of the given operators.  *  * @param inputs The operator(s) that form the input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated @SuppressWarnings("unchecked") public void addInput(List<Operator<IN>> inputs) {     this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()])). }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public SingleInputSemanticProperties getSemanticProperties() {     return this.semanticProperties. }
false;public;1;3;;public void setSemanticProperties(SingleInputSemanticProperties semanticProperties) {     this.semanticProperties = semanticProperties. }
false;public,final;0;4;;// -------------------------------------------------------------------------------------------- @Override public final int getNumberOfInputs() {     return 1. }
false;public;1;8;;@Override public int[] getKeyColumns(int inputNum) {     if (inputNum == 0) {         return this.keyFields.     } else {         throw new IndexOutOfBoundsException().     } }
true;public;1;10;/**  * Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning  * <tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,  * the post-visit method is called.  *  * @param visitor The visitor.  *  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ ;// -------------------------------------------------------------------------------------------- /**  * Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning  * <tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,  * the post-visit method is called.  *  * @param visitor The visitor.  *  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ @Override public void accept(Visitor<Operator<?>> visitor) {     if (visitor.preVisit(this)) {         this.input.accept(visitor).         for (Operator<?> c : this.broadcastInputs.values()) {             c.accept(visitor).         }         visitor.postVisit(this).     } }
false;protected,abstract;3;1;;// -------------------------------------------------------------------------------------------- protected abstract List<OUT> executeOnCollections(List<IN> inputData, RuntimeContext runtimeContext, ExecutionConfig executionConfig) throws Exception.
