commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;19;;public static String[] getParentFirstLoaderPatterns(Configuration config) {     String base = config.getString(ALWAYS_PARENT_FIRST_LOADER_PATTERNS).     String append = config.getString(ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL).     String[] basePatterns = base.isEmpty() ? new String[0] : base.split(".").     if (append.isEmpty()) {         return basePatterns.     } else {         String[] appendPatterns = append.split(".").         String[] joinedPatterns = new String[basePatterns.length + appendPatterns.length].         System.arraycopy(basePatterns, 0, joinedPatterns, 0, basePatterns.length).         System.arraycopy(appendPatterns, 0, joinedPatterns, basePatterns.length, appendPatterns.length).         return joinedPatterns.     } }
true;public,static;1;3;/**  * The total number of input plus output connections that a file system for the given scheme may open.  * Unlimited be default.  */ ;/**  * The total number of input plus output connections that a file system for the given scheme may open.  * Unlimited be default.  */ public static ConfigOption<Integer> fileSystemConnectionLimit(String scheme) {     return ConfigOptions.key("fs." + scheme + ".limit.total").defaultValue(-1). }
true;public,static;1;3;/**  * The total number of input connections that a file system for the given scheme may open.  * Unlimited be default.  */ ;/**  * The total number of input connections that a file system for the given scheme may open.  * Unlimited be default.  */ public static ConfigOption<Integer> fileSystemConnectionLimitIn(String scheme) {     return ConfigOptions.key("fs." + scheme + ".limit.input").defaultValue(-1). }
true;public,static;1;3;/**  * The total number of output connections that a file system for the given scheme may open.  * Unlimited be default.  */ ;/**  * The total number of output connections that a file system for the given scheme may open.  * Unlimited be default.  */ public static ConfigOption<Integer> fileSystemConnectionLimitOut(String scheme) {     return ConfigOptions.key("fs." + scheme + ".limit.output").defaultValue(-1). }
true;public,static;1;3;/**  * If any connection limit is configured, this option can be optionally set to define after  * which time (in milliseconds) stream opening fails with a timeout exception, if no stream  * connection becomes available. Unlimited timeout be default.  */ ;/**  * If any connection limit is configured, this option can be optionally set to define after  * which time (in milliseconds) stream opening fails with a timeout exception, if no stream  * connection becomes available. Unlimited timeout be default.  */ public static ConfigOption<Long> fileSystemConnectionLimitTimeout(String scheme) {     return ConfigOptions.key("fs." + scheme + ".limit.timeout").defaultValue(0L). }
true;public,static;1;3;/**  * If any connection limit is configured, this option can be optionally set to define after  * which time (in milliseconds) inactive streams are reclaimed. This option can help to prevent  * that inactive streams make up the full pool of limited connections, and no further connections  * can be established. Unlimited timeout be default.  */ ;/**  * If any connection limit is configured, this option can be optionally set to define after  * which time (in milliseconds) inactive streams are reclaimed. This option can help to prevent  * that inactive streams make up the full pool of limited connections, and no further connections  * can be established. Unlimited timeout be default.  */ public static ConfigOption<Long> fileSystemConnectionLimitStreamInactivityTimeout(String scheme) {     return ConfigOptions.key("fs." + scheme + ".limit.stream-timeout").defaultValue(0L). }
