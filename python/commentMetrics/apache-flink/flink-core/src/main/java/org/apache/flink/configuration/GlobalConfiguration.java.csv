# id;timestamp;commentText;codeText;commentWords;codeWords
GlobalConfiguration -> private float getFloatInternal(String key, float defaultValue);1405024514;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private float getFloatInternal(String key, float defaultValue) {__		float retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Float.parseFloat(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,float,get,float,internal,string,key,float,default,value,float,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,float,parse,float,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private float getFloatInternal(String key, float defaultValue);1405090423;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private float getFloatInternal(String key, float defaultValue) {__		float retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Float.parseFloat(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,float,get,float,internal,string,key,float,default,value,float,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,float,parse,float,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private float getFloatInternal(String key, float defaultValue);1409911022;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private float getFloatInternal(String key, float defaultValue) {__		float retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Float.parseFloat(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,float,get,float,internal,string,key,float,default,value,float,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,float,parse,float,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private float getFloatInternal(String key, float defaultValue);1411473593;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private float getFloatInternal(String key, float defaultValue) {__		float retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Float.parseFloat(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,float,get,float,internal,string,key,float,default,value,float,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,float,parse,float,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private float getFloatInternal(String key, float defaultValue);1411724090;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private float getFloatInternal(String key, float defaultValue) {__		float retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Float.parseFloat(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,float,get,float,internal,string,key,float,default,value,float,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,float,parse,float,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties);1503160934;Loads the global configuration and adds the given dynamic properties_configuration.__@param dynamicProperties The given dynamic properties_@return Returns the loaded global configuration with dynamic properties;public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties) {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration(dynamicProperties)__		}__		return loadConfiguration(configDir, dynamicProperties)__	};loads,the,global,configuration,and,adds,the,given,dynamic,properties,configuration,param,dynamic,properties,the,given,dynamic,properties,return,returns,the,loaded,global,configuration,with,dynamic,properties;public,static,configuration,load,configuration,with,dynamic,properties,configuration,dynamic,properties,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,dynamic,properties,return,load,configuration,config,dir,dynamic,properties
GlobalConfiguration -> public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties);1516295284;Loads the global configuration and adds the given dynamic properties_configuration.__@param dynamicProperties The given dynamic properties_@return Returns the loaded global configuration with dynamic properties;public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties) {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration(dynamicProperties)__		}__		return loadConfiguration(configDir, dynamicProperties)__	};loads,the,global,configuration,and,adds,the,given,dynamic,properties,configuration,param,dynamic,properties,the,given,dynamic,properties,return,returns,the,loaded,global,configuration,with,dynamic,properties;public,static,configuration,load,configuration,with,dynamic,properties,configuration,dynamic,properties,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,dynamic,properties,return,load,configuration,config,dir,dynamic,properties
GlobalConfiguration -> public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties);1524570103;Loads the global configuration and adds the given dynamic properties_configuration.__@param dynamicProperties The given dynamic properties_@return Returns the loaded global configuration with dynamic properties;public static Configuration loadConfigurationWithDynamicProperties(Configuration dynamicProperties) {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration(dynamicProperties)__		}__		return loadConfiguration(configDir, dynamicProperties)__	};loads,the,global,configuration,and,adds,the,given,dynamic,properties,configuration,param,dynamic,properties,the,given,dynamic,properties,return,returns,the,loaded,global,configuration,with,dynamic,properties;public,static,configuration,load,configuration,with,dynamic,properties,configuration,dynamic,properties,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,dynamic,properties,return,load,configuration,config,dir,dynamic,properties
GlobalConfiguration -> private void loadXMLResource(final File file);1405024514;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(final File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				LOG.warn("Cannot load configuration: unknown element " + root.getNodeName())__				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (this.confData) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						LOG.warn("Error while reading configuration: " + propNode.getNodeName()_							+ " is not of type element")__						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						LOG.warn("Error while reading configuration: unknown element " + property.getNodeName())__						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: " + key + ", " + value)__						this.confData.put(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__						continue__					}_				}_			}__		} catch (ParserConfigurationException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (IOException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (SAXException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,final,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,log,warn,cannot,load,configuration,unknown,element,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,this,conf,data,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,log,warn,error,while,reading,configuration,prop,node,get,node,name,is,not,of,type,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,log,warn,error,while,reading,configuration,unknown,element,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,continue,catch,parser,configuration,exception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,ioexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,saxexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e
GlobalConfiguration -> private void loadXMLResource(final File file);1405090423;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(final File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				LOG.warn("Cannot load configuration: unknown element " + root.getNodeName())__				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (this.confData) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						LOG.warn("Error while reading configuration: " + propNode.getNodeName()_							+ " is not of type element")__						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						LOG.warn("Error while reading configuration: unknown element " + property.getNodeName())__						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: " + key + ", " + value)__						this.confData.put(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__						continue__					}_				}_			}__		} catch (ParserConfigurationException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (IOException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (SAXException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,final,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,log,warn,cannot,load,configuration,unknown,element,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,this,conf,data,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,log,warn,error,while,reading,configuration,prop,node,get,node,name,is,not,of,type,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,log,warn,error,while,reading,configuration,unknown,element,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,continue,catch,parser,configuration,exception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,ioexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,saxexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e
GlobalConfiguration -> private void loadXMLResource(final File file);1409911022;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(final File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (this.confData) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: " + key + ", " + value)__						this.confData.put(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__						continue__					}_				}_			}__		} catch (ParserConfigurationException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (IOException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (SAXException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,final,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,this,conf,data,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,continue,catch,parser,configuration,exception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,ioexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,saxexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e
GlobalConfiguration -> private void loadXMLResource(final File file);1411473593;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(final File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (this.confData) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: " + key + ", " + value)__						this.confData.put(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__						continue__					}_				}_			}__		} catch (ParserConfigurationException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (IOException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (SAXException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,final,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,this,conf,data,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,continue,catch,parser,configuration,exception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,ioexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,saxexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e
GlobalConfiguration -> private void loadXMLResource(final File file);1411724090;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(final File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (this.confData) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: {}, {}", key, value)__						this.confData.put(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__					}_				}_			}__		} catch (ParserConfigurationException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (IOException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		} catch (SAXException e) {_			LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e))__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,final,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,this,conf,data,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,catch,parser,configuration,exception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,ioexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e,catch,saxexception,e,log,warn,cannot,load,configuration,string,utils,stringify,exception,e
GlobalConfiguration -> public static void includeConfiguration(final Configuration conf);1405024514;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(final Configuration conf) {__		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,final,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(final Configuration conf);1405090423;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(final Configuration conf) {__		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,final,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(final Configuration conf);1409911022;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(final Configuration conf) {__		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,final,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(final Configuration conf);1411473593;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(final Configuration conf) {__		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,final,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(final Configuration conf);1411724090;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(final Configuration conf) {__		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,final,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static Configuration loadConfiguration();1469630409;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir
GlobalConfiguration -> public static Configuration loadConfiguration();1480585463;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir
GlobalConfiguration -> public static Configuration loadConfiguration();1480980565;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir
GlobalConfiguration -> public static Configuration loadConfiguration();1485363720;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir
GlobalConfiguration -> public static Configuration loadConfiguration();1503160934;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir, null)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir,null
GlobalConfiguration -> public static Configuration loadConfiguration();1516295284;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir, null)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir,null
GlobalConfiguration -> public static Configuration loadConfiguration();1524570103;Loads the global configuration from the environment. Fails if an error occurs during loading. Returns an_empty configuration object if the environment variable is not set. In production this variable is set but_tests and local execution/debugging don't have this environment variable set. That's why we should fail_if it is not set._@return Returns the Configuration;public static Configuration loadConfiguration() {_		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		if (configDir == null) {_			return new Configuration()__		}_		return loadConfiguration(configDir, null)__	};loads,the,global,configuration,from,the,environment,fails,if,an,error,occurs,during,loading,returns,an,empty,configuration,object,if,the,environment,variable,is,not,set,in,production,this,variable,is,set,but,tests,and,local,execution,debugging,don,t,have,this,environment,variable,set,that,s,why,we,should,fail,if,it,is,not,set,return,returns,the,configuration;public,static,configuration,load,configuration,final,string,config,dir,system,getenv,config,constants,if,config,dir,null,return,new,configuration,return,load,configuration,config,dir,null
GlobalConfiguration -> private Configuration getConfigurationInternal(final String[] keys);1405024514;Internal non-static method to return configuration.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;private Configuration getConfigurationInternal(final String[] keys) {__		Configuration conf = new Configuration()___		synchronized (this.confData) {__			final Iterator<String> it = this.confData.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				boolean found = false__				if (keys != null) {_					for (int i = 0_ i < keys.length_ i++) {_						if (key.equals(keys[i])) {_							found = true__							break__						}_					}__					if (found) {_						conf.setString(key, this.confData.get(key))__					}_				} else {_					conf.setString(key, this.confData.get(key))__				}_			}_		}__		return conf__	};internal,non,static,method,to,return,configuration,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;private,configuration,get,configuration,internal,final,string,keys,configuration,conf,new,configuration,synchronized,this,conf,data,final,iterator,string,it,this,conf,data,key,set,iterator,while,it,has,next,final,string,key,it,next,boolean,found,false,if,keys,null,for,int,i,0,i,keys,length,i,if,key,equals,keys,i,found,true,break,if,found,conf,set,string,key,this,conf,data,get,key,else,conf,set,string,key,this,conf,data,get,key,return,conf
GlobalConfiguration -> private Configuration getConfigurationInternal(final String[] keys);1405090423;Internal non-static method to return configuration.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;private Configuration getConfigurationInternal(final String[] keys) {__		Configuration conf = new Configuration()___		synchronized (this.confData) {__			final Iterator<String> it = this.confData.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				boolean found = false__				if (keys != null) {_					for (int i = 0_ i < keys.length_ i++) {_						if (key.equals(keys[i])) {_							found = true__							break__						}_					}__					if (found) {_						conf.setString(key, this.confData.get(key))__					}_				} else {_					conf.setString(key, this.confData.get(key))__				}_			}_		}__		return conf__	};internal,non,static,method,to,return,configuration,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;private,configuration,get,configuration,internal,final,string,keys,configuration,conf,new,configuration,synchronized,this,conf,data,final,iterator,string,it,this,conf,data,key,set,iterator,while,it,has,next,final,string,key,it,next,boolean,found,false,if,keys,null,for,int,i,0,i,keys,length,i,if,key,equals,keys,i,found,true,break,if,found,conf,set,string,key,this,conf,data,get,key,else,conf,set,string,key,this,conf,data,get,key,return,conf
GlobalConfiguration -> private Configuration getConfigurationInternal(final String[] keys);1409911022;Internal non-static method to return configuration.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;private Configuration getConfigurationInternal(final String[] keys) {__		Configuration conf = new Configuration()___		synchronized (this.confData) {__			final Iterator<String> it = this.confData.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				boolean found = false__				if (keys != null) {_					for (int i = 0_ i < keys.length_ i++) {_						if (key.equals(keys[i])) {_							found = true__							break__						}_					}__					if (found) {_						conf.setString(key, this.confData.get(key))__					}_				} else {_					conf.setString(key, this.confData.get(key))__				}_			}_		}__		return conf__	};internal,non,static,method,to,return,configuration,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;private,configuration,get,configuration,internal,final,string,keys,configuration,conf,new,configuration,synchronized,this,conf,data,final,iterator,string,it,this,conf,data,key,set,iterator,while,it,has,next,final,string,key,it,next,boolean,found,false,if,keys,null,for,int,i,0,i,keys,length,i,if,key,equals,keys,i,found,true,break,if,found,conf,set,string,key,this,conf,data,get,key,else,conf,set,string,key,this,conf,data,get,key,return,conf
GlobalConfiguration -> private Configuration getConfigurationInternal(final String[] keys);1411473593;Internal non-static method to return configuration.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;private Configuration getConfigurationInternal(final String[] keys) {__		Configuration conf = new Configuration()___		synchronized (this.confData) {__			final Iterator<String> it = this.confData.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				boolean found = false__				if (keys != null) {_					for (int i = 0_ i < keys.length_ i++) {_						if (key.equals(keys[i])) {_							found = true__							break__						}_					}__					if (found) {_						conf.setString(key, this.confData.get(key))__					}_				} else {_					conf.setString(key, this.confData.get(key))__				}_			}_		}__		return conf__	};internal,non,static,method,to,return,configuration,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;private,configuration,get,configuration,internal,final,string,keys,configuration,conf,new,configuration,synchronized,this,conf,data,final,iterator,string,it,this,conf,data,key,set,iterator,while,it,has,next,final,string,key,it,next,boolean,found,false,if,keys,null,for,int,i,0,i,keys,length,i,if,key,equals,keys,i,found,true,break,if,found,conf,set,string,key,this,conf,data,get,key,else,conf,set,string,key,this,conf,data,get,key,return,conf
GlobalConfiguration -> private Configuration getConfigurationInternal(final String[] keys);1411724090;Internal non-static method to return configuration.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;private Configuration getConfigurationInternal(final String[] keys) {__		Configuration conf = new Configuration()___		synchronized (this.confData) {__			final Iterator<String> it = this.confData.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				boolean found = false__				if (keys != null) {_					for (int i = 0_ i < keys.length_ i++) {_						if (key.equals(keys[i])) {_							found = true__							break__						}_					}__					if (found) {_						conf.setString(key, this.confData.get(key))__					}_				} else {_					conf.setString(key, this.confData.get(key))__				}_			}_		}__		return conf__	};internal,non,static,method,to,return,configuration,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;private,configuration,get,configuration,internal,final,string,keys,configuration,conf,new,configuration,synchronized,this,conf,data,final,iterator,string,it,this,conf,data,key,set,iterator,while,it,has,next,final,string,key,it,next,boolean,found,false,if,keys,null,for,int,i,0,i,keys,length,i,if,key,equals,keys,i,found,true,break,if,found,conf,set,string,key,this,conf,data,get,key,else,conf,set,string,key,this,conf,data,get,key,return,conf
GlobalConfiguration -> private void includeConfigurationInternal(Configuration conf);1412338914;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(Configuration conf) {_		_		synchronized (getClass()) {_			this.config.addAll(conf)__		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,configuration,conf,synchronized,get,class,this,config,add,all,conf
GlobalConfiguration -> private void includeConfigurationInternal(Configuration conf);1416482279;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(Configuration conf) {_		_		synchronized (getClass()) {_			this.config.addAll(conf)__		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,configuration,conf,synchronized,get,class,this,config,add,all,conf
GlobalConfiguration -> private void includeConfigurationInternal(Configuration conf);1455479358;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(Configuration conf) {_		_		synchronized (getClass()) {_			this.config.addAll(conf)__		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,configuration,conf,synchronized,get,class,this,config,add,all,conf
GlobalConfiguration -> public static Configuration getConfiguration();1405024514;Copies the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it.__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {__		return get().getConfigurationInternal(null)__	};copies,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,return,get,get,configuration,internal,null
GlobalConfiguration -> public static Configuration getConfiguration();1405090423;Copies the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it.__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {__		return get().getConfigurationInternal(null)__	};copies,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,return,get,get,configuration,internal,null
GlobalConfiguration -> public static Configuration getConfiguration();1409911022;Copies the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it.__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {__		return get().getConfigurationInternal(null)__	};copies,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,return,get,get,configuration,internal,null
GlobalConfiguration -> public static Configuration getConfiguration();1411473593;Copies the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it.__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {__		return get().getConfigurationInternal(null)__	};copies,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,return,get,get,configuration,internal,null
GlobalConfiguration -> public static Configuration getConfiguration();1411724090;Copies the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it.__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {__		return get().getConfigurationInternal(null)__	};copies,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,return,get,get,configuration,internal,null
GlobalConfiguration -> public static Configuration getConfiguration();1412338914;Gets a {@link Configuration} object with the values of this GlobalConfiguration__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {_		Configuration copy = new Configuration()__		copy.addAll(get().config)__		return copy__	};gets,a,link,configuration,object,with,the,values,of,this,global,configuration,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,configuration,copy,new,configuration,copy,add,all,get,config,return,copy
GlobalConfiguration -> public static Configuration getConfiguration();1416482279;Gets a {@link Configuration} object with the values of this GlobalConfiguration__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {_		Configuration copy = new Configuration()__		copy.addAll(get().config)__		return copy__	};gets,a,link,configuration,object,with,the,values,of,this,global,configuration,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,configuration,copy,new,configuration,copy,add,all,get,config,return,copy
GlobalConfiguration -> public static Configuration getConfiguration();1455479358;Gets a {@link Configuration} object with the values of this GlobalConfiguration__@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration() {_		Configuration copy = new Configuration()__		copy.addAll(get().config)__		return copy__	};gets,a,link,configuration,object,with,the,values,of,this,global,configuration,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,configuration,copy,new,configuration,copy,add,all,get,config,return,copy
GlobalConfiguration -> public static Configuration getConfiguration(final String[] keys);1405024514;Copies a subset of the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it. The subset is defined by the_given array of keys. If <code>keys</code> is <code>null</code>, the entire_global configuration is copied.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration(final String[] keys) {__		return get().getConfigurationInternal(keys)__	};copies,a,subset,of,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,the,subset,is,defined,by,the,given,array,of,keys,if,code,keys,code,is,code,null,code,the,entire,global,configuration,is,copied,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,final,string,keys,return,get,get,configuration,internal,keys
GlobalConfiguration -> public static Configuration getConfiguration(final String[] keys);1405090423;Copies a subset of the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it. The subset is defined by the_given array of keys. If <code>keys</code> is <code>null</code>, the entire_global configuration is copied.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration(final String[] keys) {__		return get().getConfigurationInternal(keys)__	};copies,a,subset,of,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,the,subset,is,defined,by,the,given,array,of,keys,if,code,keys,code,is,code,null,code,the,entire,global,configuration,is,copied,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,final,string,keys,return,get,get,configuration,internal,keys
GlobalConfiguration -> public static Configuration getConfiguration(final String[] keys);1409911022;Copies a subset of the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it. The subset is defined by the_given array of keys. If <code>keys</code> is <code>null</code>, the entire_global configuration is copied.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration(final String[] keys) {__		return get().getConfigurationInternal(keys)__	};copies,a,subset,of,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,the,subset,is,defined,by,the,given,array,of,keys,if,code,keys,code,is,code,null,code,the,entire,global,configuration,is,copied,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,final,string,keys,return,get,get,configuration,internal,keys
GlobalConfiguration -> public static Configuration getConfiguration(final String[] keys);1411473593;Copies a subset of the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it. The subset is defined by the_given array of keys. If <code>keys</code> is <code>null</code>, the entire_global configuration is copied.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration(final String[] keys) {__		return get().getConfigurationInternal(keys)__	};copies,a,subset,of,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,the,subset,is,defined,by,the,given,array,of,keys,if,code,keys,code,is,code,null,code,the,entire,global,configuration,is,copied,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,final,string,keys,return,get,get,configuration,internal,keys
GlobalConfiguration -> public static Configuration getConfiguration(final String[] keys);1411724090;Copies a subset of the key/value pairs stored in the global configuration to_a {@link Configuration} object and returns it. The subset is defined by the_given array of keys. If <code>keys</code> is <code>null</code>, the entire_global configuration is copied.__@param keys_array of keys specifying the subset of pairs to copy._@return the {@link Configuration} object including the key/value pairs;public static Configuration getConfiguration(final String[] keys) {__		return get().getConfigurationInternal(keys)__	};copies,a,subset,of,the,key,value,pairs,stored,in,the,global,configuration,to,a,link,configuration,object,and,returns,it,the,subset,is,defined,by,the,given,array,of,keys,if,code,keys,code,is,code,null,code,the,entire,global,configuration,is,copied,param,keys,array,of,keys,specifying,the,subset,of,pairs,to,copy,return,the,link,configuration,object,including,the,key,value,pairs;public,static,configuration,get,configuration,final,string,keys,return,get,get,configuration,internal,keys
GlobalConfiguration -> public static boolean getBoolean(String key, boolean defaultValue);1412338914;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(String key, boolean defaultValue) {_		return get().config.getBoolean(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,string,key,boolean,default,value,return,get,config,get,boolean,key,default,value
GlobalConfiguration -> public static boolean getBoolean(String key, boolean defaultValue);1416482279;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(String key, boolean defaultValue) {_		return get().config.getBoolean(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,string,key,boolean,default,value,return,get,config,get,boolean,key,default,value
GlobalConfiguration -> public static boolean getBoolean(String key, boolean defaultValue);1455479358;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(String key, boolean defaultValue) {_		return get().config.getBoolean(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,string,key,boolean,default,value,return,get,config,get,boolean,key,default,value
GlobalConfiguration -> private GlobalConfiguration();1405024514;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {_	};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1405090423;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {_	};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1409911022;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {_	};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1411473593;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {_	};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1411724090;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {_	};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1412338914;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1416482279;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> private GlobalConfiguration();1455479358;The constructor used to construct the singleton instance of the global configuration.;private GlobalConfiguration() {};the,constructor,used,to,construct,the,singleton,instance,of,the,global,configuration;private,global,configuration
GlobalConfiguration -> public static int getInteger(String key, int defaultValue);1412338914;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(String key, int defaultValue) {_		return get().config.getInteger(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,string,key,int,default,value,return,get,config,get,integer,key,default,value
GlobalConfiguration -> public static int getInteger(String key, int defaultValue);1416482279;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(String key, int defaultValue) {_		return get().config.getInteger(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,string,key,int,default,value,return,get,config,get,integer,key,default,value
GlobalConfiguration -> public static int getInteger(String key, int defaultValue);1455479358;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(String key, int defaultValue) {_		return get().config.getInteger(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,string,key,int,default,value,return,get,config,get,integer,key,default,value
GlobalConfiguration -> private boolean getBooleanInternal(final String key, final boolean defaultValue);1405024514;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private boolean getBooleanInternal(final String key, final boolean defaultValue) {__		boolean retVal = defaultValue___		synchronized (this.confData) {__			final String value = this.confData.get(key)__			if (value != null) {_				retVal = Boolean.parseBoolean(value)__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,boolean,get,boolean,internal,final,string,key,final,boolean,default,value,boolean,ret,val,default,value,synchronized,this,conf,data,final,string,value,this,conf,data,get,key,if,value,null,ret,val,boolean,parse,boolean,value,return,ret,val
GlobalConfiguration -> private boolean getBooleanInternal(final String key, final boolean defaultValue);1405090423;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private boolean getBooleanInternal(final String key, final boolean defaultValue) {__		boolean retVal = defaultValue___		synchronized (this.confData) {__			final String value = this.confData.get(key)__			if (value != null) {_				retVal = Boolean.parseBoolean(value)__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,boolean,get,boolean,internal,final,string,key,final,boolean,default,value,boolean,ret,val,default,value,synchronized,this,conf,data,final,string,value,this,conf,data,get,key,if,value,null,ret,val,boolean,parse,boolean,value,return,ret,val
GlobalConfiguration -> private boolean getBooleanInternal(final String key, final boolean defaultValue);1409911022;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private boolean getBooleanInternal(final String key, final boolean defaultValue) {__		boolean retVal = defaultValue___		synchronized (this.confData) {__			final String value = this.confData.get(key)__			if (value != null) {_				retVal = Boolean.parseBoolean(value)__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,boolean,get,boolean,internal,final,string,key,final,boolean,default,value,boolean,ret,val,default,value,synchronized,this,conf,data,final,string,value,this,conf,data,get,key,if,value,null,ret,val,boolean,parse,boolean,value,return,ret,val
GlobalConfiguration -> private boolean getBooleanInternal(final String key, final boolean defaultValue);1411473593;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private boolean getBooleanInternal(final String key, final boolean defaultValue) {__		boolean retVal = defaultValue___		synchronized (this.confData) {__			final String value = this.confData.get(key)__			if (value != null) {_				retVal = Boolean.parseBoolean(value)__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,boolean,get,boolean,internal,final,string,key,final,boolean,default,value,boolean,ret,val,default,value,synchronized,this,conf,data,final,string,value,this,conf,data,get,key,if,value,null,ret,val,boolean,parse,boolean,value,return,ret,val
GlobalConfiguration -> private boolean getBooleanInternal(final String key, final boolean defaultValue);1411724090;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private boolean getBooleanInternal(final String key, final boolean defaultValue) {__		boolean retVal = defaultValue___		synchronized (this.confData) {__			final String value = this.confData.get(key)__			if (value != null) {_				retVal = Boolean.parseBoolean(value)__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,boolean,get,boolean,internal,final,string,key,final,boolean,default,value,boolean,ret,val,default,value,synchronized,this,conf,data,final,string,value,this,conf,data,get,key,if,value,null,ret,val,boolean,parse,boolean,value,return,ret,val
GlobalConfiguration -> private static GlobalConfiguration get();1412338914;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static GlobalConfiguration get() {_		_		synchronized (GlobalConfiguration.class) {_			if (SINGLETON == null) {_				SINGLETON = new GlobalConfiguration()__			}_			return SINGLETON__		}_	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,global,configuration,get,synchronized,global,configuration,class,if,singleton,null,singleton,new,global,configuration,return,singleton
GlobalConfiguration -> private static GlobalConfiguration get();1416482279;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static GlobalConfiguration get() {_		_		synchronized (GlobalConfiguration.class) {_			if (SINGLETON == null) {_				SINGLETON = new GlobalConfiguration()__			}_			return SINGLETON__		}_	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,global,configuration,get,synchronized,global,configuration,class,if,singleton,null,singleton,new,global,configuration,return,singleton
GlobalConfiguration -> private static GlobalConfiguration get();1455479358;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static GlobalConfiguration get() {_		_		synchronized (GlobalConfiguration.class) {_			if (SINGLETON == null) {_				SINGLETON = new GlobalConfiguration()__			}_			return SINGLETON__		}_	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,global,configuration,get,synchronized,global,configuration,class,if,singleton,null,singleton,new,global,configuration,return,singleton
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties);1503160934;Loads the configuration files from the specified directory. If the dynamic properties_configuration is not null, then it is added to the loaded configuration.__@param configDir directory to load the configuration from_@param dynamicProperties configuration file containing the dynamic properties. Null if none._@return The configuration loaded from the given configuration directory;public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		Configuration configuration = loadYAMLResource(yamlConfigFile)___		if (dynamicProperties != null) {_			configuration.addAll(dynamicProperties)__		}__		return configuration__	};loads,the,configuration,files,from,the,specified,directory,if,the,dynamic,properties,configuration,is,not,null,then,it,is,added,to,the,loaded,configuration,param,config,dir,directory,to,load,the,configuration,from,param,dynamic,properties,configuration,file,containing,the,dynamic,properties,null,if,none,return,the,configuration,loaded,from,the,given,configuration,directory;public,static,configuration,load,configuration,final,string,config,dir,nullable,final,configuration,dynamic,properties,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,configuration,configuration,load,yamlresource,yaml,config,file,if,dynamic,properties,null,configuration,add,all,dynamic,properties,return,configuration
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties);1516295284;Loads the configuration files from the specified directory. If the dynamic properties_configuration is not null, then it is added to the loaded configuration.__@param configDir directory to load the configuration from_@param dynamicProperties configuration file containing the dynamic properties. Null if none._@return The configuration loaded from the given configuration directory;public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		Configuration configuration = loadYAMLResource(yamlConfigFile)___		if (dynamicProperties != null) {_			configuration.addAll(dynamicProperties)__		}__		return configuration__	};loads,the,configuration,files,from,the,specified,directory,if,the,dynamic,properties,configuration,is,not,null,then,it,is,added,to,the,loaded,configuration,param,config,dir,directory,to,load,the,configuration,from,param,dynamic,properties,configuration,file,containing,the,dynamic,properties,null,if,none,return,the,configuration,loaded,from,the,given,configuration,directory;public,static,configuration,load,configuration,final,string,config,dir,nullable,final,configuration,dynamic,properties,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,configuration,configuration,load,yamlresource,yaml,config,file,if,dynamic,properties,null,configuration,add,all,dynamic,properties,return,configuration
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties);1524570103;Loads the configuration files from the specified directory. If the dynamic properties_configuration is not null, then it is added to the loaded configuration.__@param configDir directory to load the configuration from_@param dynamicProperties configuration file containing the dynamic properties. Null if none._@return The configuration loaded from the given configuration directory;public static Configuration loadConfiguration(final String configDir, @Nullable final Configuration dynamicProperties) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		Configuration configuration = loadYAMLResource(yamlConfigFile)___		if (dynamicProperties != null) {_			configuration.addAll(dynamicProperties)__		}__		return configuration__	};loads,the,configuration,files,from,the,specified,directory,if,the,dynamic,properties,configuration,is,not,null,then,it,is,added,to,the,loaded,configuration,param,config,dir,directory,to,load,the,configuration,from,param,dynamic,properties,configuration,file,containing,the,dynamic,properties,null,if,none,return,the,configuration,loaded,from,the,given,configuration,directory;public,static,configuration,load,configuration,final,string,config,dir,nullable,final,configuration,dynamic,properties,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,configuration,configuration,load,yamlresource,yaml,config,file,if,dynamic,properties,null,configuration,add,all,dynamic,properties,return,configuration
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1405024514;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {__		return get().getFloatInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,get,float,internal,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1405090423;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {__		return get().getFloatInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,get,float,internal,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1409911022;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {__		return get().getFloatInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,get,float,internal,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1411473593;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {__		return get().getFloatInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,get,float,internal,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1411724090;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {__		return get().getFloatInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,get,float,internal,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1412338914;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {_		return get().config.getFloat(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,config,get,float,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1416482279;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {_		return get().config.getFloat(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,config,get,float,key,default,value
GlobalConfiguration -> public static float getFloat(String key, float defaultValue);1455479358;Returns the value associated with the given key as a float.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static float getFloat(String key, float defaultValue) {_		return get().config.getFloat(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,float,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,float,get,float,string,key,float,default,value,return,get,config,get,float,key,default,value
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1469630409;Loads the configuration files from the specified directory._<p>_YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		return loadYAMLResource(yamlConfigFile)__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,return,load,yamlresource,yaml,config,file
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1480585463;Loads the configuration files from the specified directory._<p>_YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		return loadYAMLResource(yamlConfigFile)__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,return,load,yamlresource,yaml,config,file
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1480980565;Loads the configuration files from the specified directory._<p>_YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		Configuration conf = loadYAMLResource(yamlConfigFile)___		if(dynamicProperties != null) {_			conf.addAll(dynamicProperties)__		}__		return conf__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,configuration,conf,load,yamlresource,yaml,config,file,if,dynamic,properties,null,conf,add,all,dynamic,properties,return,conf
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1485363720;Loads the configuration files from the specified directory._<p>_YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {__		if (configDir == null) {_			throw new IllegalArgumentException("Given configuration directory is null, cannot load configuration")__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			throw new IllegalConfigurationException(_				"The given configuration directory name '" + configDir +_					"' (" + confDirFile.getAbsolutePath() + ") does not describe an existing directory.")__		}__		_		final File yamlConfigFile = new File(confDirFile, FLINK_CONF_FILENAME)___		if (!yamlConfigFile.exists()) {_			throw new IllegalConfigurationException(_				"The Flink config file '" + yamlConfigFile +_					"' (" + confDirFile.getAbsolutePath() + ") does not exist.")__		}__		Configuration conf = loadYAMLResource(yamlConfigFile)___		if(dynamicProperties != null) {_			conf.addAll(dynamicProperties)__		}__		return conf__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,if,config,dir,null,throw,new,illegal,argument,exception,given,configuration,directory,is,null,cannot,load,configuration,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,throw,new,illegal,configuration,exception,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,final,file,yaml,config,file,new,file,conf,dir,file,if,yaml,config,file,exists,throw,new,illegal,configuration,exception,the,flink,config,file,yaml,config,file,conf,dir,file,get,absolute,path,does,not,exist,configuration,conf,load,yamlresource,yaml,config,file,if,dynamic,properties,null,conf,add,all,dynamic,properties,return,conf
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1503160934;Loads the configuration files from the specified directory._<p>_YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {_		return loadConfiguration(configDir, null)__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,return,load,configuration,config,dir,null
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1516295284;Loads the configuration files from the specified directory.__<p>YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {_		return loadConfiguration(configDir, null)__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,return,load,configuration,config,dir,null
GlobalConfiguration -> public static Configuration loadConfiguration(final String configDir);1524570103;Loads the configuration files from the specified directory.__<p>YAML files are supported as configuration files.__@param configDir_the directory which contains the configuration files;public static Configuration loadConfiguration(final String configDir) {_		return loadConfiguration(configDir, null)__	};loads,the,configuration,files,from,the,specified,directory,p,yaml,files,are,supported,as,configuration,files,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,configuration,load,configuration,final,string,config,dir,return,load,configuration,config,dir,null
GlobalConfiguration -> private void loadYAMLResource(final File file);1405024514;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(final File file) {__		BufferedReader reader = null__		try {_			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))___			String line = null__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()__					_					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: " + key + ", " + value)___					this.confData.put(key, value)__				}_			}_		} catch (IOException e) {_			e.printStackTrace()__		} finally {_			try {_				reader.close()__			} catch (IOException e) {_				e.printStackTrace()__			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,final,file,file,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,catch,ioexception,e,e,print,stack,trace,finally,try,reader,close,catch,ioexception,e,e,print,stack,trace
GlobalConfiguration -> private void loadYAMLResource(final File file);1405090423;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(final File file) {__		BufferedReader reader = null__		try {_			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))___			String line = null__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()__					_					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: " + key + ", " + value)___					this.confData.put(key, value)__				}_			}_		} catch (IOException e) {_			e.printStackTrace()__		} finally {_			try {_				reader.close()__			} catch (IOException e) {_				e.printStackTrace()__			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,final,file,file,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,catch,ioexception,e,e,print,stack,trace,finally,try,reader,close,catch,ioexception,e,e,print,stack,trace
GlobalConfiguration -> private void loadYAMLResource(final File file);1409911022;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(final File file) {__		BufferedReader reader = null__		try {_			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))___			String line = null__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()__					_					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: " + key + ", " + value)___					this.confData.put(key, value)__				}_			}_		} catch (IOException e) {_			e.printStackTrace()__		} finally {_			try {_				reader.close()__			} catch (IOException e) {_				e.printStackTrace()__			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,final,file,file,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,catch,ioexception,e,e,print,stack,trace,finally,try,reader,close,catch,ioexception,e,e,print,stack,trace
GlobalConfiguration -> private void loadYAMLResource(final File file);1411473593;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(final File file) {__		BufferedReader reader = null__		try {_			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))___			String line = null__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()__					_					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: " + key + ", " + value)___					this.confData.put(key, value)__				}_			}_		} catch (IOException e) {_			e.printStackTrace()__		} finally {_			try {_				reader.close()__			} catch (IOException e) {_				e.printStackTrace()__			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,final,file,file,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,catch,ioexception,e,e,print,stack,trace,finally,try,reader,close,catch,ioexception,e,e,print,stack,trace
GlobalConfiguration -> private void loadYAMLResource(final File file);1411724090;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(final File file) {__		BufferedReader reader = null__		try {_			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))___			String line = null__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()__					_					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: {}, {}", key, value)___					this.confData.put(key, value)__				}_			}_		} catch (IOException e) {_			e.printStackTrace()__		} finally {_			try {_				if(reader != null) {_					reader.close()__				}_			} catch (IOException e) {_				LOG.warn("Cannot to close reader with IOException.", e)__			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,final,file,file,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,conf,data,put,key,value,catch,ioexception,e,e,print,stack,trace,finally,try,if,reader,null,reader,close,catch,ioexception,e,log,warn,cannot,to,close,reader,with,ioexception,e
GlobalConfiguration -> public static String getString(String key, String defaultValue);1412338914;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(String key, String defaultValue) {_		return get().config.getString(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,string,key,string,default,value,return,get,config,get,string,key,default,value
GlobalConfiguration -> public static String getString(String key, String defaultValue);1416482279;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(String key, String defaultValue) {_		return get().config.getString(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,string,key,string,default,value,return,get,config,get,string,key,default,value
GlobalConfiguration -> public static String getString(String key, String defaultValue);1455479358;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(String key, String defaultValue) {_		return get().config.getString(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,string,key,string,default,value,return,get,config,get,string,key,default,value
GlobalConfiguration -> public static long getLong(String key, long defaultValue);1412338914;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(String key, long defaultValue) {_		return get().config.getLong(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,string,key,long,default,value,return,get,config,get,long,key,default,value
GlobalConfiguration -> public static long getLong(String key, long defaultValue);1416482279;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(String key, long defaultValue) {_		return get().config.getLong(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,string,key,long,default,value,return,get,config,get,long,key,default,value
GlobalConfiguration -> public static long getLong(String key, long defaultValue);1455479358;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(String key, long defaultValue) {_		return get().config.getLong(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,string,key,long,default,value,return,get,config,get,long,key,default,value
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1405024514;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1405090423;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1409911022;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1411473593;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1411724090;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1412338914;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1416482279;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix);1455479358;Filters files in directory which have the specified suffix (e.g. ".xml").__@param dirToFilter_directory to filter_@param suffix_suffix to filter files by (e.g. ".xml")_@return files with given ending in directory;private static File[] filterFilesBySuffix(final File dirToFilter, final String suffix) {_		return filterFilesBySuffix(dirToFilter, new String[] { suffix })__	};filters,files,in,directory,which,have,the,specified,suffix,e,g,xml,param,dir,to,filter,directory,to,filter,param,suffix,suffix,to,filter,files,by,e,g,xml,return,files,with,given,ending,in,directory;private,static,file,filter,files,by,suffix,final,file,dir,to,filter,final,string,suffix,return,filter,files,by,suffix,dir,to,filter,new,string,suffix
GlobalConfiguration -> private String getStringInternal(final String key, final String defaultValue);1405024514;Returns the value associated with the given key as a string.__@param key_key the key pointing to the associated value_@param defaultValue_defaultValue the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private String getStringInternal(final String key, final String defaultValue) {__		synchronized (this.confData) {__			if (!this.confData.containsKey(key)) {_				return defaultValue__			}__			return this.confData.get(key)__		}_	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,key,the,key,pointing,to,the,associated,value,param,default,value,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,string,get,string,internal,final,string,key,final,string,default,value,synchronized,this,conf,data,if,this,conf,data,contains,key,key,return,default,value,return,this,conf,data,get,key
GlobalConfiguration -> private String getStringInternal(final String key, final String defaultValue);1405090423;Returns the value associated with the given key as a string.__@param key_key the key pointing to the associated value_@param defaultValue_defaultValue the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private String getStringInternal(final String key, final String defaultValue) {__		synchronized (this.confData) {__			if (!this.confData.containsKey(key)) {_				return defaultValue__			}__			return this.confData.get(key)__		}_	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,key,the,key,pointing,to,the,associated,value,param,default,value,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,string,get,string,internal,final,string,key,final,string,default,value,synchronized,this,conf,data,if,this,conf,data,contains,key,key,return,default,value,return,this,conf,data,get,key
GlobalConfiguration -> private String getStringInternal(final String key, final String defaultValue);1409911022;Returns the value associated with the given key as a string.__@param key_key the key pointing to the associated value_@param defaultValue_defaultValue the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private String getStringInternal(final String key, final String defaultValue) {__		synchronized (this.confData) {__			if (!this.confData.containsKey(key)) {_				return defaultValue__			}__			return this.confData.get(key)__		}_	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,key,the,key,pointing,to,the,associated,value,param,default,value,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,string,get,string,internal,final,string,key,final,string,default,value,synchronized,this,conf,data,if,this,conf,data,contains,key,key,return,default,value,return,this,conf,data,get,key
GlobalConfiguration -> private String getStringInternal(final String key, final String defaultValue);1411473593;Returns the value associated with the given key as a string.__@param key_key the key pointing to the associated value_@param defaultValue_defaultValue the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private String getStringInternal(final String key, final String defaultValue) {__		synchronized (this.confData) {__			if (!this.confData.containsKey(key)) {_				return defaultValue__			}__			return this.confData.get(key)__		}_	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,key,the,key,pointing,to,the,associated,value,param,default,value,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,string,get,string,internal,final,string,key,final,string,default,value,synchronized,this,conf,data,if,this,conf,data,contains,key,key,return,default,value,return,this,conf,data,get,key
GlobalConfiguration -> private String getStringInternal(final String key, final String defaultValue);1411724090;Returns the value associated with the given key as a string.__@param key_key the key pointing to the associated value_@param defaultValue_defaultValue the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private String getStringInternal(final String key, final String defaultValue) {__		synchronized (this.confData) {__			if (!this.confData.containsKey(key)) {_				return defaultValue__			}__			return this.confData.get(key)__		}_	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,key,the,key,pointing,to,the,associated,value,param,default,value,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,string,get,string,internal,final,string,key,final,string,default,value,synchronized,this,conf,data,if,this,conf,data,contains,key,key,return,default,value,return,this,conf,data,get,key
GlobalConfiguration -> public static long getLong(final String key, final long defaultValue);1405024514;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(final String key, final long defaultValue) {__		return get().getLongInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,final,string,key,final,long,default,value,return,get,get,long,internal,key,default,value
GlobalConfiguration -> public static long getLong(final String key, final long defaultValue);1405090423;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(final String key, final long defaultValue) {__		return get().getLongInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,final,string,key,final,long,default,value,return,get,get,long,internal,key,default,value
GlobalConfiguration -> public static long getLong(final String key, final long defaultValue);1409911022;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(final String key, final long defaultValue) {__		return get().getLongInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,final,string,key,final,long,default,value,return,get,get,long,internal,key,default,value
GlobalConfiguration -> public static long getLong(final String key, final long defaultValue);1411473593;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(final String key, final long defaultValue) {__		return get().getLongInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,final,string,key,final,long,default,value,return,get,get,long,internal,key,default,value
GlobalConfiguration -> public static long getLong(final String key, final long defaultValue);1411724090;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static long getLong(final String key, final long defaultValue) {__		return get().getLongInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,long,get,long,final,string,key,final,long,default,value,return,get,get,long,internal,key,default,value
GlobalConfiguration -> public static void setDynamicProperties(Configuration dynamicProperties);1480980565;Set the process-wide dynamic properties to be merged with the loaded configuration.;public static void setDynamicProperties(Configuration dynamicProperties) {_		GlobalConfiguration.dynamicProperties = new Configuration(dynamicProperties)__	};set,the,process,wide,dynamic,properties,to,be,merged,with,the,loaded,configuration;public,static,void,set,dynamic,properties,configuration,dynamic,properties,global,configuration,dynamic,properties,new,configuration,dynamic,properties
GlobalConfiguration -> public static void setDynamicProperties(Configuration dynamicProperties);1485363720;Set the process-wide dynamic properties to be merged with the loaded configuration.;public static void setDynamicProperties(Configuration dynamicProperties) {_		GlobalConfiguration.dynamicProperties = new Configuration(dynamicProperties)__	};set,the,process,wide,dynamic,properties,to,be,merged,with,the,loaded,configuration;public,static,void,set,dynamic,properties,configuration,dynamic,properties,global,configuration,dynamic,properties,new,configuration,dynamic,properties
GlobalConfiguration -> private void loadYAMLResource(File file);1412338914;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(File file) {__		synchronized (getClass()) {__			BufferedReader reader = null__			try {_				reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))__	_				String line = null__				while ((line = reader.readLine()) != null) {_	_					_					String[] comments = line.split("#", 2)__					String conf = comments[0]__	_					_					if (conf.length() > 0) {_						String[] kv = conf.split(": ", 2)__	_						_						if (kv.length == 1) {_							LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__							continue__						}_	_						String key = kv[0].trim()__						String value = kv[1].trim()__						_						_						if (key.length() == 0 || value.length() == 0) {_							LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__							continue__						}_	_						LOG.debug("Loading configuration property: {}, {}", key, value)__	_						this.config.setString(key, value)__					}_				}_			}_			catch (IOException e) {_				LOG.error("Error parsing YAML configuration.", e)__			}_			finally {_				try {_					if(reader != null) {_						reader.close()__					}_				} catch (IOException e) {_					LOG.warn("Cannot to close reader with IOException.", e)__				}_			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,file,file,synchronized,get,class,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,catch,ioexception,e,log,error,error,parsing,yaml,configuration,e,finally,try,if,reader,null,reader,close,catch,ioexception,e,log,warn,cannot,to,close,reader,with,ioexception,e
GlobalConfiguration -> private void loadYAMLResource(File file);1416482279;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(File file) {__		synchronized (getClass()) {__			BufferedReader reader = null__			try {_				reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))__	_				String line = null__				while ((line = reader.readLine()) != null) {_	_					_					String[] comments = line.split("#", 2)__					String conf = comments[0]__	_					_					if (conf.length() > 0) {_						String[] kv = conf.split(": ", 2)__	_						_						if (kv.length == 1) {_							LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__							continue__						}_	_						String key = kv[0].trim()__						String value = kv[1].trim()__						_						_						if (key.length() == 0 || value.length() == 0) {_							LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__							continue__						}_	_						LOG.debug("Loading configuration property: {}, {}", key, value)__	_						this.config.setString(key, value)__					}_				}_			}_			catch (IOException e) {_				LOG.error("Error parsing YAML configuration.", e)__			}_			finally {_				try {_					if(reader != null) {_						reader.close()__					}_				} catch (IOException e) {_					LOG.warn("Cannot to close reader with IOException.", e)__				}_			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,file,file,synchronized,get,class,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,catch,ioexception,e,log,error,error,parsing,yaml,configuration,e,finally,try,if,reader,null,reader,close,catch,ioexception,e,log,warn,cannot,to,close,reader,with,ioexception,e
GlobalConfiguration -> private void loadYAMLResource(File file);1455479358;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private void loadYAMLResource(File file) {__		synchronized (getClass()) {__			BufferedReader reader = null__			try {_				reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))__	_				String line = null__				while ((line = reader.readLine()) != null) {_	_					_					String[] comments = line.split("#", 2)__					String conf = comments[0]__	_					_					if (conf.length() > 0) {_						String[] kv = conf.split(": ", 2)__	_						_						if (kv.length == 1) {_							LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__							continue__						}_	_						String key = kv[0].trim()__						String value = kv[1].trim()__						_						_						if (key.length() == 0 || value.length() == 0) {_							LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__							continue__						}_	_						LOG.debug("Loading configuration property: {}, {}", key, value)__	_						this.config.setString(key, value)__					}_				}_			}_			catch (IOException e) {_				LOG.error("Error parsing YAML configuration.", e)__			}_			finally {_				try {_					if(reader != null) {_						reader.close()__					}_				} catch (IOException e) {_					LOG.warn("Cannot to close reader with IOException.", e)__				}_			}_		}_	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,void,load,yamlresource,file,file,synchronized,get,class,buffered,reader,reader,null,try,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,null,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,catch,ioexception,e,log,error,error,parsing,yaml,configuration,e,finally,try,if,reader,null,reader,close,catch,ioexception,e,log,warn,cannot,to,close,reader,with,ioexception,e
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1469630409;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.debug("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,debug,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1480585463;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,info,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1480980565;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			while ((line = reader.readLine()) != null) {__				_				String[] comments = line.split("#", 2)__				String conf = comments[0]___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ": " + line)__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ": " + line)__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,while,line,reader,read,line,null,string,comments,line,split,2,string,conf,comments,0,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,continue,log,info,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1485363720;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			int lineNo = 0__			while ((line = reader.readLine()) != null) {_				lineNo++__				_				String[] comments = line.split("#", 2)__				String conf = comments[0].trim()___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,int,line,no,0,while,line,reader,read,line,null,line,no,string,comments,line,split,2,string,conf,comments,0,trim,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,no,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,no,line,continue,log,info,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1503160934;Loads a YAML-file of key-value pairs._<p>_Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment._<p>_Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>_<p>_This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			int lineNo = 0__			while ((line = reader.readLine()) != null) {_				lineNo++__				_				String[] comments = line.split("#", 2)__				String conf = comments[0].trim()___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,int,line,no,0,while,line,reader,read,line,null,line,no,string,comments,line,split,2,string,conf,comments,0,trim,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,no,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,no,line,continue,log,info,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1516295284;Loads a YAML-file of key-value pairs.__<p>Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment.__<p>Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>__<p>This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			int lineNo = 0__			while ((line = reader.readLine()) != null) {_				lineNo++__				_				String[] comments = line.split("#", 2)__				String conf = comments[0].trim()___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,int,line,no,0,while,line,reader,read,line,null,line,no,string,comments,line,split,2,string,conf,comments,0,trim,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,no,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,no,line,continue,log,info,loading,configuration,property,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private static Configuration loadYAMLResource(File file);1524570103;Loads a YAML-file of key-value pairs.__<p>Colon and whitespace ": " separate key and value (one per line). The hash tag "#" starts a single-line comment.__<p>Example:__<pre>_jobmanager.rpc.address: localhost # network address for communication with the job manager_jobmanager.rpc.port   : 6123      # network port to connect to for communication with the job manager_taskmanager.rpc.port  : 6122      # network port the task manager expects incoming IPC connections_</pre>__<p>This does not span the whole YAML specification, but only the *syntax* of simple YAML key-value pairs (see issue_#113 on GitHub). If at any point in time, there is a need to go beyond simple key-value pairs syntax_compatibility will allow to introduce a YAML parser library.__@param file the YAML file to read from_@see <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 1.2 specification</a>;private static Configuration loadYAMLResource(File file) {_		final Configuration config = new Configuration()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))){__			String line__			int lineNo = 0__			while ((line = reader.readLine()) != null) {_				lineNo++__				_				String[] comments = line.split("#", 2)__				String conf = comments[0].trim()___				_				if (conf.length() > 0) {_					String[] kv = conf.split(": ", 2)___					_					if (kv.length == 1) {_						LOG.warn("Error while trying to split key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					String key = kv[0].trim()__					String value = kv[1].trim()___					_					if (key.length() == 0 || value.length() == 0) {_						LOG.warn("Error after splitting key and value in configuration file " + file + ":" + lineNo + ": \"" + line + "\"")__						continue__					}__					LOG.info("Loading configuration property: {}, {}", key, isSensitive(key) ? HIDDEN_CONTENT : value)__					config.setString(key, value)__				}_			}_		} catch (IOException e) {_			throw new RuntimeException("Error parsing YAML configuration.", e)__		}__		return config__	};loads,a,yaml,file,of,key,value,pairs,p,colon,and,whitespace,separate,key,and,value,one,per,line,the,hash,tag,starts,a,single,line,comment,p,example,pre,jobmanager,rpc,address,localhost,network,address,for,communication,with,the,job,manager,jobmanager,rpc,port,6123,network,port,to,connect,to,for,communication,with,the,job,manager,taskmanager,rpc,port,6122,network,port,the,task,manager,expects,incoming,ipc,connections,pre,p,this,does,not,span,the,whole,yaml,specification,but,only,the,syntax,of,simple,yaml,key,value,pairs,see,issue,113,on,git,hub,if,at,any,point,in,time,there,is,a,need,to,go,beyond,simple,key,value,pairs,syntax,compatibility,will,allow,to,introduce,a,yaml,parser,library,param,file,the,yaml,file,to,read,from,see,a,href,http,www,yaml,org,spec,1,2,spec,html,yaml,1,2,specification,a;private,static,configuration,load,yamlresource,file,file,final,configuration,config,new,configuration,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,new,file,input,stream,file,string,line,int,line,no,0,while,line,reader,read,line,null,line,no,string,comments,line,split,2,string,conf,comments,0,trim,if,conf,length,0,string,kv,conf,split,2,if,kv,length,1,log,warn,error,while,trying,to,split,key,and,value,in,configuration,file,file,line,no,line,continue,string,key,kv,0,trim,string,value,kv,1,trim,if,key,length,0,value,length,0,log,warn,error,after,splitting,key,and,value,in,configuration,file,file,line,no,line,continue,log,info,loading,configuration,property,key,is,sensitive,key,value,config,set,string,key,value,catch,ioexception,e,throw,new,runtime,exception,error,parsing,yaml,configuration,e,return,config
GlobalConfiguration -> private void loadXMLResource(File file);1412338914;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc = null__			Element root = null___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (getClass()) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: {}, {}", key, value)__						this.config.setString(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__					}_				}_			}__		}_		catch (Exception e) {_			LOG.error("Cannot load configuration.", e)__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,null,element,root,null,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,get,class,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,catch,exception,e,log,error,cannot,load,configuration,e
GlobalConfiguration -> private void loadXMLResource(File file);1416482279;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc__			Element root___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (getClass()) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: {}, {}", key, value)__						this.config.setString(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__					}_				}_			}__		}_		catch (Exception e) {_			LOG.error("Cannot load configuration.", e)__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,element,root,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,get,class,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,catch,exception,e,log,error,cannot,load,configuration,e
GlobalConfiguration -> private void loadXMLResource(File file);1455479358;Loads an XML document of key-values pairs.__@param file_the XML document file;private void loadXMLResource(File file) {__		final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()__		_		docBuilderFactory.setIgnoringComments(true)__		docBuilderFactory.setNamespaceAware(true)___		try {__			final DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()__			Document doc__			Element root___			doc = builder.parse(file)___			if (doc == null) {_				LOG.warn("Cannot load configuration: doc is null")__				return__			}__			root = doc.getDocumentElement()__			if (root == null) {_				LOG.warn("Cannot load configuration: root is null")__				return__			}__			if (!"configuration".equals(root.getNodeName())) {_				return__			}__			final NodeList props = root.getChildNodes()__			int propNumber = -1___			synchronized (getClass()) {__				for (int i = 0_ i < props.getLength()_ i++) {__					final Node propNode = props.item(i)__					String key = null__					String value = null___					_					if (propNode instanceof Text) {_						continue__					}__					if (!(propNode instanceof Element)) {_						continue__					}__					Element property = (Element) propNode__					if (!"property".equals(property.getNodeName())) {_						continue__					}__					propNumber++__					final NodeList propChildren = property.getChildNodes()__					if (propChildren == null) {_						LOG.warn("Error while reading configuration: property has no children, skipping...")__						continue__					}__					for (int j = 0_ j < propChildren.getLength()_ j++) {__						final Node propChild = propChildren.item(j)__						if (propChild instanceof Element) {_							if ("key".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											key = t.getTextContent()__										}_									}_								}_							}__							if ("value".equals(propChild.getNodeName())) {_								if (propChild.getChildNodes() != null) {_									if (propChild.getChildNodes().getLength() == 1) {_										if (propChild.getChildNodes().item(0) instanceof Text) {_											final Text t = (Text) propChild.getChildNodes().item(0)__											value = t.getTextContent()__										}_									}_								}_							}_						}_					}__					if (key != null && value != null) {_						_						LOG.debug("Loading configuration property: {}, {}", key, value)__						this.config.setString(key, value)__					} else {_						LOG.warn("Error while reading configuration: Cannot read property " + propNumber)__					}_				}_			}__		}_		catch (Exception e) {_			LOG.error("Cannot load configuration.", e)__		}_	};loads,an,xml,document,of,key,values,pairs,param,file,the,xml,document,file;private,void,load,xmlresource,file,file,final,document,builder,factory,doc,builder,factory,document,builder,factory,new,instance,doc,builder,factory,set,ignoring,comments,true,doc,builder,factory,set,namespace,aware,true,try,final,document,builder,builder,doc,builder,factory,new,document,builder,document,doc,element,root,doc,builder,parse,file,if,doc,null,log,warn,cannot,load,configuration,doc,is,null,return,root,doc,get,document,element,if,root,null,log,warn,cannot,load,configuration,root,is,null,return,if,configuration,equals,root,get,node,name,return,final,node,list,props,root,get,child,nodes,int,prop,number,1,synchronized,get,class,for,int,i,0,i,props,get,length,i,final,node,prop,node,props,item,i,string,key,null,string,value,null,if,prop,node,instanceof,text,continue,if,prop,node,instanceof,element,continue,element,property,element,prop,node,if,property,equals,property,get,node,name,continue,prop,number,final,node,list,prop,children,property,get,child,nodes,if,prop,children,null,log,warn,error,while,reading,configuration,property,has,no,children,skipping,continue,for,int,j,0,j,prop,children,get,length,j,final,node,prop,child,prop,children,item,j,if,prop,child,instanceof,element,if,key,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,key,t,get,text,content,if,value,equals,prop,child,get,node,name,if,prop,child,get,child,nodes,null,if,prop,child,get,child,nodes,get,length,1,if,prop,child,get,child,nodes,item,0,instanceof,text,final,text,t,text,prop,child,get,child,nodes,item,0,value,t,get,text,content,if,key,null,value,null,log,debug,loading,configuration,property,key,value,this,config,set,string,key,value,else,log,warn,error,while,reading,configuration,cannot,read,property,prop,number,catch,exception,e,log,error,cannot,load,configuration,e
GlobalConfiguration -> public static Configuration getDynamicProperties();1480980565;Get the dynamic properties.;public static Configuration getDynamicProperties() {_		return GlobalConfiguration.dynamicProperties__	};get,the,dynamic,properties;public,static,configuration,get,dynamic,properties,return,global,configuration,dynamic,properties
GlobalConfiguration -> public static Configuration getDynamicProperties();1485363720;Get the dynamic properties.;public static Configuration getDynamicProperties() {_		return GlobalConfiguration.dynamicProperties__	};get,the,dynamic,properties;public,static,configuration,get,dynamic,properties,return,global,configuration,dynamic,properties
GlobalConfiguration -> private int getIntegerInternal(final String key, final int defaultValue);1405024514;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private int getIntegerInternal(final String key, final int defaultValue) {__		int retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Integer.parseInt(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,int,get,integer,internal,final,string,key,final,int,default,value,int,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,integer,parse,int,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private int getIntegerInternal(final String key, final int defaultValue);1405090423;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private int getIntegerInternal(final String key, final int defaultValue) {__		int retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Integer.parseInt(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,int,get,integer,internal,final,string,key,final,int,default,value,int,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,integer,parse,int,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private int getIntegerInternal(final String key, final int defaultValue);1409911022;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private int getIntegerInternal(final String key, final int defaultValue) {__		int retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Integer.parseInt(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,int,get,integer,internal,final,string,key,final,int,default,value,int,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,integer,parse,int,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private int getIntegerInternal(final String key, final int defaultValue);1411473593;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private int getIntegerInternal(final String key, final int defaultValue) {__		int retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Integer.parseInt(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,int,get,integer,internal,final,string,key,final,int,default,value,int,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,integer,parse,int,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private int getIntegerInternal(final String key, final int defaultValue);1411724090;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private int getIntegerInternal(final String key, final int defaultValue) {__		int retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Integer.parseInt(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,int,get,integer,internal,final,string,key,final,int,default,value,int,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,integer,parse,int,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private void includeConfigurationInternal(final Configuration conf);1405024514;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(final Configuration conf) {__		if (conf == null) {_			LOG.error("Given configuration object is null, ignoring it...")__			return__		}__		synchronized (this.confData) {__			final Iterator<String> it = conf.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				this.confData.put(key, conf.getString(key, ""))__			}_		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,final,configuration,conf,if,conf,null,log,error,given,configuration,object,is,null,ignoring,it,return,synchronized,this,conf,data,final,iterator,string,it,conf,key,set,iterator,while,it,has,next,final,string,key,it,next,this,conf,data,put,key,conf,get,string,key
GlobalConfiguration -> private void includeConfigurationInternal(final Configuration conf);1405090423;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(final Configuration conf) {__		if (conf == null) {_			LOG.error("Given configuration object is null, ignoring it...")__			return__		}__		synchronized (this.confData) {__			final Iterator<String> it = conf.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				this.confData.put(key, conf.getString(key, ""))__			}_		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,final,configuration,conf,if,conf,null,log,error,given,configuration,object,is,null,ignoring,it,return,synchronized,this,conf,data,final,iterator,string,it,conf,key,set,iterator,while,it,has,next,final,string,key,it,next,this,conf,data,put,key,conf,get,string,key
GlobalConfiguration -> private void includeConfigurationInternal(final Configuration conf);1409911022;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(final Configuration conf) {__		if (conf == null) {_			LOG.error("Given configuration object is null, ignoring it...")__			return__		}__		synchronized (this.confData) {__			final Iterator<String> it = conf.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				this.confData.put(key, conf.getString(key, ""))__			}_		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,final,configuration,conf,if,conf,null,log,error,given,configuration,object,is,null,ignoring,it,return,synchronized,this,conf,data,final,iterator,string,it,conf,key,set,iterator,while,it,has,next,final,string,key,it,next,this,conf,data,put,key,conf,get,string,key
GlobalConfiguration -> private void includeConfigurationInternal(final Configuration conf);1411473593;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(final Configuration conf) {__		if (conf == null) {_			LOG.error("Given configuration object is null, ignoring it...")__			return__		}__		synchronized (this.confData) {__			final Iterator<String> it = conf.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				this.confData.put(key, conf.getString(key, ""))__			}_		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,final,configuration,conf,if,conf,null,log,error,given,configuration,object,is,null,ignoring,it,return,synchronized,this,conf,data,final,iterator,string,it,conf,key,set,iterator,while,it,has,next,final,string,key,it,next,this,conf,data,put,key,conf,get,string,key
GlobalConfiguration -> private void includeConfigurationInternal(final Configuration conf);1411724090;Internal non-static method to include configuration.__@param conf_the {@link Configuration} object to merge into the global configuration;private void includeConfigurationInternal(final Configuration conf) {__		if (conf == null) {_			LOG.error("Given configuration object is null, ignoring it...")__			return__		}__		synchronized (this.confData) {__			final Iterator<String> it = conf.keySet().iterator()___			while (it.hasNext()) {__				final String key = it.next()__				this.confData.put(key, conf.getString(key, ""))__			}_		}_	};internal,non,static,method,to,include,configuration,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;private,void,include,configuration,internal,final,configuration,conf,if,conf,null,log,error,given,configuration,object,is,null,ignoring,it,return,synchronized,this,conf,data,final,iterator,string,it,conf,key,set,iterator,while,it,has,next,final,string,key,it,next,this,conf,data,put,key,conf,get,string,key
GlobalConfiguration -> public static int getInteger(final String key, final int defaultValue);1405024514;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(final String key, final int defaultValue) {__		return get().getIntegerInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,final,string,key,final,int,default,value,return,get,get,integer,internal,key,default,value
GlobalConfiguration -> public static int getInteger(final String key, final int defaultValue);1405090423;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(final String key, final int defaultValue) {__		return get().getIntegerInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,final,string,key,final,int,default,value,return,get,get,integer,internal,key,default,value
GlobalConfiguration -> public static int getInteger(final String key, final int defaultValue);1409911022;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(final String key, final int defaultValue) {__		return get().getIntegerInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,final,string,key,final,int,default,value,return,get,get,integer,internal,key,default,value
GlobalConfiguration -> public static int getInteger(final String key, final int defaultValue);1411473593;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(final String key, final int defaultValue) {__		return get().getIntegerInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,final,string,key,final,int,default,value,return,get,get,integer,internal,key,default,value
GlobalConfiguration -> public static int getInteger(final String key, final int defaultValue);1411724090;Returns the value associated with the given key as an integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static int getInteger(final String key, final int defaultValue) {__		return get().getIntegerInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,an,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,int,get,integer,final,string,key,final,int,default,value,return,get,get,integer,internal,key,default,value
GlobalConfiguration -> private static synchronized GlobalConfiguration get();1405024514;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static synchronized GlobalConfiguration get() {__		if (configuration == null) {_			configuration = new GlobalConfiguration()__		}__		return configuration__	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,synchronized,global,configuration,get,if,configuration,null,configuration,new,global,configuration,return,configuration
GlobalConfiguration -> private static synchronized GlobalConfiguration get();1405090423;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static synchronized GlobalConfiguration get() {__		if (configuration == null) {_			configuration = new GlobalConfiguration()__		}__		return configuration__	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,synchronized,global,configuration,get,if,configuration,null,configuration,new,global,configuration,return,configuration
GlobalConfiguration -> private static synchronized GlobalConfiguration get();1409911022;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static synchronized GlobalConfiguration get() {__		if (configuration == null) {_			configuration = new GlobalConfiguration()__		}__		return configuration__	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,synchronized,global,configuration,get,if,configuration,null,configuration,new,global,configuration,return,configuration
GlobalConfiguration -> private static synchronized GlobalConfiguration get();1411473593;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static synchronized GlobalConfiguration get() {__		if (configuration == null) {_			configuration = new GlobalConfiguration()__		}__		return configuration__	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,synchronized,global,configuration,get,if,configuration,null,configuration,new,global,configuration,return,configuration
GlobalConfiguration -> private static synchronized GlobalConfiguration get();1411724090;Retrieves the singleton object of the global configuration.__@return the global configuration object;private static synchronized GlobalConfiguration get() {__		if (configuration == null) {_			configuration = new GlobalConfiguration()__		}__		return configuration__	};retrieves,the,singleton,object,of,the,global,configuration,return,the,global,configuration,object;private,static,synchronized,global,configuration,get,if,configuration,null,configuration,new,global,configuration,return,configuration
GlobalConfiguration -> public static String getString(final String key, final String defaultValue);1405024514;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(final String key, final String defaultValue) {__		return get().getStringInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,final,string,key,final,string,default,value,return,get,get,string,internal,key,default,value
GlobalConfiguration -> public static String getString(final String key, final String defaultValue);1405090423;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(final String key, final String defaultValue) {__		return get().getStringInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,final,string,key,final,string,default,value,return,get,get,string,internal,key,default,value
GlobalConfiguration -> public static String getString(final String key, final String defaultValue);1409911022;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(final String key, final String defaultValue) {__		return get().getStringInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,final,string,key,final,string,default,value,return,get,get,string,internal,key,default,value
GlobalConfiguration -> public static String getString(final String key, final String defaultValue);1411473593;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(final String key, final String defaultValue) {__		return get().getStringInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,final,string,key,final,string,default,value,return,get,get,string,internal,key,default,value
GlobalConfiguration -> public static String getString(final String key, final String defaultValue);1411724090;Returns the value associated with the given key as a string.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static String getString(final String key, final String defaultValue) {__		return get().getStringInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,string,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,string,get,string,final,string,key,final,string,default,value,return,get,get,string,internal,key,default,value
GlobalConfiguration -> public static boolean getBoolean(final String key, final boolean defaultValue);1405024514;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(final String key, final boolean defaultValue) {__		return get().getBooleanInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,final,string,key,final,boolean,default,value,return,get,get,boolean,internal,key,default,value
GlobalConfiguration -> public static boolean getBoolean(final String key, final boolean defaultValue);1405090423;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(final String key, final boolean defaultValue) {__		return get().getBooleanInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,final,string,key,final,boolean,default,value,return,get,get,boolean,internal,key,default,value
GlobalConfiguration -> public static boolean getBoolean(final String key, final boolean defaultValue);1409911022;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(final String key, final boolean defaultValue) {__		return get().getBooleanInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,final,string,key,final,boolean,default,value,return,get,get,boolean,internal,key,default,value
GlobalConfiguration -> public static boolean getBoolean(final String key, final boolean defaultValue);1411473593;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(final String key, final boolean defaultValue) {__		return get().getBooleanInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,final,string,key,final,boolean,default,value,return,get,get,boolean,internal,key,default,value
GlobalConfiguration -> public static boolean getBoolean(final String key, final boolean defaultValue);1411724090;Returns the value associated with the given key as a boolean.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;public static boolean getBoolean(final String key, final boolean defaultValue) {__		return get().getBooleanInternal(key, defaultValue)__	};returns,the,value,associated,with,the,given,key,as,a,boolean,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;public,static,boolean,get,boolean,final,string,key,final,boolean,default,value,return,get,get,boolean,internal,key,default,value
GlobalConfiguration -> private long getLongInternal(final String key, final long defaultValue);1405024514;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private long getLongInternal(final String key, final long defaultValue) {__		long retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Long.parseLong(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,long,get,long,internal,final,string,key,final,long,default,value,long,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,long,parse,long,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private long getLongInternal(final String key, final long defaultValue);1405090423;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private long getLongInternal(final String key, final long defaultValue) {__		long retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Long.parseLong(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,long,get,long,internal,final,string,key,final,long,default,value,long,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,long,parse,long,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private long getLongInternal(final String key, final long defaultValue);1409911022;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private long getLongInternal(final String key, final long defaultValue) {__		long retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Long.parseLong(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,long,get,long,internal,final,string,key,final,long,default,value,long,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,long,parse,long,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private long getLongInternal(final String key, final long defaultValue);1411473593;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private long getLongInternal(final String key, final long defaultValue) {__		long retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Long.parseLong(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,long,get,long,internal,final,string,key,final,long,default,value,long,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,long,parse,long,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> private long getLongInternal(final String key, final long defaultValue);1411724090;Returns the value associated with the given key as a long integer.__@param key_the key pointing to the associated value_@param defaultValue_the default value which is returned in case there is no value associated with the given key_@return the (default) value associated with the given key;private long getLongInternal(final String key, final long defaultValue) {__		long retVal = defaultValue___		try {_			synchronized (this.confData) {__				if (this.confData.containsKey(key)) {_					retVal = Long.parseLong(this.confData.get(key))__				}_			}_		} catch (NumberFormatException e) {__			if (LOG.isDebugEnabled()) {_				LOG.debug(StringUtils.stringifyException(e))__			}_		}__		return retVal__	};returns,the,value,associated,with,the,given,key,as,a,long,integer,param,key,the,key,pointing,to,the,associated,value,param,default,value,the,default,value,which,is,returned,in,case,there,is,no,value,associated,with,the,given,key,return,the,default,value,associated,with,the,given,key;private,long,get,long,internal,final,string,key,final,long,default,value,long,ret,val,default,value,try,synchronized,this,conf,data,if,this,conf,data,contains,key,key,ret,val,long,parse,long,this,conf,data,get,key,catch,number,format,exception,e,if,log,is,debug,enabled,log,debug,string,utils,stringify,exception,e,return,ret,val
GlobalConfiguration -> public static void includeConfiguration(Configuration conf);1412338914;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(Configuration conf) {_		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(Configuration conf);1416482279;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(Configuration conf) {_		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void includeConfiguration(Configuration conf);1455479358;Merges the given {@link Configuration} object into the global_configuration. If a key/value pair with an identical already_exists in the global configuration, it is overwritten by the_pair of the {@link Configuration} object.__@param conf_the {@link Configuration} object to merge into the global configuration;public static void includeConfiguration(Configuration conf) {_		get().includeConfigurationInternal(conf)__	};merges,the,given,link,configuration,object,into,the,global,configuration,if,a,key,value,pair,with,an,identical,already,exists,in,the,global,configuration,it,is,overwritten,by,the,pair,of,the,link,configuration,object,param,conf,the,link,configuration,object,to,merge,into,the,global,configuration;public,static,void,include,configuration,configuration,conf,get,include,configuration,internal,conf
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1405024514;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if(confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			configuration.confData.put(CONFIGDIRKEY, file.getAbsolutePath() )__			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}__		_		if (configuration != null) {_			configuration.confData.put(CONFIGDIRKEY, configDir)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,configuration,conf,data,put,configdirkey,file,get,absolute,path,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f,if,configuration,null,configuration,conf,data,put,configdirkey,config,dir
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1405090423;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if(confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			configuration.confData.put(CONFIGDIRKEY, file.getAbsolutePath() )__			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}__		_		if (configuration != null) {_			configuration.confData.put(CONFIGDIRKEY, configDir)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,configuration,conf,data,put,configdirkey,file,get,absolute,path,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f,if,configuration,null,configuration,conf,data,put,configdirkey,config,dir
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1409911022;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if(confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			configuration.confData.put(CONFIGDIRKEY, file.getAbsolutePath() )__			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}__		_		if (configuration != null) {_			configuration.confData.put(CONFIGDIRKEY, configDir)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,configuration,conf,data,put,configdirkey,file,get,absolute,path,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f,if,configuration,null,configuration,conf,data,put,configdirkey,config,dir
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1411473593;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if(confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			configuration.confData.put(CONFIGDIRKEY, file.getAbsolutePath() )__			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}__		_		if (configuration != null) {_			configuration.confData.put(CONFIGDIRKEY, configDir)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,configuration,conf,data,put,configdirkey,file,get,absolute,path,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f,if,configuration,null,configuration,conf,data,put,configdirkey,config,dir
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1411724090;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if(confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			configuration.confData.put(CONFIGDIRKEY, file.getAbsolutePath() )__			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}__		_		if (configuration != null) {_			configuration.confData.put(CONFIGDIRKEY, configDir)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,configuration,conf,data,put,configdirkey,file,get,absolute,path,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f,if,configuration,null,configuration,conf,data,put,configdirkey,config,dir
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1412338914;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if (confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1416482279;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if (confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f
GlobalConfiguration -> public static void loadConfiguration(final String configDir);1455479358;Loads the configuration files from the specified directory._<p>_XML and YAML are supported as configuration files. If both XML and YAML files exist in the configuration_directory, keys from YAML will overwrite keys from XML.__@param configDir_the directory which contains the configuration files;public static void loadConfiguration(final String configDir) {__		if (configDir == null) {_			LOG.warn("Given configuration directory is null, cannot load configuration")__			return__		}__		final File confDirFile = new File(configDir)__		if (!(confDirFile.exists())) {_			LOG.warn("The given configuration directory name '" + configDir + "' (" + confDirFile.getAbsolutePath()_				+ ") does not describe an existing directory.")__			return__		}_		_		if (confDirFile.isFile()) {_			final File file = new File(configDir)__			if(configDir.endsWith(".xml")) {_				get().loadXMLResource( file )__			} else if(configDir.endsWith(".yaml")) {_				get().loadYAMLResource(file)__			} else {_				LOG.warn("The given configuration has an unknown extension.")__				return__			}_			return__		}__		_		final File[] xmlFiles = filterFilesBySuffix(confDirFile, ".xml")__		final File[] yamlFiles = filterFilesBySuffix(confDirFile, new String[] { ".yaml", ".yml" })___		if ((xmlFiles == null || xmlFiles.length == 0) && (yamlFiles == null || yamlFiles.length == 0)) {_			LOG.warn("Unable to get the contents of the config directory '" + configDir + "' ("_				+ confDirFile.getAbsolutePath() + ").")__			return__		}__		_		for (File f : xmlFiles) {_			get().loadXMLResource(f)__		}__		_		for (File f : yamlFiles) {_			get().loadYAMLResource(f)__		}_	};loads,the,configuration,files,from,the,specified,directory,p,xml,and,yaml,are,supported,as,configuration,files,if,both,xml,and,yaml,files,exist,in,the,configuration,directory,keys,from,yaml,will,overwrite,keys,from,xml,param,config,dir,the,directory,which,contains,the,configuration,files;public,static,void,load,configuration,final,string,config,dir,if,config,dir,null,log,warn,given,configuration,directory,is,null,cannot,load,configuration,return,final,file,conf,dir,file,new,file,config,dir,if,conf,dir,file,exists,log,warn,the,given,configuration,directory,name,config,dir,conf,dir,file,get,absolute,path,does,not,describe,an,existing,directory,return,if,conf,dir,file,is,file,final,file,file,new,file,config,dir,if,config,dir,ends,with,xml,get,load,xmlresource,file,else,if,config,dir,ends,with,yaml,get,load,yamlresource,file,else,log,warn,the,given,configuration,has,an,unknown,extension,return,return,final,file,xml,files,filter,files,by,suffix,conf,dir,file,xml,final,file,yaml,files,filter,files,by,suffix,conf,dir,file,new,string,yaml,yml,if,xml,files,null,xml,files,length,0,yaml,files,null,yaml,files,length,0,log,warn,unable,to,get,the,contents,of,the,config,directory,config,dir,conf,dir,file,get,absolute,path,return,for,file,f,xml,files,get,load,xmlresource,f,for,file,f,yaml,files,get,load,yamlresource,f
