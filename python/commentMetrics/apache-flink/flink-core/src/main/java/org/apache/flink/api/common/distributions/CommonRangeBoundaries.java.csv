commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int getRangeIndex(T record) {     return binarySearch(record). }
true;private;1;21;// Search the range index of input record. ;// Search the range index of input record. private int binarySearch(T record) {     int low = 0.     int high = this.boundaries.length - 1.     typeComparator.extractKeys(record, keys, 0).     while (low <= high) {         final int mid = (low + high) >>> 1.         final int result = compareKeys(flatComparators, keys, this.boundaries[mid]).         if (result > 0) {             low = mid + 1.         } else if (result < 0) {             high = mid - 1.         } else {             return mid.         }     }     // bucket, since the boundaries are the upper bound     return low. }
false;private;3;14;;private int compareKeys(TypeComparator[] flatComparators, Object[] keys, Object[] boundary) {     if (flatComparators.length != keys.length || flatComparators.length != boundary.length) {         throw new RuntimeException("Can not compare keys with boundary due to mismatched length.").     }     for (int i = 0. i < flatComparators.length. i++) {         int result = flatComparators[i].compare(keys[i], boundary[i]).         if (result != 0) {             return result.         }     }     return 0. }
