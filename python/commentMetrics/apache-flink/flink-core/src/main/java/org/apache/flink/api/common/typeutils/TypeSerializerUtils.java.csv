commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * Takes snapshots of the given serializers. In case where the snapshots  * are still extending the old {@code TypeSerializerConfigSnapshot} class, the snapshots  * are set up properly (with their originating serializer) such that the backwards  * compatible code paths work.  */ ;/**  * Takes snapshots of the given serializers. In case where the snapshots  * are still extending the old {@code TypeSerializerConfigSnapshot} class, the snapshots  * are set up properly (with their originating serializer) such that the backwards  * compatible code paths work.  */ public static TypeSerializerSnapshot<?>[] snapshotBackwardsCompatible(TypeSerializer<?>... originatingSerializers) {     return Arrays.stream(originatingSerializers).map(TypeSerializerUtils::snapshotBackwardsCompatible).toArray(TypeSerializerSnapshot[]::new). }
true;public,static;1;3;/**  * Takes a snapshot of the given serializer. In case where the snapshot  * is still extending the old {@code TypeSerializerConfigSnapshot} class, the snapshot  * is set up properly (with its originating serializer) such that the backwards  * compatible code paths work.  */ ;/**  * Takes a snapshot of the given serializer. In case where the snapshot  * is still extending the old {@code TypeSerializerConfigSnapshot} class, the snapshot  * is set up properly (with its originating serializer) such that the backwards  * compatible code paths work.  */ public static <T> TypeSerializerSnapshot<T> snapshotBackwardsCompatible(TypeSerializer<T> originatingSerializer) {     return configureForBackwardsCompatibility(originatingSerializer.snapshotConfiguration(), originatingSerializer). }
true;private,static;2;14;/**  * Utility method to bind the serializer and serializer snapshot to a common  * generic type variable.  */ ;/**  * Utility method to bind the serializer and serializer snapshot to a common  * generic type variable.  */ @SuppressWarnings({ "unchecked", "deprecation" }) private static <T> TypeSerializerSnapshot<T> configureForBackwardsCompatibility(TypeSerializerSnapshot<?> snapshot, TypeSerializer<?> serializer) {     TypeSerializerSnapshot<T> typedSnapshot = (TypeSerializerSnapshot<T>) snapshot.     TypeSerializer<T> typedSerializer = (TypeSerializer<T>) serializer.     if (snapshot instanceof TypeSerializerConfigSnapshot) {         ((TypeSerializerConfigSnapshot<T>) typedSnapshot).setPriorSerializer(typedSerializer).     }     return typedSnapshot. }
