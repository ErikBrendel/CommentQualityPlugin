commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;8;;@Override public TypeSerializer<Row> duplicate() {     TypeSerializer<?>[] duplicateFieldSerializers = new TypeSerializer[fieldSerializers.length].     for (int i = 0. i < fieldSerializers.length. i++) {         duplicateFieldSerializers[i] = fieldSerializers[i].duplicate().     }     return new RowSerializer(duplicateFieldSerializers). }
false;public;0;4;;@Override public Row createInstance() {     return new Row(fieldSerializers.length). }
false;public;1;21;;@Override public Row copy(Row from) {     int len = fieldSerializers.length.     if (from.getArity() != len) {         throw new RuntimeException("Row arity of from does not match serializers.").     }     Row result = new Row(len).     for (int i = 0. i < len. i++) {         Object fromField = from.getField(i).         if (fromField != null) {             Object copy = fieldSerializers[i].copy(fromField).             result.setField(i, copy).         } else {             result.setField(i, null).         }     }     return result. }
false;public;2;33;;@Override public Row copy(Row from, Row reuse) {     int len = fieldSerializers.length.     // cannot reuse, do a non-reuse copy     if (reuse == null) {         return copy(from).     }     if (from.getArity() != len || reuse.getArity() != len) {         throw new RuntimeException("Row arity of reuse or from is incompatible with this RowSerializer.").     }     for (int i = 0. i < len. i++) {         Object fromField = from.getField(i).         if (fromField != null) {             Object reuseField = reuse.getField(i).             if (reuseField != null) {                 Object copy = fieldSerializers[i].copy(fromField, reuseField).                 reuse.setField(i, copy).             } else {                 Object copy = fieldSerializers[i].copy(fromField).                 reuse.setField(i, copy).             }         } else {             reuse.setField(i, null).         }     }     return reuse. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;0;3;;public int getArity() {     return arity. }
false;public;2;19;;@Override public void serialize(Row record, DataOutputView target) throws IOException {     int len = fieldSerializers.length.     if (record.getArity() != len) {         throw new RuntimeException("Row arity of from does not match serializers.").     }     // write a null mask     writeNullMask(len, record, target).     // serialize non-null fields     for (int i = 0. i < len. i++) {         Object o = record.getField(i).         if (o != null) {             fieldSerializers[i].serialize(o, target).         }     } }
false;public;1;20;;@Override public Row deserialize(DataInputView source) throws IOException {     int len = fieldSerializers.length.     Row result = new Row(len).     // read null mask     readIntoNullMask(len, source, nullMask).     for (int i = 0. i < len. i++) {         if (nullMask[i]) {             result.setField(i, null).         } else {             result.setField(i, fieldSerializers[i].deserialize(source)).         }     }     return result. }
false;public;2;28;;@Override public Row deserialize(Row reuse, DataInputView source) throws IOException {     int len = fieldSerializers.length.     if (reuse.getArity() != len) {         throw new RuntimeException("Row arity of from does not match serializers.").     }     // read null mask     readIntoNullMask(len, source, nullMask).     for (int i = 0. i < len. i++) {         if (nullMask[i]) {             reuse.setField(i, null).         } else {             Object reuseField = reuse.getField(i).             if (reuseField != null) {                 reuse.setField(i, fieldSerializers[i].deserialize(reuseField, source)).             } else {                 reuse.setField(i, fieldSerializers[i].deserialize(source)).             }         }     }     return reuse. }
false;public;2;13;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     int len = fieldSerializers.length.     // copy null mask     readIntoAndCopyNullMask(len, source, target, nullMask).     for (int i = 0. i < len. i++) {         if (!nullMask[i]) {             fieldSerializers[i].copy(source, target).         }     } }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj instanceof RowSerializer) {         RowSerializer other = (RowSerializer) obj.         if (this.fieldSerializers.length == other.fieldSerializers.length) {             for (int i = 0. i < this.fieldSerializers.length. i++) {                 if (!this.fieldSerializers[i].equals(other.fieldSerializers[i])) {                     return false.                 }             }             return true.         }     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(fieldSerializers). }
false;private;1;4;;// -------------------------------------------------------------------------------------------- private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     this.nullMask = new boolean[fieldSerializers.length]. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshoting & compatibility // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<Row> snapshotConfiguration() {     return new RowSerializerSnapshot(this). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;12;;@Override public TypeSerializerSchemaCompatibility<Row> resolveSchemaCompatibility(TypeSerializer<Row> newSerializer) {     TypeSerializerSnapshot<?>[] nestedSnapshots = getNestedSerializersAndConfigs().stream().map(t -> t.f1).toArray(TypeSerializerSnapshot[]::new).     return CompositeTypeSerializerUtil.delegateCompatibilityCheckToNewSnapshot(newSerializer, new RowSerializerSnapshot(), nestedSnapshots). }
false;protected;0;4;;@Override protected int getCurrentOuterSnapshotVersion() {     return VERSION. }
false;protected;1;4;;@Override protected TypeSerializer<?>[] getNestedSerializers(RowSerializer outerSerializer) {     return outerSerializer.fieldSerializers. }
false;protected;1;4;;@Override protected RowSerializer createOuterSerializerWithNestedSerializers(TypeSerializer<?>[] nestedSerializers) {     return new RowSerializer(nestedSerializers). }
