commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The work method.  *  * @throws E Exceptions may be thrown.  */ ;/**  * The work method.  *  * @throws E Exceptions may be thrown.  */ void run() throws E.
true;static;1;9;/**  * Converts a {@link ThrowingRunnable} into a {@link Runnable} which throws all checked exceptions  * as unchecked.  *  * @param throwingRunnable to convert into a {@link Runnable}  * @return {@link Runnable} which throws all checked exceptions as unchecked.  */ ;/**  * Converts a {@link ThrowingRunnable} into a {@link Runnable} which throws all checked exceptions  * as unchecked.  *  * @param throwingRunnable to convert into a {@link Runnable}  * @return {@link Runnable} which throws all checked exceptions as unchecked.  */ static Runnable unchecked(ThrowingRunnable<?> throwingRunnable) {     return () -> {         try {             throwingRunnable.run().         } catch (Throwable t) {             ExceptionUtils.rethrow(t).         }     }. }
