commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public byte[] createInstance() {     return EMPTY. }
false;public;1;6;;@Override public byte[] copy(byte[] from) {     byte[] copy = new byte[from.length].     System.arraycopy(from, 0, copy, 0, from.length).     return copy. }
false;public;2;4;;@Override public byte[] copy(byte[] from, byte[] reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;10;;@Override public void serialize(byte[] record, DataOutputView target) throws IOException {     if (record == null) {         throw new IllegalArgumentException("The record must not be null.").     }     final int len = record.length.     target.writeInt(len).     target.write(record). }
false;public;1;7;;@Override public byte[] deserialize(DataInputView source) throws IOException {     final int len = source.readInt().     byte[] result = new byte[len].     source.readFully(result).     return result. }
false;public;2;4;;@Override public byte[] deserialize(byte[] reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;6;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final int len = source.readInt().     target.writeInt(len).     target.write(source, len). }
false;public;0;4;;@Override public TypeSerializerSnapshot<byte[]> snapshotConfiguration() {     return new BytePrimitiveArraySerializerSnapshot(). }
