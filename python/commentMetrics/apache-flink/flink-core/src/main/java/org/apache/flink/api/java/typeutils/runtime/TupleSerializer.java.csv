commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Override public TupleSerializer<T> duplicate() {     boolean stateful = false.     TypeSerializer<?>[] duplicateFieldSerializers = new TypeSerializer<?>[fieldSerializers.length].     for (int i = 0. i < fieldSerializers.length. i++) {         duplicateFieldSerializers[i] = fieldSerializers[i].duplicate().         if (duplicateFieldSerializers[i] != fieldSerializers[i]) {             // at least one of them is stateful             stateful = true.         }     }     if (stateful) {         return new TupleSerializer<T>(tupleClass, duplicateFieldSerializers).     } else {         return this.     } }
false;public;0;15;;@Override public T createInstance() {     try {         T t = tupleClass.newInstance().         for (int i = 0. i < arity. i++) {             t.setField(fieldSerializers[i].createInstance(), i).         }         return t.     } catch (Exception e) {         throw new RuntimeException("Cannot instantiate tuple.", e).     } }
false;public;1;16;;@Override public T createInstance(Object[] fields) {     try {         T t = tupleClass.newInstance().         for (int i = 0. i < arity. i++) {             t.setField(fields[i], i).         }         return t.     } catch (Exception e) {         throw new RuntimeException("Cannot instantiate tuple.", e).     } }
false;public;2;7;;@Override public T createOrReuseInstance(Object[] fields, T reuse) {     for (int i = 0. i < arity. i++) {         reuse.setField(fields[i], i).     }     return reuse. }
false;public;1;9;;@Override public T copy(T from) {     T target = instantiateRaw().     for (int i = 0. i < arity. i++) {         Object copy = fieldSerializers[i].copy(from.getField(i)).         target.setField(copy, i).     }     return target. }
false;public;2;9;;@Override public T copy(T from, T reuse) {     for (int i = 0. i < arity. i++) {         Object copy = fieldSerializers[i].copy((Object) from.getField(i), reuse.getField(i)).         reuse.setField(copy, i).     }     return reuse. }
false;public;2;11;;@Override public void serialize(T value, DataOutputView target) throws IOException {     for (int i = 0. i < arity. i++) {         Object o = value.getField(i).         try {             fieldSerializers[i].serialize(o, target).         } catch (NullPointerException npex) {             throw new NullFieldException(i, npex).         }     } }
false;public;1;9;;@Override public T deserialize(DataInputView source) throws IOException {     T tuple = instantiateRaw().     for (int i = 0. i < arity. i++) {         Object field = fieldSerializers[i].deserialize(source).         tuple.setField(field, i).     }     return tuple. }
false;public;2;8;;@Override public T deserialize(T reuse, DataInputView source) throws IOException {     for (int i = 0. i < arity. i++) {         Object field = fieldSerializers[i].deserialize(reuse.getField(i), source).         reuse.setField(field, i).     }     return reuse. }
false;public;0;4;;@Override public TypeSerializerSnapshot<T> snapshotConfiguration() {     return new TupleSerializerSnapshot<>(this). }
false;private;0;8;;private T instantiateRaw() {     try {         return tupleClass.newInstance().     } catch (Exception e) {         throw new RuntimeException("Cannot instantiate tuple.", e).     } }
false;public;1;13;;@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass(TypeSerializerConfigSnapshot<T> deprecatedConfigSnapshot) {     checkArgument(deprecatedConfigSnapshot instanceof TupleSerializerConfigSnapshot).     final TupleSerializerConfigSnapshot<T> configSnapshot = (TupleSerializerConfigSnapshot<T>) deprecatedConfigSnapshot.     TypeSerializerSnapshot[] nestedSnapshots = configSnapshot.getNestedSerializersAndConfigs().stream().map(t -> t.f1).toArray(TypeSerializerSnapshot[]::new).     TupleSerializerSnapshot<T> newCompositeSnapshot = new TupleSerializerSnapshot<>(configSnapshot.getTupleClass()).     return delegateCompatibilityCheckToNewSnapshot(this, newCompositeSnapshot, nestedSnapshots). }
