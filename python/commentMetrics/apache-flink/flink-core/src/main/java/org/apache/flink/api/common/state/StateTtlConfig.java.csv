# id;timestamp;commentText;codeText;commentWords;codeWords
StateTtlConfig -> Builder -> @Nonnull 		public Builder setUpdateType(UpdateType updateType);1533318024;Sets the ttl update type.__@param updateType The ttl update type configures when to update last access timestamp which prolongs state TTL.;@Nonnull_		public Builder setUpdateType(UpdateType updateType) {_			this.updateType = updateType__			return this__		};sets,the,ttl,update,type,param,update,type,the,ttl,update,type,configures,when,to,update,last,access,timestamp,which,prolongs,state,ttl;nonnull,public,builder,set,update,type,update,type,update,type,this,update,type,update,type,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setUpdateType(UpdateType updateType);1537531551;Sets the ttl update type.__@param updateType The ttl update type configures when to update last access timestamp which prolongs state TTL.;@Nonnull_		public Builder setUpdateType(UpdateType updateType) {_			this.updateType = updateType__			return this__		};sets,the,ttl,update,type,param,update,type,the,ttl,update,type,configures,when,to,update,last,access,timestamp,which,prolongs,state,ttl;nonnull,public,builder,set,update,type,update,type,update,type,this,update,type,update,type,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setUpdateType(UpdateType updateType);1548755874;Sets the ttl update type.__@param updateType The ttl update type configures when to update last access timestamp which prolongs state TTL.;@Nonnull_		public Builder setUpdateType(UpdateType updateType) {_			this.updateType = updateType__			return this__		};sets,the,ttl,update,type,param,update,type,the,ttl,update,type,configures,when,to,update,last,access,timestamp,which,prolongs,state,ttl;nonnull,public,builder,set,update,type,update,type,update,type,this,update,type,update,type,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setUpdateType(UpdateType updateType);1550581511;Sets the ttl update type.__@param updateType The ttl update type configures when to update last access timestamp which prolongs state TTL.;@Nonnull_		public Builder setUpdateType(UpdateType updateType) {_			this.updateType = updateType__			return this__		};sets,the,ttl,update,type,param,update,type,the,ttl,update,type,configures,when,to,update,last,access,timestamp,which,prolongs,state,ttl;nonnull,public,builder,set,update,type,update,type,update,type,this,update,type,update,type,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupIncrementally( 			@Nonnegative int cleanupSize, 			boolean runCleanupForEveryRecord);1548755874;Cleanup expired state incrementally cleanup local state.__<p>Upon every state access this cleanup strategy checks a bunch of state keys for expiration_and cleans up expired ones. It keeps a lazy iterator through all keys with relaxed consistency_if backend supports it. This way all keys should be regularly checked and cleaned eventually over time_if any state is constantly being accessed.__<p>Additionally to the incremental cleanup upon state access, it can also run per every record._Caution: if there are a lot of registered states using this option,_they all will be iterated for every record to check if there is something to cleanup.__<p>Note: if no access happens to this state or no records are processed_in case of {@code runCleanupForEveryRecord}, expired state will persist.__<p>Note: Time spent for the incremental cleanup increases record processing latency.__<p>Note: At the moment incremental cleanup is implemented only for Heap state backend._Setting it for RocksDB will have no effect.__<p>Note: If heap state backend is used with synchronous snapshotting, the global iterator keeps a copy of all keys_while iterating because of its specific implementation which does not support concurrent modifications._Enabling of this feature will increase memory consumption then. Asynchronous snapshotting does not have this problem.__@param cleanupSize max number of keys pulled from queue for clean up upon state touch for any key_@param runCleanupForEveryRecord run incremental cleanup per each processed record;@Nonnull_		public Builder cleanupIncrementally(_			@Nonnegative int cleanupSize,_			boolean runCleanupForEveryRecord) {_			cleanupStrategies.strategies.put(_				CleanupStrategies.Strategies.INCREMENTAL_CLEANUP,_				new IncrementalCleanupStrategy(cleanupSize, runCleanupForEveryRecord))__			return this__		};cleanup,expired,state,incrementally,cleanup,local,state,p,upon,every,state,access,this,cleanup,strategy,checks,a,bunch,of,state,keys,for,expiration,and,cleans,up,expired,ones,it,keeps,a,lazy,iterator,through,all,keys,with,relaxed,consistency,if,backend,supports,it,this,way,all,keys,should,be,regularly,checked,and,cleaned,eventually,over,time,if,any,state,is,constantly,being,accessed,p,additionally,to,the,incremental,cleanup,upon,state,access,it,can,also,run,per,every,record,caution,if,there,are,a,lot,of,registered,states,using,this,option,they,all,will,be,iterated,for,every,record,to,check,if,there,is,something,to,cleanup,p,note,if,no,access,happens,to,this,state,or,no,records,are,processed,in,case,of,code,run,cleanup,for,every,record,expired,state,will,persist,p,note,time,spent,for,the,incremental,cleanup,increases,record,processing,latency,p,note,at,the,moment,incremental,cleanup,is,implemented,only,for,heap,state,backend,setting,it,for,rocks,db,will,have,no,effect,p,note,if,heap,state,backend,is,used,with,synchronous,snapshotting,the,global,iterator,keeps,a,copy,of,all,keys,while,iterating,because,of,its,specific,implementation,which,does,not,support,concurrent,modifications,enabling,of,this,feature,will,increase,memory,consumption,then,asynchronous,snapshotting,does,not,have,this,problem,param,cleanup,size,max,number,of,keys,pulled,from,queue,for,clean,up,upon,state,touch,for,any,key,param,run,cleanup,for,every,record,run,incremental,cleanup,per,each,processed,record;nonnull,public,builder,cleanup,incrementally,nonnegative,int,cleanup,size,boolean,run,cleanup,for,every,record,cleanup,strategies,strategies,put,cleanup,strategies,strategies,new,incremental,cleanup,strategy,cleanup,size,run,cleanup,for,every,record,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupIncrementally( 			@Nonnegative int cleanupSize, 			boolean runCleanupForEveryRecord);1550581511;Cleanup expired state incrementally cleanup local state.__<p>Upon every state access this cleanup strategy checks a bunch of state keys for expiration_and cleans up expired ones. It keeps a lazy iterator through all keys with relaxed consistency_if backend supports it. This way all keys should be regularly checked and cleaned eventually over time_if any state is constantly being accessed.__<p>Additionally to the incremental cleanup upon state access, it can also run per every record._Caution: if there are a lot of registered states using this option,_they all will be iterated for every record to check if there is something to cleanup.__<p>Note: if no access happens to this state or no records are processed_in case of {@code runCleanupForEveryRecord}, expired state will persist.__<p>Note: Time spent for the incremental cleanup increases record processing latency.__<p>Note: At the moment incremental cleanup is implemented only for Heap state backend._Setting it for RocksDB will have no effect.__<p>Note: If heap state backend is used with synchronous snapshotting, the global iterator keeps a copy of all keys_while iterating because of its specific implementation which does not support concurrent modifications._Enabling of this feature will increase memory consumption then. Asynchronous snapshotting does not have this problem.__@param cleanupSize max number of keys pulled from queue for clean up upon state touch for any key_@param runCleanupForEveryRecord run incremental cleanup per each processed record;@Nonnull_		public Builder cleanupIncrementally(_			@Nonnegative int cleanupSize,_			boolean runCleanupForEveryRecord) {_			cleanupStrategies.activate(_				CleanupStrategies.Strategies.INCREMENTAL_CLEANUP,_				new IncrementalCleanupStrategy(cleanupSize, runCleanupForEveryRecord))__			return this__		};cleanup,expired,state,incrementally,cleanup,local,state,p,upon,every,state,access,this,cleanup,strategy,checks,a,bunch,of,state,keys,for,expiration,and,cleans,up,expired,ones,it,keeps,a,lazy,iterator,through,all,keys,with,relaxed,consistency,if,backend,supports,it,this,way,all,keys,should,be,regularly,checked,and,cleaned,eventually,over,time,if,any,state,is,constantly,being,accessed,p,additionally,to,the,incremental,cleanup,upon,state,access,it,can,also,run,per,every,record,caution,if,there,are,a,lot,of,registered,states,using,this,option,they,all,will,be,iterated,for,every,record,to,check,if,there,is,something,to,cleanup,p,note,if,no,access,happens,to,this,state,or,no,records,are,processed,in,case,of,code,run,cleanup,for,every,record,expired,state,will,persist,p,note,time,spent,for,the,incremental,cleanup,increases,record,processing,latency,p,note,at,the,moment,incremental,cleanup,is,implemented,only,for,heap,state,backend,setting,it,for,rocks,db,will,have,no,effect,p,note,if,heap,state,backend,is,used,with,synchronous,snapshotting,the,global,iterator,keeps,a,copy,of,all,keys,while,iterating,because,of,its,specific,implementation,which,does,not,support,concurrent,modifications,enabling,of,this,feature,will,increase,memory,consumption,then,asynchronous,snapshotting,does,not,have,this,problem,param,cleanup,size,max,number,of,keys,pulled,from,queue,for,clean,up,upon,state,touch,for,any,key,param,run,cleanup,for,every,record,run,incremental,cleanup,per,each,processed,record;nonnull,public,builder,cleanup,incrementally,nonnegative,int,cleanup,size,boolean,run,cleanup,for,every,record,cleanup,strategies,activate,cleanup,strategies,strategies,new,incremental,cleanup,strategy,cleanup,size,run,cleanup,for,every,record,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic);1533318024;Sets the time characteristic.__@param timeCharacteristic The time characteristic configures time scale to use for ttl.;@Nonnull_		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic) {_			this.timeCharacteristic = timeCharacteristic__			return this__		};sets,the,time,characteristic,param,time,characteristic,the,time,characteristic,configures,time,scale,to,use,for,ttl;nonnull,public,builder,set,time,characteristic,nonnull,time,characteristic,time,characteristic,this,time,characteristic,time,characteristic,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic);1537531551;Sets the time characteristic.__@param timeCharacteristic The time characteristic configures time scale to use for ttl.;@Nonnull_		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic) {_			this.timeCharacteristic = timeCharacteristic__			return this__		};sets,the,time,characteristic,param,time,characteristic,the,time,characteristic,configures,time,scale,to,use,for,ttl;nonnull,public,builder,set,time,characteristic,nonnull,time,characteristic,time,characteristic,this,time,characteristic,time,characteristic,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic);1548755874;Sets the time characteristic.__@param timeCharacteristic The time characteristic configures time scale to use for ttl.;@Nonnull_		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic) {_			this.timeCharacteristic = timeCharacteristic__			return this__		};sets,the,time,characteristic,param,time,characteristic,the,time,characteristic,configures,time,scale,to,use,for,ttl;nonnull,public,builder,set,time,characteristic,nonnull,time,characteristic,time,characteristic,this,time,characteristic,time,characteristic,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic);1550581511;Sets the time characteristic.__@param timeCharacteristic The time characteristic configures time scale to use for ttl.;@Nonnull_		public Builder setTimeCharacteristic(@Nonnull TimeCharacteristic timeCharacteristic) {_			this.timeCharacteristic = timeCharacteristic__			return this__		};sets,the,time,characteristic,param,time,characteristic,the,time,characteristic,configures,time,scale,to,use,for,ttl;nonnull,public,builder,set,time,characteristic,nonnull,time,characteristic,time,characteristic,this,time,characteristic,time,characteristic,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility);1533318024;Sets the state visibility.__@param stateVisibility The state visibility configures whether expired user value can be returned or not.;@Nonnull_		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility) {_			this.stateVisibility = stateVisibility__			return this__		};sets,the,state,visibility,param,state,visibility,the,state,visibility,configures,whether,expired,user,value,can,be,returned,or,not;nonnull,public,builder,set,state,visibility,nonnull,state,visibility,state,visibility,this,state,visibility,state,visibility,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility);1537531551;Sets the state visibility.__@param stateVisibility The state visibility configures whether expired user value can be returned or not.;@Nonnull_		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility) {_			this.stateVisibility = stateVisibility__			return this__		};sets,the,state,visibility,param,state,visibility,the,state,visibility,configures,whether,expired,user,value,can,be,returned,or,not;nonnull,public,builder,set,state,visibility,nonnull,state,visibility,state,visibility,this,state,visibility,state,visibility,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility);1548755874;Sets the state visibility.__@param stateVisibility The state visibility configures whether expired user value can be returned or not.;@Nonnull_		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility) {_			this.stateVisibility = stateVisibility__			return this__		};sets,the,state,visibility,param,state,visibility,the,state,visibility,configures,whether,expired,user,value,can,be,returned,or,not;nonnull,public,builder,set,state,visibility,nonnull,state,visibility,state,visibility,this,state,visibility,state,visibility,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility);1550581511;Sets the state visibility.__@param stateVisibility The state visibility configures whether expired user value can be returned or not.;@Nonnull_		public Builder setStateVisibility(@Nonnull StateVisibility stateVisibility) {_			this.stateVisibility = stateVisibility__			return this__		};sets,the,state,visibility,param,state,visibility,the,state,visibility,configures,whether,expired,user,value,can,be,returned,or,not;nonnull,public,builder,set,state,visibility,nonnull,state,visibility,state,visibility,this,state,visibility,state,visibility,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupFullSnapshot();1533318024;Cleanup expired state in full snapshot on checkpoint.;@Nonnull_		public Builder cleanupFullSnapshot() {_			cleanupStrategies.strategies.put(_				CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT,_				new CleanupStrategies.CleanupStrategy() {  })__			return this__		};cleanup,expired,state,in,full,snapshot,on,checkpoint;nonnull,public,builder,cleanup,full,snapshot,cleanup,strategies,strategies,put,cleanup,strategies,strategies,new,cleanup,strategies,cleanup,strategy,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupFullSnapshot();1537531551;Cleanup expired state in full snapshot on checkpoint.;@Nonnull_		public Builder cleanupFullSnapshot() {_			cleanupStrategies.strategies.put(_				CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT,_				new CleanupStrategies.CleanupStrategy() {  })__			return this__		};cleanup,expired,state,in,full,snapshot,on,checkpoint;nonnull,public,builder,cleanup,full,snapshot,cleanup,strategies,strategies,put,cleanup,strategies,strategies,new,cleanup,strategies,cleanup,strategy,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupFullSnapshot();1548755874;Cleanup expired state in full snapshot on checkpoint.;@Nonnull_		public Builder cleanupFullSnapshot() {_			cleanupStrategies.strategies.put(_				CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT,_				new CleanupStrategies.EmptyCleanupStrategy())__			return this__		};cleanup,expired,state,in,full,snapshot,on,checkpoint;nonnull,public,builder,cleanup,full,snapshot,cleanup,strategies,strategies,put,cleanup,strategies,strategies,new,cleanup,strategies,empty,cleanup,strategy,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder cleanupFullSnapshot();1550581511;Cleanup expired state in full snapshot on checkpoint.;@Nonnull_		public Builder cleanupFullSnapshot() {_			cleanupStrategies.activate(CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT)__			return this__		};cleanup,expired,state,in,full,snapshot,on,checkpoint;nonnull,public,builder,cleanup,full,snapshot,cleanup,strategies,activate,cleanup,strategies,strategies,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTtl(@Nonnull Time ttl);1533318024;Sets the ttl time._@param ttl The ttl time.;@Nonnull_		public Builder setTtl(@Nonnull Time ttl) {_			this.ttl = ttl__			return this__		};sets,the,ttl,time,param,ttl,the,ttl,time;nonnull,public,builder,set,ttl,nonnull,time,ttl,this,ttl,ttl,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTtl(@Nonnull Time ttl);1537531551;Sets the ttl time._@param ttl The ttl time.;@Nonnull_		public Builder setTtl(@Nonnull Time ttl) {_			this.ttl = ttl__			return this__		};sets,the,ttl,time,param,ttl,the,ttl,time;nonnull,public,builder,set,ttl,nonnull,time,ttl,this,ttl,ttl,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTtl(@Nonnull Time ttl);1548755874;Sets the ttl time._@param ttl The ttl time.;@Nonnull_		public Builder setTtl(@Nonnull Time ttl) {_			this.ttl = ttl__			return this__		};sets,the,ttl,time,param,ttl,the,ttl,time;nonnull,public,builder,set,ttl,nonnull,time,ttl,this,ttl,ttl,return,this
StateTtlConfig -> Builder -> @Nonnull 		public Builder setTtl(@Nonnull Time ttl);1550581511;Sets the ttl time._@param ttl The ttl time.;@Nonnull_		public Builder setTtl(@Nonnull Time ttl) {_			this.ttl = ttl__			return this__		};sets,the,ttl,time,param,ttl,the,ttl,time;nonnull,public,builder,set,ttl,nonnull,time,ttl,this,ttl,ttl,return,this
