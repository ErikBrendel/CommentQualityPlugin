commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the memory size in bytes.  */ ;// ------------------------------------------------------------------------ /**  * Gets the memory size in bytes.  */ public long getBytes() {     return bytes. }
true;public;0;3;/**  * Gets the memory size in Kibibytes (= 1024 bytes).  */ ;/**  * Gets the memory size in Kibibytes (= 1024 bytes).  */ public long getKibiBytes() {     return bytes >> 10. }
true;public;0;3;/**  * Gets the memory size in Mebibytes (= 1024 Kibibytes).  */ ;/**  * Gets the memory size in Mebibytes (= 1024 Kibibytes).  */ public int getMebiBytes() {     return (int) (bytes >> 20). }
true;public;0;3;/**  * Gets the memory size in Gibibytes (= 1024 Mebibytes).  */ ;/**  * Gets the memory size in Gibibytes (= 1024 Mebibytes).  */ public long getGibiBytes() {     return bytes >> 30. }
true;public;0;3;/**  * Gets the memory size in Tebibytes (= 1024 Gibibytes).  */ ;/**  * Gets the memory size in Tebibytes (= 1024 Gibibytes).  */ public long getTebiBytes() {     return bytes >> 40. }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public int hashCode() {     return (int) (bytes ^ (bytes >>> 32)). }
false;public;1;5;;@Override public boolean equals(Object obj) {     return obj == this || (obj != null && obj.getClass() == this.getClass() && ((MemorySize) obj).bytes == this.bytes). }
false;public;0;4;;@Override public String toString() {     return bytes + " bytes". }
true;public,static;1;3;/**  * Parses the given string as as MemorySize.  *  * @param text The string to parse  * @return The parsed MemorySize  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ ;// ------------------------------------------------------------------------ // Parsing // ------------------------------------------------------------------------ /**  * Parses the given string as as MemorySize.  *  * @param text The string to parse  * @return The parsed MemorySize  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ public static MemorySize parse(String text) throws IllegalArgumentException {     return new MemorySize(parseBytes(text)). }
true;public,static;2;7;/**  * Parses the given string with a default unit.  *  * @param text The string to parse.  * @param defaultUnit specify the default unit.  * @return The parsed MemorySize.  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ ;/**  * Parses the given string with a default unit.  *  * @param text The string to parse.  * @param defaultUnit specify the default unit.  * @return The parsed MemorySize.  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ public static MemorySize parse(String text, MemoryUnit defaultUnit) throws IllegalArgumentException {     if (!hasUnit(text)) {         return parse(text + defaultUnit.getUnits()[0]).     }     return parse(text). }
true;public,static;1;66;/**  * Parses the given string as bytes.  * The supported expressions are listed under {@link MemorySize}.  *  * @param text The string to parse  * @return The parsed size, in bytes.  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ ;/**  * Parses the given string as bytes.  * The supported expressions are listed under {@link MemorySize}.  *  * @param text The string to parse  * @return The parsed size, in bytes.  *  * @throws IllegalArgumentException Thrown, if the expression cannot be parsed.  */ public static long parseBytes(String text) throws IllegalArgumentException {     checkNotNull(text, "text").     final String trimmed = text.trim().     checkArgument(!trimmed.isEmpty(), "argument is an empty- or whitespace-only string").     final int len = trimmed.length().     int pos = 0.     char current.     while (pos < len && (current = trimmed.charAt(pos)) >= '0' && current <= '9') {         pos++.     }     final String number = trimmed.substring(0, pos).     final String unit = trimmed.substring(pos).trim().toLowerCase(Locale.US).     if (number.isEmpty()) {         throw new NumberFormatException("text does not start with a number").     }     final long value.     try {         // this throws a NumberFormatException on overflow         value = Long.parseLong(number).     } catch (NumberFormatException e) {         throw new IllegalArgumentException("The value '" + number + "' cannot be re represented as 64bit number (numeric overflow).").     }     final long multiplier.     if (unit.isEmpty()) {         multiplier = 1L.     } else {         if (matchesAny(unit, BYTES)) {             multiplier = 1L.         } else if (matchesAny(unit, KILO_BYTES)) {             multiplier = 1024L.         } else if (matchesAny(unit, MEGA_BYTES)) {             multiplier = 1024L * 1024L.         } else if (matchesAny(unit, GIGA_BYTES)) {             multiplier = 1024L * 1024L * 1024L.         } else if (matchesAny(unit, TERA_BYTES)) {             multiplier = 1024L * 1024L * 1024L * 1024L.         } else {             throw new IllegalArgumentException("Memory size unit '" + unit + "' does not match any of the recognized units: " + MemoryUnit.getAllUnits()).         }     }     final long result = value * multiplier.     // check for overflow     if (result / multiplier != value) {         throw new IllegalArgumentException("The value '" + text + "' cannot be re represented as 64bit number of bytes (numeric overflow).").     }     return result. }
false;private,static;2;8;;private static boolean matchesAny(String str, MemoryUnit unit) {     for (String s : unit.getUnits()) {         if (s.equals(str)) {             return true.         }     }     return false. }
false;public;0;3;;public String[] getUnits() {     return units. }
false;public,static;0;3;;public static String getAllUnits() {     return concatenateUnits(BYTES.getUnits(), KILO_BYTES.getUnits(), MEGA_BYTES.getUnits(), GIGA_BYTES.getUnits(), TERA_BYTES.getUnits()). }
false;public,static;1;18;;public static boolean hasUnit(String text) {     checkNotNull(text, "text").     final String trimmed = text.trim().     checkArgument(!trimmed.isEmpty(), "argument is an empty- or whitespace-only string").     final int len = trimmed.length().     int pos = 0.     char current.     while (pos < len && (current = trimmed.charAt(pos)) >= '0' && current <= '9') {         pos++.     }     final String unit = trimmed.substring(pos).trim().toLowerCase(Locale.US).     return unit.length() > 0. }
false;private,static;1;18;;private static String concatenateUnits(final String[]... allUnits) {     final StringBuilder builder = new StringBuilder(128).     for (String[] units : allUnits) {         builder.append('(').         for (String unit : units) {             builder.append(unit).             builder.append(" | ").         }         builder.setLength(builder.length() - 3).         builder.append(") / ").     }     builder.setLength(builder.length() - 3).     return builder.toString(). }
