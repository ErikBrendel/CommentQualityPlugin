commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public ValueSerializer<T> duplicate() {     return new ValueSerializer<T>(type). }
false;public;0;4;;@Override public T createInstance() {     return InstantiationUtil.instantiate(this.type). }
false;public;1;6;;@Override public T copy(T from) {     checkKryoInitialized().     return KryoUtils.copy(from, kryo, this). }
false;public;2;6;;@Override public T copy(T from, T reuse) {     checkKryoInitialized().     return KryoUtils.copy(from, reuse, kryo, this). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;4;;@Override public void serialize(T value, DataOutputView target) throws IOException {     value.write(target). }
false;public;1;4;;@Override public T deserialize(DataInputView source) throws IOException {     return deserialize(createInstance(), source). }
false;public;2;5;;@Override public T deserialize(T reuse, DataInputView source) throws IOException {     reuse.read(source).     return reuse. }
false;public;2;9;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     if (this.copyInstance == null) {         this.copyInstance = InstantiationUtil.instantiate(type).     }     this.copyInstance.read(source).     this.copyInstance.write(target). }
false;private;0;13;;private void checkKryoInitialized() {     if (this.kryo == null) {         this.kryo = new Kryo().         Kryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy().         instantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy()).         kryo.setInstantiatorStrategy(instantiatorStrategy).         this.kryo.setAsmEnabled(true).         KryoUtils.applyRegistrations(this.kryo, kryoRegistrations.values()).     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return this.type.hashCode(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof ValueSerializer) {         ValueSerializer<?> other = (ValueSerializer<?>) obj.         return type == other.type.     } else {         return false.     } }
false;private;0;3;;private Class<T> getValueType() {     return type. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting & compatibility // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<T> snapshotConfiguration() {     return new ValueSerializerSnapshot<>(type). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;5;;@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer) {     return new ValueSerializerSnapshot<>(getTypeClass()).resolveSchemaCompatibility(newSerializer). }
false;protected;1;4;;@Override protected TypeSerializer<T> createSerializer(Class<T> typeClass) {     return new ValueSerializer<>(typeClass). }
false;protected;1;5;;@SuppressWarnings("unchecked") @Override protected Class<T> getTypeClass(ValueSerializer serializer) {     return serializer.type. }
false;protected;0;4;;@Override protected Class<?> serializerClass() {     return ValueSerializer.class. }
false;private;1;8;;// -------------------------------------------------------------------------------------------- private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     // kryoRegistrations may be null if this value serializer is deserialized from an old version     if (kryoRegistrations == null) {         this.kryoRegistrations = asKryoRegistrations(type).     } }
false;private,static;1;8;;private static LinkedHashMap<String, KryoRegistration> asKryoRegistrations(Class<?> type) {     checkNotNull(type).     LinkedHashMap<String, KryoRegistration> registration = new LinkedHashMap<>(1).     registration.put(type.getClass().getName(), new KryoRegistration(type)).     return registration. }
