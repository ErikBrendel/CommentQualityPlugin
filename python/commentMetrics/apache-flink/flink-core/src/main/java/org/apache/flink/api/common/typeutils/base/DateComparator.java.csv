commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     return compareSerializedDate(firstSource, secondSource, ascendingComparison). }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return true. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return 8. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < 8. }
false;public;4;4;;@Override public void putNormalizedKey(Date record, MemorySegment target, int offset, int numBytes) {     putNormalizedKeyDate(record, target, offset, numBytes). }
false;public;0;4;;@Override public DateComparator duplicate() {     return new DateComparator(ascendingComparison). }
false;public,static;3;7;;// -------------------------------------------------------------------------------------------- // Static Helpers for Date Comparison // -------------------------------------------------------------------------------------------- public static int compareSerializedDate(DataInputView firstSource, DataInputView secondSource, boolean ascendingComparison) throws IOException {     final long l1 = firstSource.readLong().     final long l2 = secondSource.readLong().     final int comp = (l1 < l2 ? -1 : (l1 == l2 ? 0 : 1)).     return ascendingComparison ? comp : -comp. }
false;public,static;4;20;;public static void putNormalizedKeyDate(Date record, MemorySegment target, int offset, int numBytes) {     final long value = record.getTime() - Long.MIN_VALUE.     // see IntValue for an explanation of the logic     if (numBytes == 8) {         // default case, full normalized key         target.putLongBigEndian(offset, value).     } else if (numBytes < 8) {         for (int i = 0. numBytes > 0. numBytes--, i++) {             target.put(offset + i, (byte) (value >>> ((7 - i) << 3))).         }     } else {         target.putLongBigEndian(offset, value).         for (int i = 8. i < numBytes. i++) {             target.put(offset + i, (byte) 0).         }     } }
