# id;timestamp;commentText;codeText;commentWords;codeWords
StringUtils -> public static String arrayAwareToString(Object o);1428330445;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1450210473;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1455479358;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1482522862;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1487871589;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1490128641;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1493236605;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1493831843;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1516295284;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}__		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1534233643;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}__		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String arrayAwareToString(Object o);1537815111;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}__		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static String showControlCharacters(String str);1428330445;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1450210473;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1455479358;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1482522862;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1487871589;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1490128641;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1493236605;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1493831843;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1516295284;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1534233643;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String showControlCharacters(String str);1537815111;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1487871589;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1490128641;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1493236605;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1493831843;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1516295284;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1534233643;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static @Nullable String readNullableString(DataInputView in) throws IOException;1537815111;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null.__@throws IOException Thrown, if the reading or the deserialization fails.;public static @Nullable String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,nullable,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,read,string,in,else,return,null
StringUtils -> public static String toQuotedListString(Object[] values);1534233643;Generates a string containing a comma-separated list of values in double-quotes._Uses lower-cased values returned from {@link Object#toString()} method for each element in the given array._Null values are skipped.__@param values array of elements for the list__@return The string with quoted list of elements;public static String toQuotedListString(Object[] values) {_		return Arrays.stream(values).filter(Objects::nonNull)_			.map(v -> v.toString().toLowerCase())_			.collect(Collectors.joining(", ", "\"", "\""))__	};generates,a,string,containing,a,comma,separated,list,of,values,in,double,quotes,uses,lower,cased,values,returned,from,link,object,to,string,method,for,each,element,in,the,given,array,null,values,are,skipped,param,values,array,of,elements,for,the,list,return,the,string,with,quoted,list,of,elements;public,static,string,to,quoted,list,string,object,values,return,arrays,stream,values,filter,objects,non,null,map,v,v,to,string,to,lower,case,collect,collectors,joining
StringUtils -> public static String toQuotedListString(Object[] values);1537815111;Generates a string containing a comma-separated list of values in double-quotes._Uses lower-cased values returned from {@link Object#toString()} method for each element in the given array._Null values are skipped.__@param values array of elements for the list__@return The string with quoted list of elements;public static String toQuotedListString(Object[] values) {_		return Arrays.stream(values).filter(Objects::nonNull)_			.map(v -> v.toString().toLowerCase())_			.collect(Collectors.joining(", ", "\"", "\""))__	};generates,a,string,containing,a,comma,separated,list,of,values,in,double,quotes,uses,lower,cased,values,returned,from,link,object,to,string,method,for,each,element,in,the,given,array,null,values,are,skipped,param,values,array,of,elements,for,the,list,return,the,string,with,quoted,list,of,elements;public,static,string,to,quoted,list,string,object,values,return,arrays,stream,values,filter,objects,non,null,map,v,v,to,string,to,lower,case,collect,collectors,joining
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1487871589;Writes a String to the given output._The written string can be read with {@link #readNullableString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1490128641;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1493236605;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1493831843;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1516295284;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1534233643;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> public static void writeString(@Nonnull String str, DataOutputView out) throws IOException;1537815111;Writes a String to the given output._The written string can be read with {@link #readString(DataInputView)}.__@param str The string to write_@param out The output to write to__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeString(@Nonnull String str, DataOutputView out) throws IOException {_		checkNotNull(str)__		StringValue.writeString(str, out)__	};writes,a,string,to,the,given,output,the,written,string,can,be,read,with,link,read,string,data,input,view,param,str,the,string,to,write,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,string,nonnull,string,str,data,output,view,out,throws,ioexception,check,not,null,str,string,value,write,string,str,out
StringUtils -> @Nullable 	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2);1493831843;If both string arguments are non-null, this method concatenates them with ' and '._If only one of the arguments is non-null, this method returns the non-null argument._If both arguments are null, this method returns null.__@param s1 The first string argument_@param s2 The second string argument__@return The concatenated string, or non-null argument, or null;@Nullable_	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2) {_		if (s1 != null) {_			return s2 == null ? s1 : s1 + " and " + s2__		}_		else {_			return s2 != null ? s2 : null__		}_	};if,both,string,arguments,are,non,null,this,method,concatenates,them,with,and,if,only,one,of,the,arguments,is,non,null,this,method,returns,the,non,null,argument,if,both,arguments,are,null,this,method,returns,null,param,s1,the,first,string,argument,param,s2,the,second,string,argument,return,the,concatenated,string,or,non,null,argument,or,null;nullable,public,static,string,concatenate,with,and,nullable,string,s1,nullable,string,s2,if,s1,null,return,s2,null,s1,s1,and,s2,else,return,s2,null,s2,null
StringUtils -> @Nullable 	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2);1516295284;If both string arguments are non-null, this method concatenates them with ' and '._If only one of the arguments is non-null, this method returns the non-null argument._If both arguments are null, this method returns null.__@param s1 The first string argument_@param s2 The second string argument__@return The concatenated string, or non-null argument, or null;@Nullable_	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2) {_		if (s1 != null) {_			return s2 == null ? s1 : s1 + " and " + s2__		}_		else {_			return s2__		}_	};if,both,string,arguments,are,non,null,this,method,concatenates,them,with,and,if,only,one,of,the,arguments,is,non,null,this,method,returns,the,non,null,argument,if,both,arguments,are,null,this,method,returns,null,param,s1,the,first,string,argument,param,s2,the,second,string,argument,return,the,concatenated,string,or,non,null,argument,or,null;nullable,public,static,string,concatenate,with,and,nullable,string,s1,nullable,string,s2,if,s1,null,return,s2,null,s1,s1,and,s2,else,return,s2
StringUtils -> @Nullable 	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2);1534233643;If both string arguments are non-null, this method concatenates them with ' and '._If only one of the arguments is non-null, this method returns the non-null argument._If both arguments are null, this method returns null.__@param s1 The first string argument_@param s2 The second string argument__@return The concatenated string, or non-null argument, or null;@Nullable_	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2) {_		if (s1 != null) {_			return s2 == null ? s1 : s1 + " and " + s2__		}_		else {_			return s2__		}_	};if,both,string,arguments,are,non,null,this,method,concatenates,them,with,and,if,only,one,of,the,arguments,is,non,null,this,method,returns,the,non,null,argument,if,both,arguments,are,null,this,method,returns,null,param,s1,the,first,string,argument,param,s2,the,second,string,argument,return,the,concatenated,string,or,non,null,argument,or,null;nullable,public,static,string,concatenate,with,and,nullable,string,s1,nullable,string,s2,if,s1,null,return,s2,null,s1,s1,and,s2,else,return,s2
StringUtils -> @Nullable 	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2);1537815111;If both string arguments are non-null, this method concatenates them with ' and '._If only one of the arguments is non-null, this method returns the non-null argument._If both arguments are null, this method returns null.__@param s1 The first string argument_@param s2 The second string argument__@return The concatenated string, or non-null argument, or null;@Nullable_	public static String concatenateWithAnd(@Nullable String s1, @Nullable String s2) {_		if (s1 != null) {_			return s2 == null ? s1 : s1 + " and " + s2__		}_		else {_			return s2__		}_	};if,both,string,arguments,are,non,null,this,method,concatenates,them,with,and,if,only,one,of,the,arguments,is,non,null,this,method,returns,the,non,null,argument,if,both,arguments,are,null,this,method,returns,null,param,s1,the,first,string,argument,param,s2,the,second,string,argument,return,the,concatenated,string,or,non,null,argument,or,null;nullable,public,static,string,concatenate,with,and,nullable,string,s1,nullable,string,s2,if,s1,null,return,s2,null,s1,s1,and,s2,else,return,s2
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1487871589;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1490128641;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1493236605;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1493831843;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1516295284;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1534233643;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException;1537815111;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to.__@throws IOException Thrown, if the writing or the serialization fails.;public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,thrown,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,nullable,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static String escapeHtml(String str);1405024514;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else {_				if (c < ' ') {_					_				} else {_					sb.append(c)__				}_			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1405090423;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else {_				if (c < ' ') {_					_				} else {_					sb.append(c)__				}_			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1411236168;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else {_				if (c < ' ') {_					_				} else {_					sb.append(c)__				}_			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1411473593;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else {_				if (c < ' ') {_					_				} else {_					sb.append(c)__				}_			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1428330445;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else if (c < ' ') {_				_			} else {_				sb.append(c)__			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1450210473;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else if (c < ' ') {_				_			} else {_				sb.append(c)__			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1455479358;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else if (c < ' ') {_				_			} else {_				sb.append(c)__			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1482522862;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else if (c < ' ') {_				_			} else {_				sb.append(c)__			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String escapeHtml(String str);1487871589;Helper function to escape Strings for display in HTML pages. The function replaces_certain characters by their HTML coded correspondent.__@param str The string to escape._@return The escaped string.;public static String escapeHtml(String str) {_		int len = str.length()__		char[] s = str.toCharArray()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = s[i]__			if ((c == '\\') || (c == '"') || (c == '/')) {_				sb.append('\\')__				sb.append(c)__			}_			else if (c == '\b') {_				sb.append("\\b")__			} else if (c == '\t') {_				sb.append("\\t")__			} else if (c == '\n') {_				sb.append("<br>")__			} else if (c == '\f') {_				sb.append("\\f")__			} else if (c == '\r') {_				sb.append("\\r")__			} else if (c == '>') {_				sb.append("&gt_")__			} else if (c == '<') {_				sb.append("&lt_")__			} else if (c == '&') {_				sb.append("&amp_")__			} else if (c < ' ') {_				_			} else {_				sb.append(c)__			}_		}__		return sb.toString()__	};helper,function,to,escape,strings,for,display,in,html,pages,the,function,replaces,certain,characters,by,their,html,coded,correspondent,param,str,the,string,to,escape,return,the,escaped,string;public,static,string,escape,html,string,str,int,len,str,length,char,s,str,to,char,array,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,s,i,if,c,c,c,sb,append,sb,append,c,else,if,c,b,sb,append,b,else,if,c,t,sb,append,t,else,if,c,n,sb,append,br,else,if,c,f,sb,append,f,else,if,c,r,sb,append,r,else,if,c,sb,append,gt,else,if,c,sb,append,lt,else,if,c,sb,append,amp,else,if,c,else,sb,append,c,return,sb,to,string
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1411236168;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1411473593;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1428330445;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1450210473;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1455479358;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static String readNullableString(DataInputView in) throws IOException;1482522862;Reads a String from the given input. The string may be null and must have been written with_{@link #writeNullableString(String, DataOutputView)}.__@param in The input to read from._@return The deserialized string, or null._@throws IOException Throws if the reading or the deserialization fails.;public static String readNullableString(DataInputView in) throws IOException {_		if (in.readBoolean()) {_			return StringValue.readString(in)__		} else {_			return null__		}_	};reads,a,string,from,the,given,input,the,string,may,be,null,and,must,have,been,written,with,link,write,nullable,string,string,data,output,view,param,in,the,input,to,read,from,return,the,deserialized,string,or,null,throws,ioexception,throws,if,the,reading,or,the,deserialization,fails;public,static,string,read,nullable,string,data,input,view,in,throws,ioexception,if,in,read,boolean,return,string,value,read,string,in,else,return,null
StringUtils -> public static final String arrayAwareToString(Object o);1405024514;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static final String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,final,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static final String arrayAwareToString(Object o);1405090423;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static final String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,final,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static final String arrayAwareToString(Object o);1411236168;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static final String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,final,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static final String arrayAwareToString(Object o);1411473593;This method calls {@link Object#toString()} on the given object, unless the_object is an array. In that case, it will use the {@link #arrayToString(Object)}_method to create a string representation of the array that includes all contained_elements.__@param o The object for which to create the string representation._@return The string representation of the object.;public static final String arrayAwareToString(Object o) {_		if (o == null) {_			return "null"__		}_		if (o.getClass().isArray()) {_			return arrayToString(o)__		}_		_		return o.toString()__	};this,method,calls,link,object,to,string,on,the,given,object,unless,the,object,is,an,array,in,that,case,it,will,use,the,link,array,to,string,object,method,to,create,a,string,representation,of,the,array,that,includes,all,contained,elements,param,o,the,object,for,which,to,create,the,string,representation,return,the,string,representation,of,the,object;public,static,final,string,array,aware,to,string,object,o,if,o,null,return,null,if,o,get,class,is,array,return,array,to,string,o,return,o,to,string
StringUtils -> public static boolean isNullOrWhitespaceOnly(String str);1493236605;Checks if the string is null, empty, or contains only whitespace characters._A whitespace character is defined via {@link Character#isWhitespace(char)}.__@param str The string to check_@return True, if the string is null or blank, false otherwise.;public static boolean isNullOrWhitespaceOnly(String str) {_		if (str == null || str.length() == 0) {_			return true__		}__		final int len = str.length()__		for (int i = 0_ i < len_ i++) {_			if (!Character.isWhitespace(str.charAt(i))) {_				return false__			}_		}_		return true__	};checks,if,the,string,is,null,empty,or,contains,only,whitespace,characters,a,whitespace,character,is,defined,via,link,character,is,whitespace,char,param,str,the,string,to,check,return,true,if,the,string,is,null,or,blank,false,otherwise;public,static,boolean,is,null,or,whitespace,only,string,str,if,str,null,str,length,0,return,true,final,int,len,str,length,for,int,i,0,i,len,i,if,character,is,whitespace,str,char,at,i,return,false,return,true
StringUtils -> public static boolean isNullOrWhitespaceOnly(String str);1493831843;Checks if the string is null, empty, or contains only whitespace characters._A whitespace character is defined via {@link Character#isWhitespace(char)}.__@param str The string to check_@return True, if the string is null or blank, false otherwise.;public static boolean isNullOrWhitespaceOnly(String str) {_		if (str == null || str.length() == 0) {_			return true__		}__		final int len = str.length()__		for (int i = 0_ i < len_ i++) {_			if (!Character.isWhitespace(str.charAt(i))) {_				return false__			}_		}_		return true__	};checks,if,the,string,is,null,empty,or,contains,only,whitespace,characters,a,whitespace,character,is,defined,via,link,character,is,whitespace,char,param,str,the,string,to,check,return,true,if,the,string,is,null,or,blank,false,otherwise;public,static,boolean,is,null,or,whitespace,only,string,str,if,str,null,str,length,0,return,true,final,int,len,str,length,for,int,i,0,i,len,i,if,character,is,whitespace,str,char,at,i,return,false,return,true
StringUtils -> public static boolean isNullOrWhitespaceOnly(String str);1516295284;Checks if the string is null, empty, or contains only whitespace characters._A whitespace character is defined via {@link Character#isWhitespace(char)}.__@param str The string to check_@return True, if the string is null or blank, false otherwise.;public static boolean isNullOrWhitespaceOnly(String str) {_		if (str == null || str.length() == 0) {_			return true__		}__		final int len = str.length()__		for (int i = 0_ i < len_ i++) {_			if (!Character.isWhitespace(str.charAt(i))) {_				return false__			}_		}_		return true__	};checks,if,the,string,is,null,empty,or,contains,only,whitespace,characters,a,whitespace,character,is,defined,via,link,character,is,whitespace,char,param,str,the,string,to,check,return,true,if,the,string,is,null,or,blank,false,otherwise;public,static,boolean,is,null,or,whitespace,only,string,str,if,str,null,str,length,0,return,true,final,int,len,str,length,for,int,i,0,i,len,i,if,character,is,whitespace,str,char,at,i,return,false,return,true
StringUtils -> public static boolean isNullOrWhitespaceOnly(String str);1534233643;Checks if the string is null, empty, or contains only whitespace characters._A whitespace character is defined via {@link Character#isWhitespace(char)}.__@param str The string to check_@return True, if the string is null or blank, false otherwise.;public static boolean isNullOrWhitespaceOnly(String str) {_		if (str == null || str.length() == 0) {_			return true__		}__		final int len = str.length()__		for (int i = 0_ i < len_ i++) {_			if (!Character.isWhitespace(str.charAt(i))) {_				return false__			}_		}_		return true__	};checks,if,the,string,is,null,empty,or,contains,only,whitespace,characters,a,whitespace,character,is,defined,via,link,character,is,whitespace,char,param,str,the,string,to,check,return,true,if,the,string,is,null,or,blank,false,otherwise;public,static,boolean,is,null,or,whitespace,only,string,str,if,str,null,str,length,0,return,true,final,int,len,str,length,for,int,i,0,i,len,i,if,character,is,whitespace,str,char,at,i,return,false,return,true
StringUtils -> public static boolean isNullOrWhitespaceOnly(String str);1537815111;Checks if the string is null, empty, or contains only whitespace characters._A whitespace character is defined via {@link Character#isWhitespace(char)}.__@param str The string to check_@return True, if the string is null or blank, false otherwise.;public static boolean isNullOrWhitespaceOnly(String str) {_		if (str == null || str.length() == 0) {_			return true__		}__		final int len = str.length()__		for (int i = 0_ i < len_ i++) {_			if (!Character.isWhitespace(str.charAt(i))) {_				return false__			}_		}_		return true__	};checks,if,the,string,is,null,empty,or,contains,only,whitespace,characters,a,whitespace,character,is,defined,via,link,character,is,whitespace,char,param,str,the,string,to,check,return,true,if,the,string,is,null,or,blank,false,otherwise;public,static,boolean,is,null,or,whitespace,only,string,str,if,str,null,str,length,0,return,true,final,int,len,str,length,for,int,i,0,i,len,i,if,character,is,whitespace,str,char,at,i,return,false,return,true
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1405024514;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1405090423;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1411236168;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1411473593;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1428330445;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1450210473;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1455479358;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1482522862;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1487871589;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1490128641;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1493236605;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1493831843;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1516295284;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1534233643;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength);1537815111;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(0x7fff) + 1)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,0x7fff,1,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1405024514;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1405090423;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1411236168;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1411473593;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1428330445;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1450210473;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1455479358;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1482522862;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1487871589;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1490128641;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1493236605;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1493831843;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength__		_		char[] data = new char[len]__		int diff = maxValue - minValue + 1__		_		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1516295284;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		int diff = maxValue - minValue + 1___		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1534233643;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		int diff = maxValue - minValue + 1___		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue);1537815111;Creates a random string with a length within the given interval. The string contains only characters that_can be represented as a single code point.__@param rnd The random used to create the strings._@param minLength The minimum string length._@param maxLength The maximum string length (inclusive)._@param minValue The minimum character value to occur._@param maxValue The maximum character value to occur._@return A random String.;public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue) {_		int len = rnd.nextInt(maxLength - minLength + 1) + minLength___		char[] data = new char[len]__		int diff = maxValue - minValue + 1___		for (int i = 0_ i < data.length_ i++) {_			data[i] = (char) (rnd.nextInt(diff) + minValue)__		}_		return new String(data)__	};creates,a,random,string,with,a,length,within,the,given,interval,the,string,contains,only,characters,that,can,be,represented,as,a,single,code,point,param,rnd,the,random,used,to,create,the,strings,param,min,length,the,minimum,string,length,param,max,length,the,maximum,string,length,inclusive,param,min,value,the,minimum,character,value,to,occur,param,max,value,the,maximum,character,value,to,occur,return,a,random,string;public,static,string,get,random,string,random,rnd,int,min,length,int,max,length,char,min,value,char,max,value,int,len,rnd,next,int,max,length,min,length,1,min,length,char,data,new,char,len,int,diff,max,value,min,value,1,for,int,i,0,i,data,length,i,data,i,char,rnd,next,int,diff,min,value,return,new,string,data
StringUtils -> public static String stringifyException(final Throwable e);1405024514;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		final StringWriter stm = new StringWriter()__		final PrintWriter wrt = new PrintWriter(stm)__		e.printStackTrace(wrt)__		wrt.close()__		return stm.toString()__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,final,string,writer,stm,new,string,writer,final,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string
StringUtils -> public static String stringifyException(final Throwable e);1405090423;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		final StringWriter stm = new StringWriter()__		final PrintWriter wrt = new PrintWriter(stm)__		e.printStackTrace(wrt)__		wrt.close()__		return stm.toString()__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,final,string,writer,stm,new,string,writer,final,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string
StringUtils -> public static String stringifyException(final Throwable e);1411236168;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1411473593;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1428330445;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1450210473;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1455479358;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1482522862;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static String stringifyException(final Throwable e);1487871589;Makes a string representation of the exception.__@param e_the exception to stringify_@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		return ExceptionUtils.stringifyException(e)__	};makes,a,string,representation,of,the,exception,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,return,exception,utils,stringify,exception,e
StringUtils -> public static final String showControlCharacters(String str);1405024514;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static final String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,final,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static final String showControlCharacters(String str);1405090423;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static final String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,final,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static final String showControlCharacters(String str);1411236168;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static final String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,final,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static final String showControlCharacters(String str);1411473593;Replaces control characters by their escape-coded version. For example,_if the string contains a line break character ('\n'), this character will_be replaced by the two characters backslash '\' and 'n'. As a consequence, the_resulting string will not contain any more control characters.__@param str The string in which to replace the control characters._@return The string with the replaced characters.;public static final String showControlCharacters(String str) {_		int len = str.length()__		StringBuilder sb = new StringBuilder()___		for (int i = 0_ i < len_ i += 1) {_			char c = str.charAt(i)__			switch (c) {_			case '\b':_				sb.append("\\b")__				break__			case '\t':_				sb.append("\\t")__				break__			case '\n':_				sb.append("\\n")__				break__			case '\f':_				sb.append("\\f")__				break__			case '\r':_				sb.append("\\r")__				break__			default:_				sb.append(c)__			}_		}__		return sb.toString()__	};replaces,control,characters,by,their,escape,coded,version,for,example,if,the,string,contains,a,line,break,character,n,this,character,will,be,replaced,by,the,two,characters,backslash,and,n,as,a,consequence,the,resulting,string,will,not,contain,any,more,control,characters,param,str,the,string,in,which,to,replace,the,control,characters,return,the,string,with,the,replaced,characters;public,static,final,string,show,control,characters,string,str,int,len,str,length,string,builder,sb,new,string,builder,for,int,i,0,i,len,i,1,char,c,str,char,at,i,switch,c,case,b,sb,append,b,break,case,t,sb,append,t,break,case,n,sb,append,n,break,case,f,sb,append,f,break,case,r,sb,append,r,break,default,sb,append,c,return,sb,to,string
StringUtils -> public static String arrayToString(Object array);1428330445;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1450210473;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1455479358;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1482522862;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1487871589;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1490128641;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1493236605;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1493831843;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1516295284;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}__		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}__		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1534233643;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}__		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}__		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String arrayToString(Object array);1537815111;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}__		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}__		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1405024514;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		final StringBuilder s = new StringBuilder()__		for (int i = start_ i < end_ i++) {_			s.append(String.format("%02x", bytes[i]))__		}_		return s.toString()__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,string,builder,s,new,string,builder,for,int,i,start,i,end,i,s,append,string,format,02x,bytes,i,return,s,to,string
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1405090423;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		final StringBuilder s = new StringBuilder()__		for (int i = start_ i < end_ i++) {_			s.append(String.format("%02x", bytes[i]))__		}_		return s.toString()__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,string,builder,s,new,string,builder,for,int,i,start,i,end,i,s,append,string,format,02x,bytes,i,return,s,to,string
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1411236168;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final StringBuilder s = new StringBuilder()__		for (int i = start_ i < end_ i++) {_			s.append(String.format("%02x", bytes[i]))__		}_		return s.toString()__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,string,builder,s,new,string,builder,for,int,i,start,i,end,i,s,append,string,format,02x,bytes,i,return,s,to,string
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1411473593;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final StringBuilder s = new StringBuilder()__		for (int i = start_ i < end_ i++) {_			s.append(String.format("%02x", bytes[i]))__		}_		return s.toString()__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,string,builder,s,new,string,builder,for,int,i,start,i,end,i,s,append,string,format,02x,bytes,i,return,s,to,string
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1428330445;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final StringBuilder s = new StringBuilder()__		for (int i = start_ i < end_ i++) {_			s.append(String.format("%02x", bytes[i]))__		}_		return s.toString()__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,string,builder,s,new,string,builder,for,int,i,start,i,end,i,s,append,string,format,02x,bytes,i,return,s,to,string
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1450210473;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array__@see org.apache.commons.codec.binary.Hex#encodeHexString(byte[]);public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array,see,org,apache,commons,codec,binary,hex,encode,hex,string,byte;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,char,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1455479358;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array__@see org.apache.commons.codec.binary.Hex#encodeHexString(byte[]);public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array,see,org,apache,commons,codec,binary,hex,encode,hex,string,byte;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,char,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1482522862;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array__@see org.apache.commons.codec.binary.Hex#encodeHexString(byte[]);public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array,see,org,apache,commons,codec,binary,hex,encode,hex,string,byte;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,char,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1487871589;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array__@see org.apache.commons.codec.binary.Hex#encodeHexString(byte[]);public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array,see,org,apache,commons,codec,binary,hex,encode,hex,string,byte;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,final,char,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1490128641;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1493236605;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1493831843;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}_		_		__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1516295284;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1534233643;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes, final int start, final int end);1537815111;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@param start_start index, inclusively_@param end_end index, exclusively_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes, final int start, final int end) {_		if (bytes == null) {_			throw new IllegalArgumentException("bytes == null")__		}__		int length = end - start__		char[] out = new char[length * 2]___		for (int i = start, j = 0_ i < end_ i++) {_			out[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4]__			out[j++] = HEX_CHARS[0x0F & bytes[i]]__		}__		return new String(out)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,param,start,start,index,inclusively,param,end,end,index,exclusively,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,final,int,start,final,int,end,if,bytes,null,throw,new,illegal,argument,exception,bytes,null,int,length,end,start,char,out,new,char,length,2,for,int,i,start,j,0,i,end,i,out,j,0x,f0,bytes,i,4,out,j,0x0f,bytes,i,return,new,string,out
StringUtils -> public static String byteToHexString(final byte[] bytes);1405024514;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1405090423;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1411236168;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1411473593;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1428330445;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1450210473;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1455479358;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1482522862;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1487871589;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1490128641;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1493236605;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1493831843;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1516295284;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1534233643;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static String byteToHexString(final byte[] bytes);1537815111;Given an array of bytes it will convert the bytes to a hex string_representation of the bytes.__@param bytes_the bytes to convert in a hex string_@return hex string representation of the byte array;public static String byteToHexString(final byte[] bytes) {_		return byteToHexString(bytes, 0, bytes.length)__	};given,an,array,of,bytes,it,will,convert,the,bytes,to,a,hex,string,representation,of,the,bytes,param,bytes,the,bytes,to,convert,in,a,hex,string,return,hex,string,representation,of,the,byte,array;public,static,string,byte,to,hex,string,final,byte,bytes,return,byte,to,hex,string,bytes,0,bytes,length
StringUtils -> public static final String arrayToString(Object array);1405024514;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static final String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,final,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static final String arrayToString(Object array);1405090423;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static final String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,final,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static final String arrayToString(Object array);1411236168;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static final String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,final,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static final String arrayToString(Object array);1411473593;Returns a string representation of the given array. This method takes an Object_to allow also all types of primitive type arrays.__@param array The array to create a string representation for._@return The string representation of the array._@throws IllegalArgumentException If the given object is no array.;public static final String arrayToString(Object array) {_		if (array == null) {_			throw new NullPointerException()__		}_		_		if (array instanceof int[]) {_			return Arrays.toString((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.toString((long[]) array)__		}_		if (array instanceof Object[]) {_			return Arrays.toString((Object[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.toString((byte[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.toString((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.toString((float[]) array)__		}_		if (array instanceof boolean[]) {_			return Arrays.toString((boolean[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.toString((char[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.toString((short[]) array)__		}_		_		if (array.getClass().isArray()) {_			return "<unknown array type>"__		} else {_			throw new IllegalArgumentException("The given argument is no array.")__		}_	};returns,a,string,representation,of,the,given,array,this,method,takes,an,object,to,allow,also,all,types,of,primitive,type,arrays,param,array,the,array,to,create,a,string,representation,for,return,the,string,representation,of,the,array,throws,illegal,argument,exception,if,the,given,object,is,no,array;public,static,final,string,array,to,string,object,array,if,array,null,throw,new,null,pointer,exception,if,array,instanceof,int,return,arrays,to,string,int,array,if,array,instanceof,long,return,arrays,to,string,long,array,if,array,instanceof,object,return,arrays,to,string,object,array,if,array,instanceof,byte,return,arrays,to,string,byte,array,if,array,instanceof,double,return,arrays,to,string,double,array,if,array,instanceof,float,return,arrays,to,string,float,array,if,array,instanceof,boolean,return,arrays,to,string,boolean,array,if,array,instanceof,char,return,arrays,to,string,char,array,if,array,instanceof,short,return,arrays,to,string,short,array,if,array,get,class,is,array,return,unknown,array,type,else,throw,new,illegal,argument,exception,the,given,argument,is,no,array
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1411236168;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1411473593;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1428330445;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1450210473;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1455479358;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static void writeNullableString(String str, DataOutputView out) throws IOException;1482522862;Writes a String to the given output. The string may be null._The written string can be read with {@link #readNullableString(DataInputView)}-__@param str The string to write, or null._@param out The output to write to._@throws IOException Throws if the writing or the serialization fails.;public static void writeNullableString(String str, DataOutputView out) throws IOException {_		if (str != null) {_			out.writeBoolean(true)__			StringValue.writeString(str, out)__		} else {_			out.writeBoolean(false)__		}_	};writes,a,string,to,the,given,output,the,string,may,be,null,the,written,string,can,be,read,with,link,read,nullable,string,data,input,view,param,str,the,string,to,write,or,null,param,out,the,output,to,write,to,throws,ioexception,throws,if,the,writing,or,the,serialization,fails;public,static,void,write,nullable,string,string,str,data,output,view,out,throws,ioexception,if,str,null,out,write,boolean,true,string,value,write,string,str,out,else,out,write,boolean,false
StringUtils -> public static String readString(DataInputView in) throws IOException;1487871589;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1490128641;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1493236605;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1493831843;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1516295284;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1534233643;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> public static String readString(DataInputView in) throws IOException;1537815111;Reads a non-null String from the given input.__@param in The input to read from_@return The deserialized String__@throws IOException Thrown, if the reading or the deserialization fails.;public static String readString(DataInputView in) throws IOException {_		return StringValue.readString(in)__	};reads,a,non,null,string,from,the,given,input,param,in,the,input,to,read,from,return,the,deserialized,string,throws,ioexception,thrown,if,the,reading,or,the,deserialization,fails;public,static,string,read,string,data,input,view,in,throws,ioexception,return,string,value,read,string,in
StringUtils -> private StringUtils();1405024514;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1405090423;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1411236168;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1411473593;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1428330445;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1450210473;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1455479358;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1482522862;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1487871589;Empty private constructor to overwrite public one.;private StringUtils() {};empty,private,constructor,to,overwrite,public,one;private,string,utils
StringUtils -> private StringUtils();1490128641;Prevent instantiation of this utility class;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> private StringUtils();1493236605;Prevent instantiation of this utility class;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> private StringUtils();1493831843;Prevent instantiation of this utility class;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> private StringUtils();1516295284;Prevent instantiation of this utility class.;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> private StringUtils();1534233643;Prevent instantiation of this utility class.;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> private StringUtils();1537815111;Prevent instantiation of this utility class.;private StringUtils() {};prevent,instantiation,of,this,utility,class;private,string,utils
StringUtils -> public static byte[] hexStringToByte(final String hex);1405024514;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1405090423;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1411236168;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1411473593;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1428330445;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1450210473;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1455479358;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1482522862;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1487871589;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1490128641;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1493236605;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1493831843;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1516295284;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1534233643;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
StringUtils -> public static byte[] hexStringToByte(final String hex);1537815111;Given a hex string this will return the byte array corresponding to the_string .__@param hex_the hex String array_@return a byte array that is a hex string representation of the given_string. The size of the byte array is therefore hex.length/2;public static byte[] hexStringToByte(final String hex) {_		final byte[] bts = new byte[hex.length() / 2]__		for (int i = 0_ i < bts.length_ i++) {_			bts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16)__		}_		return bts__	};given,a,hex,string,this,will,return,the,byte,array,corresponding,to,the,string,param,hex,the,hex,string,array,return,a,byte,array,that,is,a,hex,string,representation,of,the,given,string,the,size,of,the,byte,array,is,therefore,hex,length,2;public,static,byte,hex,string,to,byte,final,string,hex,final,byte,bts,new,byte,hex,length,2,for,int,i,0,i,bts,length,i,bts,i,byte,integer,parse,int,hex,substring,2,i,2,i,2,16,return,bts
