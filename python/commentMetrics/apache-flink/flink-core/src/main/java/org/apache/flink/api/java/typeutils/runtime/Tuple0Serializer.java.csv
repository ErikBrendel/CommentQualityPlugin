commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ------------------------------------------------------------------------ @Override public Tuple0Serializer duplicate() {     return this. }
false;public;0;4;;@Override public Tuple0 createInstance() {     return Tuple0.INSTANCE. }
false;public;1;9;;@Override public Tuple0 createInstance(Object[] fields) {     if (fields == null || fields.length == 0) {         return Tuple0.INSTANCE.     }     throw new UnsupportedOperationException("Tuple0 cannot take any data, as it has zero fields."). }
false;public;1;4;;@Override public Tuple0 copy(Tuple0 from) {     return from. }
false;public;2;4;;@Override public Tuple0 copy(Tuple0 from, Tuple0 reuse) {     return reuse. }
false;public;0;4;;@Override public int getLength() {     return 1. }
false;public;2;4;;@Override public void serialize(Tuple0 record, DataOutputView target) throws IOException {     target.writeByte(42). }
false;public;1;5;;@Override public Tuple0 deserialize(DataInputView source) throws IOException {     source.readByte().     return Tuple0.INSTANCE. }
false;public;2;5;;@Override public Tuple0 deserialize(Tuple0 reuse, DataInputView source) throws IOException {     source.readByte().     return reuse. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeByte(source.readByte()). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Tuple0> snapshotConfiguration() {     return new Tuple0SerializerSnapshot(). }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public int hashCode() {     return Tuple0Serializer.class.hashCode(). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj instanceof Tuple0Serializer. }
false;public;0;4;;@Override public String toString() {     return "Tuple0Serializer". }
false;public;1;7;;@Override public TypeSerializerSchemaCompatibility<Tuple0> resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass(TypeSerializerConfigSnapshot<Tuple0> deprecatedConfigSnapshot) {     Tuple0SerializerSnapshot snapshot = new Tuple0SerializerSnapshot().     return snapshot.resolveSchemaCompatibility(this). }
