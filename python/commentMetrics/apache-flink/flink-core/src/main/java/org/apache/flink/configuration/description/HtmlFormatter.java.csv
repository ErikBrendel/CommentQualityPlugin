commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected void formatLink(StringBuilder state, String link, String description) {     state.append(String.format("<a href=\"%s\">%s</a>", link, description)). }
false;protected;1;4;;@Override protected void formatLineBreak(StringBuilder state) {     state.append("<br />"). }
false;protected;4;18;;@Override protected void formatText(StringBuilder state, String format, String[] elements, EnumSet<TextElement.TextStyle> styles) {     String escapedFormat = escapeCharacters(format).     String prefix = "".     String suffix = "".     if (styles.contains(TextElement.TextStyle.CODE)) {         prefix = "<span markdown=\"span\">`".         suffix = "`</span>".     }     state.append(prefix).     state.append(String.format(escapedFormat, elements)).     state.append(suffix). }
false;protected;2;8;;@Override protected void formatList(StringBuilder state, String[] entries) {     state.append("<ul>").     for (String entry : entries) {         state.append(String.format("<li>%s</li>", entry)).     }     state.append("</ul>"). }
false;protected;0;4;;@Override protected Formatter newInstance() {     return new HtmlFormatter(). }
false;private,static;1;5;;private static String escapeCharacters(String value) {     return value.replaceAll("<", "&lt.").replaceAll(">", "&gt."). }
