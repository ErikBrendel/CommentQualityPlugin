commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Creates a new (statistically) random JobID.  *  * @return A new random JobID.  */ ;// ------------------------------------------------------------------------ // Static factory methods // ------------------------------------------------------------------------ /**  * Creates a new (statistically) random JobID.  *  * @return A new random JobID.  */ public static JobID generate() {     return new JobID(). }
true;public,static;1;3;/**  * Creates a new JobID from the given byte sequence. The byte sequence must be  * exactly 16 bytes long. The first eight bytes make up the lower part of the ID,  * while the next 8 bytes make up the upper part of the ID.  *  * @param bytes The byte sequence.  *  * @return A new JobID corresponding to the ID encoded in the bytes.  */ ;/**  * Creates a new JobID from the given byte sequence. The byte sequence must be  * exactly 16 bytes long. The first eight bytes make up the lower part of the ID,  * while the next 8 bytes make up the upper part of the ID.  *  * @param bytes The byte sequence.  *  * @return A new JobID corresponding to the ID encoded in the bytes.  */ public static JobID fromByteArray(byte[] bytes) {     return new JobID(bytes). }
false;public,static;1;5;;public static JobID fromByteBuffer(ByteBuffer buf) {     long lower = buf.getLong().     long upper = buf.getLong().     return new JobID(lower, upper). }
true;public,static;1;8;/**  * Parses a JobID from the given string.  *  * @param hexString string representation of a JobID  * @return Parsed JobID  * @throws IllegalArgumentException if the JobID could not be parsed from the given string  */ ;/**  * Parses a JobID from the given string.  *  * @param hexString string representation of a JobID  * @return Parsed JobID  * @throws IllegalArgumentException if the JobID could not be parsed from the given string  */ public static JobID fromHexString(String hexString) {     try {         return new JobID(StringUtils.hexStringToByte(hexString)).     } catch (Exception e) {         throw new IllegalArgumentException("Cannot parse JobID from \"" + hexString + "\". The expected format is " + "[0-9a-fA-F]{32}, e.g. fd72014d4c864993a2e5a9287b4a9c5d.", e).     } }
