commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Gets the operating system that the JVM runs on from the java system properties.  * this method returns <tt>UNKNOWN</tt>, if the operating system was not successfully determined.  *  * @return The enum constant for the operating system, or <tt>UNKNOWN</tt>, if it was not possible to determine.  */ ;// ------------------------------------------------------------------------ /**  * Gets the operating system that the JVM runs on from the java system properties.  * this method returns <tt>UNKNOWN</tt>, if the operating system was not successfully determined.  *  * @return The enum constant for the operating system, or <tt>UNKNOWN</tt>, if it was not possible to determine.  */ public static OperatingSystem getCurrentOperatingSystem() {     return os. }
true;public,static;0;3;/**  * Checks whether the operating system this JVM runs on is Windows.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Windows, <code>false</code> otherwise  */ ;/**  * Checks whether the operating system this JVM runs on is Windows.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Windows, <code>false</code> otherwise  */ public static boolean isWindows() {     return getCurrentOperatingSystem() == WINDOWS. }
true;public,static;0;3;/**  * Checks whether the operating system this JVM runs on is Linux.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Linux, <code>false</code> otherwise  */ ;/**  * Checks whether the operating system this JVM runs on is Linux.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Linux, <code>false</code> otherwise  */ public static boolean isLinux() {     return getCurrentOperatingSystem() == LINUX. }
true;public,static;0;3;/**  * Checks whether the operating system this JVM runs on is Windows.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Windows, <code>false</code> otherwise  */ ;/**  * Checks whether the operating system this JVM runs on is Windows.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Windows, <code>false</code> otherwise  */ public static boolean isMac() {     return getCurrentOperatingSystem() == MAC_OS. }
true;public,static;0;3;/**  * Checks whether the operating system this JVM runs on is FreeBSD.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         FreeBSD, <code>false</code> otherwise  */ ;/**  * Checks whether the operating system this JVM runs on is FreeBSD.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         FreeBSD, <code>false</code> otherwise  */ public static boolean isFreeBSD() {     return getCurrentOperatingSystem() == FREE_BSD. }
true;public,static;0;3;/**  * Checks whether the operating system this JVM runs on is Solaris.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Solaris, <code>false</code> otherwise  */ ;/**  * Checks whether the operating system this JVM runs on is Solaris.  *  * @return <code>true</code> if the operating system this JVM runs on is  *         Solaris, <code>false</code> otherwise  */ public static boolean isSolaris() {     return getCurrentOperatingSystem() == SOLARIS. }
true;private,static;0;22;/**  * Parses the operating system that the JVM runs on from the java system properties.  * If the operating system was not successfully determined, this method returns {@code UNKNOWN}.  *  * @return The enum constant for the operating system, or {@code UNKNOWN}, if it was not possible to determine.  */ ;/**  * Parses the operating system that the JVM runs on from the java system properties.  * If the operating system was not successfully determined, this method returns {@code UNKNOWN}.  *  * @return The enum constant for the operating system, or {@code UNKNOWN}, if it was not possible to determine.  */ private static OperatingSystem readOSFromSystemProperties() {     String osName = System.getProperty(OS_KEY).     if (osName.startsWith(LINUX_OS_PREFIX)) {         return LINUX.     }     if (osName.startsWith(WINDOWS_OS_PREFIX)) {         return WINDOWS.     }     if (osName.startsWith(MAC_OS_PREFIX)) {         return MAC_OS.     }     if (osName.startsWith(FREEBSD_OS_PREFIX)) {         return FREE_BSD.     }     String osNameLowerCase = osName.toLowerCase().     if (osNameLowerCase.contains(SOLARIS_OS_INFIX_1) || osNameLowerCase.contains(SOLARIS_OS_INFIX_2)) {         return SOLARIS.     }     return UNKNOWN. }
