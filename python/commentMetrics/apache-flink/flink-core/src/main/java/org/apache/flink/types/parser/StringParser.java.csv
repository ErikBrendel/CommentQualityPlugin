commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void enableQuotedStringParsing(byte quoteCharacter) {     this.quotedStringParsing = true.     this.quoteCharacter = quoteCharacter. }
false;public;5;62;;@Override public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, String reusable) {     if (startPos == limit) {         setErrorState(ParseErrorState.EMPTY_COLUMN).         this.result = "".         return limit.     }     int i = startPos.     final int delimLimit = limit - delimiter.length + 1.     if (quotedStringParsing && bytes[i] == quoteCharacter) {         // quoted string parsing enabled and first character is a quote         i++.         // search for ending quote character, continue when it is escaped         while (i < limit && (bytes[i] != quoteCharacter || bytes[i - 1] == BACKSLASH)) {             i++.         }         if (i == limit) {             setErrorState(ParseErrorState.UNTERMINATED_QUOTED_STRING).             return -1.         } else {             i++.             // check for proper termination             if (i == limit) {                 // either by end of line                 this.result = new String(bytes, startPos + 1, i - startPos - 2, getCharset()).                 return limit.             } else if (i < delimLimit && delimiterNext(bytes, i, delimiter)) {                 // or following field delimiter                 this.result = new String(bytes, startPos + 1, i - startPos - 2, getCharset()).                 return i + delimiter.length.             } else {                 // no proper termination                 setErrorState(ParseErrorState.UNQUOTED_CHARS_AFTER_QUOTED_STRING).                 return -1.             }         }     } else {         // look for delimiter         while (i < delimLimit && !delimiterNext(bytes, i, delimiter)) {             i++.         }         if (i >= delimLimit) {             this.result = new String(bytes, startPos, limit - startPos, getCharset()).             return limit.         } else {             // delimiter found.             if (i == startPos) {                 // mark empty column                 setErrorState(ParseErrorState.EMPTY_COLUMN).             }             this.result = new String(bytes, startPos, i - startPos, getCharset()).             return i + delimiter.length.         }     } }
false;public;0;4;;@Override public String createValue() {     return "". }
false;public;0;4;;@Override public String getLastResult() {     return this.result. }
