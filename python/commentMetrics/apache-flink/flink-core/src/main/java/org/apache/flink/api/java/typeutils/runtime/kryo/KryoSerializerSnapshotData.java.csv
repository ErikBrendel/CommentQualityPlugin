commented;modifiers;parameterAmount;loc;comment;code
false;static;4;12;;// -------------------------------------------------------------------------------------------- // Factories // -------------------------------------------------------------------------------------------- static <T> KryoSerializerSnapshotData<T> createFrom(Class<T> typeClass, LinkedHashMap<Class<?>, SerializableSerializer<?>> defaultKryoSerializers, LinkedHashMap<Class<?>, Class<? extends Serializer<?>>> defaultKryoSerializerClasses, LinkedHashMap<String, KryoRegistration> kryoRegistrations) {     return new KryoSerializerSnapshotData<>(typeClass, optionalMapOf(defaultKryoSerializers, Class::getName), optionalMapOf(defaultKryoSerializerClasses, Class::getName), optionalMapOf(kryoRegistrations, Function.identity())). }
false;static;2;13;;static <T> KryoSerializerSnapshotData<T> createFrom(DataInputView in, ClassLoader cl) throws IOException {     Class<T> typeClass = readTypeClass(in, cl).     LinkedOptionalMap<String, KryoRegistration> kryoRegistrations = readKryoRegistrations(in, cl).     LinkedOptionalMap<Class<?>, SerializableSerializer<?>> defaultSerializer = readDefaultKryoSerializers(in, cl).     LinkedOptionalMap<Class<?>, Class<? extends Serializer<?>>> defaultSerializerClasses = readDefaultKryoSerializerClasses(in, cl).     return new KryoSerializerSnapshotData<>(typeClass, defaultSerializer, defaultSerializerClasses, kryoRegistrations). }
false;;0;3;;// -------------------------------------------------------------------------------------------- // Getters // -------------------------------------------------------------------------------------------- Class<T> getTypeClass() {     return typeClass. }
false;;0;3;;LinkedOptionalMap<Class<?>, SerializableSerializer<?>> getDefaultKryoSerializers() {     return defaultKryoSerializers. }
false;;0;3;;LinkedOptionalMap<Class<?>, Class<? extends Serializer<?>>> getDefaultKryoSerializerClasses() {     return defaultKryoSerializerClasses. }
false;;0;3;;LinkedOptionalMap<String, KryoRegistration> getKryoRegistrations() {     return kryoRegistrations. }
false;;1;6;;// -------------------------------------------------------------------------------------------- // Write // -------------------------------------------------------------------------------------------- void writeSnapshotData(DataOutputView out) throws IOException {     writeTypeClass(out).     writeKryoRegistrations(out, kryoRegistrations).     writeDefaultKryoSerializers(out, defaultKryoSerializers).     writeDefaultKryoSerializerClasses(out, defaultKryoSerializerClasses). }
false;private;1;3;;private void writeTypeClass(DataOutputView out) throws IOException {     out.writeUTF(typeClass.getName()). }
false;private,static;2;10;;private static void writeKryoRegistrations(DataOutputView out, LinkedOptionalMap<String, KryoRegistration> kryoRegistrations) throws IOException {     writeOptionalMap(out, kryoRegistrations, DataOutput::writeUTF, KryoRegistrationUtil::writeKryoRegistration). }
false;private;2;14;;private void writeDefaultKryoSerializers(DataOutputView out, LinkedOptionalMap<Class<?>, SerializableSerializer<?>> defaultKryoSerializers) throws IOException {     writeOptionalMap(out, defaultKryoSerializers, (stream, klass) -> stream.writeUTF(klass.getName()), (stream, instance) -> {         try (final DataOutputViewStream outViewWrapper = new DataOutputViewStream(stream)) {             InstantiationUtil.serializeObject(outViewWrapper, instance).         }     }). }
false;private,static;2;12;;private static void writeDefaultKryoSerializerClasses(DataOutputView out, LinkedOptionalMap<Class<?>, Class<? extends Serializer<?>>> defaultKryoSerializerClasses) throws IOException {     writeOptionalMap(out, defaultKryoSerializerClasses, (stream, klass) -> stream.writeUTF(klass.getName()), (stream, klass) -> stream.writeUTF(klass.getName())). }
false;private,static;2;3;;// -------------------------------------------------------------------------------------------- // Read // -------------------------------------------------------------------------------------------- private static <T> Class<T> readTypeClass(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     return InstantiationUtil.resolveClassByName(in, userCodeClassLoader). }
false;private,static;2;10;;private static LinkedOptionalMap<String, KryoRegistration> readKryoRegistrations(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     return readOptionalMap(in, (stream, unused) -> stream.readUTF(), (stream, unused) -> KryoRegistrationUtil.tryReadKryoRegistration(stream, userCodeClassLoader)). }
false;private,static;2;7;;@SuppressWarnings("unchecked") private static LinkedOptionalMap<Class<?>, SerializableSerializer<?>> readDefaultKryoSerializers(DataInputView in, ClassLoader cl) throws IOException {     return readOptionalMap(in, new ClassResolverByName(cl), new SerializeableSerializerResolver(cl)). }
false;private,static;2;7;;@SuppressWarnings("unchecked") private static LinkedOptionalMap<Class<?>, Class<? extends Serializer<?>>> readDefaultKryoSerializerClasses(DataInputView in, ClassLoader cl) throws IOException {     return readOptionalMap(in, new ClassResolverByName(cl), new ClassResolverByName<Serializer<?>>(cl)). }
false;static;2;33;;static void writeKryoRegistration(DataOutputView out, KryoRegistration kryoRegistration) throws IOException {     checkNotNull(kryoRegistration).     out.writeUTF(kryoRegistration.getRegisteredClass().getName()).     final KryoRegistration.SerializerDefinitionType serializerDefinitionType = kryoRegistration.getSerializerDefinitionType().     out.writeInt(serializerDefinitionType.ordinal()).     switch(serializerDefinitionType) {         case UNSPECIFIED:             {                 // nothing else to write                 break.             }         case CLASS:             {                 Class<? extends Serializer<?>> serializerClass = kryoRegistration.getSerializerClass().                 assert serializerClass != null.                 out.writeUTF(serializerClass.getName()).                 break.             }         case INSTANCE:             {                 try (final DataOutputViewStream outViewWrapper = new DataOutputViewStream(out)) {                     InstantiationUtil.serializeObject(outViewWrapper, kryoRegistration.getSerializableSerializerInstance()).                 }                 break.             }         default:             {                 throw new IllegalStateException("Unrecognized Kryo registration serializer definition type: " + serializerDefinitionType).             }     } }
false;static;2;34;;static KryoRegistration tryReadKryoRegistration(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     String registeredClassname = in.readUTF().     Class<?> registeredClass.     try {         registeredClass = Class.forName(registeredClassname, true, userCodeClassLoader).     } catch (ClassNotFoundException e) {         LOG.warn("Cannot find registered class " + registeredClassname + " for Kryo serialization in classpath." + " using a dummy class as a placeholder.", e).         return null.     }     final KryoRegistration.SerializerDefinitionType serializerDefinitionType = KryoRegistration.SerializerDefinitionType.values()[in.readInt()].     switch(serializerDefinitionType) {         case UNSPECIFIED:             {                 return new KryoRegistration(registeredClass).             }         case CLASS:             {                 return tryReadWithSerializerClass(in, userCodeClassLoader, registeredClassname, registeredClass).             }         case INSTANCE:             {                 return tryReadWithSerializerInstance(in, userCodeClassLoader, registeredClassname, registeredClass).             }         default:             {                 throw new IllegalStateException("Unrecognized Kryo registration serializer definition type: " + serializerDefinitionType).             }     } }
false;private,static;4;19;;@SuppressWarnings("unchecked") private static KryoRegistration tryReadWithSerializerClass(DataInputView in, ClassLoader userCodeClassLoader, String registeredClassname, Class<?> registeredClass) throws IOException {     String serializerClassname = in.readUTF().     Class serializerClass.     try {         serializerClass = Class.forName(serializerClassname, true, userCodeClassLoader).         return new KryoRegistration(registeredClass, serializerClass).     } catch (ClassNotFoundException e) {         LOG.warn("Cannot find registered Kryo serializer class for class " + registeredClassname + " in classpath. using a dummy Kryo serializer that should be replaced as soon as" + " a new Kryo serializer for the class is present", e).     }     return null. }
false;private,static;4;24;;private static KryoRegistration tryReadWithSerializerInstance(DataInputView in, ClassLoader userCodeClassLoader, String registeredClassname, Class<?> registeredClass) throws IOException {     SerializableSerializer<? extends Serializer<?>> serializerInstance.     try (final DataInputViewStream inViewWrapper = new DataInputViewStream(in)) {         serializerInstance = InstantiationUtil.deserializeObject(inViewWrapper, userCodeClassLoader).         return new KryoRegistration(registeredClass, serializerInstance).     } catch (ClassNotFoundException e) {         LOG.warn("Cannot find registered Kryo serializer class for class " + registeredClassname + " in classpath. using a dummy Kryo serializer that should be replaced as soon as" + " a new Kryo serializer for the class is present", e).     } catch (InvalidClassException e) {         LOG.warn("The registered Kryo serializer class for class " + registeredClassname + " has changed and is no longer valid. using a dummy Kryo serializer that should be replaced" + " as soon as a new Kryo serializer for the class is present.", e).     }     return null. }
false;public;2;12;;@SuppressWarnings("unchecked") @Override public Class<T> apply(DataInputView stream, String unused) throws IOException {     String className = stream.readUTF().     try {         return (Class<T>) Class.forName(className, false, classLoader).     } catch (ClassNotFoundException e) {         LOG.warn("Cannot find registered class " + className + " for Kryo serialization in classpath.", e).         return null.     } }
false;public;2;12;;@Override public SerializableSerializer<?> apply(DataInputView stream, String className) {     try {         try (final DataInputViewStream inViewWrapper = new DataInputViewStream(stream)) {             return InstantiationUtil.deserializeObject(inViewWrapper, classLoader).         }     } catch (Throwable e) {         LOG.warn("Cannot deserialize a previously serialized kryo serializer for the type " + className, e).         return null.     } }
