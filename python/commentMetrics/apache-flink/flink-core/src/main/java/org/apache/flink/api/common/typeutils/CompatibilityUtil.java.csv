# id;timestamp;commentText;codeText;commentWords;codeWords
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1497328697;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null) {_			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(precedingSerializerConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else if (initialResult.getConvertDeserializer() != null) {_					return initialResult__				} else {_					throw new RuntimeException(_						"State migration required, but there is no available serializer capable of reading previous data.")__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,config,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,preceding,serializer,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,if,initial,result,get,convert,deserializer,null,return,initial,result,else,throw,new,runtime,exception,state,migration,required,but,there,is,no,available,serializer,capable,of,reading,previous,data,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1497328715;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null) {_			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(precedingSerializerConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,config,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,preceding,serializer,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1524906327;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null) {_			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(precedingSerializerConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,config,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,preceding,serializer,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1539149033;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null) {_			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(precedingSerializerConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,config,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,preceding,serializer,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1539149047;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerConfigSnapshot precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		TypeSerializerConfigSnapshot<?> actualConfigSnapshot__		if (precedingSerializerConfigSnapshot instanceof BackwardsCompatibleConfigSnapshot) {_			actualConfigSnapshot =_				((BackwardsCompatibleConfigSnapshot) precedingSerializerConfigSnapshot).getWrappedConfigSnapshot()__		} else {_			actualConfigSnapshot = precedingSerializerConfigSnapshot__		}__		if (actualConfigSnapshot != null) {_			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(actualConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,config,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,type,serializer,config,snapshot,actual,config,snapshot,if,preceding,serializer,config,snapshot,instanceof,backwards,compatible,config,snapshot,actual,config,snapshot,backwards,compatible,config,snapshot,preceding,serializer,config,snapshot,get,wrapped,config,snapshot,else,actual,config,snapshot,preceding,serializer,config,snapshot,if,actual,config,snapshot,null,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,actual,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1539149114;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null_			&& !(precedingSerializerConfigSnapshot instanceof BackwardsCompatibleSerializerSnapshot)) {__			CompatibilityResult<T> initialResult = newSerializer.ensureCompatibility(precedingSerializerConfigSnapshot)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,preceding,serializer,config,snapshot,instanceof,backwards,compatible,serializer,snapshot,compatibility,result,t,initial,result,new,serializer,ensure,compatibility,preceding,serializer,config,snapshot,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1540907751;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null_			&& !(precedingSerializerConfigSnapshot instanceof BackwardsCompatibleSerializerSnapshot)) {__			CompatibilityResult<T> initialResult = resolveCompatibilityResult(_					(TypeSerializerSnapshot<T>) precedingSerializerConfigSnapshot,_					newSerializer)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,preceding,serializer,config,snapshot,instanceof,backwards,compatible,serializer,snapshot,compatibility,result,t,initial,result,resolve,compatibility,result,type,serializer,snapshot,t,preceding,serializer,config,snapshot,new,serializer,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
CompatibilityUtil -> @SuppressWarnings("unchecked") 	public static <T> CompatibilityResult<T> resolveCompatibilityResult( 			@Nullable TypeSerializer<?> precedingSerializer, 			Class<?> dummySerializerClassTag, 			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot, 			TypeSerializer<T> newSerializer);1540907751;Resolves the final compatibility result of two serializers by taking into account compound information,_including the preceding serializer, the preceding serializer's configuration snapshot, and the new serializer._This method has the side effect that the provided new serializer may have been reconfigured in order to_remain compatible.__The final result is determined as follows:_1. If there is no configuration snapshot of the preceding serializer,_assumes the new serializer to be compatible._2. Confront the configuration snapshot with the new serializer._3. If the result is compatible, just return that as the result._4. If not compatible and requires migration, check if the preceding serializer is valid._If yes, use that as the convert deserializer for state migration._5. If the preceding serializer is not valid, check if the result came with a convert deserializer._If yes, use that for state migration and simply return the result._6. If all of above fails, state migration is required but could not be performed_ throw exception.__@param precedingSerializer the preceding serializer used to write the data, null if none could be retrieved_@param dummySerializerClassTag any class tags that identifies the preceding serializer as a dummy placeholder_@param precedingSerializerConfigSnapshot configuration snapshot of the preceding serializer_@param newSerializer the new serializer to ensure compatibility with__@param <T> Type of the data handled by the serializers__@return the final resolved compatibility result;@SuppressWarnings("unchecked")_	public static <T> CompatibilityResult<T> resolveCompatibilityResult(_			@Nullable TypeSerializer<?> precedingSerializer,_			Class<?> dummySerializerClassTag,_			TypeSerializerSnapshot<?> precedingSerializerConfigSnapshot,_			TypeSerializer<T> newSerializer) {__		if (precedingSerializerConfigSnapshot != null_			&& !(precedingSerializerConfigSnapshot instanceof BackwardsCompatibleSerializerSnapshot)) {__			CompatibilityResult<T> initialResult = resolveCompatibilityResult(_					(TypeSerializerSnapshot<T>) precedingSerializerConfigSnapshot,_					newSerializer)___			if (!initialResult.isRequiresMigration()) {_				return initialResult__			} else {_				if (precedingSerializer != null && !(precedingSerializer.getClass().equals(dummySerializerClassTag))) {_					_					_					return CompatibilityResult.requiresMigration((TypeSerializer<T>) precedingSerializer)__				} else {_					_					return initialResult__				}_			}_		} else {_			_			_			return CompatibilityResult.compatible()__		}_	};resolves,the,final,compatibility,result,of,two,serializers,by,taking,into,account,compound,information,including,the,preceding,serializer,the,preceding,serializer,s,configuration,snapshot,and,the,new,serializer,this,method,has,the,side,effect,that,the,provided,new,serializer,may,have,been,reconfigured,in,order,to,remain,compatible,the,final,result,is,determined,as,follows,1,if,there,is,no,configuration,snapshot,of,the,preceding,serializer,assumes,the,new,serializer,to,be,compatible,2,confront,the,configuration,snapshot,with,the,new,serializer,3,if,the,result,is,compatible,just,return,that,as,the,result,4,if,not,compatible,and,requires,migration,check,if,the,preceding,serializer,is,valid,if,yes,use,that,as,the,convert,deserializer,for,state,migration,5,if,the,preceding,serializer,is,not,valid,check,if,the,result,came,with,a,convert,deserializer,if,yes,use,that,for,state,migration,and,simply,return,the,result,6,if,all,of,above,fails,state,migration,is,required,but,could,not,be,performed,throw,exception,param,preceding,serializer,the,preceding,serializer,used,to,write,the,data,null,if,none,could,be,retrieved,param,dummy,serializer,class,tag,any,class,tags,that,identifies,the,preceding,serializer,as,a,dummy,placeholder,param,preceding,serializer,config,snapshot,configuration,snapshot,of,the,preceding,serializer,param,new,serializer,the,new,serializer,to,ensure,compatibility,with,param,t,type,of,the,data,handled,by,the,serializers,return,the,final,resolved,compatibility,result;suppress,warnings,unchecked,public,static,t,compatibility,result,t,resolve,compatibility,result,nullable,type,serializer,preceding,serializer,class,dummy,serializer,class,tag,type,serializer,snapshot,preceding,serializer,config,snapshot,type,serializer,t,new,serializer,if,preceding,serializer,config,snapshot,null,preceding,serializer,config,snapshot,instanceof,backwards,compatible,serializer,snapshot,compatibility,result,t,initial,result,resolve,compatibility,result,type,serializer,snapshot,t,preceding,serializer,config,snapshot,new,serializer,if,initial,result,is,requires,migration,return,initial,result,else,if,preceding,serializer,null,preceding,serializer,get,class,equals,dummy,serializer,class,tag,return,compatibility,result,requires,migration,type,serializer,t,preceding,serializer,else,return,initial,result,else,return,compatibility,result,compatible
