commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getArity() {     return 4. }
false;public;1;11;;@Override @SuppressWarnings("unchecked") public <T> T getField(int pos) {     switch(pos) {         case 0:             return (T) this.f0.         case 1:             return (T) this.f1.         case 2:             return (T) this.f2.         case 3:             return (T) this.f3.         default:             throw new IndexOutOfBoundsException(String.valueOf(pos)).     } }
false;public;2;19;;@Override @SuppressWarnings("unchecked") public <T> void setField(T value, int pos) {     switch(pos) {         case 0:             this.f0 = (T0) value.             break.         case 1:             this.f1 = (T1) value.             break.         case 2:             this.f2 = (T2) value.             break.         case 3:             this.f3 = (T3) value.             break.         default:             throw new IndexOutOfBoundsException(String.valueOf(pos)).     } }
true;public;4;6;/**  * Sets new values to all fields of the tuple.  *  * @param value0 The value for field 0  * @param value1 The value for field 1  * @param value2 The value for field 2  * @param value3 The value for field 3  */ ;/**  * Sets new values to all fields of the tuple.  *  * @param value0 The value for field 0  * @param value1 The value for field 1  * @param value2 The value for field 2  * @param value3 The value for field 3  */ public void setFields(T0 value0, T1 value1, T2 value2, T3 value3) {     this.f0 = value0.     this.f1 = value1.     this.f2 = value2.     this.f3 = value3. }
true;public;0;8;/**  * Creates a string representation of the tuple in the form  * (f0, f1, f2, f3),  * where the individual fields are the value returned by calling {@link Object#toString} on that field.  * @return The string representation of the tuple.  */ ;// ------------------------------------------------------------------------------------------------- // standard utilities // ------------------------------------------------------------------------------------------------- /**  * Creates a string representation of the tuple in the form  * (f0, f1, f2, f3),  * where the individual fields are the value returned by calling {@link Object#toString} on that field.  * @return The string representation of the tuple.  */ @Override public String toString() {     return "(" + StringUtils.arrayAwareToString(this.f0) + "," + StringUtils.arrayAwareToString(this.f1) + "," + StringUtils.arrayAwareToString(this.f2) + "," + StringUtils.arrayAwareToString(this.f3) + ")". }
true;public;1;24;/**  * Deep equality for tuples by calling equals() on the tuple members.  * @param o the object checked for equality  * @return true if this is equal to o.  */ ;/**  * Deep equality for tuples by calling equals() on the tuple members.  * @param o the object checked for equality  * @return true if this is equal to o.  */ @Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof Tuple4)) {         return false.     }     @SuppressWarnings("rawtypes")     Tuple4 tuple = (Tuple4) o.     if (f0 != null ? !f0.equals(tuple.f0) : tuple.f0 != null) {         return false.     }     if (f1 != null ? !f1.equals(tuple.f1) : tuple.f1 != null) {         return false.     }     if (f2 != null ? !f2.equals(tuple.f2) : tuple.f2 != null) {         return false.     }     if (f3 != null ? !f3.equals(tuple.f3) : tuple.f3 != null) {         return false.     }     return true. }
false;public;0;8;;@Override public int hashCode() {     int result = f0 != null ? f0.hashCode() : 0.     result = 31 * result + (f1 != null ? f1.hashCode() : 0).     result = 31 * result + (f2 != null ? f2.hashCode() : 0).     result = 31 * result + (f3 != null ? f3.hashCode() : 0).     return result. }
true;public;0;8;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ ;/**  * Shallow tuple copy.  * @return A new Tuple with the same fields as this.  */ @Override @SuppressWarnings("unchecked") public Tuple4<T0, T1, T2, T3> copy() {     return new Tuple4<>(this.f0, this.f1, this.f2, this.f3). }
true;public,static;4;6;/**  * Creates a new tuple and assigns the given values to the tuple's fields.  * This is more convenient than using the constructor, because the compiler can  * infer the generic type arguments implicitly. For example:  * {@code Tuple3.of(n, x, s)}  * instead of  * {@code new Tuple3<Integer, Double, String>(n, x, s)}  */ ;/**  * Creates a new tuple and assigns the given values to the tuple's fields.  * This is more convenient than using the constructor, because the compiler can  * infer the generic type arguments implicitly. For example:  * {@code Tuple3.of(n, x, s)}  * instead of  * {@code new Tuple3<Integer, Double, String>(n, x, s)}  */ public static <T0, T1, T2, T3> Tuple4<T0, T1, T2, T3> of(T0 value0, T1 value1, T2 value2, T3 value3) {     return new Tuple4<>(value0, value1, value2, value3). }
