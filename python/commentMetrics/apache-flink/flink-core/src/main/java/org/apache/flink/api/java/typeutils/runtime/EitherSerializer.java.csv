commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ // Accessors // ------------------------------------------------------------------------ public TypeSerializer<R> getRightSerializer() {     return rightSerializer. }
false;public;0;3;;public TypeSerializer<L> getLeftSerializer() {     return leftSerializer. }
false;public;0;4;;// ------------------------------------------------------------------------ // TypeSerializer methods // ------------------------------------------------------------------------ @Override public boolean isImmutableType() {     return false. }
false;public;0;13;;@Override public TypeSerializer<Either<L, R>> duplicate() {     TypeSerializer<L> duplicateLeft = leftSerializer.duplicate().     TypeSerializer<R> duplicateRight = rightSerializer.duplicate().     if ((leftSerializer != duplicateLeft) || (rightSerializer != duplicateRight)) {         // stateful         return new EitherSerializer<L, R>(duplicateLeft, duplicateRight).     } else {         return this.     } }
false;public;0;5;;@Override public Either<L, R> createInstance() {     // We arbitrarily always create a Right value instance.     return Right(rightSerializer.createInstance()). }
false;public;1;13;;@Override public Either<L, R> copy(Either<L, R> from) {     if (from.isLeft()) {         L left = from.left().         L copyLeft = leftSerializer.copy(left).         return Left(copyLeft).     } else {         R right = from.right().         R copyRight = rightSerializer.copy(right).         return Right(copyRight).     } }
false;public;2;14;;@Override public Either<L, R> copy(Either<L, R> from, Either<L, R> reuse) {     if (from.isLeft()) {         Left<L, R> to = Either.obtainLeft(reuse, leftSerializer).         L left = leftSerializer.copy(from.left(), to.left()).         to.setValue(left).         return to.     } else {         Right<L, R> to = Either.obtainRight(reuse, rightSerializer).         R right = rightSerializer.copy(from.right(), to.right()).         to.setValue(right).         return to.     } }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;11;;@Override public void serialize(Either<L, R> record, DataOutputView target) throws IOException {     if (record.isLeft()) {         target.writeBoolean(true).         leftSerializer.serialize(record.left(), target).     } else {         target.writeBoolean(false).         rightSerializer.serialize(record.right(), target).     } }
false;public;1;10;;@Override public Either<L, R> deserialize(DataInputView source) throws IOException {     boolean isLeft = source.readBoolean().     if (isLeft) {         return Left(leftSerializer.deserialize(source)).     } else {         return Right(rightSerializer.deserialize(source)).     } }
false;public;2;15;;@Override public Either<L, R> deserialize(Either<L, R> reuse, DataInputView source) throws IOException {     boolean isLeft = source.readBoolean().     if (isLeft) {         Left<L, R> to = Either.obtainLeft(reuse, leftSerializer).         L left = leftSerializer.deserialize(to.left(), source).         to.setValue(left).         return to.     } else {         Right<L, R> to = Either.obtainRight(reuse, rightSerializer).         R right = rightSerializer.deserialize(to.right(), source).         to.setValue(right).         return to.     } }
false;public;2;11;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     boolean isLeft = source.readBoolean().     target.writeBoolean(isLeft).     if (isLeft) {         leftSerializer.copy(source, target).     } else {         rightSerializer.copy(source, target).     } }
false;public;1;12;;@SuppressWarnings("unchecked") @Override public boolean equals(Object obj) {     if (obj instanceof EitherSerializer) {         EitherSerializer<L, R> other = (EitherSerializer<L, R>) obj.         return leftSerializer.equals(other.leftSerializer) && rightSerializer.equals(other.rightSerializer).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 17 * leftSerializer.hashCode() + rightSerializer.hashCode(). }
false;public;0;4;;// ------------------------------------------------------------------------ // Serializer configuration snapshotting & compatibility // ------------------------------------------------------------------------ @Override public JavaEitherSerializerSnapshot<L, R> snapshotConfiguration() {     return new JavaEitherSerializerSnapshot<>(this). }
