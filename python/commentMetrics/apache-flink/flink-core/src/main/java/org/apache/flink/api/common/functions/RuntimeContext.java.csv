# id;timestamp;commentText;codeText;commentWords;codeWords
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1409589492;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1411473593;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1412338914;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1415044729;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1418925508;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1423570503;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1427097830;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1435243086;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1435243086;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1435243087;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1435243087;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1436265749;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1436966346;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1437058012;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1440672037;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1445001970;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1445001971;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1449496469;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1452178883;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1454527671;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1454527671;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1454527672;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1454679829;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1455101486;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1455976719;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1463939897;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1464290120;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1464364603;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1464705596;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1466787223;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1475231926;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1483645612;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1487865389;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1489149057;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1494363409;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1508481021;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1509016418;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1513160461;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1524569408;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1526630739;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> List<RT> getBroadcastVariable(String name)_;1549467949;Returns the result bound to the broadcast variable identified by the_given {@code name}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@return The broadcast variable, materialized as a list of elements.;<RT> List<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,the,broadcast,variable,materialized,as,a,list,of,elements;rt,list,rt,get,broadcast,variable,string,name
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1436966346;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1437058012;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1440672037;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1445001970;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1445001971;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1449496469;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,map,string,accumulator,get,all,accumulators
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1464705596;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1466787223;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1475231926;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1483645612;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1487865389;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1489149057;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1494363409;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1508481021;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1509016418;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1513160461;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1524569408;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1526630739;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> @PublicEvolving 	boolean hasBroadcastVariable(String name)_;1549467949;Tests for the existence of the broadcast variable identified by the_given {@code name}.__@param name The name under which the broadcast variable is registered__@return Whether a broadcast variable exists for the given name.;@PublicEvolving_	boolean hasBroadcastVariable(String name)_;tests,for,the,existence,of,the,broadcast,variable,identified,by,the,given,code,name,param,name,the,name,under,which,the,broadcast,variable,is,registered,return,whether,a,broadcast,variable,exists,for,the,given,name;public,evolving,boolean,has,broadcast,variable,string,name
RuntimeContext -> int getNumberOfParallelSubtasks()_;1405024514;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1405090423;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1406821655;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1406830680;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1409589492;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1411473593;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1412338914;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1415044729;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1418925508;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1423570503;Gets the degree of parallelism with which the parallel task runs.__@return The degree of parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,degree,of,parallelism,with,which,the,parallel,task,runs,return,the,degree,of,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1427097830;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1435243086;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1435243086;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1435243087;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1435243087;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1436265749;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1436966346;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1437058012;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1440672037;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1445001970;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1445001971;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1449496469;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1452178883;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1454527671;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1454527671;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1454527672;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1454679829;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1455101486;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1455976719;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1463939897;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1464290120;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1464364603;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1464705596;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1466787223;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1475231926;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1483645612;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1487865389;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1489149057;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1494363409;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1508481021;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1509016418;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1513160461;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1524569408;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1526630739;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> int getNumberOfParallelSubtasks()_;1549467949;Gets the parallelism with which the parallel task runs.__@return The parallelism with which the parallel task runs.;int getNumberOfParallelSubtasks()_;gets,the,parallelism,with,which,the,parallel,task,runs,return,the,parallelism,with,which,the,parallel,task,runs;int,get,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1455101486;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1455976719;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1463939897;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1464290120;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1464364603;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1464705596;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1466787223;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1475231926;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1483645612;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1487865389;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1489149057;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1494363409;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can adds elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,adds,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1508481021;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1509016418;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1513160461;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1524569408;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1526630739;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;1549467949;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_holds lists. One can add elements to the list, or retrieve the list as a whole.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichFlatMapFunction<MyType, List<MyType>>() {__private ListState<MyType> state___public void open(Configuration cfg) {_state = getRuntimeContext().getListState(_new ListStateDescriptor<>("myState", MyType.class))____public void flatMap(MyType value, Collector<MyType> out) {_if (value.isDivider()) {_for (MyType t : state.get()) {_out.collect(t)___} else {_state.add(value)____})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;@PublicEvolving_	<T> ListState<T> getListState(ListStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,holds,lists,one,can,add,elements,to,the,list,or,retrieve,the,list,as,a,whole,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,flat,map,function,my,type,list,my,type,private,list,state,my,type,state,public,void,open,configuration,cfg,state,get,runtime,context,get,list,state,new,list,state,descriptor,my,state,my,type,class,public,void,flat,map,my,type,value,collector,my,type,out,if,value,is,divider,for,my,type,t,state,get,out,collect,t,else,state,add,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;public,evolving,t,list,state,t,get,list,state,list,state,descriptor,t,state,properties
RuntimeContext -> DistributedCache getDistributedCache()_;1405024514;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1405090423;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1406821655;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1406830680;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1409589492;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1411473593;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1412338914;Returns the distributed cache to get the local tmp file.;DistributedCache getDistributedCache()_;returns,the,distributed,cache,to,get,the,local,tmp,file;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1415044729;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1418925508;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1423570503;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1427097830;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1435243086;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1435243086;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1435243087;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1435243087;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1436265749;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1436966346;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1437058012;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1440672037;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1445001970;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1445001971;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1449496469;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1452178883;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1454527671;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1454527671;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1454527672;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1454679829;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1455101486;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1455976719;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1463939897;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1464290120;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1464364603;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1464705596;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1466787223;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1475231926;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1483645612;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1487865389;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1489149057;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1494363409;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1508481021;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1509016418;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1513160461;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1524569408;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1526630739;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> DistributedCache getDistributedCache()_;1549467949;Returns the {@link DistributedCache} to get the local temporary file copies of files otherwise not_locally accessible.__@return The distributed cache of the worker executing this instance.;DistributedCache getDistributedCache()_;returns,the,link,distributed,cache,to,get,the,local,temporary,file,copies,of,files,otherwise,not,locally,accessible,return,the,distributed,cache,of,the,worker,executing,this,instance;distributed,cache,get,distributed,cache
RuntimeContext -> @Deprecated 	@Experimental 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1452178883;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@Experimental_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,experimental,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@Experimental 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1454527671;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@Experimental_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,experimental,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@Experimental 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1454527671;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@Experimental_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,experimental,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@Experimental 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1454527672;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@Experimental_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,experimental,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@Experimental 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1454679829;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@Experimental_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,experimental,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Experimental 	Histogram getHistogram(String name)_;1454527671;Convenience function to create a counter object for histograms.;@Experimental_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;experimental,histogram,get,histogram,string,name
RuntimeContext -> @Experimental 	Histogram getHistogram(String name)_;1454527672;Convenience function to create a counter object for histograms.;@Experimental_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;experimental,histogram,get,histogram,string,name
RuntimeContext -> @Experimental 	Histogram getHistogram(String name)_;1454679829;Convenience function to create a counter object for histograms.;@Experimental_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;experimental,histogram,get,histogram,string,name
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1455101486;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1455976719;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1463939897;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1464290120;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1464364603;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1464705596;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1466787223;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> LongCounter getLongCounter(String name)_;1405024514;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1405090423;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1406821655;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1406830680;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1409589492;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1411473593;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1412338914;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1415044729;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1418925508;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1423570503;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1427097830;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1435243086;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1435243086;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1435243087;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1435243087;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1436265749;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1436966346;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1437058012;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1440672037;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1445001970;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1445001971;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> LongCounter getLongCounter(String name)_;1449496469;Convenience function to create a counter object for longs.;LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1455101486;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1455976719;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1463939897;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1464290120;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1464364603;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1464705596;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1466787223;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1475231926;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1483645612;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1487865389;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1489149057;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1494363409;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1508481021;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1509016418;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1513160461;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1524569408;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1526630739;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @PublicEvolving 	IntCounter getIntCounter(String name)_;1549467949;Convenience function to create a counter object for integers.;@PublicEvolving_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;public,evolving,int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	LongCounter getLongCounter(String name)_;1452178883;Convenience function to create a counter object for longs.;@Experimental_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;experimental,long,counter,get,long,counter,string,name
RuntimeContext -> @Experimental 	LongCounter getLongCounter(String name)_;1454527671;Convenience function to create a counter object for longs.;@Experimental_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;experimental,long,counter,get,long,counter,string,name
RuntimeContext -> @Experimental 	LongCounter getLongCounter(String name)_;1454527671;Convenience function to create a counter object for longs.;@Experimental_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;experimental,long,counter,get,long,counter,string,name
RuntimeContext -> @Experimental 	LongCounter getLongCounter(String name)_;1454527672;Convenience function to create a counter object for longs.;@Experimental_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;experimental,long,counter,get,long,counter,string,name
RuntimeContext -> @Experimental 	LongCounter getLongCounter(String name)_;1454679829;Convenience function to create a counter object for longs.;@Experimental_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;experimental,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1455101486;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1455976719;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1463939897;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1464290120;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1464364603;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1464705596;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1466787223;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1475231926;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1483645612;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1487865389;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1489149057;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1494363409;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1508481021;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1509016418;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1513160461;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1524569408;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1526630739;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	Histogram getHistogram(String name)_;1549467949;Convenience function to create a counter object for histograms.;@PublicEvolving_	Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;public,evolving,histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1455101486;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1455976719;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1463939897;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1464290120;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1464364603;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1464705596;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1466787223;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1475231926;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1483645612;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1487865389;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1489149057;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1494363409;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1508481021;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1509016418;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1513160461;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1524569408;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1526630739;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> @PublicEvolving 	DoubleCounter getDoubleCounter(String name)_;1549467949;Convenience function to create a counter object for doubles.;@PublicEvolving_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;public,evolving,double,counter,get,double,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1405024514;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1405090423;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1406821655;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1406830680;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1409589492;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1411473593;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1412338914;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1415044729;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1418925508;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1423570503;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1427097830;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1435243086;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1435243086;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1435243087;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1435243087;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1436265749;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1436966346;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1437058012;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1440672037;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1445001970;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1445001971;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> IntCounter getIntCounter(String name)_;1449496469;Convenience function to create a counter object for integers.;IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	DoubleCounter getDoubleCounter(String name)_;1452178883;Convenience function to create a counter object for doubles.;@Experimental_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;experimental,double,counter,get,double,counter,string,name
RuntimeContext -> @Experimental 	DoubleCounter getDoubleCounter(String name)_;1454527671;Convenience function to create a counter object for doubles.;@Experimental_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;experimental,double,counter,get,double,counter,string,name
RuntimeContext -> @Experimental 	DoubleCounter getDoubleCounter(String name)_;1454527671;Convenience function to create a counter object for doubles.;@Experimental_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;experimental,double,counter,get,double,counter,string,name
RuntimeContext -> @Experimental 	DoubleCounter getDoubleCounter(String name)_;1454527672;Convenience function to create a counter object for doubles.;@Experimental_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;experimental,double,counter,get,double,counter,string,name
RuntimeContext -> @Experimental 	DoubleCounter getDoubleCounter(String name)_;1454679829;Convenience function to create a counter object for doubles.;@Experimental_	DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;experimental,double,counter,get,double,counter,string,name
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1445001971;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.__@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1449496469;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.__@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1452178883;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.__@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> <S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned) throws IOException_;1435243087;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value.__<p>_When storing a non-{@link Serializable} state the user needs to specify a_{@link StateCheckpointer} for drawing snapshots._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#getState()} (for every_state partition) is called before_{@link OperatorState#updateState(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,p,when,storing,a,non,link,serializable,state,the,user,needs,to,specify,a,link,state,checkpointer,for,drawing,snapshots,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,get,state,for,every,state,partition,is,called,before,link,operator,state,update,state,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,throws,ioexception
RuntimeContext -> <S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned) throws IOException_;1436265749;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value.__<p>_When storing a non-{@link Serializable} state the user needs to specify a_{@link StateCheckpointer} for drawing snapshots._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,p,when,storing,a,non,link,serializable,state,the,user,needs,to,specify,a,link,state,checkpointer,for,drawing,snapshots,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,throws,ioexception
RuntimeContext -> <S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned) throws IOException_;1436966346;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value.__<p>_When storing a non-{@link Serializable} state the user needs to specify a_{@link StateCheckpointer} for drawing snapshots._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,p,when,storing,a,non,link,serializable,state,the,user,needs,to,specify,a,link,state,checkpointer,for,drawing,snapshots,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,throws,ioexception
RuntimeContext -> <S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned) throws IOException_;1437058012;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value.__<p>_When storing a non-{@link Serializable} state the user needs to specify a_{@link StateCheckpointer} for drawing snapshots._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,p,when,storing,a,non,link,serializable,state,the,user,needs,to,specify,a,link,state,checkpointer,for,drawing,snapshots,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,throws,ioexception
RuntimeContext -> <S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned) throws IOException_;1440672037;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value.__<p>_When storing a non-{@link Serializable} state the user needs to specify a_{@link StateCheckpointer} for drawing snapshots._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,p,when,storing,a,non,link,serializable,state,the,user,needs,to,specify,a,link,state,checkpointer,for,drawing,snapshots,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,throws,ioexception
RuntimeContext -> String getTaskName()_;1405024514;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1405090423;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1406821655;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1406830680;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1409589492;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1411473593;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1412338914;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1415044729;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1418925508;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1423570503;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1427097830;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1435243086;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1435243086;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1435243087;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1435243087;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1436265749;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1436966346;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1437058012;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1440672037;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1445001970;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1445001971;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1449496469;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1452178883;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1454527671;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1454527671;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1454527672;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1454679829;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1455101486;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1455976719;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1463939897;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1464290120;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1464364603;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1464705596;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1466787223;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1475231926;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1483645612;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1487865389;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1489149057;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1494363409;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1508481021;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1509016418;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1513160461;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1524569408;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1526630739;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> String getTaskName()_;1549467949;Returns the name of the task in which the UDF runs, as assigned during plan construction.__@return The name of the task in which the UDF runs.;String getTaskName()_;returns,the,name,of,the,task,in,which,the,udf,runs,as,assigned,during,plan,construction,return,the,name,of,the,task,in,which,the,udf,runs;string,get,task,name
RuntimeContext -> Histogram getHistogram(String name)_;1405024514;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1405090423;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1406821655;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1406830680;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1409589492;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1411473593;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1412338914;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1415044729;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1418925508;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1423570503;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1427097830;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1435243086;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1435243086;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1435243087;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1435243087;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1436265749;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1436966346;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1437058012;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1440672037;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1445001970;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1445001971;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1449496469;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1452178883;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> Histogram getHistogram(String name)_;1454527671;Convenience function to create a counter object for histograms.;Histogram getHistogram(String name)_;convenience,function,to,create,a,counter,object,for,histograms;histogram,get,histogram,string,name
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1489149057;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1494363409;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1508481021;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1509016418;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1513160461;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1524569408;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1526630739;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @PublicEvolving 	int getMaxNumberOfParallelSubtasks()_;1549467949;Gets the number of max-parallelism with which the parallel task runs.__@return The max-parallelism with which the parallel task runs.;@PublicEvolving_	int getMaxNumberOfParallelSubtasks()_;gets,the,number,of,max,parallelism,with,which,the,parallel,task,runs,return,the,max,parallelism,with,which,the,parallel,task,runs;public,evolving,int,get,max,number,of,parallel,subtasks
RuntimeContext -> @Experimental 	IntCounter getIntCounter(String name)_;1452178883;Convenience function to create a counter object for integers.;@Experimental_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;experimental,int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	IntCounter getIntCounter(String name)_;1454527671;Convenience function to create a counter object for integers.;@Experimental_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;experimental,int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	IntCounter getIntCounter(String name)_;1454527671;Convenience function to create a counter object for integers.;@Experimental_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;experimental,int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	IntCounter getIntCounter(String name)_;1454527672;Convenience function to create a counter object for integers.;@Experimental_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;experimental,int,counter,get,int,counter,string,name
RuntimeContext -> @Experimental 	IntCounter getIntCounter(String name)_;1454679829;Convenience function to create a counter object for integers.;@Experimental_	IntCounter getIntCounter(String name)_;convenience,function,to,create,a,counter,object,for,integers;experimental,int,counter,get,int,counter,string,name
RuntimeContext -> @Deprecated 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1454527671;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getPartitionedState(StateDescriptor)} instead.;@Deprecated_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,partitioned,state,state,descriptor,instead;deprecated,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1454527672;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1405024514;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1405090423;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1406821655;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1406830680;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1409589492;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1411473593;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1412338914;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1415044729;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1464364603;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1464705596;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1466787223;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1475231926;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1483645612;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1487865389;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1489149057;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1494363409;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1508481021;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1509016418;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1513160461;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1524569408;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1526630739;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> @PublicEvolving 	MetricGroup getMetricGroup()_;1549467949;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;@PublicEvolving_	MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;public,evolving,metric,group,get,metric,group
RuntimeContext -> int getIndexOfThisSubtask()_;1405024514;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1405090423;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1406821655;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1406830680;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1409589492;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1411473593;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1412338914;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1415044729;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1418925508;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1423570503;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the degree-of-parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,degree,of,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1427097830;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1435243086;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1435243086;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1435243087;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1435243087;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1436265749;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1436966346;Gets the number of the parallel subtask. The numbering starts from 1 and goes up to the parallelism,_as returned by {@link #getNumberOfParallelSubtasks()}.__@return The number of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,the,parallel,subtask,the,numbering,starts,from,1,and,goes,up,to,the,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,number,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1437058012;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1440672037;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1445001970;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1445001971;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1449496469;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1452178883;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1454527671;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1454527671;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1454527672;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1454679829;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1455101486;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1455976719;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1463939897;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1464290120;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1464364603;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1464705596;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1466787223;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1475231926;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1483645612;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1487865389;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1489149057;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1494363409;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1508481021;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1509016418;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1513160461;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1524569408;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1526630739;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> int getIndexOfThisSubtask()_;1549467949;Gets the number of this parallel subtask. The numbering starts from 0 and goes up to_parallelism-1 (parallelism as returned by {@link #getNumberOfParallelSubtasks()}).__@return The index of the parallel subtask.;int getIndexOfThisSubtask()_;gets,the,number,of,this,parallel,subtask,the,numbering,starts,from,0,and,goes,up,to,parallelism,1,parallelism,as,returned,by,link,get,number,of,parallel,subtasks,return,the,index,of,the,parallel,subtask;int,get,index,of,this,subtask
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1455101486;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1455976719;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1463939897;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1464290120;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1464364603;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1464705596;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1466787223;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1475231926;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1483645612;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1487865389;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1489149057;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1494363409;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1508481021;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1509016418;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1513160461;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1524569408;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1526630739;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @PublicEvolving 	LongCounter getLongCounter(String name)_;1549467949;Convenience function to create a counter object for longs.;@PublicEvolving_	LongCounter getLongCounter(String name)_;convenience,function,to,create,a,counter,object,for,longs;public,evolving,long,counter,get,long,counter,string,name
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1455101486;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1455976719;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1463939897;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1464290120;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1464364603;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1464705596;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	@PublicEvolving 	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;1466787223;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__<p>This method attempts to deduce the type information from the given type class. If the_full type cannot be determined from the class (for example because of generic parameters),_the TypeInformation object must be manually passed via_{@link #getKeyValueState(String, TypeInformation, Object)}.___@param name The name of the key/value state._@param stateType The class of the type that is stored in the state. Used to generate_serializers for managed memory and checkpointing._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null.__@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	@PublicEvolving_	<S> OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,p,this,method,attempts,to,deduce,the,type,information,from,the,given,type,class,if,the,full,type,cannot,be,determined,from,the,class,for,example,because,of,generic,parameters,the,type,information,object,must,be,manually,passed,via,link,get,key,value,state,string,type,information,object,param,name,the,name,of,the,key,value,state,param,state,type,the,class,of,the,type,that,is,stored,in,the,state,used,to,generate,serializers,for,managed,memory,and,checkpointing,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,public,evolving,s,operator,state,s,get,key,value,state,string,name,class,s,state,type,s,default,state
RuntimeContext -> <S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;1435243087;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value, and the {@link StateCheckpointer} will be used to draw the_state snapshots.__<p>_When storing a {@link Serializable} state the user can omit the_{@link StateCheckpointer} in which case the full state will be written as_the snapshot._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#getState()} (for every_state partition) is called before_{@link OperatorState#updateState(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@param checkpointer_The {@link StateCheckpointer} that will be used to draw_snapshots from the user state._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,and,the,link,state,checkpointer,will,be,used,to,draw,the,state,snapshots,p,when,storing,a,link,serializable,state,the,user,can,omit,the,link,state,checkpointer,in,which,case,the,full,state,will,be,written,as,the,snapshot,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,get,state,for,every,state,partition,is,called,before,link,operator,state,update,state,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,param,checkpointer,the,link,state,checkpointer,that,will,be,used,to,draw,snapshots,from,the,user,state,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,c,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,state,checkpointer,s,c,checkpointer,throws,ioexception
RuntimeContext -> <S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;1436265749;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value, and the {@link StateCheckpointer} will be used to draw the_state snapshots.__<p>_When storing a {@link Serializable} state the user can omit the_{@link StateCheckpointer} in which case the full state will be written as_the snapshot._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@param checkpointer_The {@link StateCheckpointer} that will be used to draw_snapshots from the user state._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,and,the,link,state,checkpointer,will,be,used,to,draw,the,state,snapshots,p,when,storing,a,link,serializable,state,the,user,can,omit,the,link,state,checkpointer,in,which,case,the,full,state,will,be,written,as,the,snapshot,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,param,checkpointer,the,link,state,checkpointer,that,will,be,used,to,draw,snapshots,from,the,user,state,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,c,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,state,checkpointer,s,c,checkpointer,throws,ioexception
RuntimeContext -> <S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;1436966346;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value, and the {@link StateCheckpointer} will be used to draw the_state snapshots.__<p>_When storing a {@link Serializable} state the user can omit the_{@link StateCheckpointer} in which case the full state will be written as_the snapshot._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@param checkpointer_The {@link StateCheckpointer} that will be used to draw_snapshots from the user state._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,and,the,link,state,checkpointer,will,be,used,to,draw,the,state,snapshots,p,when,storing,a,link,serializable,state,the,user,can,omit,the,link,state,checkpointer,in,which,case,the,full,state,will,be,written,as,the,snapshot,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,param,checkpointer,the,link,state,checkpointer,that,will,be,used,to,draw,snapshots,from,the,user,state,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,c,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,state,checkpointer,s,c,checkpointer,throws,ioexception
RuntimeContext -> <S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;1437058012;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value, and the {@link StateCheckpointer} will be used to draw the_state snapshots.__<p>_When storing a {@link Serializable} state the user can omit the_{@link StateCheckpointer} in which case the full state will be written as_the snapshot._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@param checkpointer_The {@link StateCheckpointer} that will be used to draw_snapshots from the user state._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,and,the,link,state,checkpointer,will,be,used,to,draw,the,state,snapshots,p,when,storing,a,link,serializable,state,the,user,can,omit,the,link,state,checkpointer,in,which,case,the,full,state,will,be,written,as,the,snapshot,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,param,checkpointer,the,link,state,checkpointer,that,will,be,used,to,draw,snapshots,from,the,user,state,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,c,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,state,checkpointer,s,c,checkpointer,throws,ioexception
RuntimeContext -> <S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState, 			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;1440672037;Returns the {@link OperatorState} with the given name of the underlying_operator instance, which can be used to store and update user state in a_fault tolerant fashion. The state will be initialized by the provided_default value, and the {@link StateCheckpointer} will be used to draw the_state snapshots.__<p>_When storing a {@link Serializable} state the user can omit the_{@link StateCheckpointer} in which case the full state will be written as_the snapshot._</p>__@param name_Identifier for the state allowing that more operator states_can be used by the same operator._@param defaultState_Default value for the operator state. This will be returned_the first time {@link OperatorState#value()} (for every_state partition) is called before_{@link OperatorState#update(Object)}._@param partitioned_Sets whether partitioning should be applied for the given_state. If true a partitioner key must be used._@param checkpointer_The {@link StateCheckpointer} that will be used to draw_snapshots from the user state._@return The {@link OperatorState} for the underlying operator.__@throws IOException Thrown if the system cannot access the state.;<S, C extends Serializable> OperatorState<S> getOperatorState(String name, S defaultState,_			boolean partitioned, StateCheckpointer<S, C> checkpointer) throws IOException_;returns,the,link,operator,state,with,the,given,name,of,the,underlying,operator,instance,which,can,be,used,to,store,and,update,user,state,in,a,fault,tolerant,fashion,the,state,will,be,initialized,by,the,provided,default,value,and,the,link,state,checkpointer,will,be,used,to,draw,the,state,snapshots,p,when,storing,a,link,serializable,state,the,user,can,omit,the,link,state,checkpointer,in,which,case,the,full,state,will,be,written,as,the,snapshot,p,param,name,identifier,for,the,state,allowing,that,more,operator,states,can,be,used,by,the,same,operator,param,default,state,default,value,for,the,operator,state,this,will,be,returned,the,first,time,link,operator,state,value,for,every,state,partition,is,called,before,link,operator,state,update,object,param,partitioned,sets,whether,partitioning,should,be,applied,for,the,given,state,if,true,a,partitioner,key,must,be,used,param,checkpointer,the,link,state,checkpointer,that,will,be,used,to,draw,snapshots,from,the,user,state,return,the,link,operator,state,for,the,underlying,operator,throws,ioexception,thrown,if,the,system,cannot,access,the,state;s,c,extends,serializable,operator,state,s,get,operator,state,string,name,s,default,state,boolean,partitioned,state,checkpointer,s,c,checkpointer,throws,ioexception
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1418925508;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1423570503;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1427097830;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1435243086;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1435243086;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1435243087;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1435243087;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1436265749;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1436966346;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1437058012;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1440672037;Add this accumulator. Throws an exception if the counter is already_existing.__This is only needed to support generic accumulators (e.g. for_Set<String>). Didn't find a way to get this work with getAccumulator.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,counter,is,already,existing,this,is,only,needed,to,support,generic,accumulators,e,g,for,set,string,didn,t,find,a,way,to,get,this,work,with,get,accumulator;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1445001970;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1445001971;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1449496469;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1452178883;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1454527671;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1454527671;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1454527672;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1454679829;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1455101486;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1455976719;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1463939897;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1464290120;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1464364603;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1464705596;Add this accumulator. Throws an exception if the accumulator already exists.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1466787223;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1475231926;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1483645612;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1487865389;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1489149057;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1494363409;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1508481021;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1509016418;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1513160461;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1524569408;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1526630739;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;1549467949;Add this accumulator. Throws an exception if the accumulator already exists in the same Task._Note that the Accumulator name must have an unique name across the Flink job. Otherwise you will_get an error when incompatible accumulators from different Tasks are combined at the JobManager_upon job completion.;<V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator)_;add,this,accumulator,throws,an,exception,if,the,accumulator,already,exists,in,the,same,task,note,that,the,accumulator,name,must,have,an,unique,name,across,the,flink,job,otherwise,you,will,get,an,error,when,incompatible,accumulators,from,different,tasks,are,combined,at,the,job,manager,upon,job,completion;v,a,extends,serializable,void,add,accumulator,string,name,accumulator,v,a,accumulator
RuntimeContext -> @Deprecated 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1454527671;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getPartitionedState(StateDescriptor)} instead.;@Deprecated_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,partitioned,state,state,descriptor,instead;deprecated,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> @Deprecated 	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1454527672;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link ValueState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).__@deprecated Use the more expressive {@link #getState(ValueStateDescriptor)} instead.;@Deprecated_	<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,value,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream,deprecated,use,the,more,expressive,link,get,state,value,state,descriptor,instead;deprecated,s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> MetricGroup getMetricGroup()_;1463939897;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;metric,group,get,metric,group
RuntimeContext -> MetricGroup getMetricGroup()_;1464290120;Returns the metric group for this parallel subtask.__@return The metric group for this parallel subtask.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,parallel,subtask,return,the,metric,group,for,this,parallel,subtask;metric,group,get,metric,group
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1455101486;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1455976719;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1463939897;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1464290120;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1464364603;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1464705596;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1466787223;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1475231926;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1483645612;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1487865389;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1489149057;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1494363409;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1508481021;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1509016418;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1513160461;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1524569408;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1526630739;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> @Deprecated 	@PublicEvolving 	Map<String, Accumulator<?, ?>> getAllAccumulators()_;1549467949;Returns a map of all registered accumulators for this task._The returned map must not be modified._@deprecated Use getAccumulator(..) to obtain the value of an accumulator.;@Deprecated_	@PublicEvolving_	Map<String, Accumulator<?, ?>> getAllAccumulators()_;returns,a,map,of,all,registered,accumulators,for,this,task,the,returned,map,must,not,be,modified,deprecated,use,get,accumulator,to,obtain,the,value,of,an,accumulator;deprecated,public,evolving,map,string,accumulator,get,all,accumulators
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1445001971;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1449496469;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> <S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;1452178883;Gets the key/value state, which is only accessible if the function is executed on_a KeyedStream. Upon calling {@link OperatorState#value()}, the key/value state will_return the value bound to the key of the element currently processed by the function._Each operator may maintain multiple key/value states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private State<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getKeyValueState(Long.class, 0L)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param name The name of the key/value state._@param stateType The type information for the type that is stored in the state._Used to create serializers for managed memory and checkpoints._@param defaultState The default state value, returned when the state is accessed and_no value has yet been set for the key. May be null._@param <S> The type of the state.__@return The key/value state access.__@throws UnsupportedOperationException Thrown, if no key/value state is available for the_function (function is not part os a KeyedStream).;<S> OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)_;gets,the,key,value,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,upon,calling,link,operator,state,value,the,key,value,state,will,return,the,value,bound,to,the,key,of,the,element,currently,processed,by,the,function,each,operator,may,maintain,multiple,key,value,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,key,value,state,long,class,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,name,the,name,of,the,key,value,state,param,state,type,the,type,information,for,the,type,that,is,stored,in,the,state,used,to,create,serializers,for,managed,memory,and,checkpoints,param,default,state,the,default,state,value,returned,when,the,state,is,accessed,and,no,value,has,yet,been,set,for,the,key,may,be,null,param,s,the,type,of,the,state,return,the,key,value,state,access,throws,unsupported,operation,exception,thrown,if,no,key,value,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,operator,state,s,get,key,value,state,string,name,type,information,s,state,type,s,default,state
RuntimeContext -> String getTaskNameWithSubtasks()_;1449496469;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1452178883;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1454527671;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1454527671;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1454527672;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1454679829;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1455101486;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1455976719;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1463939897;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1464290120;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1464364603;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1464705596;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1466787223;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1475231926;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1483645612;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1487865389;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1489149057;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1494363409;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1508481021;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1509016418;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1513160461;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1524569408;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1526630739;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> String getTaskNameWithSubtasks()_;1549467949;Returns the name of the task, appended with the subtask indicator, such as "MyTask (3/6)",_where 3 would be ({@link #getIndexOfThisSubtask()} + 1), and 6 would be_{@link #getNumberOfParallelSubtasks()}.__@return The name of the task, with subtask indicator.;String getTaskNameWithSubtasks()_;returns,the,name,of,the,task,appended,with,the,subtask,indicator,such,as,my,task,3,6,where,3,would,be,link,get,index,of,this,subtask,1,and,6,would,be,link,get,number,of,parallel,subtasks,return,the,name,of,the,task,with,subtask,indicator;string,get,task,name,with,subtasks
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1405024514;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1405090423;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1406821655;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1406830680;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1409589492;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1411473593;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1412338914;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1415044729;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1418925508;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1423570503;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1427097830;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1435243086;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1435243086;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1435243087;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1435243087;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;1436265749;For system internal usage only. Use getAccumulator(...) to obtain a_accumulator. Use this as read-only.;HashMap<String, Accumulator<?, ?>> getAllAccumulators()_;for,system,internal,usage,only,use,get,accumulator,to,obtain,a,accumulator,use,this,as,read,only;hash,map,string,accumulator,get,all,accumulators
RuntimeContext -> @PublicEvolving 	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;1509016418;Gets a handle to the system's key/value aggregating state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")__AggregateFunction<...> aggregateFunction = ...__keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private AggregatingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getAggregatingState(_new AggregatingStateDescriptor<>("sum", aggregateFunction, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <IN> The type of the values that are added to the state._@param <ACC> The type of the accumulator (intermediate aggregation state)._@param <OUT> The type of the values that are returned from the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;gets,a,handle,to,the,system,s,key,value,aggregating,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,aggregate,function,aggregate,function,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,aggregating,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,aggregating,state,new,aggregating,state,descriptor,sum,aggregate,function,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,in,the,type,of,the,values,that,are,added,to,the,state,param,acc,the,type,of,the,accumulator,intermediate,aggregation,state,param,out,the,type,of,the,values,that,are,returned,from,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,in,acc,out,aggregating,state,in,out,get,aggregating,state,aggregating,state,descriptor,in,acc,out,state,properties
RuntimeContext -> @PublicEvolving 	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;1513160461;Gets a handle to the system's key/value aggregating state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")__AggregateFunction<...> aggregateFunction = ...__keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private AggregatingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getAggregatingState(_new AggregatingStateDescriptor<>("sum", aggregateFunction, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <IN> The type of the values that are added to the state._@param <ACC> The type of the accumulator (intermediate aggregation state)._@param <OUT> The type of the values that are returned from the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;gets,a,handle,to,the,system,s,key,value,aggregating,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,aggregate,function,aggregate,function,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,aggregating,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,aggregating,state,new,aggregating,state,descriptor,sum,aggregate,function,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,in,the,type,of,the,values,that,are,added,to,the,state,param,acc,the,type,of,the,accumulator,intermediate,aggregation,state,param,out,the,type,of,the,values,that,are,returned,from,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,in,acc,out,aggregating,state,in,out,get,aggregating,state,aggregating,state,descriptor,in,acc,out,state,properties
RuntimeContext -> @PublicEvolving 	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;1524569408;Gets a handle to the system's key/value aggregating state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")__AggregateFunction<...> aggregateFunction = ...__keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private AggregatingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getAggregatingState(_new AggregatingStateDescriptor<>("sum", aggregateFunction, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <IN> The type of the values that are added to the state._@param <ACC> The type of the accumulator (intermediate aggregation state)._@param <OUT> The type of the values that are returned from the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;gets,a,handle,to,the,system,s,key,value,aggregating,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,aggregate,function,aggregate,function,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,aggregating,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,aggregating,state,new,aggregating,state,descriptor,sum,aggregate,function,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,in,the,type,of,the,values,that,are,added,to,the,state,param,acc,the,type,of,the,accumulator,intermediate,aggregation,state,param,out,the,type,of,the,values,that,are,returned,from,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,in,acc,out,aggregating,state,in,out,get,aggregating,state,aggregating,state,descriptor,in,acc,out,state,properties
RuntimeContext -> @PublicEvolving 	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;1526630739;Gets a handle to the system's key/value aggregating state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")__AggregateFunction<...> aggregateFunction = ...__keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private AggregatingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getAggregatingState(_new AggregatingStateDescriptor<>("sum", aggregateFunction, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <IN> The type of the values that are added to the state._@param <ACC> The type of the accumulator (intermediate aggregation state)._@param <OUT> The type of the values that are returned from the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;gets,a,handle,to,the,system,s,key,value,aggregating,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,aggregate,function,aggregate,function,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,aggregating,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,aggregating,state,new,aggregating,state,descriptor,sum,aggregate,function,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,in,the,type,of,the,values,that,are,added,to,the,state,param,acc,the,type,of,the,accumulator,intermediate,aggregation,state,param,out,the,type,of,the,values,that,are,returned,from,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,in,acc,out,aggregating,state,in,out,get,aggregating,state,aggregating,state,descriptor,in,acc,out,state,properties
RuntimeContext -> @PublicEvolving 	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;1549467949;Gets a handle to the system's key/value aggregating state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")__AggregateFunction<...> aggregateFunction = ...__keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private AggregatingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getAggregatingState(_new AggregatingStateDescriptor<>("sum", aggregateFunction, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <IN> The type of the values that are added to the state._@param <ACC> The type of the accumulator (intermediate aggregation state)._@param <OUT> The type of the values that are returned from the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties)_;gets,a,handle,to,the,system,s,key,value,aggregating,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,aggregate,function,aggregate,function,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,aggregating,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,aggregating,state,new,aggregating,state,descriptor,sum,aggregate,function,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,in,the,type,of,the,values,that,are,added,to,the,state,param,acc,the,type,of,the,accumulator,intermediate,aggregation,state,param,out,the,type,of,the,values,that,are,returned,from,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,in,acc,out,aggregating,state,in,out,get,aggregating,state,aggregating,state,descriptor,in,acc,out,state,properties
RuntimeContext -> int getAttemptNumber()_;1449496469;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1452178883;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1454527671;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1454527671;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1454527672;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1454679829;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1455101486;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1455976719;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1463939897;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1464290120;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1464364603;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1464705596;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1466787223;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1475231926;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1483645612;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1487865389;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1489149057;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1494363409;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1508481021;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1509016418;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1513160461;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1524569408;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1526630739;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> int getAttemptNumber()_;1549467949;Gets the attempt number of this parallel subtask. First attempt is numbered 0.__@return Attempt number of the subtask.;int getAttemptNumber()_;gets,the,attempt,number,of,this,parallel,subtask,first,attempt,is,numbered,0,return,attempt,number,of,the,subtask;int,get,attempt,number
RuntimeContext -> <S extends State> S getPartitionedState(StateDescriptor<S> stateDescriptor)_;1454527671;Gets the partitioned state, which is only accessible if the function is executed on_a KeyedStream. When interacting with the state only the instance bound to the key of the_element currently processed by the function is changed._Each operator may maintain multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueStateDescriptor<Long> countIdentifier =_new ValueStateDescriptor<>("count", 0L, LongSerializer.INSTANCE)___private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getPartitionedState(countIdentifier)____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param stateDescriptor The StateDescriptor that contains the name and type of the_state that is being accessed.__@param <S> The type of the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;<S extends State> S getPartitionedState(StateDescriptor<S> stateDescriptor)_;gets,the,partitioned,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,when,interacting,with,the,state,only,the,instance,bound,to,the,key,of,the,element,currently,processed,by,the,function,is,changed,each,operator,may,maintain,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,descriptor,long,count,identifier,new,value,state,descriptor,count,0l,long,serializer,instance,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,partitioned,state,count,identifier,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,state,descriptor,the,state,descriptor,that,contains,the,name,and,type,of,the,state,that,is,being,accessed,param,s,the,type,of,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,extends,state,s,get,partitioned,state,state,descriptor,s,state,descriptor
RuntimeContext -> <S extends State> S getPartitionedState(StateDescriptor<S> stateDescriptor)_;1454527671;Gets the partitioned state, which is only accessible if the function is executed on_a KeyedStream. When interacting with the state only the instance bound to the key of the_element currently processed by the function is changed._Each operator may maintain multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getPartitionedState(_new ValueStateDescriptor<Long>("count", 0L, LongSerializer.INSTANCE))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value()__state.update(value + 1)__return new Tuple2<>(value, count)___})___}</pre>__@param stateDescriptor The StateDescriptor that contains the name and type of the_state that is being accessed.__@param <S> The type of the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part os a KeyedStream).;<S extends State> S getPartitionedState(StateDescriptor<S> stateDescriptor)_;gets,the,partitioned,state,which,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,when,interacting,with,the,state,only,the,instance,bound,to,the,key,of,the,element,currently,processed,by,the,function,is,changed,each,operator,may,maintain,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,partitioned,state,new,value,state,descriptor,long,count,0l,long,serializer,instance,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,state,update,value,1,return,new,tuple2,value,count,pre,param,state,descriptor,the,state,descriptor,that,contains,the,name,and,type,of,the,state,that,is,being,accessed,param,s,the,type,of,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,os,a,keyed,stream;s,extends,state,s,get,partitioned,state,state,descriptor,s,state,descriptor
RuntimeContext -> @PublicEvolving 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1483645612;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1487865389;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1489149057;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1455101486;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1455976719;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1463939897;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1464290120;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1464364603;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1464705596;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1466787223;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1475231926;Gets a handle to the system's key/value list state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> sum___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", MyType.class, 0L, (a, b) -> a + b))____public Tuple2<MyType, Long> map(MyType value) {_sum.add(value.count())__return new Tuple2<>(value, sum.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,list,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,sum,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,my,type,class,0l,a,b,a,b,public,tuple2,my,type,long,map,my,type,value,sum,add,value,count,return,new,tuple2,value,sum,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1483645612;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1487865389;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1489149057;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1494363409;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1508481021;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1509016418;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1513160461;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1524569408;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1526630739;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;1549467949;Gets a handle to the system's key/value reducing state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private ReducingState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new ReducingStateDescriptor<>("sum", (a, b) -> a + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value.count())__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,reducing,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,reducing,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,reducing,state,descriptor,sum,a,b,a,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,count,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,reducing,state,t,get,reducing,state,reducing,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1494363409;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1508481021;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getReducingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,reducing,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1509016418;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getFoldingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> Type of the values folded in the other state_@param <ACC> Type of the value in the state__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,folding,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,type,of,the,values,folded,in,the,other,state,param,acc,type,of,the,value,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1513160461;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getFoldingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> Type of the values folded in the other state_@param <ACC> Type of the value in the state__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version in favor of {@link AggregatingState};@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,folding,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,type,of,the,values,folded,in,the,other,state,param,acc,type,of,the,value,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version,in,favor,of,link,aggregating,state;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1524569408;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getFoldingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> Type of the values folded in the other state_@param <ACC> Type of the value in the state__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version in favor of {@link AggregatingState};@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,folding,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,type,of,the,values,folded,in,the,other,state,param,acc,type,of,the,value,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version,in,favor,of,link,aggregating,state;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1526630739;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getFoldingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> Type of the values folded in the other state_@param <ACC> Type of the value in the state__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version in favor of {@link AggregatingState};@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,folding,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,type,of,the,values,folded,in,the,other,state,param,acc,type,of,the,value,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version,in,favor,of,link,aggregating,state;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> @PublicEvolving 	@Deprecated 	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;1549467949;Gets a handle to the system's key/value folding state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_aggregates values with different types.__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private FoldingState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getFoldingState(_new FoldingStateDescriptor<>("sum", 0L, (a, b) -> a.count() + b, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_state.add(value)__return new Tuple2<>(value, state.get())___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> Type of the values folded in the other state_@param <ACC> Type of the value in the state__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).__@deprecated will be removed in a future version in favor of {@link AggregatingState};@PublicEvolving_	@Deprecated_	<T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties)_;gets,a,handle,to,the,system,s,key,value,folding,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,aggregates,values,with,different,types,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,folding,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,folding,state,new,folding,state,descriptor,sum,0l,a,b,a,count,b,long,class,public,tuple2,my,type,long,map,my,type,value,state,add,value,return,new,tuple2,value,state,get,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,type,of,the,values,folded,in,the,other,state,param,acc,type,of,the,value,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream,deprecated,will,be,removed,in,a,future,version,in,favor,of,link,aggregating,state;public,evolving,deprecated,t,acc,folding,state,t,acc,get,folding,state,folding,state,descriptor,t,acc,state,properties
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1405024514;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1405090423;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1406821655;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1406830680;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1409589492;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1411473593;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1412338914;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1415044729;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1418925508;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1423570503;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1427097830;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1435243086;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1435243086;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1435243087;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1435243087;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1436265749;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1436966346;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1437058012;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1440672037;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1445001970;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1445001971;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> DoubleCounter getDoubleCounter(String name)_;1449496469;Convenience function to create a counter object for doubles.;DoubleCounter getDoubleCounter(String name)_;convenience,function,to,create,a,counter,object,for,doubles;double,counter,get,double,counter,string,name
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1415044729;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1418925508;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1423570503;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1427097830;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1435243086;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1435243086;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1435243087;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1435243087;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1436265749;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1436966346;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1437058012;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1440672037;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1445001970;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1445001971;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1449496469;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1452178883;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1454527671;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1454527671;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1454527672;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1454679829;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1455101486;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1455976719;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1463939897;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1464290120;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1464364603;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1464705596;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1466787223;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1475231926;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1483645612;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1487865389;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1489149057;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1494363409;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1508481021;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1509016418;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1513160461;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1524569408;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1526630739;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;1549467949;Returns the result bound to the broadcast variable identified by the_given {@code name}. The broadcast variable is returned as a shared data structure_that is initialized with the given {@link BroadcastVariableInitializer}._<p>_IMPORTANT: The broadcast variable data structure is shared between the parallel_tasks on one machine. Any access that modifies its internal state needs to_be manually synchronized by the caller.__@param name The name under which the broadcast variable is registered__@param initializer The initializer that creates the shared data structure of the broadcast_variable from the sequence of elements._@return The broadcast variable, materialized as a list of elements.;<T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name,the,broadcast,variable,is,returned,as,a,shared,data,structure,that,is,initialized,with,the,given,link,broadcast,variable,initializer,p,important,the,broadcast,variable,data,structure,is,shared,between,the,parallel,tasks,on,one,machine,any,access,that,modifies,its,internal,state,needs,to,be,manually,synchronized,by,the,caller,param,name,the,name,under,which,the,broadcast,variable,is,registered,param,initializer,the,initializer,that,creates,the,shared,data,structure,of,the,broadcast,variable,from,the,sequence,of,elements,return,the,broadcast,variable,materialized,as,a,list,of,elements;t,c,c,get,broadcast,variable,with,initializer,string,name,broadcast,variable,initializer,t,c,initializer
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1455101486;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", 0L, LongSerializer.INSTANCE))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,0l,long,serializer,instance,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1455976719;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1463939897;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1464290120;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1464364603;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1464705596;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1466787223;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1475231926;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1483645612;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1487865389;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1489149057;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1494363409;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1508481021;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1509016418;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1513160461;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> count___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,count,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1524569408;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1526630739;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(value)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,value,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> @PublicEvolving 	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;1549467949;Gets a handle to the system's key/value state. The key/value state is only accessible_if the function is executed on a KeyedStream. On each access, the state exposes the value_for the key of the element currently processed by the function._Each function may have multiple partitioned states, addressed with different names.__<p>Because the scope of each value is the key of the currently processed element,_and the elements are distributed by the Flink runtime, the system can transparently_scale out and redistribute the state and KeyedStream.__<p>The following code example shows how to implement a continuous counter that counts_how many times elements of a certain key occur, and emits an updated count for that_element on each occurrence.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, Tuple2<MyType, Long>>() {__private ValueState<Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getState(_new ValueStateDescriptor<Long>("count", LongSerializer.INSTANCE, 0L))____public Tuple2<MyType, Long> map(MyType value) {_long count = state.value() + 1__state.update(count)__return new Tuple2<>(value, count)___})__}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <T> The type of value stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties)_;gets,a,handle,to,the,system,s,key,value,state,the,key,value,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,on,each,access,the,state,exposes,the,value,for,the,key,of,the,element,currently,processed,by,the,function,each,function,may,have,multiple,partitioned,states,addressed,with,different,names,p,because,the,scope,of,each,value,is,the,key,of,the,currently,processed,element,and,the,elements,are,distributed,by,the,flink,runtime,the,system,can,transparently,scale,out,and,redistribute,the,state,and,keyed,stream,p,the,following,code,example,shows,how,to,implement,a,continuous,counter,that,counts,how,many,times,elements,of,a,certain,key,occur,and,emits,an,updated,count,for,that,element,on,each,occurrence,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,tuple2,my,type,long,private,value,state,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,state,new,value,state,descriptor,long,count,long,serializer,instance,0l,public,tuple2,my,type,long,map,my,type,value,long,count,state,value,1,state,update,count,return,new,tuple2,value,count,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,t,the,type,of,value,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,t,value,state,t,get,state,value,state,descriptor,t,state,properties
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1423570503;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1427097830;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1435243086;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1435243086;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1435243087;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1435243087;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1436265749;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1436966346;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1437058012;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1440672037;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1445001970;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1445001971;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1449496469;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1452178883;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1454527671;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1454527671;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1454527672;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1454679829;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1455101486;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1455976719;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1463939897;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1464290120;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1464364603;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1464705596;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1466787223;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1475231926;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1483645612;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1487865389;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1489149057;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1494363409;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1508481021;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1509016418;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1513160461;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1524569408;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1526630739;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> ExecutionConfig getExecutionConfig()_;1549467949;Returns the {@link org.apache.flink.api.common.ExecutionConfig} for the currently executing_job.;ExecutionConfig getExecutionConfig()_;returns,the,link,org,apache,flink,api,common,execution,config,for,the,currently,executing,job;execution,config,get,execution,config
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1418925508;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1423570503;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1427097830;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1435243086;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1435243086;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1435243087;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1435243087;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1436265749;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1436966346;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1437058012;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1440672037;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1445001970;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1445001971;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1449496469;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1452178883;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1454527671;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1454527671;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1454527672;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1454679829;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1455101486;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1455976719;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1463939897;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1464290120;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1464364603;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1464705596;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1466787223;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1475231926;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1483645612;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1487865389;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1489149057;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1494363409;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1508481021;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1509016418;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1513160461;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1524569408;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1526630739;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;1549467949;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A extends Serializable> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,extends,serializable,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <RT> Collection<RT> getBroadcastVariable(String name)_;1405024514;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> Collection<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,collection,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> Collection<RT> getBroadcastVariable(String name)_;1405090423;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> Collection<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,collection,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> Collection<RT> getBroadcastVariable(String name)_;1406821655;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> Collection<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,collection,rt,get,broadcast,variable,string,name
RuntimeContext -> <RT> Collection<RT> getBroadcastVariable(String name)_;1406830680;Returns the result bound to the broadcast variable identified by the_given {@code name}.;<RT> Collection<RT> getBroadcastVariable(String name)_;returns,the,result,bound,to,the,broadcast,variable,identified,by,the,given,code,name;rt,collection,rt,get,broadcast,variable,string,name
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1412338914;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1415044729;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1418925508;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1423570503;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1427097830;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1435243086;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1435243086;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1435243087;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1435243087;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1436265749;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1436966346;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1437058012;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1440672037;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1445001970;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1445001971;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1449496469;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1452178883;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1454527671;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1454527671;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1454527672;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1454679829;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1455101486;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1455976719;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1463939897;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1464290120;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1464364603;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1464705596;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1466787223;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1475231926;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1483645612;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1487865389;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1489149057;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1494363409;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1508481021;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1509016418;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1513160461;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1524569408;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1526630739;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> ClassLoader getUserCodeClassLoader()_;1549467949;Gets the ClassLoader to load classes that were are not in system's classpath, but are part of the_jar file of a user job.__@return The ClassLoader for user code classes.;ClassLoader getUserCodeClassLoader()_;gets,the,class,loader,to,load,classes,that,were,are,not,in,system,s,classpath,but,are,part,of,the,jar,file,of,a,user,job,return,the,class,loader,for,user,code,classes;class,loader,get,user,code,class,loader
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1405024514;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1405090423;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1406821655;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1406830680;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1409589492;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1411473593;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1412338914;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> <V, A> Accumulator<V, A> getAccumulator(String name)_;1415044729;Get an existing accumulator object. The accumulator must have been added_previously in this local runtime context.__Throws an exception if the accumulator does not exist or if the_accumulator exists, but with different type.;<V, A> Accumulator<V, A> getAccumulator(String name)_;get,an,existing,accumulator,object,the,accumulator,must,have,been,added,previously,in,this,local,runtime,context,throws,an,exception,if,the,accumulator,does,not,exist,or,if,the,accumulator,exists,but,with,different,type;v,a,accumulator,v,a,get,accumulator,string,name
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1487865389;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1489149057;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1494363409;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1508481021;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1509016418;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1513160461;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1524569408;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1526630739;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
RuntimeContext -> @PublicEvolving 	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;1549467949;Gets a handle to the system's key/value map state. This state is similar to the state_accessed via {@link #getState(ValueStateDescriptor)}, but is optimized for state that_is composed of user-defined key-value pairs__<p>This state is only accessible if the function is executed on a KeyedStream.__<pre>{@code_DataStream<MyType> stream = ...__KeyedStream<MyType> keyedStream = stream.keyBy("id")___keyedStream.map(new RichMapFunction<MyType, List<MyType>>() {__private MapState<MyType, Long> state___public void open(Configuration cfg) {_state = getRuntimeContext().getMapState(_new MapStateDescriptor<>("sum", MyType.class, Long.class))____public Tuple2<MyType, Long> map(MyType value) {_return new Tuple2<>(value, state.get(value))___})___}</pre>__@param stateProperties The descriptor defining the properties of the stats.__@param <UK> The type of the user keys stored in the state._@param <UV> The type of the user values stored in the state.__@return The partitioned state object.__@throws UnsupportedOperationException Thrown, if no partitioned state is available for the_function (function is not part of a KeyedStream).;@PublicEvolving_	<UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties)_;gets,a,handle,to,the,system,s,key,value,map,state,this,state,is,similar,to,the,state,accessed,via,link,get,state,value,state,descriptor,but,is,optimized,for,state,that,is,composed,of,user,defined,key,value,pairs,p,this,state,is,only,accessible,if,the,function,is,executed,on,a,keyed,stream,pre,code,data,stream,my,type,stream,keyed,stream,my,type,keyed,stream,stream,key,by,id,keyed,stream,map,new,rich,map,function,my,type,list,my,type,private,map,state,my,type,long,state,public,void,open,configuration,cfg,state,get,runtime,context,get,map,state,new,map,state,descriptor,sum,my,type,class,long,class,public,tuple2,my,type,long,map,my,type,value,return,new,tuple2,value,state,get,value,pre,param,state,properties,the,descriptor,defining,the,properties,of,the,stats,param,uk,the,type,of,the,user,keys,stored,in,the,state,param,uv,the,type,of,the,user,values,stored,in,the,state,return,the,partitioned,state,object,throws,unsupported,operation,exception,thrown,if,no,partitioned,state,is,available,for,the,function,function,is,not,part,of,a,keyed,stream;public,evolving,uk,uv,map,state,uk,uv,get,map,state,map,state,descriptor,uk,uv,state,properties
