# id;timestamp;commentText;codeText;commentWords;codeWords
FileUtils -> public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException;1525420604;Copies all files from source to target and sets executable flag. Paths might be on different systems._@param sourcePath source path to copy from_@param targetPath target path to copy to_@param executable if target file should be executable_@throws IOException if the copy fails;public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {_		_		FileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri())__		FileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri())__		if (!tFS.exists(targetPath)) {_			if (sFS.getFileStatus(sourcePath).isDir()) {_				tFS.mkdirs(targetPath)__				FileStatus[] contents = sFS.listStatus(sourcePath)__				for (FileStatus content : contents) {_					String distPath = content.getPath().toString()__					if (content.isDir()) {_						if (distPath.endsWith("/")) {_							distPath = distPath.substring(0, distPath.length() - 1)__						}_					}_					String localPath = targetPath.toString() + distPath.substring(distPath.lastIndexOf("/"))__					copy(content.getPath(), new Path(localPath), executable)__				}_			} else {_				try (FSDataOutputStream lfsOutput = tFS.create(targetPath, FileSystem.WriteMode.NO_OVERWRITE)_ FSDataInputStream fsInput = sFS.open(sourcePath)) {_					IOUtils.copyBytes(fsInput, lfsOutput)__					_					new File(targetPath.toString()).setExecutable(executable)__				} catch (IOException ignored) {_				}_			}_		}_	};copies,all,files,from,source,to,target,and,sets,executable,flag,paths,might,be,on,different,systems,param,source,path,source,path,to,copy,from,param,target,path,target,path,to,copy,to,param,executable,if,target,file,should,be,executable,throws,ioexception,if,the,copy,fails;public,static,void,copy,path,source,path,path,target,path,boolean,executable,throws,ioexception,file,system,s,fs,file,system,get,unguarded,file,system,source,path,to,uri,file,system,t,fs,file,system,get,unguarded,file,system,target,path,to,uri,if,t,fs,exists,target,path,if,s,fs,get,file,status,source,path,is,dir,t,fs,mkdirs,target,path,file,status,contents,s,fs,list,status,source,path,for,file,status,content,contents,string,dist,path,content,get,path,to,string,if,content,is,dir,if,dist,path,ends,with,dist,path,dist,path,substring,0,dist,path,length,1,string,local,path,target,path,to,string,dist,path,substring,dist,path,last,index,of,copy,content,get,path,new,path,local,path,executable,else,try,fsdata,output,stream,lfs,output,t,fs,create,target,path,file,system,write,mode,fsdata,input,stream,fs,input,s,fs,open,source,path,ioutils,copy,bytes,fs,input,lfs,output,new,file,target,path,to,string,set,executable,executable,catch,ioexception,ignored
FileUtils -> public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException;1529583969;Copies all files from source to target and sets executable flag. Paths might be on different systems._@param sourcePath source path to copy from_@param targetPath target path to copy to_@param executable if target file should be executable_@throws IOException if the copy fails;public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {_		_		FileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri())__		FileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri())__		if (!tFS.exists(targetPath)) {_			if (sFS.getFileStatus(sourcePath).isDir()) {_				tFS.mkdirs(targetPath)__				FileStatus[] contents = sFS.listStatus(sourcePath)__				for (FileStatus content : contents) {_					String distPath = content.getPath().toString()__					if (content.isDir()) {_						if (distPath.endsWith("/")) {_							distPath = distPath.substring(0, distPath.length() - 1)__						}_					}_					String localPath = targetPath.toString() + distPath.substring(distPath.lastIndexOf("/"))__					copy(content.getPath(), new Path(localPath), executable)__				}_			} else {_				try (FSDataOutputStream lfsOutput = tFS.create(targetPath, FileSystem.WriteMode.NO_OVERWRITE)_ FSDataInputStream fsInput = sFS.open(sourcePath)) {_					IOUtils.copyBytes(fsInput, lfsOutput)__					_					new File(targetPath.toString()).setExecutable(executable)__				} catch (IOException ignored) {_				}_			}_		}_	};copies,all,files,from,source,to,target,and,sets,executable,flag,paths,might,be,on,different,systems,param,source,path,source,path,to,copy,from,param,target,path,target,path,to,copy,to,param,executable,if,target,file,should,be,executable,throws,ioexception,if,the,copy,fails;public,static,void,copy,path,source,path,path,target,path,boolean,executable,throws,ioexception,file,system,s,fs,file,system,get,unguarded,file,system,source,path,to,uri,file,system,t,fs,file,system,get,unguarded,file,system,target,path,to,uri,if,t,fs,exists,target,path,if,s,fs,get,file,status,source,path,is,dir,t,fs,mkdirs,target,path,file,status,contents,s,fs,list,status,source,path,for,file,status,content,contents,string,dist,path,content,get,path,to,string,if,content,is,dir,if,dist,path,ends,with,dist,path,dist,path,substring,0,dist,path,length,1,string,local,path,target,path,to,string,dist,path,substring,dist,path,last,index,of,copy,content,get,path,new,path,local,path,executable,else,try,fsdata,output,stream,lfs,output,t,fs,create,target,path,file,system,write,mode,fsdata,input,stream,fs,input,s,fs,open,source,path,ioutils,copy,bytes,fs,input,lfs,output,new,file,target,path,to,string,set,executable,executable,catch,ioexception,ignored
FileUtils -> public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException;1530699228;Copies all files from source to target and sets executable flag. Paths might be on different systems._@param sourcePath source path to copy from_@param targetPath target path to copy to_@param executable if target file should be executable_@throws IOException if the copy fails;public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {_		_		FileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri())__		FileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri())__		if (!tFS.exists(targetPath)) {_			if (sFS.getFileStatus(sourcePath).isDir()) {_				internalCopyDirectory(sourcePath, targetPath, executable, sFS, tFS)__			} else {_				internalCopyFile(sourcePath, targetPath, executable, sFS, tFS)__			}_		}_	};copies,all,files,from,source,to,target,and,sets,executable,flag,paths,might,be,on,different,systems,param,source,path,source,path,to,copy,from,param,target,path,target,path,to,copy,to,param,executable,if,target,file,should,be,executable,throws,ioexception,if,the,copy,fails;public,static,void,copy,path,source,path,path,target,path,boolean,executable,throws,ioexception,file,system,s,fs,file,system,get,unguarded,file,system,source,path,to,uri,file,system,t,fs,file,system,get,unguarded,file,system,target,path,to,uri,if,t,fs,exists,target,path,if,s,fs,get,file,status,source,path,is,dir,internal,copy,directory,source,path,target,path,executable,s,fs,t,fs,else,internal,copy,file,source,path,target,path,executable,s,fs,t,fs
FileUtils -> public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException;1539101596;Copies all files from source to target and sets executable flag. Paths might be on different systems._@param sourcePath source path to copy from_@param targetPath target path to copy to_@param executable if target file should be executable_@throws IOException if the copy fails;public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {_		_		FileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri())__		FileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri())__		if (!tFS.exists(targetPath)) {_			if (sFS.getFileStatus(sourcePath).isDir()) {_				internalCopyDirectory(sourcePath, targetPath, executable, sFS, tFS)__			} else {_				internalCopyFile(sourcePath, targetPath, executable, sFS, tFS)__			}_		}_	};copies,all,files,from,source,to,target,and,sets,executable,flag,paths,might,be,on,different,systems,param,source,path,source,path,to,copy,from,param,target,path,target,path,to,copy,to,param,executable,if,target,file,should,be,executable,throws,ioexception,if,the,copy,fails;public,static,void,copy,path,source,path,path,target,path,boolean,executable,throws,ioexception,file,system,s,fs,file,system,get,unguarded,file,system,source,path,to,uri,file,system,t,fs,file,system,get,unguarded,file,system,target,path,to,uri,if,t,fs,exists,target,path,if,s,fs,get,file,status,source,path,is,dir,internal,copy,directory,source,path,target,path,executable,s,fs,t,fs,else,internal,copy,file,source,path,target,path,executable,s,fs,t,fs
FileUtils -> public static String getRandomFilename(final String prefix);1460741894;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < LENGTH_ i++) {_			stringBuilder.append(ALPHABET[(int) Math.floor(Math.random() * (double) ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,length,i,string,builder,append,alphabet,int,math,floor,math,random,double,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1481644337;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < LENGTH_ i++) {_			stringBuilder.append(ALPHABET[(int) Math.floor(Math.random() * (double) ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,length,i,string,builder,append,alphabet,int,math,floor,math,random,double,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1484594328;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[(int) Math.floor(Math.random() * (double) ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,int,math,floor,math,random,double,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1509118643;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1516295284;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1517324056;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1525420604;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1529583969;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1530699228;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static String getRandomFilename(final String prefix);1539101596;Constructs a random filename with the given prefix and_a random part generated from hex characters.__@param prefix_the prefix to the filename to be constructed_@return the generated random filename with the given prefix;public static String getRandomFilename(final String prefix) {_		final Random rnd = new Random()__		final StringBuilder stringBuilder = new StringBuilder(prefix)___		for (int i = 0_ i < RANDOM_FILE_NAME_LENGTH_ i++) {_			stringBuilder.append(ALPHABET[rnd.nextInt(ALPHABET.length)])__		}__		return stringBuilder.toString()__	};constructs,a,random,filename,with,the,given,prefix,and,a,random,part,generated,from,hex,characters,param,prefix,the,prefix,to,the,filename,to,be,constructed,return,the,generated,random,filename,with,the,given,prefix;public,static,string,get,random,filename,final,string,prefix,final,random,rnd,new,random,final,string,builder,string,builder,new,string,builder,prefix,for,int,i,0,i,i,string,builder,append,alphabet,rnd,next,int,alphabet,length,return,string,builder,to,string
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1509118643;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		if (directory.isDirectory()) {_			final File[] files = directory.listFiles()___			if (files == null) {_				_				if (directory.exists()) {_					throw new IOException("Failed to list contents of " + directory)__				} else {_					throw new FileNotFoundException(directory.toString())__				}_			}__			_			for (File file : files) {_				if (file != null) {_					deleteFileOrDirectory(file)__				}_			}_		}_		else if (directory.exists()) {_			throw new IOException(directory + " is not a directory but a regular file")__		}_		else {_			_			throw new FileNotFoundException(directory.toString())__		}_	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,if,directory,is,directory,final,file,files,directory,list,files,if,files,null,if,directory,exists,throw,new,ioexception,failed,to,list,contents,of,directory,else,throw,new,file,not,found,exception,directory,to,string,for,file,file,files,if,file,null,delete,file,or,directory,file,else,if,directory,exists,throw,new,ioexception,directory,is,not,a,directory,but,a,regular,file,else,throw,new,file,not,found,exception,directory,to,string
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1516295284;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		if (directory.isDirectory()) {_			final File[] files = directory.listFiles()___			if (files == null) {_				_				if (directory.exists()) {_					throw new IOException("Failed to list contents of " + directory)__				} else {_					throw new FileNotFoundException(directory.toString())__				}_			}__			_			for (File file : files) {_				if (file != null) {_					deleteFileOrDirectory(file)__				}_			}_		}_		else if (directory.exists()) {_			throw new IOException(directory + " is not a directory but a regular file")__		}_		else {_			_			throw new FileNotFoundException(directory.toString())__		}_	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,if,directory,is,directory,final,file,files,directory,list,files,if,files,null,if,directory,exists,throw,new,ioexception,failed,to,list,contents,of,directory,else,throw,new,file,not,found,exception,directory,to,string,for,file,file,files,if,file,null,delete,file,or,directory,file,else,if,directory,exists,throw,new,ioexception,directory,is,not,a,directory,but,a,regular,file,else,throw,new,file,not,found,exception,directory,to,string
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1517324056;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::cleanDirectoryInternal, directory)__	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,clean,directory,internal,directory
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1525420604;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::cleanDirectoryInternal, directory)__	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,clean,directory,internal,directory
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1529583969;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::cleanDirectoryInternal, directory)__	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,clean,directory,internal,directory
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1530699228;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::cleanDirectoryInternal, directory)__	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,clean,directory,internal,directory
FileUtils -> public static void cleanDirectory(File directory) throws IOException;1539101596;Removes all files contained within a directory, without removing the directory itself.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to remove all files from.__@throws FileNotFoundException Thrown if the directory itself does not exist._@throws IOException Thrown if the file indicates a proper file and not a directory, or if_the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void cleanDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::cleanDirectoryInternal, directory)__	};removes,all,files,contained,within,a,directory,without,removing,the,directory,itself,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,remove,all,files,from,throws,file,not,found,exception,thrown,if,the,directory,itself,does,not,exist,throws,ioexception,thrown,if,the,file,indicates,a,proper,file,and,not,a,directory,or,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,clean,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,clean,directory,internal,directory
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1481644337;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		FileStatus[] fileStatuses = null___		try {_			fileStatuses = fileSystem.listStatus(path)__		} catch (Exception ignored) {}__		_		if (fileStatuses == null || fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		} else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,file,status,file,statuses,null,try,file,statuses,file,system,list,status,path,catch,exception,ignored,if,file,statuses,null,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1484594328;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		FileStatus[] fileStatuses = null___		try {_			fileStatuses = fileSystem.listStatus(path)__		} catch (Exception ignored) {}__		_		if (fileStatuses == null || fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		} else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,file,status,file,statuses,null,try,file,statuses,file,system,list,status,path,catch,exception,ignored,if,file,statuses,null,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1509118643;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1516295284;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1517324056;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1525420604;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1529583969;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1530699228;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException;1539101596;Deletes the path if it is empty. A path can only be empty if it is a directory which does_not contain any other directories/files.__@param fileSystem to use_@param path to be deleted if empty_@return true if the path could be deleted_ otherwise false_@throws IOException if the delete operation fails;public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {_		final FileStatus[] fileStatuses___		try {_			fileStatuses = fileSystem.listStatus(path)__		}_		catch (FileNotFoundException e) {_			_			return true__		}_		catch (Exception e) {_			_			return false__		}__		_		if (fileStatuses == null) {_			_			return true__		}_		else if (fileStatuses.length == 0) {_			_			_			return fileSystem.delete(path, false)__		}_		else {_			return false__		}_	};deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,other,directories,files,param,file,system,to,use,param,path,to,be,deleted,if,empty,return,true,if,the,path,could,be,deleted,otherwise,false,throws,ioexception,if,the,delete,operation,fails;public,static,boolean,delete,path,if,empty,file,system,file,system,path,path,throws,ioexception,final,file,status,file,statuses,try,file,statuses,file,system,list,status,path,catch,file,not,found,exception,e,return,true,catch,exception,e,return,false,if,file,statuses,null,return,true,else,if,file,statuses,length,0,return,file,system,delete,path,false,else,return,false
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1484594328;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		if (file.isDirectory()) {_			_			deleteDirectory(file)__		}_		else if (file.exists()) {_			try {_				Files.delete(file.toPath())__			}_			catch (NoSuchFileException e) {_				_			}_		}_		_	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,if,file,is,directory,delete,directory,file,else,if,file,exists,try,files,delete,file,to,path,catch,no,such,file,exception,e
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1509118643;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		if (file.isDirectory()) {_			_			deleteDirectory(file)__		}_		else if (file.exists()) {_			try {_				Files.delete(file.toPath())__			}_			catch (NoSuchFileException e) {_				_			}_		}_		_	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,if,file,is,directory,delete,directory,file,else,if,file,exists,try,files,delete,file,to,path,catch,no,such,file,exception,e
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1516295284;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		if (file.isDirectory()) {_			_			deleteDirectory(file)__		}_		else if (file.exists()) {_			try {_				Files.delete(file.toPath())__			}_			catch (NoSuchFileException e) {_				_			}_		}_		_	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,if,file,is,directory,delete,directory,file,else,if,file,exists,try,files,delete,file,to,path,catch,no,such,file,exception,e
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1517324056;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		guardIfWindows(FileUtils::deleteFileOrDirectoryInternal, file)__	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,guard,if,windows,file,utils,delete,file,or,directory,internal,file
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1525420604;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		guardIfWindows(FileUtils::deleteFileOrDirectoryInternal, file)__	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,guard,if,windows,file,utils,delete,file,or,directory,internal,file
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1529583969;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		guardIfWindows(FileUtils::deleteFileOrDirectoryInternal, file)__	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,guard,if,windows,file,utils,delete,file,or,directory,internal,file
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1530699228;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		guardIfWindows(FileUtils::deleteFileOrDirectoryInternal, file)__	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,guard,if,windows,file,utils,delete,file,or,directory,internal,file
FileUtils -> public static void deleteFileOrDirectory(File file) throws IOException;1539101596;Removes the given file or directory recursively.__<p>If the file or directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a file-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param file The file or directory to delete.__@throws IOException Thrown if the directory could not be cleaned for some reason, for example_due to missing access/write permissions.;public static void deleteFileOrDirectory(File file) throws IOException {_		checkNotNull(file, "file")___		guardIfWindows(FileUtils::deleteFileOrDirectoryInternal, file)__	};removes,the,given,file,or,directory,recursively,p,if,the,file,or,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,file,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,file,the,file,or,directory,to,delete,throws,ioexception,thrown,if,the,directory,could,not,be,cleaned,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,file,or,directory,file,file,throws,ioexception,check,not,null,file,file,guard,if,windows,file,utils,delete,file,or,directory,internal,file
FileUtils -> private FileUtils();1460741894;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1481644337;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1484594328;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1509118643;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1516295284;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1517324056;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1525420604;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1529583969;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1530699228;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> private FileUtils();1539101596;Private default constructor to avoid instantiation.;private FileUtils() {};private,default,constructor,to,avoid,instantiation;private,file,utils
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1484594328;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		if (directory.isDirectory()) {_			__			_			try {_				cleanDirectory(directory)__			}_			catch (FileNotFoundException ignored) {_				_				return__			}__			_			_			try {_				Files.delete(directory.toPath())__			}_			catch (NoSuchFileException ignored) {_				_				_			}_		}_		else if (directory.exists()) {_			_			_			throw new IOException(directory + " is not a directory")__		}_		_	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,if,directory,is,directory,try,clean,directory,directory,catch,file,not,found,exception,ignored,return,try,files,delete,directory,to,path,catch,no,such,file,exception,ignored,else,if,directory,exists,throw,new,ioexception,directory,is,not,a,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1509118643;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		if (directory.isDirectory()) {_			__			_			try {_				cleanDirectory(directory)__			}_			catch (FileNotFoundException ignored) {_				_				return__			}__			_			_			try {_				Files.delete(directory.toPath())__			}_			catch (NoSuchFileException ignored) {_				_				_			}_		}_		else if (directory.exists()) {_			_			_			throw new IOException(directory + " is not a directory")__		}_		_	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,if,directory,is,directory,try,clean,directory,directory,catch,file,not,found,exception,ignored,return,try,files,delete,directory,to,path,catch,no,such,file,exception,ignored,else,if,directory,exists,throw,new,ioexception,directory,is,not,a,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1516295284;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		if (directory.isDirectory()) {_			__			_			try {_				cleanDirectory(directory)__			}_			catch (FileNotFoundException ignored) {_				_				return__			}__			_			_			try {_				Files.delete(directory.toPath())__			}_			catch (NoSuchFileException ignored) {_				_				_			}_		}_		else if (directory.exists()) {_			_			_			throw new IOException(directory + " is not a directory")__		}_		_	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,if,directory,is,directory,try,clean,directory,directory,catch,file,not,found,exception,ignored,return,try,files,delete,directory,to,path,catch,no,such,file,exception,ignored,else,if,directory,exists,throw,new,ioexception,directory,is,not,a,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1517324056;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::deleteDirectoryInternal, directory)__	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,delete,directory,internal,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1525420604;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::deleteDirectoryInternal, directory)__	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,delete,directory,internal,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1529583969;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::deleteDirectoryInternal, directory)__	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,delete,directory,internal,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1530699228;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::deleteDirectoryInternal, directory)__	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,delete,directory,internal,directory
FileUtils -> public static void deleteDirectory(File directory) throws IOException;1539101596;Deletes the given directory recursively.__<p>If the directory does not exist, this does not throw an exception, but simply does nothing._It considers the fact that a directory-to-be-deleted is not present a success.__<p>This method is safe against other concurrent deletion attempts.__@param directory The directory to be deleted._@throws IOException Thrown if the given file is not a directory, or if the directory could not be_deleted for some reason, for example due to missing access/write permissions.;public static void deleteDirectory(File directory) throws IOException {_		checkNotNull(directory, "directory")___		guardIfWindows(FileUtils::deleteDirectoryInternal, directory)__	};deletes,the,given,directory,recursively,p,if,the,directory,does,not,exist,this,does,not,throw,an,exception,but,simply,does,nothing,it,considers,the,fact,that,a,directory,to,be,deleted,is,not,present,a,success,p,this,method,is,safe,against,other,concurrent,deletion,attempts,param,directory,the,directory,to,be,deleted,throws,ioexception,thrown,if,the,given,file,is,not,a,directory,or,if,the,directory,could,not,be,deleted,for,some,reason,for,example,due,to,missing,access,write,permissions;public,static,void,delete,directory,file,directory,throws,ioexception,check,not,null,directory,directory,guard,if,windows,file,utils,delete,directory,internal,directory
FileUtils -> public static void deleteDirectoryQuietly(File directory);1484594328;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1509118643;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1516295284;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1517324056;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1525420604;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1529583969;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1530699228;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
FileUtils -> public static void deleteDirectoryQuietly(File directory);1539101596;Deletes the given directory recursively, not reporting any I/O exceptions_that occur.__<p>This method is identical to {@link FileUtils#deleteDirectory(File)}, except that it_swallows all exceptions and may leave the job quietly incomplete.__@param directory The directory to delete.;public static void deleteDirectoryQuietly(File directory) {_		if (directory == null) {_			return__		}__		_		try {_			deleteDirectory(directory)__		} catch (Exception ignored) {}_	};deletes,the,given,directory,recursively,not,reporting,any,i,o,exceptions,that,occur,p,this,method,is,identical,to,link,file,utils,delete,directory,file,except,that,it,swallows,all,exceptions,and,may,leave,the,job,quietly,incomplete,param,directory,the,directory,to,delete;public,static,void,delete,directory,quietly,file,directory,if,directory,null,return,try,delete,directory,directory,catch,exception,ignored
