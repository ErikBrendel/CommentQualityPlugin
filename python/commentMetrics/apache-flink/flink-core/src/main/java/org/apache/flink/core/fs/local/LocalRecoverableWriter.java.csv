commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public RecoverableFsDataOutputStream open(Path filePath) throws IOException {     final File targetFile = fs.pathToFile(filePath).     final File tempFile = generateStagingTempFilePath(targetFile).     // try to create the parent     final File parent = tempFile.getParentFile().     if (parent != null && !parent.mkdirs() && !parent.exists()) {         throw new IOException("Failed to create the parent directory: " + parent).     }     return new LocalRecoverableFsDataOutputStream(targetFile, tempFile). }
false;public;1;10;;@Override public RecoverableFsDataOutputStream recover(ResumeRecoverable recoverable) throws IOException {     if (recoverable instanceof LocalRecoverable) {         return new LocalRecoverableFsDataOutputStream((LocalRecoverable) recoverable).     } else {         throw new IllegalArgumentException("LocalFileSystem cannot recover recoverable for other file system: " + recoverable).     } }
false;public;0;4;;@Override public boolean requiresCleanupOfRecoverableState() {     return false. }
false;public;1;4;;@Override public boolean cleanupRecoverableState(ResumeRecoverable resumable) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;10;;@Override public Committer recoverForCommit(CommitRecoverable recoverable) throws IOException {     if (recoverable instanceof LocalRecoverable) {         return new LocalRecoverableFsDataOutputStream.LocalCommitter((LocalRecoverable) recoverable).     } else {         throw new IllegalArgumentException("LocalFileSystem cannot recover recoverable for other file system: " + recoverable).     } }
false;public;0;8;;@Override public SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer() {     @SuppressWarnings("unchecked")     SimpleVersionedSerializer<CommitRecoverable> typedSerializer = (SimpleVersionedSerializer<CommitRecoverable>) (SimpleVersionedSerializer<?>) LocalRecoverableSerializer.INSTANCE.     return typedSerializer. }
false;public;0;8;;@Override public SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer() {     @SuppressWarnings("unchecked")     SimpleVersionedSerializer<ResumeRecoverable> typedSerializer = (SimpleVersionedSerializer<ResumeRecoverable>) (SimpleVersionedSerializer<?>) LocalRecoverableSerializer.INSTANCE.     return typedSerializer. }
false;public;0;4;;@Override public boolean supportsResume() {     return true. }
false;static;1;17;;@VisibleForTesting static File generateStagingTempFilePath(File targetFile) {     checkArgument(targetFile.isAbsolute(), "targetFile must be absolute").     checkArgument(!targetFile.isDirectory(), "targetFile must not be a directory").     final File parent = targetFile.getParentFile().     final String name = targetFile.getName().     checkArgument(parent != null, "targetFile must not be the root directory").     while (true) {         File candidate = new File(parent, "." + name + ".inprogress." + UUID.randomUUID().toString()).         if (!candidate.exists()) {             return candidate.         }     } }
