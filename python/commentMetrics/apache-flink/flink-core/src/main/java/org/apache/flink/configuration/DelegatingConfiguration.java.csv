commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;// -------------------------------------------------------------------------------------------- @Override public String getString(String key, String defaultValue) {     return this.backingConfig.getString(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public String getString(ConfigOption<String> configOption) {     return this.backingConfig.getString(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public String getString(ConfigOption<String> configOption, String overrideDefault) {     return this.backingConfig.getString(prefixOption(configOption, prefix), overrideDefault). }
false;public;2;4;;@Override public void setString(String key, String value) {     this.backingConfig.setString(this.prefix + key, value). }
false;public;2;4;;@Override public void setString(ConfigOption<String> key, String value) {     this.backingConfig.setString(prefix + key.key(), value). }
false;public;3;4;;@Override public <T> Class<T> getClass(String key, Class<? extends T> defaultValue, ClassLoader classLoader) throws ClassNotFoundException {     return this.backingConfig.getClass(this.prefix + key, defaultValue, classLoader). }
false;public;2;4;;@Override public void setClass(String key, Class<?> klazz) {     this.backingConfig.setClass(this.prefix + key, klazz). }
false;public;2;4;;@Override public int getInteger(String key, int defaultValue) {     return this.backingConfig.getInteger(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public int getInteger(ConfigOption<Integer> configOption) {     return this.backingConfig.getInteger(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public int getInteger(ConfigOption<Integer> configOption, int overrideDefault) {     return this.backingConfig.getInteger(configOption, overrideDefault). }
false;public;2;4;;@Override public void setInteger(String key, int value) {     this.backingConfig.setInteger(this.prefix + key, value). }
false;public;2;4;;@Override public void setInteger(ConfigOption<Integer> key, int value) {     this.backingConfig.setInteger(prefix + key.key(), value). }
false;public;2;4;;@Override public long getLong(String key, long defaultValue) {     return this.backingConfig.getLong(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public long getLong(ConfigOption<Long> configOption) {     return this.backingConfig.getLong(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public long getLong(ConfigOption<Long> configOption, long overrideDefault) {     return this.backingConfig.getLong(configOption, overrideDefault). }
false;public;2;4;;@Override public void setLong(String key, long value) {     this.backingConfig.setLong(this.prefix + key, value). }
false;public;2;4;;@Override public void setLong(ConfigOption<Long> key, long value) {     this.backingConfig.setLong(prefix + key.key(), value). }
false;public;2;4;;@Override public boolean getBoolean(String key, boolean defaultValue) {     return this.backingConfig.getBoolean(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public boolean getBoolean(ConfigOption<Boolean> configOption) {     return this.backingConfig.getBoolean(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public void setBoolean(String key, boolean value) {     this.backingConfig.setBoolean(this.prefix + key, value). }
false;public;2;4;;@Override public void setBoolean(ConfigOption<Boolean> key, boolean value) {     this.backingConfig.setBoolean(prefix + key.key(), value). }
false;public;2;4;;@Override public boolean getBoolean(ConfigOption<Boolean> configOption, boolean overrideDefault) {     return this.backingConfig.getBoolean(configOption, overrideDefault). }
false;public;2;4;;@Override public float getFloat(String key, float defaultValue) {     return this.backingConfig.getFloat(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public float getFloat(ConfigOption<Float> configOption) {     return this.backingConfig.getFloat(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public float getFloat(ConfigOption<Float> configOption, float overrideDefault) {     return this.backingConfig.getFloat(configOption, overrideDefault). }
false;public;2;4;;@Override public void setFloat(String key, float value) {     this.backingConfig.setFloat(this.prefix + key, value). }
false;public;2;4;;@Override public void setFloat(ConfigOption<Float> key, float value) {     this.backingConfig.setFloat(prefix + key.key(), value). }
false;public;2;4;;@Override public double getDouble(String key, double defaultValue) {     return this.backingConfig.getDouble(this.prefix + key, defaultValue). }
false;public;1;4;;@Override public double getDouble(ConfigOption<Double> configOption) {     return this.backingConfig.getDouble(prefixOption(configOption, prefix)). }
false;public;2;4;;@Override public double getDouble(ConfigOption<Double> configOption, double overrideDefault) {     return this.backingConfig.getDouble(configOption, overrideDefault). }
false;public;2;4;;@Override public void setDouble(String key, double value) {     this.backingConfig.setDouble(this.prefix + key, value). }
false;public;2;4;;@Override public void setDouble(ConfigOption<Double> key, double value) {     this.backingConfig.setDouble(prefix + key.key(), value). }
false;public;2;4;;@Override public byte[] getBytes(final String key, final byte[] defaultValue) {     return this.backingConfig.getBytes(this.prefix + key, defaultValue). }
false;public;2;4;;@Override public void setBytes(final String key, final byte[] bytes) {     this.backingConfig.setBytes(this.prefix + key, bytes). }
false;public;1;4;;@Override public String getValue(ConfigOption<?> configOption) {     return this.backingConfig.getValue(prefixOption(configOption, prefix)). }
false;public;1;18;;@Override public void addAllToProperties(Properties props) {     // only add keys with our prefix     synchronized (backingConfig.confData) {         for (Map.Entry<String, Object> entry : backingConfig.confData.entrySet()) {             if (entry.getKey().startsWith(prefix)) {                 String keyWithoutPrefix = entry.getKey().substring(prefix.length(), entry.getKey().length()).                 props.put(keyWithoutPrefix, entry.getValue()).             } else {             // don't add stuff that doesn't have our prefix             }         }     } }
false;public;1;4;;@Override public void addAll(Configuration other) {     this.addAll(other, ""). }
false;public;2;4;;@Override public void addAll(Configuration other, String prefix) {     this.backingConfig.addAll(other, this.prefix + prefix). }
false;public;0;4;;@Override public String toString() {     return backingConfig.toString(). }
false;public;0;17;;@Override public Set<String> keySet() {     if (this.prefix == null) {         return this.backingConfig.keySet().     }     final HashSet<String> set = new HashSet<>().     int prefixLen = this.prefix.length().     for (String key : this.backingConfig.keySet()) {         if (key.startsWith(prefix)) {             set.add(key.substring(prefixLen)).         }     }     return set. }
false;public;0;4;;@Override public Configuration clone() {     return new DelegatingConfiguration(backingConfig.clone(), prefix). }
false;public;0;10;;@Override public Map<String, String> toMap() {     Map<String, String> map = backingConfig.toMap().     Map<String, String> prefixed = new HashMap<>(map.size()).     for (Map.Entry<String, String> entry : map.entrySet()) {         prefixed.put(prefix + entry.getKey(), entry.getValue()).     }     return prefixed. }
false;public;1;4;;@Override public <T> boolean removeConfig(ConfigOption<T> configOption) {     return backingConfig.removeConfig(configOption). }
false;public;1;4;;@Override public boolean containsKey(String key) {     return backingConfig.containsKey(prefix + key). }
false;public;1;4;;@Override public boolean contains(ConfigOption<?> configOption) {     return backingConfig.contains(prefixOption(configOption, prefix)). }
false;public;1;5;;// -------------------------------------------------------------------------------------------- @Override public void read(DataInputView in) throws IOException {     this.prefix = in.readUTF().     this.backingConfig.read(in). }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     out.writeUTF(this.prefix).     this.backingConfig.write(out). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return this.prefix.hashCode() ^ this.backingConfig.hashCode(). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj instanceof DelegatingConfiguration) {         DelegatingConfiguration other = (DelegatingConfiguration) obj.         return this.prefix.equals(other.prefix) && this.backingConfig.equals(other.backingConfig).     } else {         return false.     } }
false;private,static;2;19;;// -------------------------------------------------------------------------------------------- private static <T> ConfigOption<T> prefixOption(ConfigOption<T> option, String prefix) {     String key = prefix + option.key().     List<FallbackKey> deprecatedKeys.     if (option.hasFallbackKeys()) {         deprecatedKeys = new ArrayList<>().         for (FallbackKey dk : option.fallbackKeys()) {             deprecatedKeys.add(createDeprecatedKey(prefix + dk.getKey())).         }     } else {         deprecatedKeys = Collections.emptyList().     }     FallbackKey[] deprecated = deprecatedKeys.toArray(new FallbackKey[0]).     return new ConfigOption<>(key, option.description(), option.defaultValue(), deprecated). }
