commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value of the encapsulated long.  *  * @return The value of the encapsulated long.  */ ;/**  * Returns the value of the encapsulated long.  *  * @return The value of the encapsulated long.  */ public long getValue() {     return this.value. }
true;public;1;3;/**  * Sets the value of the encapsulated long to the specified value.  *  * @param value  *        The new value of the encapsulated long.  */ ;/**  * Sets the value of the encapsulated long to the specified value.  *  * @param value  *        The new value of the encapsulated long.  */ public void setValue(final long value) {     this.value = value. }
false;public;1;4;;@Override public void setValue(LongValue value) {     this.value = value.value. }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#toString() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#toString() 	 */ @Override public String toString() {     return String.valueOf(this.value). }
false;public;1;4;;// -------------------------------------------------------------------------------------------- @Override public void read(final DataInputView in) throws IOException {     this.value = in.readLong(). }
false;public;1;4;;@Override public void write(final DataOutputView out) throws IOException {     out.writeLong(this.value). }
false;public;1;5;;// -------------------------------------------------------------------------------------------- @Override public int compareTo(LongValue o) {     final long other = o.value.     return this.value < other ? -1 : this.value > other ? 1 : 0. }
false;public;0;4;;@Override public int hashCode() {     return 43 + (int) (this.value ^ this.value >>> 32). }
true;public;1;7;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ @Override public boolean equals(final Object obj) {     if (obj instanceof LongValue) {         return ((LongValue) obj).value == this.value.     }     return false. }
false;public;0;5;;// -------------------------------------------------------------------------------------------- @Override public int getMaxNormalizedKeyLen() {     return 8. }
false;public;3;22;;@Override public void copyNormalizedKey(MemorySegment target, int offset, int len) {     // see IntValue for an explanation of the logic     if (len == 8) {         // default case, full normalized key         target.putLongBigEndian(offset, value - Long.MIN_VALUE).     } else if (len <= 0) {     } else if (len < 8) {         long value = this.value - Long.MIN_VALUE.         for (int i = 0. len > 0. len--, i++) {             target.put(offset + i, (byte) (value >>> ((7 - i) << 3))).         }     } else {         target.putLongBigEndian(offset, value - Long.MIN_VALUE).         for (int i = 8. i < len. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getBinaryLength() {     return 8. }
false;public;1;4;;@Override public void copyTo(LongValue target) {     target.value = this.value. }
false;public;0;4;;@Override public LongValue copy() {     return new LongValue(this.value). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, 8). }
