# id;timestamp;commentText;codeText;commentWords;codeWords
IOUtils -> public static void closeStream(final java.io.Closeable stream);1460741894;Closes the stream ignoring {@link IOException}. Must only be called in_cleaning up from exception handlers.__@param stream_the stream to close;public static void closeStream(final java.io.Closeable stream) {_		cleanup(null, stream)__	};closes,the,stream,ignoring,link,ioexception,must,only,be,called,in,cleaning,up,from,exception,handlers,param,stream,the,stream,to,close;public,static,void,close,stream,final,java,io,closeable,stream,cleanup,null,stream
IOUtils -> public static void closeStream(final java.io.Closeable stream);1479853012;Closes the stream ignoring {@link IOException}. Must only be called in_cleaning up from exception handlers.__@param stream_the stream to close;public static void closeStream(final java.io.Closeable stream) {_		cleanup(null, stream)__	};closes,the,stream,ignoring,link,ioexception,must,only,be,called,in,cleaning,up,from,exception,handlers,param,stream,the,stream,to,close;public,static,void,close,stream,final,java,io,closeable,stream,cleanup,null,stream
IOUtils -> public static void closeStream(final java.io.Closeable stream);1480678142;Closes the stream ignoring {@link IOException}. Must only be called in_cleaning up from exception handlers.__@param stream_the stream to close;public static void closeStream(final java.io.Closeable stream) {_		cleanup(null, stream)__	};closes,the,stream,ignoring,link,ioexception,must,only,be,called,in,cleaning,up,from,exception,handlers,param,stream,the,stream,to,close;public,static,void,close,stream,final,java,io,closeable,stream,cleanup,null,stream
IOUtils -> public static void closeStream(final java.io.Closeable stream);1485363344;Closes the stream ignoring {@link IOException}. Must only be called in_cleaning up from exception handlers.__@param stream_the stream to close;public static void closeStream(final java.io.Closeable stream) {_		cleanup(null, stream)__	};closes,the,stream,ignoring,link,ioexception,must,only,be,called,in,cleaning,up,from,exception,handlers,param,stream,the,stream,to,close;public,static,void,close,stream,final,java,io,closeable,stream,cleanup,null,stream
IOUtils -> public static void closeStream(final java.io.Closeable stream);1516295284;Closes the stream ignoring {@link IOException}. Must only be called in_cleaning up from exception handlers.__@param stream_the stream to close;public static void closeStream(final java.io.Closeable stream) {_		cleanup(null, stream)__	};closes,the,stream,ignoring,link,ioexception,must,only,be,called,in,cleaning,up,from,exception,handlers,param,stream,the,stream,to,close;public,static,void,close,stream,final,java,io,closeable,stream,cleanup,null,stream
IOUtils -> public static void closeAllQuietly(Iterable<? extends AutoCloseable> closeables);1485363344;Closes all elements in the iterable with closeQuietly().;public static void closeAllQuietly(Iterable<? extends AutoCloseable> closeables) {_		if (null != closeables) {_			for (AutoCloseable closeable : closeables) {_				closeQuietly(closeable)__			}_		}_	};closes,all,elements,in,the,iterable,with,close,quietly;public,static,void,close,all,quietly,iterable,extends,auto,closeable,closeables,if,null,closeables,for,auto,closeable,closeable,closeables,close,quietly,closeable
IOUtils -> public static void closeAllQuietly(Iterable<? extends AutoCloseable> closeables);1516295284;Closes all elements in the iterable with closeQuietly().;public static void closeAllQuietly(Iterable<? extends AutoCloseable> closeables) {_		if (null != closeables) {_			for (AutoCloseable closeable : closeables) {_				closeQuietly(closeable)__			}_		}_	};closes,all,elements,in,the,iterable,with,close,quietly;public,static,void,close,all,quietly,iterable,extends,auto,closeable,closeables,if,null,closeables,for,auto,closeable,closeable,closeables,close,quietly,closeable
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException;1460741894;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param close_whether or not close the InputStream and OutputStream at the_end. The streams are closed in the finally clause._@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException {_		copyBytes(in, out, BLOCKSIZE, close)__	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,boolean,close,throws,ioexception,copy,bytes,in,out,blocksize,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException;1479853012;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param close_whether or not close the InputStream and OutputStream at the_end. The streams are closed in the finally clause._@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException {_		copyBytes(in, out, BLOCKSIZE, close)__	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,boolean,close,throws,ioexception,copy,bytes,in,out,blocksize,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException;1480678142;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param close_whether or not close the InputStream and OutputStream at the_end. The streams are closed in the finally clause._@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException {_		copyBytes(in, out, BLOCKSIZE, close)__	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,boolean,close,throws,ioexception,copy,bytes,in,out,blocksize,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException;1485363344;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param close_whether or not close the InputStream and OutputStream at the_end. The streams are closed in the finally clause._@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException {_		copyBytes(in, out, BLOCKSIZE, close)__	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,boolean,close,throws,ioexception,copy,bytes,in,out,blocksize,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException;1516295284;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param close_whether or not close the InputStream and OutputStream at the_end. The streams are closed in the finally clause._@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out, final boolean close) throws IOException {_		copyBytes(in, out, BLOCKSIZE, close)__	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,boolean,close,throws,ioexception,copy,bytes,in,out,blocksize,close
IOUtils -> public static void closeQuietly(AutoCloseable closeable);1485363344;<p><b>Important:</b> This method is expected to never throw an exception.;public static void closeQuietly(AutoCloseable closeable) {_		try {_			if (closeable != null) {_				closeable.close()__			}_		} catch (Throwable ignored) {}_	};p,b,important,b,this,method,is,expected,to,never,throw,an,exception;public,static,void,close,quietly,auto,closeable,closeable,try,if,closeable,null,closeable,close,catch,throwable,ignored
IOUtils -> public static void closeQuietly(AutoCloseable closeable);1516295284;Closes the given AutoCloseable.__<p><b>Important:</b> This method is expected to never throw an exception.;public static void closeQuietly(AutoCloseable closeable) {_		try {_			if (closeable != null) {_				closeable.close()__			}_		} catch (Throwable ignored) {}_	};closes,the,given,auto,closeable,p,b,important,b,this,method,is,expected,to,never,throw,an,exception;public,static,void,close,quietly,auto,closeable,closeable,try,if,closeable,null,closeable,close,catch,throwable,ignored
IOUtils -> public static void closeSocket(final Socket sock);1460741894;Closes the socket ignoring {@link IOException}.__@param sock_the socket to close;public static void closeSocket(final Socket sock) {_		_		if (sock != null) {_			try {_				sock.close()__			} catch (IOException ignored) {_			}_		}_	};closes,the,socket,ignoring,link,ioexception,param,sock,the,socket,to,close;public,static,void,close,socket,final,socket,sock,if,sock,null,try,sock,close,catch,ioexception,ignored
IOUtils -> public static void closeSocket(final Socket sock);1479853012;Closes the socket ignoring {@link IOException}.__@param sock_the socket to close;public static void closeSocket(final Socket sock) {_		_		if (sock != null) {_			try {_				sock.close()__			} catch (IOException ignored) {_			}_		}_	};closes,the,socket,ignoring,link,ioexception,param,sock,the,socket,to,close;public,static,void,close,socket,final,socket,sock,if,sock,null,try,sock,close,catch,ioexception,ignored
IOUtils -> public static void closeSocket(final Socket sock);1480678142;Closes the socket ignoring {@link IOException}.__@param sock_the socket to close;public static void closeSocket(final Socket sock) {_		_		if (sock != null) {_			try {_				sock.close()__			} catch (IOException ignored) {_			}_		}_	};closes,the,socket,ignoring,link,ioexception,param,sock,the,socket,to,close;public,static,void,close,socket,final,socket,sock,if,sock,null,try,sock,close,catch,ioexception,ignored
IOUtils -> public static void closeSocket(final Socket sock);1485363344;Closes the socket ignoring {@link IOException}.__@param sock_the socket to close;public static void closeSocket(final Socket sock) {_		_		if (sock != null) {_			try {_				sock.close()__			} catch (IOException ignored) {_			}_		}_	};closes,the,socket,ignoring,link,ioexception,param,sock,the,socket,to,close;public,static,void,close,socket,final,socket,sock,if,sock,null,try,sock,close,catch,ioexception,ignored
IOUtils -> public static void closeSocket(final Socket sock);1516295284;Closes the socket ignoring {@link IOException}.__@param sock_the socket to close;public static void closeSocket(final Socket sock) {_		_		if (sock != null) {_			try {_				sock.close()__			} catch (IOException ignored) {_			}_		}_	};closes,the,socket,ignoring,link,ioexception,param,sock,the,socket,to,close;public,static,void,close,socket,final,socket,sock,if,sock,null,try,sock,close,catch,ioexception,ignored
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close) 			throws IOException;1460741894;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param buffSize_the size of the buffer_@param close_whether or not close the InputStream and OutputStream at the end. The streams are closed in the finally_clause._@throws IOException_thrown if an error occurred while writing to the output stream;public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close)_			throws IOException {__		@SuppressWarnings("resource")_		final PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null__		final byte[] buf = new byte[buffSize]__		try {_			int bytesRead = in.read(buf)__			while (bytesRead >= 0) {_				out.write(buf, 0, bytesRead)__				if ((ps != null) && ps.checkError()) {_					throw new IOException("Unable to write to output stream.")__				}_				bytesRead = in.read(buf)__			}_		} finally {_			if (close) {_				out.close()__				in.close()__			}_		}_	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,buff,size,the,size,of,the,buffer,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,error,occurred,while,writing,to,the,output,stream;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,int,buff,size,final,boolean,close,throws,ioexception,suppress,warnings,resource,final,print,stream,ps,out,instanceof,print,stream,print,stream,out,null,final,byte,buf,new,byte,buff,size,try,int,bytes,read,in,read,buf,while,bytes,read,0,out,write,buf,0,bytes,read,if,ps,null,ps,check,error,throw,new,ioexception,unable,to,write,to,output,stream,bytes,read,in,read,buf,finally,if,close,out,close,in,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close) 			throws IOException;1479853012;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param buffSize_the size of the buffer_@param close_whether or not close the InputStream and OutputStream at the end. The streams are closed in the finally_clause._@throws IOException_thrown if an error occurred while writing to the output stream;public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close)_			throws IOException {__		@SuppressWarnings("resource")_		final PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null__		final byte[] buf = new byte[buffSize]__		try {_			int bytesRead = in.read(buf)__			while (bytesRead >= 0) {_				out.write(buf, 0, bytesRead)__				if ((ps != null) && ps.checkError()) {_					throw new IOException("Unable to write to output stream.")__				}_				bytesRead = in.read(buf)__			}_		} finally {_			if (close) {_				out.close()__				in.close()__			}_		}_	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,buff,size,the,size,of,the,buffer,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,error,occurred,while,writing,to,the,output,stream;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,int,buff,size,final,boolean,close,throws,ioexception,suppress,warnings,resource,final,print,stream,ps,out,instanceof,print,stream,print,stream,out,null,final,byte,buf,new,byte,buff,size,try,int,bytes,read,in,read,buf,while,bytes,read,0,out,write,buf,0,bytes,read,if,ps,null,ps,check,error,throw,new,ioexception,unable,to,write,to,output,stream,bytes,read,in,read,buf,finally,if,close,out,close,in,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close) 			throws IOException;1480678142;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param buffSize_the size of the buffer_@param close_whether or not close the InputStream and OutputStream at the end. The streams are closed in the finally_clause._@throws IOException_thrown if an error occurred while writing to the output stream;public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close)_			throws IOException {__		@SuppressWarnings("resource")_		final PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null__		final byte[] buf = new byte[buffSize]__		try {_			int bytesRead = in.read(buf)__			while (bytesRead >= 0) {_				out.write(buf, 0, bytesRead)__				if ((ps != null) && ps.checkError()) {_					throw new IOException("Unable to write to output stream.")__				}_				bytesRead = in.read(buf)__			}_		} finally {_			if (close) {_				out.close()__				in.close()__			}_		}_	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,buff,size,the,size,of,the,buffer,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,error,occurred,while,writing,to,the,output,stream;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,int,buff,size,final,boolean,close,throws,ioexception,suppress,warnings,resource,final,print,stream,ps,out,instanceof,print,stream,print,stream,out,null,final,byte,buf,new,byte,buff,size,try,int,bytes,read,in,read,buf,while,bytes,read,0,out,write,buf,0,bytes,read,if,ps,null,ps,check,error,throw,new,ioexception,unable,to,write,to,output,stream,bytes,read,in,read,buf,finally,if,close,out,close,in,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close) 			throws IOException;1485363344;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param buffSize_the size of the buffer_@param close_whether or not close the InputStream and OutputStream at the end. The streams are closed in the finally_clause._@throws IOException_thrown if an error occurred while writing to the output stream;public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close)_			throws IOException {__		@SuppressWarnings("resource")_		final PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null__		final byte[] buf = new byte[buffSize]__		try {_			int bytesRead = in.read(buf)__			while (bytesRead >= 0) {_				out.write(buf, 0, bytesRead)__				if ((ps != null) && ps.checkError()) {_					throw new IOException("Unable to write to output stream.")__				}_				bytesRead = in.read(buf)__			}_		} finally {_			if (close) {_				out.close()__				in.close()__			}_		}_	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,buff,size,the,size,of,the,buffer,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,error,occurred,while,writing,to,the,output,stream;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,int,buff,size,final,boolean,close,throws,ioexception,suppress,warnings,resource,final,print,stream,ps,out,instanceof,print,stream,print,stream,out,null,final,byte,buf,new,byte,buff,size,try,int,bytes,read,in,read,buf,while,bytes,read,0,out,write,buf,0,bytes,read,if,ps,null,ps,check,error,throw,new,ioexception,unable,to,write,to,output,stream,bytes,read,in,read,buf,finally,if,close,out,close,in,close
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close) 			throws IOException;1516295284;Copies from one stream to another.__@param in_InputStream to read from_@param out_OutputStream to write to_@param buffSize_the size of the buffer_@param close_whether or not close the InputStream and OutputStream at the end. The streams are closed in the finally_clause._@throws IOException_thrown if an error occurred while writing to the output stream;public static void copyBytes(final InputStream in, final OutputStream out, final int buffSize, final boolean close)_			throws IOException {__		@SuppressWarnings("resource")_		final PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null__		final byte[] buf = new byte[buffSize]__		try {_			int bytesRead = in.read(buf)__			while (bytesRead >= 0) {_				out.write(buf, 0, bytesRead)__				if ((ps != null) && ps.checkError()) {_					throw new IOException("Unable to write to output stream.")__				}_				bytesRead = in.read(buf)__			}_		} finally {_			if (close) {_				out.close()__				in.close()__			}_		}_	};copies,from,one,stream,to,another,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,param,buff,size,the,size,of,the,buffer,param,close,whether,or,not,close,the,input,stream,and,output,stream,at,the,end,the,streams,are,closed,in,the,finally,clause,throws,ioexception,thrown,if,an,error,occurred,while,writing,to,the,output,stream;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,final,int,buff,size,final,boolean,close,throws,ioexception,suppress,warnings,resource,final,print,stream,ps,out,instanceof,print,stream,print,stream,out,null,final,byte,buf,new,byte,buff,size,try,int,bytes,read,in,read,buf,while,bytes,read,0,out,write,buf,0,bytes,read,if,ps,null,ps,check,error,throw,new,ioexception,unable,to,write,to,output,stream,bytes,read,in,read,buf,finally,if,close,out,close,in,close
IOUtils -> public static void cleanup(final Logger log, final AutoCloseable... closeables);1485363344;Close the AutoCloseable objects and <b>ignore</b> any {@link Exception} or_null pointers. Must only be used for cleanup in exception handlers.__@param log_the log to record problems to at debug level. Can be <code>null</code>._@param closeables_the objects to close;public static void cleanup(final Logger log, final AutoCloseable... closeables) {_		for (AutoCloseable c : closeables) {_			if (c != null) {_				try {_					c.close()__				} catch (Exception e) {_					if (log != null && log.isDebugEnabled()) {_						log.debug("Exception in closing " + c, e)__					}_				}_			}_		}_	};close,the,auto,closeable,objects,and,b,ignore,b,any,link,exception,or,null,pointers,must,only,be,used,for,cleanup,in,exception,handlers,param,log,the,log,to,record,problems,to,at,debug,level,can,be,code,null,code,param,closeables,the,objects,to,close;public,static,void,cleanup,final,logger,log,final,auto,closeable,closeables,for,auto,closeable,c,closeables,if,c,null,try,c,close,catch,exception,e,if,log,null,log,is,debug,enabled,log,debug,exception,in,closing,c,e
IOUtils -> public static void cleanup(final Logger log, final AutoCloseable... closeables);1516295284;Close the AutoCloseable objects and <b>ignore</b> any {@link Exception} or_null pointers. Must only be used for cleanup in exception handlers.__@param log_the log to record problems to at debug level. Can be <code>null</code>._@param closeables_the objects to close;public static void cleanup(final Logger log, final AutoCloseable... closeables) {_		for (AutoCloseable c : closeables) {_			if (c != null) {_				try {_					c.close()__				} catch (Exception e) {_					if (log != null && log.isDebugEnabled()) {_						log.debug("Exception in closing " + c, e)__					}_				}_			}_		}_	};close,the,auto,closeable,objects,and,b,ignore,b,any,link,exception,or,null,pointers,must,only,be,used,for,cleanup,in,exception,handlers,param,log,the,log,to,record,problems,to,at,debug,level,can,be,code,null,code,param,closeables,the,objects,to,close;public,static,void,cleanup,final,logger,log,final,auto,closeable,closeables,for,auto,closeable,c,closeables,if,c,null,try,c,close,catch,exception,e,if,log,null,log,is,debug,enabled,log,debug,exception,in,closing,c,e
IOUtils -> public static void readFully(final InputStream in, final byte[] buf, int off, final int len) 			throws IOException;1460741894;Reads len bytes in a loop.__@param in_The InputStream to read from_@param buf_The buffer to fill_@param off_offset from the buffer_@param len_the length of bytes to read_@throws IOException_if it could not read requested number of bytes for any reason (including EOF);public static void readFully(final InputStream in, final byte[] buf, int off, final int len)_			throws IOException {_		int toRead = len__		while (toRead > 0) {_			final int ret = in.read(buf, off, toRead)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			toRead -= ret__			off += ret__		}_	};reads,len,bytes,in,a,loop,param,in,the,input,stream,to,read,from,param,buf,the,buffer,to,fill,param,off,offset,from,the,buffer,param,len,the,length,of,bytes,to,read,throws,ioexception,if,it,could,not,read,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,read,fully,final,input,stream,in,final,byte,buf,int,off,final,int,len,throws,ioexception,int,to,read,len,while,to,read,0,final,int,ret,in,read,buf,off,to,read,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,to,read,ret,off,ret
IOUtils -> public static void readFully(final InputStream in, final byte[] buf, int off, final int len) 			throws IOException;1479853012;Reads len bytes in a loop.__@param in_The InputStream to read from_@param buf_The buffer to fill_@param off_offset from the buffer_@param len_the length of bytes to read_@throws IOException_if it could not read requested number of bytes for any reason (including EOF);public static void readFully(final InputStream in, final byte[] buf, int off, final int len)_			throws IOException {_		int toRead = len__		while (toRead > 0) {_			final int ret = in.read(buf, off, toRead)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			toRead -= ret__			off += ret__		}_	};reads,len,bytes,in,a,loop,param,in,the,input,stream,to,read,from,param,buf,the,buffer,to,fill,param,off,offset,from,the,buffer,param,len,the,length,of,bytes,to,read,throws,ioexception,if,it,could,not,read,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,read,fully,final,input,stream,in,final,byte,buf,int,off,final,int,len,throws,ioexception,int,to,read,len,while,to,read,0,final,int,ret,in,read,buf,off,to,read,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,to,read,ret,off,ret
IOUtils -> public static void readFully(final InputStream in, final byte[] buf, int off, final int len) 			throws IOException;1480678142;Reads len bytes in a loop.__@param in_The InputStream to read from_@param buf_The buffer to fill_@param off_offset from the buffer_@param len_the length of bytes to read_@throws IOException_if it could not read requested number of bytes for any reason (including EOF);public static void readFully(final InputStream in, final byte[] buf, int off, final int len)_			throws IOException {_		int toRead = len__		while (toRead > 0) {_			final int ret = in.read(buf, off, toRead)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			toRead -= ret__			off += ret__		}_	};reads,len,bytes,in,a,loop,param,in,the,input,stream,to,read,from,param,buf,the,buffer,to,fill,param,off,offset,from,the,buffer,param,len,the,length,of,bytes,to,read,throws,ioexception,if,it,could,not,read,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,read,fully,final,input,stream,in,final,byte,buf,int,off,final,int,len,throws,ioexception,int,to,read,len,while,to,read,0,final,int,ret,in,read,buf,off,to,read,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,to,read,ret,off,ret
IOUtils -> public static void readFully(final InputStream in, final byte[] buf, int off, final int len) 			throws IOException;1485363344;Reads len bytes in a loop.__@param in_The InputStream to read from_@param buf_The buffer to fill_@param off_offset from the buffer_@param len_the length of bytes to read_@throws IOException_if it could not read requested number of bytes for any reason (including EOF);public static void readFully(final InputStream in, final byte[] buf, int off, final int len)_			throws IOException {_		int toRead = len__		while (toRead > 0) {_			final int ret = in.read(buf, off, toRead)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			toRead -= ret__			off += ret__		}_	};reads,len,bytes,in,a,loop,param,in,the,input,stream,to,read,from,param,buf,the,buffer,to,fill,param,off,offset,from,the,buffer,param,len,the,length,of,bytes,to,read,throws,ioexception,if,it,could,not,read,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,read,fully,final,input,stream,in,final,byte,buf,int,off,final,int,len,throws,ioexception,int,to,read,len,while,to,read,0,final,int,ret,in,read,buf,off,to,read,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,to,read,ret,off,ret
IOUtils -> public static void readFully(final InputStream in, final byte[] buf, int off, final int len) 			throws IOException;1516295284;Reads len bytes in a loop.__@param in_The InputStream to read from_@param buf_The buffer to fill_@param off_offset from the buffer_@param len_the length of bytes to read_@throws IOException_if it could not read requested number of bytes for any reason (including EOF);public static void readFully(final InputStream in, final byte[] buf, int off, final int len)_			throws IOException {_		int toRead = len__		while (toRead > 0) {_			final int ret = in.read(buf, off, toRead)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			toRead -= ret__			off += ret__		}_	};reads,len,bytes,in,a,loop,param,in,the,input,stream,to,read,from,param,buf,the,buffer,to,fill,param,off,offset,from,the,buffer,param,len,the,length,of,bytes,to,read,throws,ioexception,if,it,could,not,read,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,read,fully,final,input,stream,in,final,byte,buf,int,off,final,int,len,throws,ioexception,int,to,read,len,while,to,read,0,final,int,ret,in,read,buf,off,to,read,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,to,read,ret,off,ret
IOUtils -> public static void cleanup(final Logger log, final java.io.Closeable... closeables);1460741894;Close the Closeable objects and <b>ignore</b> any {@link IOException} or_null pointers. Must only be used for cleanup in exception handlers.__@param log_the log to record problems to at debug level. Can be <code>null</code>._@param closeables_the objects to close;public static void cleanup(final Logger log, final java.io.Closeable... closeables) {_		for (java.io.Closeable c : closeables) {_			if (c != null) {_				try {_					c.close()__				} catch (IOException e) {_					if (log != null && log.isDebugEnabled()) {_						log.debug("Exception in closing " + c, e)__					}_				}_			}_		}_	};close,the,closeable,objects,and,b,ignore,b,any,link,ioexception,or,null,pointers,must,only,be,used,for,cleanup,in,exception,handlers,param,log,the,log,to,record,problems,to,at,debug,level,can,be,code,null,code,param,closeables,the,objects,to,close;public,static,void,cleanup,final,logger,log,final,java,io,closeable,closeables,for,java,io,closeable,c,closeables,if,c,null,try,c,close,catch,ioexception,e,if,log,null,log,is,debug,enabled,log,debug,exception,in,closing,c,e
IOUtils -> public static void cleanup(final Logger log, final java.io.Closeable... closeables);1479853012;Close the Closeable objects and <b>ignore</b> any {@link IOException} or_null pointers. Must only be used for cleanup in exception handlers.__@param log_the log to record problems to at debug level. Can be <code>null</code>._@param closeables_the objects to close;public static void cleanup(final Logger log, final java.io.Closeable... closeables) {_		for (java.io.Closeable c : closeables) {_			if (c != null) {_				try {_					c.close()__				} catch (IOException e) {_					if (log != null && log.isDebugEnabled()) {_						log.debug("Exception in closing " + c, e)__					}_				}_			}_		}_	};close,the,closeable,objects,and,b,ignore,b,any,link,ioexception,or,null,pointers,must,only,be,used,for,cleanup,in,exception,handlers,param,log,the,log,to,record,problems,to,at,debug,level,can,be,code,null,code,param,closeables,the,objects,to,close;public,static,void,cleanup,final,logger,log,final,java,io,closeable,closeables,for,java,io,closeable,c,closeables,if,c,null,try,c,close,catch,ioexception,e,if,log,null,log,is,debug,enabled,log,debug,exception,in,closing,c,e
IOUtils -> public static void cleanup(final Logger log, final java.io.Closeable... closeables);1480678142;Close the Closeable objects and <b>ignore</b> any {@link IOException} or_null pointers. Must only be used for cleanup in exception handlers.__@param log_the log to record problems to at debug level. Can be <code>null</code>._@param closeables_the objects to close;public static void cleanup(final Logger log, final java.io.Closeable... closeables) {_		for (java.io.Closeable c : closeables) {_			if (c != null) {_				try {_					c.close()__				} catch (IOException e) {_					if (log != null && log.isDebugEnabled()) {_						log.debug("Exception in closing " + c, e)__					}_				}_			}_		}_	};close,the,closeable,objects,and,b,ignore,b,any,link,ioexception,or,null,pointers,must,only,be,used,for,cleanup,in,exception,handlers,param,log,the,log,to,record,problems,to,at,debug,level,can,be,code,null,code,param,closeables,the,objects,to,close;public,static,void,cleanup,final,logger,log,final,java,io,closeable,closeables,for,java,io,closeable,c,closeables,if,c,null,try,c,close,catch,ioexception,e,if,log,null,log,is,debug,enabled,log,debug,exception,in,closing,c,e
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out) throws IOException;1460741894;Copies from one stream to another. <strong>closes the input and output_streams at the end</strong>.__@param in_InputStream to read from_@param out_OutputStream to write to_@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out) throws IOException {_		copyBytes(in, out, BLOCKSIZE, true)__	};copies,from,one,stream,to,another,strong,closes,the,input,and,output,streams,at,the,end,strong,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,throws,ioexception,copy,bytes,in,out,blocksize,true
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out) throws IOException;1479853012;Copies from one stream to another. <strong>closes the input and output_streams at the end</strong>.__@param in_InputStream to read from_@param out_OutputStream to write to_@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out) throws IOException {_		copyBytes(in, out, BLOCKSIZE, true)__	};copies,from,one,stream,to,another,strong,closes,the,input,and,output,streams,at,the,end,strong,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,throws,ioexception,copy,bytes,in,out,blocksize,true
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out) throws IOException;1480678142;Copies from one stream to another. <strong>closes the input and output_streams at the end</strong>.__@param in_InputStream to read from_@param out_OutputStream to write to_@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out) throws IOException {_		copyBytes(in, out, BLOCKSIZE, true)__	};copies,from,one,stream,to,another,strong,closes,the,input,and,output,streams,at,the,end,strong,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,throws,ioexception,copy,bytes,in,out,blocksize,true
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out) throws IOException;1485363344;Copies from one stream to another. <strong>closes the input and output_streams at the end</strong>.__@param in_InputStream to read from_@param out_OutputStream to write to_@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out) throws IOException {_		copyBytes(in, out, BLOCKSIZE, true)__	};copies,from,one,stream,to,another,strong,closes,the,input,and,output,streams,at,the,end,strong,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,throws,ioexception,copy,bytes,in,out,blocksize,true
IOUtils -> public static void copyBytes(final InputStream in, final OutputStream out) throws IOException;1516295284;Copies from one stream to another. <strong>closes the input and output_streams at the end</strong>.__@param in_InputStream to read from_@param out_OutputStream to write to_@throws IOException_thrown if an I/O error occurs while copying;public static void copyBytes(final InputStream in, final OutputStream out) throws IOException {_		copyBytes(in, out, BLOCKSIZE, true)__	};copies,from,one,stream,to,another,strong,closes,the,input,and,output,streams,at,the,end,strong,param,in,input,stream,to,read,from,param,out,output,stream,to,write,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,copying;public,static,void,copy,bytes,final,input,stream,in,final,output,stream,out,throws,ioexception,copy,bytes,in,out,blocksize,true
IOUtils -> public static void skipFully(final InputStream in, long len) throws IOException;1460741894;Similar to readFully(). Skips bytes in a loop.__@param in_The InputStream to skip bytes from_@param len_number of bytes to skip_@throws IOException_if it could not skip requested number of bytes for any reason (including EOF);public static void skipFully(final InputStream in, long len) throws IOException {_		while (len > 0) {_			final long ret = in.skip(len)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			len -= ret__		}_	};similar,to,read,fully,skips,bytes,in,a,loop,param,in,the,input,stream,to,skip,bytes,from,param,len,number,of,bytes,to,skip,throws,ioexception,if,it,could,not,skip,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,skip,fully,final,input,stream,in,long,len,throws,ioexception,while,len,0,final,long,ret,in,skip,len,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,len,ret
IOUtils -> public static void skipFully(final InputStream in, long len) throws IOException;1479853012;Similar to readFully(). Skips bytes in a loop.__@param in_The InputStream to skip bytes from_@param len_number of bytes to skip_@throws IOException_if it could not skip requested number of bytes for any reason (including EOF);public static void skipFully(final InputStream in, long len) throws IOException {_		while (len > 0) {_			final long ret = in.skip(len)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			len -= ret__		}_	};similar,to,read,fully,skips,bytes,in,a,loop,param,in,the,input,stream,to,skip,bytes,from,param,len,number,of,bytes,to,skip,throws,ioexception,if,it,could,not,skip,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,skip,fully,final,input,stream,in,long,len,throws,ioexception,while,len,0,final,long,ret,in,skip,len,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,len,ret
IOUtils -> public static void skipFully(final InputStream in, long len) throws IOException;1480678142;Similar to readFully(). Skips bytes in a loop.__@param in_The InputStream to skip bytes from_@param len_number of bytes to skip_@throws IOException_if it could not skip requested number of bytes for any reason (including EOF);public static void skipFully(final InputStream in, long len) throws IOException {_		while (len > 0) {_			final long ret = in.skip(len)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			len -= ret__		}_	};similar,to,read,fully,skips,bytes,in,a,loop,param,in,the,input,stream,to,skip,bytes,from,param,len,number,of,bytes,to,skip,throws,ioexception,if,it,could,not,skip,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,skip,fully,final,input,stream,in,long,len,throws,ioexception,while,len,0,final,long,ret,in,skip,len,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,len,ret
IOUtils -> public static void skipFully(final InputStream in, long len) throws IOException;1485363344;Similar to readFully(). Skips bytes in a loop.__@param in_The InputStream to skip bytes from_@param len_number of bytes to skip_@throws IOException_if it could not skip requested number of bytes for any reason (including EOF);public static void skipFully(final InputStream in, long len) throws IOException {_		while (len > 0) {_			final long ret = in.skip(len)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			len -= ret__		}_	};similar,to,read,fully,skips,bytes,in,a,loop,param,in,the,input,stream,to,skip,bytes,from,param,len,number,of,bytes,to,skip,throws,ioexception,if,it,could,not,skip,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,skip,fully,final,input,stream,in,long,len,throws,ioexception,while,len,0,final,long,ret,in,skip,len,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,len,ret
IOUtils -> public static void skipFully(final InputStream in, long len) throws IOException;1516295284;Similar to readFully(). Skips bytes in a loop.__@param in_The InputStream to skip bytes from_@param len_number of bytes to skip_@throws IOException_if it could not skip requested number of bytes for any reason (including EOF);public static void skipFully(final InputStream in, long len) throws IOException {_		while (len > 0) {_			final long ret = in.skip(len)__			if (ret < 0) {_				throw new IOException("Premeture EOF from inputStream")__			}_			len -= ret__		}_	};similar,to,read,fully,skips,bytes,in,a,loop,param,in,the,input,stream,to,skip,bytes,from,param,len,number,of,bytes,to,skip,throws,ioexception,if,it,could,not,skip,requested,number,of,bytes,for,any,reason,including,eof;public,static,void,skip,fully,final,input,stream,in,long,len,throws,ioexception,while,len,0,final,long,ret,in,skip,len,if,ret,0,throw,new,ioexception,premeture,eof,from,input,stream,len,ret
IOUtils -> private IOUtils();1460741894;Private constructor to prevent instantiation.;private IOUtils() {};private,constructor,to,prevent,instantiation;private,ioutils
IOUtils -> private IOUtils();1479853012;Private constructor to prevent instantiation.;private IOUtils() {};private,constructor,to,prevent,instantiation;private,ioutils
IOUtils -> private IOUtils();1480678142;Private constructor to prevent instantiation.;private IOUtils() {};private,constructor,to,prevent,instantiation;private,ioutils
IOUtils -> private IOUtils();1485363344;Private constructor to prevent instantiation.;private IOUtils() {};private,constructor,to,prevent,instantiation;private,ioutils
IOUtils -> private IOUtils();1516295284;Private constructor to prevent instantiation.;private IOUtils() {};private,constructor,to,prevent,instantiation;private,ioutils
IOUtils -> public static void closeAll(Iterable<? extends AutoCloseable> closeables) throws Exception;1485363344;Closes all {@link AutoCloseable} objects in the parameter, suppressing exceptions. Exception will be emitted_after calling close() on every object.__@param closeables iterable with closeables to close._@throws Exception collected exceptions that occurred during closing;public static void closeAll(Iterable<? extends AutoCloseable> closeables) throws Exception {_		if (null != closeables) {__			Exception collectedExceptions = null___			for (AutoCloseable closeable : closeables) {_				try {_					if (null != closeable) {_						closeable.close()__					}_				} catch (Exception e) {_					collectedExceptions = ExceptionUtils.firstOrSuppressed(collectedExceptions, e)__				}_			}__			if (null != collectedExceptions) {_				throw collectedExceptions__			}_		}_	};closes,all,link,auto,closeable,objects,in,the,parameter,suppressing,exceptions,exception,will,be,emitted,after,calling,close,on,every,object,param,closeables,iterable,with,closeables,to,close,throws,exception,collected,exceptions,that,occurred,during,closing;public,static,void,close,all,iterable,extends,auto,closeable,closeables,throws,exception,if,null,closeables,exception,collected,exceptions,null,for,auto,closeable,closeable,closeables,try,if,null,closeable,closeable,close,catch,exception,e,collected,exceptions,exception,utils,first,or,suppressed,collected,exceptions,e,if,null,collected,exceptions,throw,collected,exceptions
IOUtils -> public static void closeAll(Iterable<? extends AutoCloseable> closeables) throws Exception;1516295284;Closes all {@link AutoCloseable} objects in the parameter, suppressing exceptions. Exception will be emitted_after calling close() on every object.__@param closeables iterable with closeables to close._@throws Exception collected exceptions that occurred during closing;public static void closeAll(Iterable<? extends AutoCloseable> closeables) throws Exception {_		if (null != closeables) {__			Exception collectedExceptions = null___			for (AutoCloseable closeable : closeables) {_				try {_					if (null != closeable) {_						closeable.close()__					}_				} catch (Exception e) {_					collectedExceptions = ExceptionUtils.firstOrSuppressed(collectedExceptions, e)__				}_			}__			if (null != collectedExceptions) {_				throw collectedExceptions__			}_		}_	};closes,all,link,auto,closeable,objects,in,the,parameter,suppressing,exceptions,exception,will,be,emitted,after,calling,close,on,every,object,param,closeables,iterable,with,closeables,to,close,throws,exception,collected,exceptions,that,occurred,during,closing;public,static,void,close,all,iterable,extends,auto,closeable,closeables,throws,exception,if,null,closeables,exception,collected,exceptions,null,for,auto,closeable,closeable,closeables,try,if,null,closeable,closeable,close,catch,exception,e,collected,exceptions,exception,utils,first,or,suppressed,collected,exceptions,e,if,null,collected,exceptions,throw,collected,exceptions
