commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;// -------------------------------------------------------------------------------------------- @Override @PublicEvolving public boolean isBasicType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public boolean isTupleType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public int getArity() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public int getTotalFields() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public Class<T> getTypeClass() {     return this.arrayClass. }
false;public;0;5;;@Override @PublicEvolving public boolean isKeyType() {     return true. }
false;public;1;5;;@Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig) {     return this.serializer. }
true;public;0;4;/**  * Gets the class that represents the component type.  * @return The class of the component type.  */ ;/**  * Gets the class that represents the component type.  * @return The class of the component type.  */ @PublicEvolving public Class<?> getComponentClass() {     return this.arrayClass.getComponentType(). }
true;public;0;4;/**  * Gets the type information of the component type.  * @return The type information of the component type.  */ ;/**  * Gets the type information of the component type.  * @return The type information of the component type.  */ @PublicEvolving public TypeInformation<?> getComponentType() {     return BasicTypeInfo.getInfoFor(getComponentClass()). }
false;public;0;4;;@Override public String toString() {     return arrayClass.getComponentType().getName() + "[]". }
false;public;1;14;;@Override public boolean equals(Object other) {     if (other instanceof PrimitiveArrayTypeInfo) {         @SuppressWarnings("unchecked")         PrimitiveArrayTypeInfo<T> otherArray = (PrimitiveArrayTypeInfo<T>) other.         return otherArray.canEqual(this) && arrayClass == otherArray.arrayClass && serializer.equals(otherArray.serializer) && comparatorClass == otherArray.comparatorClass.     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(arrayClass, serializer, comparatorClass). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof PrimitiveArrayTypeInfo. }
true;public,static;1;10;/**  * Tries to get the PrimitiveArrayTypeInfo for an array. Returns null, if the type is an array,  * but the component type is not a primitive type.  *  * @param type The class of the array.  * @return The corresponding PrimitiveArrayTypeInfo, or null, if the array is not an array of primitives.  * @throws InvalidTypesException Thrown, if the given class does not represent an array.  */ ;// -------------------------------------------------------------------------------------------- /**  * Tries to get the PrimitiveArrayTypeInfo for an array. Returns null, if the type is an array,  * but the component type is not a primitive type.  *  * @param type The class of the array.  * @return The corresponding PrimitiveArrayTypeInfo, or null, if the array is not an array of primitives.  * @throws InvalidTypesException Thrown, if the given class does not represent an array.  */ @SuppressWarnings("unchecked") @PublicEvolving public static <X> PrimitiveArrayTypeInfo<X> getInfoFor(Class<X> type) {     if (!type.isArray()) {         throw new InvalidTypesException("The given class is no array.").     }     // basic type arrays     return (PrimitiveArrayTypeInfo<X>) TYPES.get(type). }
false;public;2;9;;@Override @PublicEvolving public PrimitiveArrayComparator<T, ?> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig) {     try {         return comparatorClass.getConstructor(boolean.class).newInstance(sortOrderAscending).     } catch (Exception e) {         throw new RuntimeException("Could not initialize primitive " + comparatorClass.getName() + " array comparator.", e).     } }
