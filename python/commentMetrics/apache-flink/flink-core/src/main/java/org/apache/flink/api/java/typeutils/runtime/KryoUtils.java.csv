commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;15;/**  * Tries to copy the given record from using the provided Kryo instance. If this fails, then  * the record from is copied by serializing it into a byte buffer and deserializing it from  * there.  *  * @param from Element to copy  * @param kryo Kryo instance to use  * @param serializer TypeSerializer which is used in case of a Kryo failure  * @param <T> Type of the element to be copied  * @return Copied element  */ ;/**  * Tries to copy the given record from using the provided Kryo instance. If this fails, then  * the record from is copied by serializing it into a byte buffer and deserializing it from  * there.  *  * @param from Element to copy  * @param kryo Kryo instance to use  * @param serializer TypeSerializer which is used in case of a Kryo failure  * @param <T> Type of the element to be copied  * @return Copied element  */ public static <T> T copy(T from, Kryo kryo, TypeSerializer<T> serializer) {     try {         return kryo.copy(from).     } catch (KryoException ke) {         // Kryo could not copy the object --> try to serialize/deserialize the object         try {             byte[] byteArray = InstantiationUtil.serializeToByteArray(serializer, from).             return InstantiationUtil.deserializeFromByteArray(serializer, byteArray).         } catch (IOException ioe) {             throw new RuntimeException("Could not copy object by serializing/deserializing" + " it.", ioe).         }     } }
true;public,static;4;15;/**  * Tries to copy the given record from using the provided Kryo instance. If this fails, then  * the record from is copied by serializing it into a byte buffer and deserializing it from  * there.  *  * @param from Element to copy  * @param reuse Reuse element for the deserialization  * @param kryo Kryo instance to use  * @param serializer TypeSerializer which is used in case of a Kryo failure  * @param <T> Type of the element to be copied  * @return Copied element  */ ;/**  * Tries to copy the given record from using the provided Kryo instance. If this fails, then  * the record from is copied by serializing it into a byte buffer and deserializing it from  * there.  *  * @param from Element to copy  * @param reuse Reuse element for the deserialization  * @param kryo Kryo instance to use  * @param serializer TypeSerializer which is used in case of a Kryo failure  * @param <T> Type of the element to be copied  * @return Copied element  */ public static <T> T copy(T from, T reuse, Kryo kryo, TypeSerializer<T> serializer) {     try {         return kryo.copy(from).     } catch (KryoException ke) {         // Kryo could not copy the object --> try to serialize/deserialize the object         try {             byte[] byteArray = InstantiationUtil.serializeToByteArray(serializer, from).             return InstantiationUtil.deserializeFromByteArray(serializer, reuse, byteArray).         } catch (IOException ioe) {             throw new RuntimeException("Could not copy object by serializing/deserializing" + " it.", ioe).         }     } }
true;public,static;2;13;/**  * Apply a list of {@link KryoRegistration} to a Kryo instance. The list of registrations is  * assumed to already be a final resolution of all possible registration overwrites.  *  * <p>The registrations are applied in the given order and always specify the registration id as  * the next available id in the Kryo instance (providing the id just extra ensures nothing is  * overwritten, and isn't strictly required).  *  * @param kryo the Kryo instance to apply the registrations  * @param resolvedRegistrations the registrations, which should already be resolved of all possible registration overwrites  */ ;/**  * Apply a list of {@link KryoRegistration} to a Kryo instance. The list of registrations is  * assumed to already be a final resolution of all possible registration overwrites.  *  * <p>The registrations are applied in the given order and always specify the registration id as  * the next available id in the Kryo instance (providing the id just extra ensures nothing is  * overwritten, and isn't strictly required).  *  * @param kryo the Kryo instance to apply the registrations  * @param resolvedRegistrations the registrations, which should already be resolved of all possible registration overwrites  */ public static void applyRegistrations(Kryo kryo, Collection<KryoRegistration> resolvedRegistrations) {     Serializer<?> serializer.     for (KryoRegistration registration : resolvedRegistrations) {         serializer = registration.getSerializer(kryo).         if (serializer != null) {             kryo.register(registration.getRegisteredClass(), serializer, kryo.getNextRegistrationId()).         } else {             kryo.register(registration.getRegisteredClass(), kryo.getNextRegistrationId()).         }     } }
