commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;2;/**  * De-serializes the byte message.  *  * @param message The message, as a byte array.  * @return The de-serialized message as an object.  */ ;// ------------------------------------------------------------------------ /**  * De-serializes the byte message.  *  * @param message The message, as a byte array.  * @return The de-serialized message as an object.  */ @Override public abstract T deserialize(byte[] message) throws IOException.
true;public;1;4;/**  * Method to decide whether the element signals the end of the stream. If  * true is returned the element won't be emitted.  *  * <p>This default implementation returns always false, meaning the stream is interpreted  * to be unbounded.  *  * @param nextElement The element to test for the end-of-stream signal.  * @return True, if the element signals end of stream, false otherwise.  */ ;/**  * Method to decide whether the element signals the end of the stream. If  * true is returned the element won't be emitted.  *  * <p>This default implementation returns always false, meaning the stream is interpreted  * to be unbounded.  *  * @param nextElement The element to test for the end-of-stream signal.  * @return True, if the element signals end of stream, false otherwise.  */ @Override public boolean isEndOfStream(T nextElement) {     return false. }
true;public;0;4;/**  * Gets the type produced by this deserializer.  * This is the type that was passed to the  constructor, or reflectively inferred  * (if the default constructor was called).  */ ;/**  * Gets the type produced by this deserializer.  * This is the type that was passed to the  constructor, or reflectively inferred  * (if the default constructor was called).  */ @Override public TypeInformation<T> getProducedType() {     return type. }
