commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private Class<T> getValueClass() {     return valueClass. }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public CopyableValueSerializer<T> duplicate() {     return this. }
false;public;0;4;;@Override public T createInstance() {     return InstantiationUtil.instantiate(this.valueClass). }
false;public;1;4;;@Override public T copy(T from) {     return copy(from, createInstance()). }
false;public;2;5;;@Override public T copy(T from, T reuse) {     from.copyTo(reuse).     return reuse. }
false;public;0;5;;@Override public int getLength() {     ensureInstanceInstantiated().     return instance.getBinaryLength(). }
false;public;2;4;;@Override public void serialize(T value, DataOutputView target) throws IOException {     value.write(target). }
false;public;1;4;;@Override public T deserialize(DataInputView source) throws IOException {     return deserialize(createInstance(), source). }
false;public;2;5;;@Override public T deserialize(T reuse, DataInputView source) throws IOException {     reuse.read(source).     return reuse. }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     ensureInstanceInstantiated().     instance.copy(source, target). }
false;private;0;5;;// -------------------------------------------------------------------------------------------- private void ensureInstanceInstantiated() {     if (instance == null) {         instance = createInstance().     } }
false;public;0;4;;@Override public int hashCode() {     return this.valueClass.hashCode(). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj instanceof CopyableValueSerializer) {         @SuppressWarnings("unchecked")         CopyableValueSerializer<T> copyableValueSerializer = (CopyableValueSerializer<T>) obj.         return valueClass == copyableValueSerializer.valueClass.     } else {         return false.     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting & compatibility // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<T> snapshotConfiguration() {     return new CopyableValueSerializerSnapshot<>(valueClass). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;5;;@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer) {     return new CopyableValueSerializerSnapshot<>(getTypeClass()).resolveSchemaCompatibility(newSerializer). }
false;protected;1;4;;@Override protected TypeSerializer<T> createSerializer(Class<T> typeClass) {     return new CopyableValueSerializer<>(typeClass). }
false;protected;1;5;;@Override @SuppressWarnings("unchecked") protected Class<T> getTypeClass(CopyableValueSerializer serializer) {     return serializer.getValueClass(). }
false;protected;0;4;;@Override protected Class<?> serializerClass() {     return CopyableValueSerializer.class. }
