commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Returns {@code true} if the {@code filePath} given is to be  * ignored when processing a directory, e.g.  * <pre>  * {@code  *  * public boolean filterPaths(Path filePath) {  *     return filePath.getName().startsWith(".") || filePath.getName().contains("_COPYING_").  * }  * }</pre>  */ ;/**  * Returns {@code true} if the {@code filePath} given is to be  * ignored when processing a directory, e.g.  * <pre>  * {@code  *  * public boolean filterPaths(Path filePath) {  *     return filePath.getName().startsWith(".") || filePath.getName().contains("_COPYING_").  * }  * }</pre>  */ public abstract boolean filterPath(Path filePath).
true;public,static;0;3;/**  * Returns the default filter, which excludes the following files:  *  * <ul>  *     <li>Files starting with &quot._&quot.</li>  *     <li>Files starting with &quot..&quot.</li>  *     <li>Files containing the string &quot._COPYING_&quot.</li>  * </ul>  *  * @return The singleton instance of the default file path filter.  */ ;/**  * Returns the default filter, which excludes the following files:  *  * <ul>  *     <li>Files starting with &quot._&quot.</li>  *     <li>Files starting with &quot..&quot.</li>  *     <li>Files containing the string &quot._COPYING_&quot.</li>  * </ul>  *  * @return The singleton instance of the default file path filter.  */ public static FilePathFilter createDefaultFilter() {     return DefaultFilter.INSTANCE. }
false;public;1;7;;@Override public boolean filterPath(Path filePath) {     return filePath == null || filePath.getName().startsWith(".") || filePath.getName().startsWith("_") || filePath.getName().contains(HADOOP_COPYING). }
