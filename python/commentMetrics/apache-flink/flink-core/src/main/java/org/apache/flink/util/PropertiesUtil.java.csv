commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;13;/**  * Get integer from properties.  * This method throws an exception if the integer is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ ;/**  * Get integer from properties.  * This method throws an exception if the integer is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ public static int getInt(Properties config, String key, int defaultValue) {     String val = config.getProperty(key).     if (val == null) {         return defaultValue.     } else {         try {             return Integer.parseInt(val).         } catch (NumberFormatException nfe) {             throw new IllegalArgumentException("Value for configuration key='" + key + "' is not set correctly. " + "Entered value='" + val + "'. Default value='" + defaultValue + "'").         }     } }
true;public,static;3;13;/**  * Get long from properties.  * This method throws an exception if the long is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ ;/**  * Get long from properties.  * This method throws an exception if the long is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ public static long getLong(Properties config, String key, long defaultValue) {     String val = config.getProperty(key).     if (val == null) {         return defaultValue.     } else {         try {             return Long.parseLong(val).         } catch (NumberFormatException nfe) {             throw new IllegalArgumentException("Value for configuration key='" + key + "' is not set correctly. " + "Entered value='" + val + "'. Default value='" + defaultValue + "'").         }     } }
true;public,static;4;8;/**  * Get long from properties.  * This method only logs if the long is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ ;/**  * Get long from properties.  * This method only logs if the long is not valid.  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ public static long getLong(Properties config, String key, long defaultValue, Logger logger) {     try {         return getLong(config, key, defaultValue).     } catch (IllegalArgumentException iae) {         logger.warn(iae.getMessage()).         return defaultValue.     } }
true;public,static;3;8;/**  * Get boolean from properties.  * This method returns {@code true} iff the parsed value is "true".  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ ;/**  * Get boolean from properties.  * This method returns {@code true} iff the parsed value is "true".  *  * @param config Properties  * @param key key in Properties  * @param defaultValue default value if value is not set  * @return default or value of key  */ public static boolean getBoolean(Properties config, String key, boolean defaultValue) {     String val = config.getProperty(key).     if (val == null) {         return defaultValue.     } else {         return Boolean.parseBoolean(val).     } }
