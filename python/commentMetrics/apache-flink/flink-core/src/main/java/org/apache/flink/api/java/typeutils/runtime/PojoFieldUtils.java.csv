commented;modifiers;parameterAmount;loc;comment;code
true;static;2;5;/**  * Writes a field to the given {@link DataOutputView}.  *  * <p>This write method avoids Java serialization, by writing only the classname of the field's declaring class  * and the field name. The written field can be read using {@link #readField(DataInputView, ClassLoader)}.  *  * @param out the output view to write to.  * @param field the field to write.  */ ;/**  * Writes a field to the given {@link DataOutputView}.  *  * <p>This write method avoids Java serialization, by writing only the classname of the field's declaring class  * and the field name. The written field can be read using {@link #readField(DataInputView, ClassLoader)}.  *  * @param out the output view to write to.  * @param field the field to write.  */ static void writeField(DataOutputView out, Field field) throws IOException {     Class<?> declaringClass = field.getDeclaringClass().     out.writeUTF(declaringClass.getName()).     out.writeUTF(field.getName()). }
true;static;2;5;/**  * Reads a field from the given {@link DataInputView}.  *  * <p>This read methods avoids Java serialization, by reading the classname of the field's declaring class  * and dynamically loading it. The field is also read by field name and obtained via reflection.  *  * @param in the input view to read from.  * @param userCodeClassLoader the user classloader.  *  * @return the read field.  */ ;/**  * Reads a field from the given {@link DataInputView}.  *  * <p>This read methods avoids Java serialization, by reading the classname of the field's declaring class  * and dynamically loading it. The field is also read by field name and obtained via reflection.  *  * @param in the input view to read from.  * @param userCodeClassLoader the user classloader.  *  * @return the read field.  */ static Field readField(DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     Class<?> declaringClass = InstantiationUtil.resolveClassByName(in, userCodeClassLoader).     String fieldName = in.readUTF().     return getField(fieldName, declaringClass). }
true;static;2;16;/**  * Finds a field by name from its declaring class. This also searches for the  * field in super classes.  *  * @param fieldName the name of the field to find.  * @param declaringClass the declaring class of the field.  *  * @return the field.  */ ;/**  * Finds a field by name from its declaring class. This also searches for the  * field in super classes.  *  * @param fieldName the name of the field to find.  * @param declaringClass the declaring class of the field.  *  * @return the field.  */ @Nullable static Field getField(String fieldName, Class<?> declaringClass) {     Class<?> clazz = declaringClass.     while (clazz != null) {         try {             Field field = clazz.getDeclaredField(fieldName).             field.setAccessible(true).             return field.         } catch (NoSuchFieldException e) {             clazz = clazz.getSuperclass().         }     }     return null. }
