commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;12;/**  * Returns either the default {@link AvroUtils} which throw an exception in cases where Avro  * would be needed or loads the specific utils for Avro from flink-avro.  */ ;/**  * Returns either the default {@link AvroUtils} which throw an exception in cases where Avro  * would be needed or loads the specific utils for Avro from flink-avro.  */ public static AvroUtils getAvroUtils() {     // try and load the special AvroUtils from the flink-avro package     try {         Class<?> clazz = Class.forName(AVRO_KRYO_UTILS, false, Thread.currentThread().getContextClassLoader()).         return clazz.asSubclass(AvroUtils.class).getConstructor().newInstance().     } catch (ClassNotFoundException e) {         // cannot find the utils, return the default implementation         return new DefaultAvroUtils().     } catch (Exception e) {         throw new RuntimeException("Could not instantiate " + AVRO_KRYO_UTILS + ".", e).     } }
true;public,abstract;2;1;/**  * Loads the utility class from <code>flink-avro</code> and adds Avro-specific serializers. This  * method will throw an exception if we see an Avro type but flink-avro is not in the classpath.  */ ;// ------------------------------------------------------------------------ /**  * Loads the utility class from <code>flink-avro</code> and adds Avro-specific serializers. This  * method will throw an exception if we see an Avro type but flink-avro is not in the classpath.  */ public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type).
true;public,abstract;1;3;/**  * Registers a special Serializer for GenericData.Array.  */ ;/**  * Registers a special Serializer for GenericData.Array.  */ public abstract void addAvroGenericDataArrayRegistration(LinkedHashMap<String, KryoRegistration> kryoRegistrations).
true;public,abstract;1;1;/**  * Creates an {@code AvroSerializer} if flink-avro is present, otherwise throws an exception.  */ ;/**  * Creates an {@code AvroSerializer} if flink-avro is present, otherwise throws an exception.  */ public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type).
true;public,abstract;1;1;/**  * Creates an {@code AvroTypeInfo} if flink-avro is present, otherwise throws an exception.  */ ;/**  * Creates an {@code AvroTypeInfo} if flink-avro is present, otherwise throws an exception.  */ public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type).
false;public;2;9;;@Override public void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type) {     if (hasSuperclass(type, AVRO_SPECIFIC_RECORD_BASE) || hasSuperclass(type, AVRO_GENERIC_RECORD)) {         throw new RuntimeException("Could not load class '" + AVRO_KRYO_UTILS + "'. " + "You may be missing the 'flink-avro' dependency.").     } }
false;public;1;6;;@SuppressWarnings({ "rawtypes", "unchecked" }) @Override public void addAvroGenericDataArrayRegistration(LinkedHashMap<String, KryoRegistration> kryoRegistrations) {     kryoRegistrations.put(AVRO_GENERIC_DATA_ARRAY, new KryoRegistration(Serializers.DummyAvroRegisteredClass.class, (Class) Serializers.DummyAvroKryoSerializerClass.class)). }
false;public;1;5;;@Override public <T> TypeSerializer<T> createAvroSerializer(Class<T> type) {     throw new RuntimeException("Could not load the AvroSerializer class. " + "You may be missing the 'flink-avro' dependency."). }
false;public;1;5;;@Override public <T> TypeInformation<T> createAvroTypeInfo(Class<T> type) {     throw new RuntimeException("Could not load the AvroTypeInfo class. " + "You may be missing the 'flink-avro' dependency."). }
