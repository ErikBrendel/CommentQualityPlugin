commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public Date createInstance() {     return new Date(0L). }
false;public;1;7;;@Override public Date copy(Date from) {     if (from == null) {         return null.     }     return new Date(from.getTime()). }
false;public;2;8;;@Override public Date copy(Date from, Date reuse) {     if (from == null) {         return null.     }     reuse.setTime(from.getTime()).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return 8. }
false;public;2;8;;@Override public void serialize(Date record, DataOutputView target) throws IOException {     if (record == null) {         target.writeLong(Long.MIN_VALUE).     } else {         target.writeLong(record.getTime()).     } }
false;public;1;9;;@Override public Date deserialize(DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     } else {         return new Date(v).     } }
false;public;2;9;;@Override public Date deserialize(Date reuse, DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     }     reuse.setTime(v).     return reuse. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeLong(source.readLong()). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Date> snapshotConfiguration() {     return new SqlDateSerializerSnapshot(). }
