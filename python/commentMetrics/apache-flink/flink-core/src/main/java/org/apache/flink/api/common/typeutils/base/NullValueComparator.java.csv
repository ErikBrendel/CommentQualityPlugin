commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static NullValueComparator getInstance() {     return INSTANCE. }
false;public;1;4;;@Override public int hash(NullValue record) {     return record.hashCode(). }
false;public;1;2;;@Override public void setReference(NullValue toCompare) { }
false;public;1;4;;@Override public boolean equalToReference(NullValue candidate) {     return true. }
false;public;1;4;;@Override public int compareToReference(TypeComparator<NullValue> referencedComparator) {     return 0. }
false;public;2;4;;@Override public int compare(NullValue first, NullValue second) {     return 0. }
false;public;2;4;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     return 0. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return NormalizableKey.class.isAssignableFrom(NullValue.class). }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return NullValue.getInstance().getMaxNormalizedKeyLen(). }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < getNormalizeKeyLen(). }
false;public;4;4;;@Override public void putNormalizedKey(NullValue record, MemorySegment target, int offset, int numBytes) {     record.copyNormalizedKey(target, offset, numBytes). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return false. }
false;public;0;4;;@Override public TypeComparator<NullValue> duplicate() {     return NullValueComparator.getInstance(). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;4;;@Override public TypeComparator<?>[] getFlatComparators() {     return comparators. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // unsupported normalization // -------------------------------------------------------------------------------------------- @Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(NullValue record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public NullValue readWithKeyDenormalization(NullValue reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
