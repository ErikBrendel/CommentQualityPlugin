commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public char[] createInstance() {     return EMPTY. }
false;public;1;6;;@Override public char[] copy(char[] from) {     char[] copy = new char[from.length].     System.arraycopy(from, 0, copy, 0, from.length).     return copy. }
false;public;2;4;;@Override public char[] copy(char[] from, char[] reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;12;;@Override public void serialize(char[] record, DataOutputView target) throws IOException {     if (record == null) {         throw new IllegalArgumentException("The record must not be null.").     }     final int len = record.length.     target.writeInt(len).     for (int i = 0. i < len. i++) {         target.writeChar(record[i]).     } }
false;public;1;11;;@Override public char[] deserialize(DataInputView source) throws IOException {     final int len = source.readInt().     char[] result = new char[len].     for (int i = 0. i < len. i++) {         result[i] = source.readChar().     }     return result. }
false;public;2;4;;@Override public char[] deserialize(char[] reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;6;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final int len = source.readInt().     target.writeInt(len).     target.write(source, len * 2). }
false;public;0;4;;@Override public TypeSerializerSnapshot<char[]> snapshotConfiguration() {     return new CharPrimitiveArraySerializerSnapshot(). }
