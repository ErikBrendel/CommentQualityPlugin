# id;timestamp;commentText;codeText;commentWords;codeWords
TypeHint -> public TypeHint();1456848177;Creates a hint for the generic type in the class signature.;public TypeHint() {_		this.typeInfo = TypeExtractor.createTypeInfo(this, TypeHint.class, getClass(), 0)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,this,type,info,type,extractor,create,type,info,this,type,hint,class,get,class,0
TypeHint -> public TypeHint();1489819457;Creates a hint for the generic type in the class signature.;public TypeHint() {_		this.typeInfo = TypeExtractor.createTypeInfo(this, TypeHint.class, getClass(), 0)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,this,type,info,type,extractor,create,type,info,this,type,hint,class,get,class,0
TypeHint -> public TypeHint();1524407314;Creates a hint for the generic type in the class signature.;public TypeHint() {_		this.typeInfo = TypeExtractor.createTypeInfo(this, TypeHint.class, getClass(), 0)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,this,type,info,type,extractor,create,type,info,this,type,hint,class,get,class,0
TypeHint -> public TypeHint();1524407314;Creates a hint for the generic type in the class signature.;public TypeHint() {_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(_					this, TypeHint.class, getClass(), 0)__		}_		catch (InvalidTypesException e) {_			throw new FlinkRuntimeException("The TypeHint is using a generic variable." +_					"This is not supported, generic types must be fully specified for the TypeHint.")__		}_	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,try,this,type,info,type,extractor,create,type,info,this,type,hint,class,get,class,0,catch,invalid,types,exception,e,throw,new,flink,runtime,exception,the,type,hint,is,using,a,generic,variable,this,is,not,supported,generic,types,must,be,fully,specified,for,the,type,hint
TypeHint -> public TypeHint();1524407314;Creates a hint for the generic type in the class signature.;public TypeHint() {_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(_					this, TypeHint.class, getClass(), 0)__		}_		catch (InvalidTypesException e) {_			throw new FlinkRuntimeException("The TypeHint is using a generic variable." +_					"This is not supported, generic types must be fully specified for the TypeHint.")__		}_	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,try,this,type,info,type,extractor,create,type,info,this,type,hint,class,get,class,0,catch,invalid,types,exception,e,throw,new,flink,runtime,exception,the,type,hint,is,using,a,generic,variable,this,is,not,supported,generic,types,must,be,fully,specified,for,the,type,hint
TypeHint -> public TypeInformation<T> getTypeInfo();1456848177;Gets the type information described by this TypeHint._@return The type information described by this TypeHint.;public TypeInformation<T> getTypeInfo() {_		return typeInfo__	};gets,the,type,information,described,by,this,type,hint,return,the,type,information,described,by,this,type,hint;public,type,information,t,get,type,info,return,type,info
TypeHint -> public TypeInformation<T> getTypeInfo();1489819457;Gets the type information described by this TypeHint._@return The type information described by this TypeHint.;public TypeInformation<T> getTypeInfo() {_		return typeInfo__	};gets,the,type,information,described,by,this,type,hint,return,the,type,information,described,by,this,type,hint;public,type,information,t,get,type,info,return,type,info
TypeHint -> public TypeInformation<T> getTypeInfo();1524407314;Gets the type information described by this TypeHint._@return The type information described by this TypeHint.;public TypeInformation<T> getTypeInfo() {_		return typeInfo__	};gets,the,type,information,described,by,this,type,hint,return,the,type,information,described,by,this,type,hint;public,type,information,t,get,type,info,return,type,info
TypeHint -> public TypeInformation<T> getTypeInfo();1524407314;Gets the type information described by this TypeHint._@return The type information described by this TypeHint.;public TypeInformation<T> getTypeInfo() {_		return typeInfo__	};gets,the,type,information,described,by,this,type,hint,return,the,type,information,described,by,this,type,hint;public,type,information,t,get,type,info,return,type,info
TypeHint -> public TypeInformation<T> getTypeInfo();1524407314;Gets the type information described by this TypeHint._@return The type information described by this TypeHint.;public TypeInformation<T> getTypeInfo() {_		return typeInfo__	};gets,the,type,information,described,by,this,type,hint,return,the,type,information,described,by,this,type,hint;public,type,information,t,get,type,info,return,type,info
TypeHint -> public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos);1489819457;Creates a hint for the generic type in the class signature.;public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos) {_		this.typeInfo = TypeExtractor.createTypeInfo(instance, baseClass, instance.getClass(), genericParameterPos)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,class,base,class,object,instance,int,generic,parameter,pos,this,type,info,type,extractor,create,type,info,instance,base,class,instance,get,class,generic,parameter,pos
TypeHint -> public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos);1524407314;Creates a hint for the generic type in the class signature.;public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos) {_		this.typeInfo = TypeExtractor.createTypeInfo(instance, baseClass, instance.getClass(), genericParameterPos)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,class,base,class,object,instance,int,generic,parameter,pos,this,type,info,type,extractor,create,type,info,instance,base,class,instance,get,class,generic,parameter,pos
TypeHint -> public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos);1524407314;Creates a hint for the generic type in the class signature.;public TypeHint(Class<?> baseClass, Object instance, int genericParameterPos) {_		this.typeInfo = TypeExtractor.createTypeInfo(instance, baseClass, instance.getClass(), genericParameterPos)__	};creates,a,hint,for,the,generic,type,in,the,class,signature;public,type,hint,class,base,class,object,instance,int,generic,parameter,pos,this,type,info,type,extractor,create,type,info,instance,base,class,instance,get,class,generic,parameter,pos
