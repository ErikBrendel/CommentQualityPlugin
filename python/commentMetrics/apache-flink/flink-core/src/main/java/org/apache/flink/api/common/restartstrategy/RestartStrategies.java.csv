commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Generates NoRestartStrategyConfiguration.  *  * @return NoRestartStrategyConfiguration  */ ;/**  * Generates NoRestartStrategyConfiguration.  *  * @return NoRestartStrategyConfiguration  */ public static RestartStrategyConfiguration noRestart() {     return new NoRestartStrategyConfiguration(). }
false;public,static;0;3;;public static RestartStrategyConfiguration fallBackRestart() {     return new FallbackRestartStrategyConfiguration(). }
true;public,static;2;3;/**  * Generates a FixedDelayRestartStrategyConfiguration.  *  * @param restartAttempts Number of restart attempts for the FixedDelayRestartStrategy  * @param delayBetweenAttempts Delay in-between restart attempts for the FixedDelayRestartStrategy  * @return FixedDelayRestartStrategy  */ ;/**  * Generates a FixedDelayRestartStrategyConfiguration.  *  * @param restartAttempts Number of restart attempts for the FixedDelayRestartStrategy  * @param delayBetweenAttempts Delay in-between restart attempts for the FixedDelayRestartStrategy  * @return FixedDelayRestartStrategy  */ public static RestartStrategyConfiguration fixedDelayRestart(int restartAttempts, long delayBetweenAttempts) {     return fixedDelayRestart(restartAttempts, Time.of(delayBetweenAttempts, TimeUnit.MILLISECONDS)). }
true;public,static;2;3;/**  * Generates a FixedDelayRestartStrategyConfiguration.  *  * @param restartAttempts Number of restart attempts for the FixedDelayRestartStrategy  * @param delayInterval Delay in-between restart attempts for the FixedDelayRestartStrategy  * @return FixedDelayRestartStrategy  */ ;/**  * Generates a FixedDelayRestartStrategyConfiguration.  *  * @param restartAttempts Number of restart attempts for the FixedDelayRestartStrategy  * @param delayInterval Delay in-between restart attempts for the FixedDelayRestartStrategy  * @return FixedDelayRestartStrategy  */ public static RestartStrategyConfiguration fixedDelayRestart(int restartAttempts, Time delayInterval) {     return new FixedDelayRestartStrategyConfiguration(restartAttempts, delayInterval). }
true;public,static;3;4;/**  * Generates a FailureRateRestartStrategyConfiguration.  *  * @param failureRate Maximum number of restarts in given interval {@code failureInterval} before failing a job  * @param failureInterval Time interval for failures  * @param delayInterval Delay in-between restart attempts  */ ;/**  * Generates a FailureRateRestartStrategyConfiguration.  *  * @param failureRate Maximum number of restarts in given interval {@code failureInterval} before failing a job  * @param failureInterval Time interval for failures  * @param delayInterval Delay in-between restart attempts  */ public static FailureRateRestartStrategyConfiguration failureRateRestart(int failureRate, Time failureInterval, Time delayInterval) {     return new FailureRateRestartStrategyConfiguration(failureRate, failureInterval, delayInterval). }
true;public,abstract;0;1;/**  * Returns a description which is shown in the web interface.  *  * @return Description of the restart strategy  */ ;/**  * Returns a description which is shown in the web interface.  *  * @return Description of the restart strategy  */ public abstract String getDescription().
false;public;0;4;;@Override public String getDescription() {     return "Restart deactivated.". }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     return o instanceof NoRestartStrategyConfiguration. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(). }
false;public;0;3;;public int getRestartAttempts() {     return restartAttempts. }
false;public;0;3;;public Time getDelayBetweenAttemptsInterval() {     return delayBetweenAttemptsInterval. }
false;public;0;6;;@Override public int hashCode() {     int result = restartAttempts.     result = 31 * result + (delayBetweenAttemptsInterval != null ? delayBetweenAttemptsInterval.hashCode() : 0).     return result. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof FixedDelayRestartStrategyConfiguration) {         FixedDelayRestartStrategyConfiguration other = (FixedDelayRestartStrategyConfiguration) obj.         return restartAttempts == other.restartAttempts && delayBetweenAttemptsInterval.equals(other.delayBetweenAttemptsInterval).     } else {         return false.     } }
false;public;0;5;;@Override public String getDescription() {     return "Restart with fixed delay (" + delayBetweenAttemptsInterval + "). #" + restartAttempts + " restart attempts.". }
false;public;0;3;;public int getMaxFailureRate() {     return maxFailureRate. }
false;public;0;3;;public Time getFailureInterval() {     return failureInterval. }
false;public;0;3;;public Time getDelayBetweenAttemptsInterval() {     return delayBetweenAttemptsInterval. }
false;public;0;5;;@Override public String getDescription() {     return "Failure rate restart with maximum of " + maxFailureRate + " failures within interval " + failureInterval.toString() + " and fixed delay " + delayBetweenAttemptsInterval.toString(). }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     FailureRateRestartStrategyConfiguration that = (FailureRateRestartStrategyConfiguration) o.     return maxFailureRate == that.maxFailureRate && Objects.equals(failureInterval, that.failureInterval) && Objects.equals(delayBetweenAttemptsInterval, that.delayBetweenAttemptsInterval). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(maxFailureRate, failureInterval, delayBetweenAttemptsInterval). }
false;public;0;4;;@Override public String getDescription() {     return "Cluster level default restart strategy". }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     return o instanceof FallbackRestartStrategyConfiguration. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(). }
