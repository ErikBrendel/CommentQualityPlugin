commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the type information for the keys in the map  */ ;// ------------------------------------------------------------------------ // MapTypeInfo specific properties // ------------------------------------------------------------------------ /**  * Gets the type information for the keys in the map  */ public TypeInformation<K> getKeyTypeInfo() {     return keyTypeInfo. }
true;public;0;3;/**  * Gets the type information for the values in the map  */ ;/**  * Gets the type information for the values in the map  */ public TypeInformation<V> getValueTypeInfo() {     return valueTypeInfo. }
false;public;0;4;;// ------------------------------------------------------------------------ // TypeInformation implementation // ------------------------------------------------------------------------ @Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 0. }
false;public;0;4;;@Override public int getTotalFields() {     return 1. }
false;public;0;5;;@SuppressWarnings("unchecked") @Override public Class<Map<K, V>> getTypeClass() {     return (Class<Map<K, V>>) (Class<?>) Map.class. }
false;public;0;4;;@Override public boolean isKeyType() {     return false. }
false;public;1;7;;@Override public TypeSerializer<Map<K, V>> createSerializer(ExecutionConfig config) {     TypeSerializer<K> keyTypeSerializer = keyTypeInfo.createSerializer(config).     TypeSerializer<V> valueTypeSerializer = valueTypeInfo.createSerializer(config).     return new MapSerializer<>(keyTypeSerializer, valueTypeSerializer). }
false;public;0;4;;@Override public String toString() {     return "Map<" + keyTypeInfo + ", " + valueTypeInfo + ">". }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj instanceof MapTypeInfo) {         @SuppressWarnings("unchecked")         MapTypeInfo<K, V> other = (MapTypeInfo<K, V>) obj.         return (other.canEqual(this) && keyTypeInfo.equals(other.keyTypeInfo) && valueTypeInfo.equals(other.valueTypeInfo)).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 31 * keyTypeInfo.hashCode() + valueTypeInfo.hashCode(). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return (obj != null && obj.getClass() == getClass()). }
