commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Gets the function that is held by this operator. The function is the actual implementation of the  * user code.  *  * This throws an exception if the pact does not contain an object but a class for the user  * code.  *  * @return The object with the user function for this operator.  *  * @see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper()  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the function that is held by this operator. The function is the actual implementation of the  * user code.  *  * This throws an exception if the pact does not contain an object but a class for the user  * code.  *  * @return The object with the user function for this operator.  *  * @see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper()  */ @Override public UserCodeWrapper<FT> getUserCodeWrapper() {     return userFunction. }
true;public;0;3;/**  * Returns the input, or null, if none is set.  *  * @return The broadcast input root operator.  */ ;// -------------------------------------------------------------------------------------------- /**  * Returns the input, or null, if none is set.  *  * @return The broadcast input root operator.  */ public Map<String, Operator<?>> getBroadcastInputs() {     return this.broadcastInputs. }
true;public;2;10;/**  * Binds the result produced by a plan rooted at {@code root} to a variable  * used by the UDF wrapped in this operator.  *  * @param root The root of the plan producing this input.  */ ;/**  * Binds the result produced by a plan rooted at {@code root} to a variable  * used by the UDF wrapped in this operator.  *  * @param root The root of the plan producing this input.  */ public void setBroadcastVariable(String name, Operator<?> root) {     if (name == null) {         throw new IllegalArgumentException("The broadcast input name may not be null.").     }     if (root == null) {         throw new IllegalArgumentException("The broadcast input root operator may not be null.").     }     this.broadcastInputs.put(name, root). }
true;public;1;4;/**  * Clears all previous broadcast inputs and binds the given inputs as  * broadcast variables of this operator.  *  * @param inputs The {@code<name, root>} pairs to be set as broadcast inputs.  */ ;/**  * Clears all previous broadcast inputs and binds the given inputs as  * broadcast variables of this operator.  *  * @param inputs The {@code<name, root>} pairs to be set as broadcast inputs.  */ public <T> void setBroadcastVariables(Map<String, Operator<T>> inputs) {     this.broadcastInputs.clear().     this.broadcastInputs.putAll(inputs). }
true;public,abstract;0;1;/**  * Gets the number of inputs for this operator.  *  * @return The number of inputs for this operator.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the number of inputs for this operator.  *  * @return The number of inputs for this operator.  */ public abstract int getNumberOfInputs().
true;public,abstract;1;1;/**  * Gets the column numbers of the key fields in the input records for the given input.  *  * @return The column numbers of the key fields.  */ ;/**  * Gets the column numbers of the key fields in the input records for the given input.  *  * @return The column numbers of the key fields.  */ public abstract int[] getKeyColumns(int inputNum).
true;protected,static;1;5;/**  * Generic utility function that wraps a single class object into an array of that class type.  *  * @param <U> The type of the classes.  * @param clazz The class object to be wrapped.  * @return An array wrapping the class object.  */ ;// -------------------------------------------------------------------------------------------- /**  * Generic utility function that wraps a single class object into an array of that class type.  *  * @param <U> The type of the classes.  * @param clazz The class object to be wrapped.  * @return An array wrapping the class object.  */ protected static <U> Class<U>[] asArray(Class<U> clazz) {     @SuppressWarnings("unchecked")     Class<U>[] array = new Class[] { clazz }.     return array. }
true;protected,static;0;5;/**  * Generic utility function that returns an empty class array.  *  * @param <U> The type of the classes.  * @return An empty array of type <tt>Class&lt.U&gt.</tt>.  */ ;/**  * Generic utility function that returns an empty class array.  *  * @param <U> The type of the classes.  * @return An empty array of type <tt>Class&lt.U&gt.</tt>.  */ protected static <U> Class<U>[] emptyClassArray() {     @SuppressWarnings("unchecked")     Class<U>[] array = new Class[0].     return array. }
