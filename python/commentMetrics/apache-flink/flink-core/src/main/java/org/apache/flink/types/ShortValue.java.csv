commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value of the encapsulated short.  *  * @return the value of the encapsulated short.  */ ;/**  * Returns the value of the encapsulated short.  *  * @return the value of the encapsulated short.  */ public short getValue() {     return this.value. }
true;public;1;3;/**  * Sets the encapsulated short to the specified value.  *  * @param value  *        the new value of the encapsulated short.  */ ;/**  * Sets the encapsulated short to the specified value.  *  * @param value  *        the new value of the encapsulated short.  */ public void setValue(short value) {     this.value = value. }
false;public;1;4;;@Override public void setValue(ShortValue value) {     this.value = value.value. }
false;public;0;4;;@Override public String toString() {     return String.valueOf(this.value). }
false;public;1;4;;// -------------------------------------------------------------------------------------------- @Override public void read(DataInputView in) throws IOException {     this.value = in.readShort(). }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeShort(this.value). }
false;public;1;5;;// -------------------------------------------------------------------------------------------- @Override public int compareTo(ShortValue o) {     final int other = o.value.     return this.value < other ? -1 : this.value > other ? 1 : 0. }
false;public;0;4;;@Override public int hashCode() {     return this.value. }
false;public;1;7;;@Override public boolean equals(final Object obj) {     if (obj instanceof ShortValue) {         return ((ShortValue) obj).value == this.value.     }     return false. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getMaxNormalizedKeyLen() {     return 2. }
false;public;3;26;;@Override public void copyNormalizedKey(MemorySegment target, int offset, int len) {     if (len == 2) {         // default case, full normalized key         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).         target.put(offset + 1, (byte) ((value) & 0xff)).     } else if (len <= 0) {     } else if (len == 1) {         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).     } else {         int highByte = ((value >>> 8) & 0xff).         highByte -= Byte.MIN_VALUE.         target.put(offset, (byte) highByte).         target.put(offset + 1, (byte) ((value) & 0xff)).         for (int i = 2. i < len. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getBinaryLength() {     return 2. }
false;public;1;4;;@Override public void copyTo(ShortValue target) {     target.value = this.value. }
false;public;0;4;;@Override public ShortValue copy() {     return new ShortValue(this.value). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, 2). }
