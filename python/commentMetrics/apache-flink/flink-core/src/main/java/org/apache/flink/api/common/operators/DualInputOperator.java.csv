commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Gets the information about the operators input/output types.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the information about the operators input/output types.  */ @Override @SuppressWarnings("unchecked") public BinaryOperatorInformation<IN1, IN2, OUT> getOperatorInfo() {     return (BinaryOperatorInformation<IN1, IN2, OUT>) this.operatorInfo. }
true;public;0;3;/**  * Returns the first input, or null, if none is set.  *  * @return The contract's first input.  */ ;/**  * Returns the first input, or null, if none is set.  *  * @return The contract's first input.  */ public Operator<IN1> getFirstInput() {     return this.input1. }
true;public;0;3;/**  * Returns the second input, or null, if none is set.  *  * @return The contract's second input.  */ ;/**  * Returns the second input, or null, if none is set.  *  * @return The contract's second input.  */ public Operator<IN2> getSecondInput() {     return this.input2. }
true;public;0;3;/**  * Clears this operator's first input.  */ ;/**  * Clears this operator's first input.  */ public void clearFirstInput() {     this.input1 = null. }
true;public;0;3;/**  * Clears this operator's second input.  */ ;/**  * Clears this operator's second input.  */ public void clearSecondInput() {     this.input2 = null. }
true;public;1;3;/**  * Clears all previous connections and connects the first input to the task wrapped in this contract  *  * @param input The contract that is connected as the first input.  */ ;/**  * Clears all previous connections and connects the first input to the task wrapped in this contract  *  * @param input The contract that is connected as the first input.  */ public void setFirstInput(Operator<IN1> input) {     this.input1 = input. }
true;public;1;3;/**  * Clears all previous connections and connects the second input to the task wrapped in this contract  *  * @param input The contract that is connected as the second input.  */ ;/**  * Clears all previous connections and connects the second input to the task wrapped in this contract  *  * @param input The contract that is connected as the second input.  */ public void setSecondInput(Operator<IN2> input) {     this.input2 = input. }
true;public;1;4;/**  * Sets the first input to the union of the given operators.  *  * @param inputs The operator(s) that form the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the first input to the union of the given operators.  *  * @param inputs The operator(s) that form the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void setFirstInput(Operator<IN1>... inputs) {     this.input1 = Operator.createUnionCascade(inputs). }
true;public;1;4;/**  * Sets the second input to the union of the given operators.  *  * @param inputs The operator(s) that form the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the second input to the union of the given operators.  *  * @param inputs The operator(s) that form the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void setSecondInput(Operator<IN2>... inputs) {     this.input2 = Operator.createUnionCascade(inputs). }
true;public;1;4;/**  * Sets the first input to the union of the given operators.  *  * @param inputs The operator(s) that form the first inputs.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the first input to the union of the given operators.  *  * @param inputs The operator(s) that form the first inputs.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void setFirstInputs(List<Operator<IN1>> inputs) {     this.input1 = Operator.createUnionCascade(inputs). }
true;public;1;4;/**  * Sets the second input to the union of the given operators.  *  * @param inputs The operator(s) that form the second inputs.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Sets the second input to the union of the given operators.  *  * @param inputs The operator(s) that form the second inputs.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void setSecondInputs(List<Operator<IN2>> inputs) {     this.input2 = Operator.createUnionCascade(inputs). }
true;public;1;4;/**  * Add to the first input the union of the given operators.  *  * @param input The operator(s) to be unioned with the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Add to the first input the union of the given operators.  *  * @param input The operator(s) to be unioned with the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void addFirstInput(Operator<IN1>... input) {     this.input1 = Operator.createUnionCascade(this.input1, input). }
true;public;1;4;/**  * Add to the second input the union of the given operators.  *  * @param input The operator(s) to be unioned with the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Add to the second input the union of the given operators.  *  * @param input The operator(s) to be unioned with the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated public void addSecondInput(Operator<IN2>... input) {     this.input2 = Operator.createUnionCascade(this.input2, input). }
true;public;1;5;/**  * Add to the first input the union of the given operators.  *  * @param inputs The operator(s) to be unioned with the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Add to the first input the union of the given operators.  *  * @param inputs The operator(s) to be unioned with the first input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated @SuppressWarnings("unchecked") public void addFirstInputs(List<Operator<IN1>> inputs) {     this.input1 = Operator.createUnionCascade(this.input1, inputs.toArray(new Operator[inputs.size()])). }
true;public;1;5;/**  * Add to the second input the union of the given operators.  *  * @param inputs The operator(s) to be unioned with the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ ;/**  * Add to the second input the union of the given operators.  *  * @param inputs The operator(s) to be unioned with the second input.  * @deprecated This method will be removed in future versions. Use the {@link Union} operator instead.  */ @Deprecated @SuppressWarnings("unchecked") public void addSecondInputs(List<Operator<IN2>> inputs) {     this.input2 = Operator.createUnionCascade(this.input2, inputs.toArray(new Operator[inputs.size()])). }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public DualInputSemanticProperties getSemanticProperties() {     return this.semanticProperties. }
false;public;1;3;;public void setSemanticProperties(DualInputSemanticProperties semanticProperties) {     this.semanticProperties = semanticProperties. }
false;public,final;0;4;;// -------------------------------------------------------------------------------------------- @Override public final int getNumberOfInputs() {     return 2. }
false;public;1;11;;@Override public int[] getKeyColumns(int inputNum) {     if (inputNum == 0) {         return this.keyFields1.     } else if (inputNum == 1) {         return this.keyFields2.     } else {         throw new IndexOutOfBoundsException().     } }
false;public;1;12;;// -------------------------------------------------------------------------------------------- @Override public void accept(Visitor<Operator<?>> visitor) {     boolean descend = visitor.preVisit(this).     if (descend) {         this.input1.accept(visitor).         this.input2.accept(visitor).         for (Operator<?> c : this.broadcastInputs.values()) {             c.accept(visitor).         }         visitor.postVisit(this).     } }
false;protected,abstract;4;1;;// -------------------------------------------------------------------------------------------- protected abstract List<OUT> executeOnCollections(List<IN1> inputData1, List<IN2> inputData2, RuntimeContext runtimeContext, ExecutionConfig executionConfig) throws Exception.
