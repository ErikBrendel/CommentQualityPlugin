commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the path of the file containing this split's data.  *  * @return the path of the file containing this split's data.  */ ;// -------------------------------------------------------------------------------------------- /**  * Returns the path of the file containing this split's data.  *  * @return the path of the file containing this split's data.  */ public Path getPath() {     return file. }
true;public;0;3;/**  * Returns the position of the first byte in the file to process.  *  * @return the position of the first byte in the file to process  */ ;/**  * Returns the position of the first byte in the file to process.  *  * @return the position of the first byte in the file to process  */ public long getStart() {     return start. }
true;public;0;3;/**  * Returns the number of bytes in the file to process.  *  * @return the number of bytes in the file to process  */ ;/**  * Returns the number of bytes in the file to process.  *  * @return the number of bytes in the file to process  */ public long getLength() {     return length. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return getSplitNumber() ^ (file == null ? 0 : file.hashCode()). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj instanceof FileInputSplit && super.equals(obj)) {         FileInputSplit other = (FileInputSplit) obj.         return this.start == other.start && this.length == other.length && (this.file == null ? other.file == null : (other.file != null && this.file.equals(other.file))).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return "[" + getSplitNumber() + "] " + file + ":" + start + "+" + length. }
