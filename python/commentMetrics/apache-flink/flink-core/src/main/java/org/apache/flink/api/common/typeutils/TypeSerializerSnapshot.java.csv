commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the version of the current snapshot's written binary format.  *  * @return the version of the current snapshot's written binary format.  */ ;/**  * Returns the version of the current snapshot's written binary format.  *  * @return the version of the current snapshot's written binary format.  */ int getCurrentVersion().
true;;1;1;/**  * Writes the serializer snapshot to the provided {@link DataOutputView}.  * The current version of the written serializer snapshot's binary format  * is specified by the {@link #getCurrentVersion()} method.  *  * @param out the {@link DataOutputView} to write the snapshot to.  *  * @throws IOException Thrown if the snapshot data could not be written.  */ ;/**  * Writes the serializer snapshot to the provided {@link DataOutputView}.  * The current version of the written serializer snapshot's binary format  * is specified by the {@link #getCurrentVersion()} method.  *  * @param out the {@link DataOutputView} to write the snapshot to.  *  * @throws IOException Thrown if the snapshot data could not be written.  */ void writeSnapshot(DataOutputView out) throws IOException.
true;;3;1;/**  * Reads the serializer snapshot from the provided {@link DataInputView}.  * The version of the binary format that the serializer snapshot was written  * with is provided. This version can be used to determine how the serializer  * snapshot should be read.  *  * @param readVersion version of the serializer snapshot's written binary format  * @param in the {@link DataInputView} to read the snapshot from.  * @param userCodeClassLoader the user code classloader  *  * * @throws IOException Thrown if the snapshot data could be read or parsed.  */ ;/**  * Reads the serializer snapshot from the provided {@link DataInputView}.  * The version of the binary format that the serializer snapshot was written  * with is provided. This version can be used to determine how the serializer  * snapshot should be read.  *  * @param readVersion version of the serializer snapshot's written binary format  * @param in the {@link DataInputView} to read the snapshot from.  * @param userCodeClassLoader the user code classloader  *  * * @throws IOException Thrown if the snapshot data could be read or parsed.  */ void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException.
true;;0;1;/**  * Recreates a serializer instance from this snapshot. The returned  * serializer can be safely used to read data written by the prior serializer  * (i.e., the serializer that created this snapshot).  *  * @return a serializer instance restored from this serializer snapshot.  */ ;/**  * Recreates a serializer instance from this snapshot. The returned  * serializer can be safely used to read data written by the prior serializer  * (i.e., the serializer that created this snapshot).  *  * @return a serializer instance restored from this serializer snapshot.  */ TypeSerializer<T> restoreSerializer().
true;;1;1;/**  * Checks a new serializer's compatibility to read data written by the prior serializer.  *  * <p>When a checkpoint/savepoint is restored, this method checks whether the serialization  * format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the  * program that restores the checkpoint/savepoint. The outcome can be that the serialization format is  * compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some  * information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,  * or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to  * deserialize the data, and the restoring program's serializer re-serializes the data, thus converting  * the format during the restore operation.  *  * @param newSerializer the new serializer to check.  *  * @return the serializer compatibility result.  */ ;/**  * Checks a new serializer's compatibility to read data written by the prior serializer.  *  * <p>When a checkpoint/savepoint is restored, this method checks whether the serialization  * format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the  * program that restores the checkpoint/savepoint. The outcome can be that the serialization format is  * compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some  * information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,  * or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to  * deserialize the data, and the restoring program's serializer re-serializes the data, thus converting  * the format during the restore operation.  *  * @param newSerializer the new serializer to check.  *  * @return the serializer compatibility result.  */ TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer).
true;static;2;5;/**  * Writes the given snapshot to the out stream. One should always use this method to write  * snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.  *  * <p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.  */ ;// ------------------------------------------------------------------------ // read / write utilities // ------------------------------------------------------------------------ /**  * Writes the given snapshot to the out stream. One should always use this method to write  * snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.  *  * <p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.  */ static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException {     out.writeUTF(snapshot.getClass().getName()).     out.writeInt(snapshot.getCurrentVersion()).     snapshot.writeSnapshot(out). }
true;static;2;17;/**  * Reads a snapshot from the stream, performing resolving  *  * <p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.  */ ;/**  * Reads a snapshot from the stream, performing resolving  *  * <p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.  */ static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException {     final TypeSerializerSnapshot<T> snapshot = TypeSerializerSnapshotSerializationUtil.readAndInstantiateSnapshotClass(in, cl).     int version = in.readInt().     if (version == ADAPTER_VERSION && !(snapshot instanceof TypeSerializerConfigSnapshot)) {         // the snapshot was upgraded directly in-place from a TypeSerializerConfigSnapshot.         // read and drop the previously Java-serialized serializer, and get the actual correct read version.         // NOTE: this implicitly assumes that the version was properly written before the actual snapshot content.         TypeSerializerSerializationUtil.tryReadSerializer(in, cl, true).         version = in.readInt().     }     snapshot.readSnapshot(version, in, cl).     return snapshot. }
