commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Stops the source. In contrast to {@code cancel()} this is a request to the source function to shut down  * gracefully. Pending data can still be emitted and it is not required to stop immediately -- however, in the near  * future. The job will keep running until all emitted data is processed completely.  *  * <p>Most streaming sources will have a while loop inside the {@code run()} method. You need to ensure that the source  * will break out of this loop. This can be achieved by having a volatile field "isRunning" that is checked in the  * loop and that is set to false in this method.  *  * <p><strong>The call to {@code stop()} should not block and not throw any exception.</strong>  */ ;/**  * Stops the source. In contrast to {@code cancel()} this is a request to the source function to shut down  * gracefully. Pending data can still be emitted and it is not required to stop immediately -- however, in the near  * future. The job will keep running until all emitted data is processed completely.  *  * <p>Most streaming sources will have a while loop inside the {@code run()} method. You need to ensure that the source  * will break out of this loop. This can be achieved by having a volatile field "isRunning" that is checked in the  * loop and that is set to false in this method.  *  * <p><strong>The call to {@code stop()} should not block and not throw any exception.</strong>  */ void stop().
