# id;timestamp;commentText;codeText;commentWords;codeWords
StoppableFunction -> void stop()_;1455549456;Stops the source. In contrast to {@code cancel()} this is a request to the source function to shut down_gracefully. Pending data can still be emitted and it is not required to stop immediately -- however, in the near_future. The job will keep running until all emitted data is processed completely._<p>_Most streaming sources will have a while loop inside the {@code run()} method. You need to ensure that the source_will break out of this loop. This can be achieved by having a volatile field "isRunning" that is checked in the_loop and that is set to false in this method._<p>_<strong>The call to {@code stop()} should not block and not throw any exception.</strong>;void stop()_;stops,the,source,in,contrast,to,code,cancel,this,is,a,request,to,the,source,function,to,shut,down,gracefully,pending,data,can,still,be,emitted,and,it,is,not,required,to,stop,immediately,however,in,the,near,future,the,job,will,keep,running,until,all,emitted,data,is,processed,completely,p,most,streaming,sources,will,have,a,while,loop,inside,the,code,run,method,you,need,to,ensure,that,the,source,will,break,out,of,this,loop,this,can,be,achieved,by,having,a,volatile,field,is,running,that,is,checked,in,the,loop,and,that,is,set,to,false,in,this,method,p,strong,the,call,to,code,stop,should,not,block,and,not,throw,any,exception,strong;void,stop
StoppableFunction -> void stop()_;1455551099;Stops the source. In contrast to {@code cancel()} this is a request to the source function to shut down_gracefully. Pending data can still be emitted and it is not required to stop immediately -- however, in the near_future. The job will keep running until all emitted data is processed completely._<p>_Most streaming sources will have a while loop inside the {@code run()} method. You need to ensure that the source_will break out of this loop. This can be achieved by having a volatile field "isRunning" that is checked in the_loop and that is set to false in this method._<p>_<strong>The call to {@code stop()} should not block and not throw any exception.</strong>;void stop()_;stops,the,source,in,contrast,to,code,cancel,this,is,a,request,to,the,source,function,to,shut,down,gracefully,pending,data,can,still,be,emitted,and,it,is,not,required,to,stop,immediately,however,in,the,near,future,the,job,will,keep,running,until,all,emitted,data,is,processed,completely,p,most,streaming,sources,will,have,a,while,loop,inside,the,code,run,method,you,need,to,ensure,that,the,source,will,break,out,of,this,loop,this,can,be,achieved,by,having,a,volatile,field,is,running,that,is,checked,in,the,loop,and,that,is,set,to,false,in,this,method,p,strong,the,call,to,code,stop,should,not,block,and,not,throw,any,exception,strong;void,stop
StoppableFunction -> void stop()_;1526630739;Stops the source. In contrast to {@code cancel()} this is a request to the source function to shut down_gracefully. Pending data can still be emitted and it is not required to stop immediately -- however, in the near_future. The job will keep running until all emitted data is processed completely.__<p>Most streaming sources will have a while loop inside the {@code run()} method. You need to ensure that the source_will break out of this loop. This can be achieved by having a volatile field "isRunning" that is checked in the_loop and that is set to false in this method.__<p><strong>The call to {@code stop()} should not block and not throw any exception.</strong>;void stop()_;stops,the,source,in,contrast,to,code,cancel,this,is,a,request,to,the,source,function,to,shut,down,gracefully,pending,data,can,still,be,emitted,and,it,is,not,required,to,stop,immediately,however,in,the,near,future,the,job,will,keep,running,until,all,emitted,data,is,processed,completely,p,most,streaming,sources,will,have,a,while,loop,inside,the,code,run,method,you,need,to,ensure,that,the,source,will,break,out,of,this,loop,this,can,be,achieved,by,having,a,volatile,field,is,running,that,is,checked,in,the,loop,and,that,is,set,to,false,in,this,method,p,strong,the,call,to,code,stop,should,not,block,and,not,throw,any,exception,strong;void,stop
