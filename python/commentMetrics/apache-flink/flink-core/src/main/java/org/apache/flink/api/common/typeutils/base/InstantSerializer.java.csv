commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return true. }
false;public;0;4;;@Override public Instant createInstance() {     return Instant.EPOCH. }
false;public;1;4;;@Override public Instant copy(Instant from) {     return from. }
false;public;2;4;;@Override public Instant copy(Instant from, Instant reuse) {     return from. }
false;public;0;4;;@Override public int getLength() {     return SECONDS_BYTES + NANOS_BYTES. }
false;public;2;10;;@Override public void serialize(Instant record, DataOutputView target) throws IOException {     if (record == null) {         target.writeLong(NULL_SECONDS).         target.writeInt(NULL_NANOS).     } else {         target.writeLong(record.getEpochSecond()).         target.writeInt(record.getNano()).     } }
false;public;1;9;;@Override public Instant deserialize(DataInputView source) throws IOException {     final long seconds = source.readLong().     final int nanos = source.readInt().     if (seconds == NULL_SECONDS && nanos == NULL_NANOS) {         return null.     }     return Instant.ofEpochSecond(seconds, nanos). }
false;public;2;4;;@Override public Instant deserialize(Instant reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeLong(source.readLong()).     target.writeInt(source.readInt()). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Instant> snapshotConfiguration() {     return new InstantSerializerSnapshot(). }
