commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer.  *  * @return The net execution time in milliseconds.  */ ;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer.  *  * @return The net execution time in milliseconds.  */ public long getNetRuntime() {     return this.netRuntime. }
true;public;1;3;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer in a desired time unit.  *  * @param desiredUnit the unit of the <tt>NetRuntime</tt>  * @return The net execution time in the desired unit.  */ ;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer in a desired time unit.  *  * @param desiredUnit the unit of the <tt>NetRuntime</tt>  * @return The net execution time in the desired unit.  */ public long getNetRuntime(TimeUnit desiredUnit) {     return desiredUnit.convert(getNetRuntime(), TimeUnit.MILLISECONDS). }
true;public;1;4;/**  * Gets the accumulator with the given name. Returns {@code null}, if no accumulator with  * that name was produced.  *  * @param accumulatorName The name of the accumulator.  * @param <T> The generic type of the accumulator value.  * @return The value of the accumulator with the given name.  */ ;/**  * Gets the accumulator with the given name. Returns {@code null}, if no accumulator with  * that name was produced.  *  * @param accumulatorName The name of the accumulator.  * @param <T> The generic type of the accumulator value.  * @return The value of the accumulator with the given name.  */ @SuppressWarnings("unchecked") public <T> T getAccumulatorResult(String accumulatorName) {     return (T) this.accumulatorResults.get(accumulatorName).getUnchecked(). }
true;public;0;5;/**  * Gets all accumulators produced by the job. The map contains the accumulators as  * mappings from the accumulator name to the accumulator value.  *  * @return A map containing all accumulators produced by the job.  */ ;/**  * Gets all accumulators produced by the job. The map contains the accumulators as  * mappings from the accumulator name to the accumulator value.  *  * @return A map containing all accumulators produced by the job.  */ public Map<String, Object> getAllAccumulatorResults() {     return accumulatorResults.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().getUnchecked())). }
true;public;1;13;/**  * Gets the accumulator with the given name as an integer.  *  * @param accumulatorName Name of the counter  * @return Result of the counter, or null if the counter does not exist  * @throws java.lang.ClassCastException Thrown, if the accumulator was not aggregating a {@link java.lang.Integer}  * @deprecated Will be removed in future versions. Use {@link #getAccumulatorResult} instead.  */ ;/**  * Gets the accumulator with the given name as an integer.  *  * @param accumulatorName Name of the counter  * @return Result of the counter, or null if the counter does not exist  * @throws java.lang.ClassCastException Thrown, if the accumulator was not aggregating a {@link java.lang.Integer}  * @deprecated Will be removed in future versions. Use {@link #getAccumulatorResult} instead.  */ @Deprecated @PublicEvolving public Integer getIntCounterResult(String accumulatorName) {     Object result = this.accumulatorResults.get(accumulatorName).getUnchecked().     if (result == null) {         return null.     }     if (!(result instanceof Integer)) {         throw new ClassCastException("Requested result of the accumulator '" + accumulatorName + "' should be Integer but has type " + result.getClass()).     }     return (Integer) result. }
true;public,static;1;4;/**  * Returns a dummy object for wrapping a JobSubmissionResult.  * @param result The SubmissionResult  * @return a JobExecutionResult  * @deprecated Will be removed in future versions.  */ ;/**  * Returns a dummy object for wrapping a JobSubmissionResult.  * @param result The SubmissionResult  * @return a JobExecutionResult  * @deprecated Will be removed in future versions.  */ @Deprecated public static JobExecutionResult fromJobSubmissionResult(JobSubmissionResult result) {     return new JobExecutionResult(result.getJobID(), -1, null). }
