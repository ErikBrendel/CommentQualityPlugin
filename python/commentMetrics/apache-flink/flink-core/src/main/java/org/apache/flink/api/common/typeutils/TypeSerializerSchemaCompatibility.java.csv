commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns a result that indicates that the new serializer is compatible and no migration is required.  * The new serializer can continued to be used as is.  *  * @return a result that indicates migration is not required for the new serializer.  */ ;/**  * Returns a result that indicates that the new serializer is compatible and no migration is required.  * The new serializer can continued to be used as is.  *  * @return a result that indicates migration is not required for the new serializer.  */ public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs() {     return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AS_IS, null). }
true;public,static;0;3;/**  * Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e.  * reading it with the old serializer and then writing it again with the new serializer.  *  * @return a result that indicates that the new serializer can be used after migrating the written bytes.  */ ;/**  * Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e.  * reading it with the old serializer and then writing it again with the new serializer.  *  * @return a result that indicates that the new serializer can be used after migrating the written bytes.  */ public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration() {     return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AFTER_MIGRATION, null). }
true;public,static;1;5;/**  * Returns a result that indicates a reconfigured version of the new serializer is compatible, and should be  * used instead of the original new serializer.  *  * @param reconfiguredSerializer the reconfigured version of the new serializer.  * @return a result that indicates a reconfigured version of the new serializer is compatible, and should be  *         used instead of the original new serializer.  */ ;/**  * Returns a result that indicates a reconfigured version of the new serializer is compatible, and should be  * used instead of the original new serializer.  *  * @param reconfiguredSerializer the reconfigured version of the new serializer.  * @return a result that indicates a reconfigured version of the new serializer is compatible, and should be  *         used instead of the original new serializer.  */ public static <T> TypeSerializerSchemaCompatibility<T> compatibleWithReconfiguredSerializer(TypeSerializer<T> reconfiguredSerializer) {     return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER, Preconditions.checkNotNull(reconfiguredSerializer)). }
true;public,static;0;3;/**  * Returns a result that indicates there is no possible way for the new serializer to be use-able.  * This normally indicates that there is no common Java class between what the previous bytes can be  * deserialized into and what can be written by the new serializer.  *  * <p>In this case, there is no possible way for the new serializer to continue to be used, even with  * migration. Recovery of the Flink job will fail.  *  * @return a result that indicates incompatibility between the new and previous serializer.  */ ;/**  * Returns a result that indicates there is no possible way for the new serializer to be use-able.  * This normally indicates that there is no common Java class between what the previous bytes can be  * deserialized into and what can be written by the new serializer.  *  * <p>In this case, there is no possible way for the new serializer to continue to be used, even with  * migration. Recovery of the Flink job will fail.  *  * @return a result that indicates incompatibility between the new and previous serializer.  */ public static <T> TypeSerializerSchemaCompatibility<T> incompatible() {     return new TypeSerializerSchemaCompatibility<>(Type.INCOMPATIBLE, null). }
true;public;0;3;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.  */ ;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.  */ public boolean isCompatibleAsIs() {     return resultType == Type.COMPATIBLE_AS_IS. }
true;public;0;3;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.  */ ;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.  */ public boolean isCompatibleAfterMigration() {     return resultType == Type.COMPATIBLE_AFTER_MIGRATION. }
true;public;0;3;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.  */ ;/**  * Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.  *  * @return whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.  */ public boolean isCompatibleWithReconfiguredSerializer() {     return resultType == Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER. }
true;public;0;7;/**  * Gets the reconfigured serializer. This throws an exception if  * {@link #isCompatibleWithReconfiguredSerializer()} is {@code false}.  */ ;/**  * Gets the reconfigured serializer. This throws an exception if  * {@link #isCompatibleWithReconfiguredSerializer()} is {@code false}.  */ public TypeSerializer<T> getReconfiguredSerializer() {     Preconditions.checkState(isCompatibleWithReconfiguredSerializer(), "It is only possible to get a reconfigured serializer if the compatibility type is %s, but the type is %s", Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER, resultType).     return reconfiguredNewSerializer. }
true;public;0;3;/**  * Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.  *  * @return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.  */ ;/**  * Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.  *  * @return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.  */ public boolean isIncompatible() {     return resultType == Type.INCOMPATIBLE. }
false;public;0;7;;@Override public String toString() {     return "TypeSerializerSchemaCompatibility{" + "resultType=" + resultType + ", reconfiguredNewSerializer=" + reconfiguredNewSerializer + '}'. }
