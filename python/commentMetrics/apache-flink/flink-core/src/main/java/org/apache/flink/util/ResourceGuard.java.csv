commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * Acquired access from one new client for the guarded resource.  *  * @throws IOException when the resource guard is already closed.  */ ;/**  * Acquired access from one new client for the guarded resource.  *  * @throws IOException when the resource guard is already closed.  */ public Lease acquireResource() throws IOException {     synchronized (lock) {         if (closed) {             throw new IOException("Resource guard was already closed.").         }         ++leaseCount.     }     return new Lease(). }
true;private;0;11;/**  * Releases access for one client of the guarded resource. This method must only be called after a matching call to  * {@link #acquireResource()}.  */ ;/**  * Releases access for one client of the guarded resource. This method must only be called after a matching call to  * {@link #acquireResource()}.  */ private void releaseResource() {     synchronized (lock) {         --leaseCount.         if (closed && leaseCount == 0) {             lock.notifyAll().         }     } }
true;public;0;17;/**  * Closed the resource guard. This method will block until all calls to {@link #acquireResource()} have seen their  * matching call to {@link #releaseResource()}.  */ ;/**  * Closed the resource guard. This method will block until all calls to {@link #acquireResource()} have seen their  * matching call to {@link #releaseResource()}.  */ @Override public void close() {     synchronized (lock) {         closed = true.         while (leaseCount > 0) {             try {                 lock.wait().             } catch (InterruptedException ignore) {             // Even on interruption, we cannot terminate the loop until all open leases are closed.             }         }     } }
true;public;0;3;/**  * Returns true if the resource guard is closed, i.e. after {@link #close()} was called.  */ ;/**  * Returns true if the resource guard is closed, i.e. after {@link #close()} was called.  */ public boolean isClosed() {     return closed. }
true;public;0;3;/**  * Returns the current count of open leases.  */ ;/**  * Returns the current count of open leases.  */ public int getLeaseCount() {     return leaseCount. }
false;public;0;6;;@Override public void close() {     if (closed.compareAndSet(false, true)) {         releaseResource().     } }
