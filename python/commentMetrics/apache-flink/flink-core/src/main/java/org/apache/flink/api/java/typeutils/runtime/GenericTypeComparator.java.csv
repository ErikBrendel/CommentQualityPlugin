commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(T record) {     return record.hashCode(). }
false;public;1;4;;@Override public void setReference(T toCompare) {     this.reference = this.serializer.copy(toCompare). }
false;public;1;4;;@Override public boolean equalToReference(T candidate) {     return candidate.equals(this.reference). }
false;public;1;7;;@Override public int compareToReference(TypeComparator<T> referencedComparator) {     T otherRef = ((GenericTypeComparator<T>) referencedComparator).reference.     int cmp = otherRef.compareTo(this.reference).     return this.ascending ? cmp : -cmp. }
false;public;2;5;;@Override public int compare(T first, T second) {     int cmp = first.compareTo(second).     return this.ascending ? cmp : -cmp. }
false;public;2;17;;@Override public int compareSerialized(final DataInputView firstSource, final DataInputView secondSource) throws IOException {     if (this.reference == null) {         this.reference = this.serializer.createInstance().     }     if (this.tmpReference == null) {         this.tmpReference = this.serializer.createInstance().     }     this.reference = this.serializer.deserialize(this.reference, firstSource).     this.tmpReference = this.serializer.deserialize(this.tmpReference, secondSource).     int cmp = this.reference.compareTo(this.tmpReference).     return this.ascending ? cmp : -cmp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return NormalizableKey.class.isAssignableFrom(this.type). }
false;public;0;9;;@Override public int getNormalizeKeyLen() {     if (this.reference == null) {         this.reference = InstantiationUtil.instantiate(this.type).     }     NormalizableKey<?> key = (NormalizableKey<?>) this.reference.     return key.getMaxNormalizedKeyLen(). }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < getNormalizeKeyLen(). }
false;public;4;5;;@Override public void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes) {     NormalizableKey<?> key = (NormalizableKey<?>) record.     key.copyNormalizedKey(target, offset, numBytes). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return !ascending. }
false;public;0;4;;@Override public TypeComparator<T> duplicate() {     return new GenericTypeComparator<T>(this). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;5;;@SuppressWarnings("rawtypes") @Override public TypeComparator[] getFlatComparators() {     return comparators. }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(T record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
