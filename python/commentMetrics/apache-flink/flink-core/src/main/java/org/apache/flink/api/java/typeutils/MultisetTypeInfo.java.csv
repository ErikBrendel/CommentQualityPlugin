commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the type information for the elements contained in the Multiset  */ ;// ------------------------------------------------------------------------ // MultisetTypeInfo specific properties // ------------------------------------------------------------------------ /**  * Gets the type information for the elements contained in the Multiset  */ public TypeInformation<T> getElementTypeInfo() {     return getKeyTypeInfo(). }
false;public;0;4;;@Override public String toString() {     return "Multiset<" + getKeyTypeInfo() + '>'. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj instanceof MultisetTypeInfo) {         final MultisetTypeInfo<?> other = (MultisetTypeInfo<?>) obj.         return other.canEqual(this) && getKeyTypeInfo().equals(other.getKeyTypeInfo()).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 31 * getKeyTypeInfo().hashCode() + 1. }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj != null && obj.getClass() == getClass(). }
false;public,static;1;7;;@SuppressWarnings("unchecked") @PublicEvolving public static <C> MultisetTypeInfo<C> getInfoFor(TypeInformation<C> componentInfo) {     checkNotNull(componentInfo).     return new MultisetTypeInfo<>(componentInfo). }
