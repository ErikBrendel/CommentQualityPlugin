commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Used by system internally to merge the other resources of chained operators  * when generating the job graph or merge the resource consumed by state backend.  *  * @param other Reference to resource to merge in.  * @return The new resource with merged values.  */ ;/**  * Used by system internally to merge the other resources of chained operators  * when generating the job graph or merge the resource consumed by state backend.  *  * @param other Reference to resource to merge in.  * @return The new resource with merged values.  */ public ResourceSpec merge(ResourceSpec other) {     ResourceSpec target = new ResourceSpec(Math.max(this.cpuCores, other.cpuCores), this.heapMemoryInMB + other.heapMemoryInMB, this.directMemoryInMB + other.directMemoryInMB, this.nativeMemoryInMB + other.nativeMemoryInMB, this.stateSizeInMB + other.stateSizeInMB).     target.extendedResources.putAll(extendedResources).     for (Resource resource : other.extendedResources.values()) {         target.extendedResources.merge(resource.getName(), resource, (v1, v2) -> v1.merge(v2)).     }     return target. }
false;public;0;3;;public double getCpuCores() {     return this.cpuCores. }
false;public;0;3;;public int getHeapMemory() {     return this.heapMemoryInMB. }
false;public;0;3;;public int getDirectMemory() {     return this.directMemoryInMB. }
false;public;0;3;;public int getNativeMemory() {     return this.nativeMemoryInMB. }
false;public;0;3;;public int getStateSize() {     return this.stateSizeInMB. }
false;public;0;8;;public double getGPUResource() {     Resource gpuResource = extendedResources.get(GPU_NAME).     if (gpuResource != null) {         return gpuResource.getValue().     }     return 0.0. }
false;public;0;3;;public Map<String, Resource> getExtendedResources() {     return extendedResources. }
true;public;0;13;/**  * Check whether all the field values are valid.  *  * @return True if all the values are equal or greater than 0, otherwise false.  */ ;/**  * Check whether all the field values are valid.  *  * @return True if all the values are equal or greater than 0, otherwise false.  */ public boolean isValid() {     if (this.cpuCores >= 0 && this.heapMemoryInMB >= 0 && this.directMemoryInMB >= 0 && this.nativeMemoryInMB >= 0 && this.stateSizeInMB >= 0) {         for (Resource resource : extendedResources.values()) {             if (resource.getValue() < 0) {                 return false.             }         }         return true.     } else {         return false.     } }
true;public;1;18;/**  * Checks the current resource less than or equal with the other resource by comparing  * all the fields in the resource.  *  * @param other The resource to compare  * @return True if current resource is less than or equal with the other resource, otherwise return false.  */ ;/**  * Checks the current resource less than or equal with the other resource by comparing  * all the fields in the resource.  *  * @param other The resource to compare  * @return True if current resource is less than or equal with the other resource, otherwise return false.  */ public boolean lessThanOrEqual(@Nonnull ResourceSpec other) {     int cmp1 = Double.compare(this.cpuCores, other.cpuCores).     int cmp2 = Integer.compare(this.heapMemoryInMB, other.heapMemoryInMB).     int cmp3 = Integer.compare(this.directMemoryInMB, other.directMemoryInMB).     int cmp4 = Integer.compare(this.nativeMemoryInMB, other.nativeMemoryInMB).     int cmp5 = Integer.compare(this.stateSizeInMB, other.stateSizeInMB).     if (cmp1 <= 0 && cmp2 <= 0 && cmp3 <= 0 && cmp4 <= 0 && cmp5 <= 0) {         for (Resource resource : extendedResources.values()) {             if (!other.extendedResources.containsKey(resource.getName()) || other.extendedResources.get(resource.getName()).getResourceAggregateType() != resource.getResourceAggregateType() || other.extendedResources.get(resource.getName()).getValue() < resource.getValue()) {                 return false.             }         }         return true.     }     return false. }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj != null && obj.getClass() == ResourceSpec.class) {         ResourceSpec that = (ResourceSpec) obj.         return this.cpuCores == that.cpuCores && this.heapMemoryInMB == that.heapMemoryInMB && this.directMemoryInMB == that.directMemoryInMB && this.nativeMemoryInMB == that.nativeMemoryInMB && this.stateSizeInMB == that.stateSizeInMB && Objects.equals(this.extendedResources, that.extendedResources).     } else {         return false.     } }
false;public;0;11;;@Override public int hashCode() {     final long cpuBits = Double.doubleToLongBits(cpuCores).     int result = (int) (cpuBits ^ (cpuBits >>> 32)).     result = 31 * result + heapMemoryInMB.     result = 31 * result + directMemoryInMB.     result = 31 * result + nativeMemoryInMB.     result = 31 * result + stateSizeInMB.     result = 31 * result + extendedResources.hashCode().     return result. }
false;public;0;14;;@Override public String toString() {     String extend = "".     for (Resource resource : extendedResources.values()) {         extend += ", " + resource.getName() + "=" + resource.getValue().     }     return "ResourceSpec{" + "cpuCores=" + cpuCores + ", heapMemoryInMB=" + heapMemoryInMB + ", directMemoryInMB=" + directMemoryInMB + ", nativeMemoryInMB=" + nativeMemoryInMB + ", stateSizeInMB=" + stateSizeInMB + extend + '}'. }
false;public,static;0;3;;public static Builder newBuilder() {     return new Builder(). }
false;public;1;4;;public Builder setCpuCores(double cpuCores) {     this.cpuCores = cpuCores.     return this. }
false;public;1;4;;public Builder setHeapMemoryInMB(int heapMemory) {     this.heapMemoryInMB = heapMemory.     return this. }
false;public;1;4;;public Builder setDirectMemoryInMB(int directMemory) {     this.directMemoryInMB = directMemory.     return this. }
false;public;1;4;;public Builder setNativeMemoryInMB(int nativeMemory) {     this.nativeMemoryInMB = nativeMemory.     return this. }
false;public;1;4;;public Builder setStateSizeInMB(int stateSize) {     this.stateSizeInMB = stateSize.     return this. }
false;public;1;4;;public Builder setGPUResource(double gpus) {     this.gpuResource = new GPUResource(gpus).     return this. }
false;public;0;9;;public ResourceSpec build() {     return new ResourceSpec(cpuCores, heapMemoryInMB, directMemoryInMB, nativeMemoryInMB, stateSizeInMB, gpuResource). }
