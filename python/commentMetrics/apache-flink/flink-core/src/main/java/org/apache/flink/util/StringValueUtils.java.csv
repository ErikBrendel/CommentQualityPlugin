# id;timestamp;commentText;codeText;commentWords;codeWords
StringValueUtils -> public static void replaceNonWordChars(StringValue string, char replacement);1492690573;Replaces all non-word characters in a string by a given character. The only_characters not replaced are the characters that qualify as word characters_or digit characters with respect to {@link Character#isLetter(char)} or_{@link Character#isDigit(char)}, as well as the underscore character._<p>_This operation is intended to simplify strings for counting distinct words.__@param string The string value to have the non-word characters replaced._@param replacement The character to use as the replacement.;public static void replaceNonWordChars(StringValue string, char replacement) {_		final char[] chars = string.getCharArray()__		final int len = string.length()__		_		for (int i = 0_ i < len_ i++) {_			final char c = chars[i]__			if (!(Character.isLetter(c) || Character.isDigit(c) || c == '_')) {_				chars[i] = replacement__			}_		}_	};replaces,all,non,word,characters,in,a,string,by,a,given,character,the,only,characters,not,replaced,are,the,characters,that,qualify,as,word,characters,or,digit,characters,with,respect,to,link,character,is,letter,char,or,link,character,is,digit,char,as,well,as,the,underscore,character,p,this,operation,is,intended,to,simplify,strings,for,counting,distinct,words,param,string,the,string,value,to,have,the,non,word,characters,replaced,param,replacement,the,character,to,use,as,the,replacement;public,static,void,replace,non,word,chars,string,value,string,char,replacement,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,final,char,c,chars,i,if,character,is,letter,c,character,is,digit,c,c,chars,i,replacement
StringValueUtils -> public static void replaceNonWordChars(StringValue string, char replacement);1499939555;Replaces all non-word characters in a string by a given character. The only_characters not replaced are the characters that qualify as word characters_or digit characters with respect to {@link Character#isLetter(char)} or_{@link Character#isDigit(char)}, as well as the underscore character._<p>_This operation is intended to simplify strings for counting distinct words.__@param string The string value to have the non-word characters replaced._@param replacement The character to use as the replacement.;public static void replaceNonWordChars(StringValue string, char replacement) {_		final char[] chars = string.getCharArray()__		final int len = string.length()__		_		for (int i = 0_ i < len_ i++) {_			final char c = chars[i]__			if (!(Character.isLetter(c) || Character.isDigit(c) || c == '_')) {_				chars[i] = replacement__			}_		}_	};replaces,all,non,word,characters,in,a,string,by,a,given,character,the,only,characters,not,replaced,are,the,characters,that,qualify,as,word,characters,or,digit,characters,with,respect,to,link,character,is,letter,char,or,link,character,is,digit,char,as,well,as,the,underscore,character,p,this,operation,is,intended,to,simplify,strings,for,counting,distinct,words,param,string,the,string,value,to,have,the,non,word,characters,replaced,param,replacement,the,character,to,use,as,the,replacement;public,static,void,replace,non,word,chars,string,value,string,char,replacement,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,final,char,c,chars,i,if,character,is,letter,c,character,is,digit,c,c,chars,i,replacement
StringValueUtils -> public static void replaceNonWordChars(StringValue string, char replacement);1516295284;Replaces all non-word characters in a string by a given character. The only_characters not replaced are the characters that qualify as word characters_or digit characters with respect to {@link Character#isLetter(char)} or_{@link Character#isDigit(char)}, as well as the underscore character.__<p>This operation is intended to simplify strings for counting distinct words.__@param string The string value to have the non-word characters replaced._@param replacement The character to use as the replacement.;public static void replaceNonWordChars(StringValue string, char replacement) {_		final char[] chars = string.getCharArray()__		final int len = string.length()___		for (int i = 0_ i < len_ i++) {_			final char c = chars[i]__			if (!(Character.isLetter(c) || Character.isDigit(c) || c == '_')) {_				chars[i] = replacement__			}_		}_	};replaces,all,non,word,characters,in,a,string,by,a,given,character,the,only,characters,not,replaced,are,the,characters,that,qualify,as,word,characters,or,digit,characters,with,respect,to,link,character,is,letter,char,or,link,character,is,digit,char,as,well,as,the,underscore,character,p,this,operation,is,intended,to,simplify,strings,for,counting,distinct,words,param,string,the,string,value,to,have,the,non,word,characters,replaced,param,replacement,the,character,to,use,as,the,replacement;public,static,void,replace,non,word,chars,string,value,string,char,replacement,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,final,char,c,chars,i,if,character,is,letter,c,character,is,digit,c,c,chars,i,replacement
StringValueUtils -> public static void toLowerCase(StringValue string);1492690573;Converts the given <code>StringValue</code> into a lower case variant.__@param string The string to convert to lower case.;public static void toLowerCase(StringValue string) {_		final char[] chars = string.getCharArray()__		final int len = string.length()__		_		for (int i = 0_ i < len_ i++) {_			chars[i] = Character.toLowerCase(chars[i])__		}_	};converts,the,given,code,string,value,code,into,a,lower,case,variant,param,string,the,string,to,convert,to,lower,case;public,static,void,to,lower,case,string,value,string,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,chars,i,character,to,lower,case,chars,i
StringValueUtils -> public static void toLowerCase(StringValue string);1499939555;Converts the given <code>StringValue</code> into a lower case variant.__@param string The string to convert to lower case.;public static void toLowerCase(StringValue string) {_		final char[] chars = string.getCharArray()__		final int len = string.length()__		_		for (int i = 0_ i < len_ i++) {_			chars[i] = Character.toLowerCase(chars[i])__		}_	};converts,the,given,code,string,value,code,into,a,lower,case,variant,param,string,the,string,to,convert,to,lower,case;public,static,void,to,lower,case,string,value,string,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,chars,i,character,to,lower,case,chars,i
StringValueUtils -> public static void toLowerCase(StringValue string);1516295284;Converts the given <code>StringValue</code> into a lower case variant.__@param string The string to convert to lower case.;public static void toLowerCase(StringValue string) {_		final char[] chars = string.getCharArray()__		final int len = string.length()___		for (int i = 0_ i < len_ i++) {_			chars[i] = Character.toLowerCase(chars[i])__		}_	};converts,the,given,code,string,value,code,into,a,lower,case,variant,param,string,the,string,to,convert,to,lower,case;public,static,void,to,lower,case,string,value,string,final,char,chars,string,get,char,array,final,int,len,string,length,for,int,i,0,i,len,i,chars,i,character,to,lower,case,chars,i
StringValueUtils -> private StringValueUtils();1492690573;Private constructor to prevent instantiation, as this is a utility method encapsulating class.;private StringValueUtils() {};private,constructor,to,prevent,instantiation,as,this,is,a,utility,method,encapsulating,class;private,string,value,utils
StringValueUtils -> private StringValueUtils();1499939555;Private constructor to prevent instantiation, as this is a utility method encapsulating class.;private StringValueUtils() {};private,constructor,to,prevent,instantiation,as,this,is,a,utility,method,encapsulating,class;private,string,value,utils
StringValueUtils -> private StringValueUtils();1516295284;Private constructor to prevent instantiation, as this is a utility method encapsulating class.;private StringValueUtils() {};private,constructor,to,prevent,instantiation,as,this,is,a,utility,method,encapsulating,class;private,string,value,utils
StringValueUtils -> WhitespaceTokenizer -> public void setStringToTokenize(StringValue string);1492690573;Sets the string to be tokenized and resets the state of the tokenizer.__@param string The string value to be tokenized.;public void setStringToTokenize(StringValue string) {_			this.toTokenize = string__			this.pos = 0__			this.limit = string.length()__		};sets,the,string,to,be,tokenized,and,resets,the,state,of,the,tokenizer,param,string,the,string,value,to,be,tokenized;public,void,set,string,to,tokenize,string,value,string,this,to,tokenize,string,this,pos,0,this,limit,string,length
StringValueUtils -> WhitespaceTokenizer -> public void setStringToTokenize(StringValue string);1499939555;Sets the string to be tokenized and resets the state of the tokenizer.__@param string The string value to be tokenized.;public void setStringToTokenize(StringValue string) {_			this.toTokenize = string__			this.pos = 0__			this.limit = string.length()__		};sets,the,string,to,be,tokenized,and,resets,the,state,of,the,tokenizer,param,string,the,string,value,to,be,tokenized;public,void,set,string,to,tokenize,string,value,string,this,to,tokenize,string,this,pos,0,this,limit,string,length
StringValueUtils -> WhitespaceTokenizer -> public void setStringToTokenize(StringValue string);1516295284;Sets the string to be tokenized and resets the state of the tokenizer.__@param string The string value to be tokenized.;public void setStringToTokenize(StringValue string) {_			this.toTokenize = string__			this.pos = 0__			this.limit = string.length()__		};sets,the,string,to,be,tokenized,and,resets,the,state,of,the,tokenizer,param,string,the,string,value,to,be,tokenized;public,void,set,string,to,tokenize,string,value,string,this,to,tokenize,string,this,pos,0,this,limit,string,length
StringValueUtils -> WhitespaceTokenizer -> public WhitespaceTokenizer();1492690573;Creates a new tokenizer with an undefined internal state.;public WhitespaceTokenizer() {};creates,a,new,tokenizer,with,an,undefined,internal,state;public,whitespace,tokenizer
StringValueUtils -> WhitespaceTokenizer -> public WhitespaceTokenizer();1499939555;Creates a new tokenizer with an undefined internal state.;public WhitespaceTokenizer() {};creates,a,new,tokenizer,with,an,undefined,internal,state;public,whitespace,tokenizer
StringValueUtils -> WhitespaceTokenizer -> public WhitespaceTokenizer();1516295284;Creates a new tokenizer with an undefined internal state.;public WhitespaceTokenizer() {};creates,a,new,tokenizer,with,an,undefined,internal,state;public,whitespace,tokenizer
StringValueUtils -> WhitespaceTokenizer -> public boolean next(StringValue target);1492690573;Gets the next token from the string. If another token is available, the token is stored_in the given target StringValue object.__@param target The StringValue object to store the next token in._@return True, if there was another token, false if not.;public boolean next(StringValue target) {_			final char[] data = this.toTokenize.getCharArray()__			final int limit = this.limit__			int pos = this.pos__			_			_			for (_ pos < limit && Character.isWhitespace(data[pos])_ pos++)__			_			if (pos >= limit) {_				this.pos = pos__				return false__			}_			_			final int start = pos__			for (_ pos < limit && !Character.isWhitespace(data[pos])_ pos++)__			_			this.pos = pos__			target.setValue(this.toTokenize, start, pos - start)__			return true__		};gets,the,next,token,from,the,string,if,another,token,is,available,the,token,is,stored,in,the,given,target,string,value,object,param,target,the,string,value,object,to,store,the,next,token,in,return,true,if,there,was,another,token,false,if,not;public,boolean,next,string,value,target,final,char,data,this,to,tokenize,get,char,array,final,int,limit,this,limit,int,pos,this,pos,for,pos,limit,character,is,whitespace,data,pos,pos,if,pos,limit,this,pos,pos,return,false,final,int,start,pos,for,pos,limit,character,is,whitespace,data,pos,pos,this,pos,pos,target,set,value,this,to,tokenize,start,pos,start,return,true
StringValueUtils -> WhitespaceTokenizer -> public boolean next(StringValue target);1499939555;Gets the next token from the string. If another token is available, the token is stored_in the given target StringValue object.__@param target The StringValue object to store the next token in._@return True, if there was another token, false if not.;public boolean next(StringValue target) {_			final char[] data = this.toTokenize.getCharArray()__			final int limit = this.limit__			int pos = this.pos__			_			_			for (_ pos < limit && Character.isWhitespace(data[pos])_ pos++) {_			}_			_			if (pos >= limit) {_				this.pos = pos__				return false__			}_			_			final int start = pos__			for (_ pos < limit && !Character.isWhitespace(data[pos])_ pos++) {_			}_			_			this.pos = pos__			target.setValue(this.toTokenize, start, pos - start)__			return true__		};gets,the,next,token,from,the,string,if,another,token,is,available,the,token,is,stored,in,the,given,target,string,value,object,param,target,the,string,value,object,to,store,the,next,token,in,return,true,if,there,was,another,token,false,if,not;public,boolean,next,string,value,target,final,char,data,this,to,tokenize,get,char,array,final,int,limit,this,limit,int,pos,this,pos,for,pos,limit,character,is,whitespace,data,pos,pos,if,pos,limit,this,pos,pos,return,false,final,int,start,pos,for,pos,limit,character,is,whitespace,data,pos,pos,this,pos,pos,target,set,value,this,to,tokenize,start,pos,start,return,true
StringValueUtils -> WhitespaceTokenizer -> public boolean next(StringValue target);1516295284;Gets the next token from the string. If another token is available, the token is stored_in the given target StringValue object.__@param target The StringValue object to store the next token in._@return True, if there was another token, false if not.;public boolean next(StringValue target) {_			final char[] data = this.toTokenize.getCharArray()__			final int limit = this.limit__			int pos = this.pos___			_			for (_ pos < limit && Character.isWhitespace(data[pos])_ pos++) {_			}__			if (pos >= limit) {_				this.pos = pos__				return false__			}__			final int start = pos__			for (_ pos < limit && !Character.isWhitespace(data[pos])_ pos++) {_			}__			this.pos = pos__			target.setValue(this.toTokenize, start, pos - start)__			return true__		};gets,the,next,token,from,the,string,if,another,token,is,available,the,token,is,stored,in,the,given,target,string,value,object,param,target,the,string,value,object,to,store,the,next,token,in,return,true,if,there,was,another,token,false,if,not;public,boolean,next,string,value,target,final,char,data,this,to,tokenize,get,char,array,final,int,limit,this,limit,int,pos,this,pos,for,pos,limit,character,is,whitespace,data,pos,pos,if,pos,limit,this,pos,pos,return,false,final,int,start,pos,for,pos,limit,character,is,whitespace,data,pos,pos,this,pos,pos,target,set,value,this,to,tokenize,start,pos,start,return,true
