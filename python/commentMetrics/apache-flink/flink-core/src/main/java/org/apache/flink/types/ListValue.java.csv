commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#iterator() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#iterator() 	 */ @Override public Iterator<V> iterator() {     return this.list.iterator(). }
false;public;1;18;;@Override public void read(final DataInputView in) throws IOException {     int size = in.readInt().     this.list.clear().     try {         for (. size > 0. size--) {             final V val = this.valueClass.newInstance().             val.read(in).             this.list.add(val).         }     } catch (final InstantiationException e) {         throw new RuntimeException(e).     } catch (final IllegalAccessException e) {         throw new RuntimeException(e).     } }
false;public;1;7;;@Override public void write(final DataOutputView out) throws IOException {     out.writeInt(this.list.size()).     for (final V value : this.list) {         value.write(out).     } }
true;public;0;7;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#hashCode() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#hashCode() 	 */ @Override public int hashCode() {     final int prime = 41.     int result = 1.     result = prime * result + (this.list == null ? 0 : this.list.hashCode()).     return result. }
true;public;1;21;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.lang.Object#equals(java.lang.Object) 	 */ @Override public boolean equals(final Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (this.getClass() != obj.getClass()) {         return false.     }     final ListValue<?> other = (ListValue<?>) obj.     if (this.list == null) {         if (other.list != null) {             return false.         }     } else if (!this.list.equals(other.list)) {         return false.     }     return true. }
true;public;2;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#add(int, java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#add(int, java.lang.Object) 	 */ @Override public void add(final int index, final V element) {     this.list.add(index, element). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#add(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#add(java.lang.Object) 	 */ @Override public boolean add(final V e) {     return this.list.add(e). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#addAll(java.util.Collection) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#addAll(java.util.Collection) 	 */ @Override public boolean addAll(final Collection<? extends V> c) {     return this.list.addAll(c). }
true;public;2;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#addAll(int, java.util.Collection) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#addAll(int, java.util.Collection) 	 */ @Override public boolean addAll(final int index, final Collection<? extends V> c) {     return this.list.addAll(index, c). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#clear() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#clear() 	 */ @Override public void clear() {     this.list.clear(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#contains(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#contains(java.lang.Object) 	 */ @Override public boolean contains(final Object o) {     return this.list.contains(o). }
false;public;0;4;;@Override public String toString() {     return this.list.toString(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#containsAll(java.util.Collection) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#containsAll(java.util.Collection) 	 */ @Override public boolean containsAll(final Collection<?> c) {     return this.list.containsAll(c). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#get(int) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#get(int) 	 */ @Override public V get(final int index) {     return this.list.get(index). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#indexOf(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#indexOf(java.lang.Object) 	 */ @Override public int indexOf(final Object o) {     return this.list.indexOf(o). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#isEmpty() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#isEmpty() 	 */ @Override public boolean isEmpty() {     return this.list.isEmpty(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#lastIndexOf(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#lastIndexOf(java.lang.Object) 	 */ @Override public int lastIndexOf(final Object o) {     return this.list.lastIndexOf(o). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#listIterator() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#listIterator() 	 */ @Override public ListIterator<V> listIterator() {     return this.list.listIterator(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#listIterator(int) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#listIterator(int) 	 */ @Override public ListIterator<V> listIterator(final int index) {     return this.list.listIterator(index). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#remove(int) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#remove(int) 	 */ @Override public V remove(final int index) {     return this.list.remove(index). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#remove(java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#remove(java.lang.Object) 	 */ @Override public boolean remove(final Object o) {     return this.list.remove(o). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#removeAll(java.util.Collection) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#removeAll(java.util.Collection) 	 */ @Override public boolean removeAll(final Collection<?> c) {     return this.list.removeAll(c). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#retainAll(java.util.Collection) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#retainAll(java.util.Collection) 	 */ @Override public boolean retainAll(final Collection<?> c) {     return this.list.retainAll(c). }
true;public;2;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#set(int, java.lang.Object) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#set(int, java.lang.Object) 	 */ @Override public V set(final int index, final V element) {     return this.list.set(index, element). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#size() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#size() 	 */ @Override public int size() {     return this.list.size(). }
true;public;2;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#subList(int, int) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#subList(int, int) 	 */ @Override public List<V> subList(final int fromIndex, final int toIndex) {     return this.list.subList(fromIndex, toIndex). }
true;public;0;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#toArray() 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#toArray() 	 */ @Override public Object[] toArray() {     return this.list.toArray(). }
true;public;1;4;/* 	 * (non-Javadoc) 	 * @see java.util.List#toArray(T[]) 	 */ ;/* 	 * (non-Javadoc) 	 * @see java.util.List#toArray(T[]) 	 */ @Override public <T> T[] toArray(final T[] a) {     return this.list.toArray(a). }
