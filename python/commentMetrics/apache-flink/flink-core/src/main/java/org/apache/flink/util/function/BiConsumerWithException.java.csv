commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Performs this operation on the given arguments.  *  * @param t the first input argument  * @param u the second input argument  * @throws E in case of an error  */ ;/**  * Performs this operation on the given arguments.  *  * @param t the first input argument  * @param u the second input argument  * @throws E in case of an error  */ void accept(T t, U u) throws E.
true;static;1;9;/**  * Convert a {@link BiConsumerWithException} into a {@link BiConsumer}.  *  * @param biConsumerWithException BiConsumer with exception to convert into a {@link BiConsumer}.  * @param <A> first input type  * @param <B> second input type  * @return {@link BiConsumer} which rethrows all checked exceptions as unchecked.  */ ;/**  * Convert a {@link BiConsumerWithException} into a {@link BiConsumer}.  *  * @param biConsumerWithException BiConsumer with exception to convert into a {@link BiConsumer}.  * @param <A> first input type  * @param <B> second input type  * @return {@link BiConsumer} which rethrows all checked exceptions as unchecked.  */ static <A, B> BiConsumer<A, B> unchecked(BiConsumerWithException<A, B, ?> biConsumerWithException) {     return (A a, B b) -> {         try {             biConsumerWithException.accept(a, b).         } catch (Throwable t) {             ExceptionUtils.rethrow(t).         }     }. }
