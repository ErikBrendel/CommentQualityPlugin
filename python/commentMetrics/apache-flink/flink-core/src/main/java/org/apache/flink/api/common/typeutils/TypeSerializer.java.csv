commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Gets whether the type is an immutable type.  *  * @return True, if the type is immutable.  */ ;// -------------------------------------------------------------------------------------------- // General information about the type and the serializer // -------------------------------------------------------------------------------------------- /**  * Gets whether the type is an immutable type.  *  * @return True, if the type is immutable.  */ public abstract boolean isImmutableType().
true;public,abstract;0;1;/**  * Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This  * can return itself if the serializer is not stateful.  *  * We need this because Serializers might be used in several threads. Stateless serializers  * are inherently thread-safe while stateful serializers might not be thread-safe.  */ ;/**  * Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This  * can return itself if the serializer is not stateful.  *  * We need this because Serializers might be used in several threads. Stateless serializers  * are inherently thread-safe while stateful serializers might not be thread-safe.  */ public abstract TypeSerializer<T> duplicate().
true;public,abstract;0;1;/**  * Creates a new instance of the data type.  *  * @return A new instance of the data type.  */ ;// -------------------------------------------------------------------------------------------- // Instantiation & Cloning // -------------------------------------------------------------------------------------------- /**  * Creates a new instance of the data type.  *  * @return A new instance of the data type.  */ public abstract T createInstance().
true;public,abstract;1;1;/**  * Creates a deep copy of the given element in a new element.  *  * @param from The element reuse be copied.  * @return A deep copy of the element.  */ ;/**  * Creates a deep copy of the given element in a new element.  *  * @param from The element reuse be copied.  * @return A deep copy of the element.  */ public abstract T copy(T from).
true;public,abstract;2;1;/**  * Creates a copy from the given element.  * The method makes an attempt to store the copy in the given reuse element, if the type is mutable.  * This is, however, not guaranteed.  *  * @param from The element to be copied.  * @param reuse The element to be reused. May or may not be used.  * @return A deep copy of the element.  */ ;/**  * Creates a copy from the given element.  * The method makes an attempt to store the copy in the given reuse element, if the type is mutable.  * This is, however, not guaranteed.  *  * @param from The element to be copied.  * @param reuse The element to be reused. May or may not be used.  * @return A deep copy of the element.  */ public abstract T copy(T from, T reuse).
true;public,abstract;0;1;/**  * Gets the length of the data type, if it is a fix length data type.  *  * @return The length of the data type, or <code>-1</code> for variable length data types.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the length of the data type, if it is a fix length data type.  *  * @return The length of the data type, or <code>-1</code> for variable length data types.  */ public abstract int getLength().
true;public,abstract;2;1;/**  * Serializes the given record to the given target output view.  *  * @param record The record to serialize.  * @param target The output view to write the serialized data to.  *  * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the  *                     output view, which may have an underlying I/O channel to which it delegates.  */ ;// -------------------------------------------------------------------------------------------- /**  * Serializes the given record to the given target output view.  *  * @param record The record to serialize.  * @param target The output view to write the serialized data to.  *  * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the  *                     output view, which may have an underlying I/O channel to which it delegates.  */ public abstract void serialize(T record, DataOutputView target) throws IOException.
true;public,abstract;1;1;/**  * De-serializes a record from the given source input view.  *  * @param source The input view from which to read the data.  * @return The deserialized element.  *  * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the  *                     input view, which may have an underlying I/O channel from which it reads.  */ ;/**  * De-serializes a record from the given source input view.  *  * @param source The input view from which to read the data.  * @return The deserialized element.  *  * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the  *                     input view, which may have an underlying I/O channel from which it reads.  */ public abstract T deserialize(DataInputView source) throws IOException.
true;public,abstract;2;1;/**  * De-serializes a record from the given source input view into the given reuse record instance if mutable.  *  * @param reuse The record instance into which to de-serialize the data.  * @param source The input view from which to read the data.  * @return The deserialized element.  *  * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the  *                     input view, which may have an underlying I/O channel from which it reads.  */ ;/**  * De-serializes a record from the given source input view into the given reuse record instance if mutable.  *  * @param reuse The record instance into which to de-serialize the data.  * @param source The input view from which to read the data.  * @return The deserialized element.  *  * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the  *                     input view, which may have an underlying I/O channel from which it reads.  */ public abstract T deserialize(T reuse, DataInputView source) throws IOException.
true;public,abstract;2;1;/**  * Copies exactly one record from the source input view to the target output view. Whether this operation  * works on binary data or partially de-serializes the record to determine its length (such as for records  * of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing  * two integer numbers (8 bytes total) is most efficiently implemented as  * {@code target.write(source, 8).}.  *  * @param source The input view from which to read the record.  * @param target The target output view to which to write the record.  *  * @throws IOException Thrown if any of the two views raises an exception.  */ ;/**  * Copies exactly one record from the source input view to the target output view. Whether this operation  * works on binary data or partially de-serializes the record to determine its length (such as for records  * of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing  * two integer numbers (8 bytes total) is most efficiently implemented as  * {@code target.write(source, 8).}.  *  * @param source The input view from which to read the record.  * @param target The target output view to which to write the record.  *  * @throws IOException Thrown if any of the two views raises an exception.  */ public abstract void copy(DataInputView source, DataOutputView target) throws IOException.
false;public,abstract;1;1;;public abstract boolean equals(Object obj).
false;public,abstract;0;1;;public abstract int hashCode().
true;public,abstract;0;1;/**  * Snapshots the configuration of this TypeSerializer. This method is only relevant if the serializer is  * used to state stored in checkpoints/savepoints.  *  * <p>The snapshot of the TypeSerializer is supposed to contain all information that affects the serialization  * format of the serializer. The snapshot serves two purposes: First, to reproduce the serializer when the  * checkpoint/savepoint is restored, and second, to check whether the serialization format is compatible  * with the serializer used in the restored program.  *  * <p><b>IMPORTANT:</b> TypeSerializerSnapshots changed after Flink 1.6. Serializers implemented against  * Flink versions up to 1.6 should still work, but adjust to new model to enable state evolution and be  * future-proof.  * See the class-level comments, section "Upgrading TypeSerializers to the new TypeSerializerSnapshot model"  * for details.  *  * @see TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)  *  * @return snapshot of the serializer's current configuration (cannot be {@code null}).  */ ;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshot for checkpoints/savepoints // -------------------------------------------------------------------------------------------- /**  * Snapshots the configuration of this TypeSerializer. This method is only relevant if the serializer is  * used to state stored in checkpoints/savepoints.  *  * <p>The snapshot of the TypeSerializer is supposed to contain all information that affects the serialization  * format of the serializer. The snapshot serves two purposes: First, to reproduce the serializer when the  * checkpoint/savepoint is restored, and second, to check whether the serialization format is compatible  * with the serializer used in the restored program.  *  * <p><b>IMPORTANT:</b> TypeSerializerSnapshots changed after Flink 1.6. Serializers implemented against  * Flink versions up to 1.6 should still work, but adjust to new model to enable state evolution and be  * future-proof.  * See the class-level comments, section "Upgrading TypeSerializers to the new TypeSerializerSnapshot model"  * for details.  *  * @see TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)  *  * @return snapshot of the serializer's current configuration (cannot be {@code null}).  */ public abstract TypeSerializerSnapshot<T> snapshotConfiguration().
