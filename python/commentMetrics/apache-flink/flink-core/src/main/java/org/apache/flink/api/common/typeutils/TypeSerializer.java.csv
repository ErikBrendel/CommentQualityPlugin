# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1405024514;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1405090423;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1411473593;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1412082638;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@result The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,result,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1415027294;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1423484372;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1424271128;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1441738685;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1442481573;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1455479358;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1480022562;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1481734251;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1490330043;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1494180263;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1494186272;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1494658833;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1497328666;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1539149027;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1539149033;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1539149114;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1540907751;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(T reuse, DataInputView source) throws IOException_;1550652777;De-serializes a record from the given source input view into the given reuse record instance if mutable.__@param reuse The record instance into which to de-serialize the data._@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(T reuse, DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,into,the,given,reuse,record,instance,if,mutable,param,reuse,the,record,instance,into,which,to,de,serialize,the,data,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,t,reuse,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1405024514;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1405090423;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1411473593;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1412082638;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1415027294;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1423484372;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1424271128;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1441738685;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1442481573;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1455479358;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1480022562;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1481734251;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1490330043;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1494180263;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1494186272;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1494658833;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1497328666;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1539149027;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1539149033;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1539149114;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1540907751;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;1550652777;Copies exactly one record from the source input view to the target output view. Whether this operation_works on binary data or partially de-serializes the record to determine its length (such as for records_of variable length) is up to the implementer. Binary copies are typically faster. A copy of a record containing_two integer numbers (8 bytes total) is most efficiently implemented as_{@code target.write(source, 8)_}.__@param source The input view from which to read the record._@param target The target output view to which to write the record.__@throws IOException Thrown if any of the two views raises an exception.;public abstract void copy(DataInputView source, DataOutputView target) throws IOException_;copies,exactly,one,record,from,the,source,input,view,to,the,target,output,view,whether,this,operation,works,on,binary,data,or,partially,de,serializes,the,record,to,determine,its,length,such,as,for,records,of,variable,length,is,up,to,the,implementer,binary,copies,are,typically,faster,a,copy,of,a,record,containing,two,integer,numbers,8,bytes,total,is,most,efficiently,implemented,as,code,target,write,source,8,param,source,the,input,view,from,which,to,read,the,record,param,target,the,target,output,view,to,which,to,write,the,record,throws,ioexception,thrown,if,any,of,the,two,views,raises,an,exception;public,abstract,void,copy,data,input,view,source,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract TypeSerializerConfigSnapshot<T> snapshotConfiguration()_;1539149027;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot<T> snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,t,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerConfigSnapshot<T> snapshotConfiguration()_;1539149033;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot<T> snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,t,snapshot,configuration
TypeSerializer -> public abstract T createInstance()_;1405024514;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1405090423;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1411473593;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1412082638;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1415027294;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1423484372;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1424271128;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1441738685;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1442481573;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1455479358;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1480022562;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1481734251;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1490330043;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1494180263;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1494186272;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1494658833;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1497328666;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1539149027;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1539149033;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1539149114;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1540907751;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract T createInstance()_;1550652777;Creates a new instance of the data type.__@return A new instance of the data type.;public abstract T createInstance()_;creates,a,new,instance,of,the,data,type,return,a,new,instance,of,the,data,type;public,abstract,t,create,instance
TypeSerializer -> public abstract int getLength()_;1405024514;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1405090423;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1411473593;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1412082638;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1415027294;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1423484372;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1424271128;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1441738685;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1442481573;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1455479358;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1480022562;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1481734251;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1490330043;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1494180263;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1494186272;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1494658833;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1497328666;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1539149027;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1539149033;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1539149114;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1540907751;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract int getLength()_;1550652777;Gets the length of the data type, if it is a fix length data type.__@return The length of the data type, or <code>-1</code> for variable length data types.;public abstract int getLength()_;gets,the,length,of,the,data,type,if,it,is,a,fix,length,data,type,return,the,length,of,the,data,type,or,code,1,code,for,variable,length,data,types;public,abstract,int,get,length
TypeSerializer -> public abstract boolean isImmutableType()_;1405024514;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1405090423;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1411473593;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1412082638;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1415027294;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1423484372;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1424271128;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1441738685;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1442481573;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1455479358;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1480022562;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1481734251;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1490330043;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1494180263;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1494186272;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1494658833;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1497328666;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1539149027;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1539149033;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1539149114;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1540907751;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> public abstract boolean isImmutableType()_;1550652777;Gets whether the type is an immutable type.__@return True, if the type is immutable.;public abstract boolean isImmutableType()_;gets,whether,the,type,is,an,immutable,type,return,true,if,the,type,is,immutable;public,abstract,boolean,is,immutable,type
TypeSerializer -> @Deprecated 	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot);1539149114;Ensure compatibility of this serializer with a preceding serializer that was registered for serialization of_the same managed state (if any - this method is only relevant if this serializer is registered for_serialization of managed state).__<p>The compatibility check in this method should be performed by inspecting the preceding serializer's configuration_snapshot. The method may reconfigure the serializer (if required and possible) so that it may be compatible,_or provide a signaling result that informs Flink that state migration is necessary before continuing to use_this serializer.__<p>The result can be one of the following:_<ul>_<li>{@link CompatibilityResult#compatible()}: this signals Flink that this serializer is compatible, or_has been reconfigured to be compatible, to continue reading previous data, and that the_serialization schema remains the same. No migration needs to be performed.</li>__<li>{@link CompatibilityResult#requiresMigration(TypeDeserializer)}: this signals Flink that_migration needs to be performed, because this serializer is not compatible, or cannot be reconfigured to be_compatible, for previous data. Furthermore, in the case that the preceding serializer cannot be found or_restored to read the previous data to perform the migration, the provided convert deserializer can be_used as a fallback resort.</li>__<li>{@link CompatibilityResult#requiresMigration()}: this signals Flink that migration needs to be_performed, because this serializer is not compatible, or cannot be reconfigured to be compatible, for_previous data. If the preceding serializer cannot be found (either its implementation changed or it was_removed from the classpath) then the migration will fail due to incapability to read previous data.</li>_</ul>__@see CompatibilityResult__@param configSnapshot configuration snapshot of a preceding serializer for the same managed state__@return the determined compatibility result (cannot be {@code null}).;@Deprecated_	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot) {_		throw new IllegalStateException(_			"Seems like that you are still using TypeSerializerConfigSnapshot_ if so, this method must be implemented. " +_				"Once you change to directly use TypeSerializerSnapshot, then you can safely remove the implementation " +_				"of this method.")__	};ensure,compatibility,of,this,serializer,with,a,preceding,serializer,that,was,registered,for,serialization,of,the,same,managed,state,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,compatibility,check,in,this,method,should,be,performed,by,inspecting,the,preceding,serializer,s,configuration,snapshot,the,method,may,reconfigure,the,serializer,if,required,and,possible,so,that,it,may,be,compatible,or,provide,a,signaling,result,that,informs,flink,that,state,migration,is,necessary,before,continuing,to,use,this,serializer,p,the,result,can,be,one,of,the,following,ul,li,link,compatibility,result,compatible,this,signals,flink,that,this,serializer,is,compatible,or,has,been,reconfigured,to,be,compatible,to,continue,reading,previous,data,and,that,the,serialization,schema,remains,the,same,no,migration,needs,to,be,performed,li,li,link,compatibility,result,requires,migration,type,deserializer,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,furthermore,in,the,case,that,the,preceding,serializer,cannot,be,found,or,restored,to,read,the,previous,data,to,perform,the,migration,the,provided,convert,deserializer,can,be,used,as,a,fallback,resort,li,li,link,compatibility,result,requires,migration,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,if,the,preceding,serializer,cannot,be,found,either,its,implementation,changed,or,it,was,removed,from,the,classpath,then,the,migration,will,fail,due,to,incapability,to,read,previous,data,li,ul,see,compatibility,result,param,config,snapshot,configuration,snapshot,of,a,preceding,serializer,for,the,same,managed,state,return,the,determined,compatibility,result,cannot,be,code,null;deprecated,public,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot,throw,new,illegal,state,exception,seems,like,that,you,are,still,using,type,serializer,config,snapshot,if,so,this,method,must,be,implemented,once,you,change,to,directly,use,type,serializer,snapshot,then,you,can,safely,remove,the,implementation,of,this,method
TypeSerializer -> @Deprecated 	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot);1540907751;This method is deprecated. It used to resolved compatibility of the serializer with serializer_config snapshots in checkpoints. The responsibility for this has moved to_{@link TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)}.__<p>New serializers should not override this method any more! Serializers implemented against Flink_versions up to 1.6 should still work, but should adjust to new model to enable state evolution and_be future-proof. See the class-level comments, section <i>"Upgrading TypeSerializers to the new_TypeSerializerSnapshot model"</i> for details.__@deprecated Replaced by {@link TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)}.;@Deprecated_	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot) {_		throw new UnsupportedOperationException(_				"This method is not supported any more - please evolve your TypeSerializer the following way:\n\n" +_				"  - If you have a serializer whose 'ensureCompatibility()' method delegates to another\n" +_				"    serializer's 'ensureCompatibility()', please use" +_						"'CompatibilityUtil.resolveCompatibilityResult(snapshot, this)' instead.\n\n" +_				"  - If you updated your serializer (removed overriding the 'ensureCompatibility()' method),\n" +_				"    please also update the corresponding config snapshot to not extend 'TypeSerializerConfigSnapshot'" +_						"any more.\n\n")__	};this,method,is,deprecated,it,used,to,resolved,compatibility,of,the,serializer,with,serializer,config,snapshots,in,checkpoints,the,responsibility,for,this,has,moved,to,link,type,serializer,snapshot,resolve,schema,compatibility,type,serializer,p,new,serializers,should,not,override,this,method,any,more,serializers,implemented,against,flink,versions,up,to,1,6,should,still,work,but,should,adjust,to,new,model,to,enable,state,evolution,and,be,future,proof,see,the,class,level,comments,section,i,upgrading,type,serializers,to,the,new,type,serializer,snapshot,model,i,for,details,deprecated,replaced,by,link,type,serializer,snapshot,resolve,schema,compatibility,type,serializer;deprecated,public,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot,throw,new,unsupported,operation,exception,this,method,is,not,supported,any,more,please,evolve,your,type,serializer,the,following,way,n,n,if,you,have,a,serializer,whose,ensure,compatibility,method,delegates,to,another,n,serializer,s,ensure,compatibility,please,use,compatibility,util,resolve,compatibility,result,snapshot,this,instead,n,n,if,you,updated,your,serializer,removed,overriding,the,ensure,compatibility,method,n,please,also,update,the,corresponding,config,snapshot,to,not,extend,type,serializer,config,snapshot,any,more,n,n
TypeSerializer -> @Deprecated 	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot);1550652777;This method is deprecated. It used to resolved compatibility of the serializer with serializer_config snapshots in checkpoints. The responsibility for this has moved to_{@link TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)}.__<p>New serializers should not override this method any more! Serializers implemented against Flink_versions up to 1.6 should still work, but should adjust to new model to enable state evolution and_be future-proof. See the class-level comments, section <i>"Upgrading TypeSerializers to the new_TypeSerializerSnapshot model"</i> for details.__@deprecated Replaced by {@link TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)}.;@Deprecated_	public CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot<?> configSnapshot) {_		throw new UnsupportedOperationException(_				"This method is not supported any more - please evolve your TypeSerializer the following way:\n\n" +_				"  - If you have a serializer whose 'ensureCompatibility()' method delegates to another\n" +_				"    serializer's 'ensureCompatibility()', please use" +_						"'CompatibilityUtil.resolveCompatibilityResult(snapshot, this)' instead.\n\n" +_				"  - If you updated your serializer (removed overriding the 'ensureCompatibility()' method),\n" +_				"    please also update the corresponding config snapshot to not extend 'TypeSerializerConfigSnapshot'" +_						"any more.\n\n")__	};this,method,is,deprecated,it,used,to,resolved,compatibility,of,the,serializer,with,serializer,config,snapshots,in,checkpoints,the,responsibility,for,this,has,moved,to,link,type,serializer,snapshot,resolve,schema,compatibility,type,serializer,p,new,serializers,should,not,override,this,method,any,more,serializers,implemented,against,flink,versions,up,to,1,6,should,still,work,but,should,adjust,to,new,model,to,enable,state,evolution,and,be,future,proof,see,the,class,level,comments,section,i,upgrading,type,serializers,to,the,new,type,serializer,snapshot,model,i,for,details,deprecated,replaced,by,link,type,serializer,snapshot,resolve,schema,compatibility,type,serializer;deprecated,public,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot,throw,new,unsupported,operation,exception,this,method,is,not,supported,any,more,please,evolve,your,type,serializer,the,following,way,n,n,if,you,have,a,serializer,whose,ensure,compatibility,method,delegates,to,another,n,serializer,s,ensure,compatibility,please,use,compatibility,util,resolve,compatibility,result,snapshot,this,instead,n,n,if,you,updated,your,serializer,removed,overriding,the,ensure,compatibility,method,n,please,also,update,the,corresponding,config,snapshot,to,not,extend,type,serializer,config,snapshot,any,more,n,n
TypeSerializer -> public abstract T copy(T from)_;1412082638;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1415027294;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1423484372;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1424271128;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1441738685;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1442481573;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1455479358;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1480022562;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1481734251;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1490330043;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1494180263;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1494186272;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1494658833;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1497328666;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1539149027;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1539149033;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1539149114;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1540907751;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract T copy(T from)_;1550652777;Creates a deep copy of the given element in a new element.__@param from The element reuse be copied._@return A deep copy of the element.;public abstract T copy(T from)_;creates,a,deep,copy,of,the,given,element,in,a,new,element,param,from,the,element,reuse,be,copied,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1405024514;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1405090423;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1411473593;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1412082638;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1415027294;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1423484372;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1424271128;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1441738685;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1442481573;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1455479358;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1480022562;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1481734251;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1490330043;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1494180263;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1494186272;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1494658833;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1497328666;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1539149027;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1539149033;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1539149114;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1540907751;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract void serialize(T record, DataOutputView target) throws IOException_;1550652777;Serializes the given record to the given target output view.__@param record The record to serialize._@param target The output view to write the serialized data to.__@throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the_output view, which may have an underlying I/O channel to which it delegates.;public abstract void serialize(T record, DataOutputView target) throws IOException_;serializes,the,given,record,to,the,given,target,output,view,param,record,the,record,to,serialize,param,target,the,output,view,to,write,the,serialized,data,to,throws,ioexception,thrown,if,the,serialization,encountered,an,i,o,related,error,typically,raised,by,the,output,view,which,may,have,an,underlying,i,o,channel,to,which,it,delegates;public,abstract,void,serialize,t,record,data,output,view,target,throws,ioexception
TypeSerializer -> public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;1539149114;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,snapshot,t,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;1540907751;Snapshots the configuration of this TypeSerializer. This method is only relevant if the serializer is_used to state stored in checkpoints/savepoints.__<p>The snapshot of the TypeSerializer is supposed to contain all information that affects the serialization_format of the serializer. The snapshot serves two purposes: First, to reproduce the serializer when the_checkpoint/savepoint is restored, and second, to check whether the serialization format is compatible_with the serializer used in the restored program.__<p><b>IMPORTANT:</b> TypeSerializerSnapshots changed after Flink 1.6. Serializers implemented against_Flink versions up to 1.6 should still work, but adjust to new model to enable state evolution and be_future-proof._See the class-level comments, section "Upgrading TypeSerializers to the new TypeSerializerSnapshot model"_for details.__@see TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;snapshots,the,configuration,of,this,type,serializer,this,method,is,only,relevant,if,the,serializer,is,used,to,state,stored,in,checkpoints,savepoints,p,the,snapshot,of,the,type,serializer,is,supposed,to,contain,all,information,that,affects,the,serialization,format,of,the,serializer,the,snapshot,serves,two,purposes,first,to,reproduce,the,serializer,when,the,checkpoint,savepoint,is,restored,and,second,to,check,whether,the,serialization,format,is,compatible,with,the,serializer,used,in,the,restored,program,p,b,important,b,type,serializer,snapshots,changed,after,flink,1,6,serializers,implemented,against,flink,versions,up,to,1,6,should,still,work,but,adjust,to,new,model,to,enable,state,evolution,and,be,future,proof,see,the,class,level,comments,section,upgrading,type,serializers,to,the,new,type,serializer,snapshot,model,for,details,see,type,serializer,snapshot,resolve,schema,compatibility,type,serializer,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,snapshot,t,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;1550652777;Snapshots the configuration of this TypeSerializer. This method is only relevant if the serializer is_used to state stored in checkpoints/savepoints.__<p>The snapshot of the TypeSerializer is supposed to contain all information that affects the serialization_format of the serializer. The snapshot serves two purposes: First, to reproduce the serializer when the_checkpoint/savepoint is restored, and second, to check whether the serialization format is compatible_with the serializer used in the restored program.__<p><b>IMPORTANT:</b> TypeSerializerSnapshots changed after Flink 1.6. Serializers implemented against_Flink versions up to 1.6 should still work, but adjust to new model to enable state evolution and be_future-proof._See the class-level comments, section "Upgrading TypeSerializers to the new TypeSerializerSnapshot model"_for details.__@see TypeSerializerSnapshot#resolveSchemaCompatibility(TypeSerializer)__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerSnapshot<T> snapshotConfiguration()_;snapshots,the,configuration,of,this,type,serializer,this,method,is,only,relevant,if,the,serializer,is,used,to,state,stored,in,checkpoints,savepoints,p,the,snapshot,of,the,type,serializer,is,supposed,to,contain,all,information,that,affects,the,serialization,format,of,the,serializer,the,snapshot,serves,two,purposes,first,to,reproduce,the,serializer,when,the,checkpoint,savepoint,is,restored,and,second,to,check,whether,the,serialization,format,is,compatible,with,the,serializer,used,in,the,restored,program,p,b,important,b,type,serializer,snapshots,changed,after,flink,1,6,serializers,implemented,against,flink,versions,up,to,1,6,should,still,work,but,adjust,to,new,model,to,enable,state,evolution,and,be,future,proof,see,the,class,level,comments,section,upgrading,type,serializers,to,the,new,type,serializer,snapshot,model,for,details,see,type,serializer,snapshot,resolve,schema,compatibility,type,serializer,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,snapshot,t,snapshot,configuration
TypeSerializer -> public abstract boolean isStateful()_;1405024514;Gets whether the serializer is stateful. Statefulness means in this context that some of the serializer's_methods have objects with state and are thus not inherently thread-safe. A stateful serializer might be used by_multiple threads concurrently. For a stateful one, different instances will be used by different threads.__@return True, if the serializer is stateful, false if it is stateless_;public abstract boolean isStateful()_;gets,whether,the,serializer,is,stateful,statefulness,means,in,this,context,that,some,of,the,serializer,s,methods,have,objects,with,state,and,are,thus,not,inherently,thread,safe,a,stateful,serializer,might,be,used,by,multiple,threads,concurrently,for,a,stateful,one,different,instances,will,be,used,by,different,threads,return,true,if,the,serializer,is,stateful,false,if,it,is,stateless;public,abstract,boolean,is,stateful
TypeSerializer -> public abstract boolean isStateful()_;1405090423;Gets whether the serializer is stateful. Statefulness means in this context that some of the serializer's_methods have objects with state and are thus not inherently thread-safe. A stateful serializer might be used by_multiple threads concurrently. For a stateful one, different instances will be used by different threads.__@return True, if the serializer is stateful, false if it is stateless_;public abstract boolean isStateful()_;gets,whether,the,serializer,is,stateful,statefulness,means,in,this,context,that,some,of,the,serializer,s,methods,have,objects,with,state,and,are,thus,not,inherently,thread,safe,a,stateful,serializer,might,be,used,by,multiple,threads,concurrently,for,a,stateful,one,different,instances,will,be,used,by,different,threads,return,true,if,the,serializer,is,stateful,false,if,it,is,stateless;public,abstract,boolean,is,stateful
TypeSerializer -> public abstract boolean isStateful()_;1411473593;Gets whether the serializer is stateful. Statefulness means in this context that some of the serializer's_methods have objects with state and are thus not inherently thread-safe. A stateful serializer might be used by_multiple threads concurrently. For a stateful one, different instances will be used by different threads.__@return True, if the serializer is stateful, false if it is stateless_;public abstract boolean isStateful()_;gets,whether,the,serializer,is,stateful,statefulness,means,in,this,context,that,some,of,the,serializer,s,methods,have,objects,with,state,and,are,thus,not,inherently,thread,safe,a,stateful,serializer,might,be,used,by,multiple,threads,concurrently,for,a,stateful,one,different,instances,will,be,used,by,different,threads,return,true,if,the,serializer,is,stateful,false,if,it,is,stateless;public,abstract,boolean,is,stateful
TypeSerializer -> public abstract boolean isStateful()_;1412082638;Gets whether the serializer is stateful. Statefulness means in this context that some of the serializer's_methods have objects with state and are thus not inherently thread-safe. A stateful serializer might be used by_multiple threads concurrently. For a stateful one, different instances will be used by different threads.__@return True, if the serializer is stateful, false if it is stateless_;public abstract boolean isStateful()_;gets,whether,the,serializer,is,stateful,statefulness,means,in,this,context,that,some,of,the,serializer,s,methods,have,objects,with,state,and,are,thus,not,inherently,thread,safe,a,stateful,serializer,might,be,used,by,multiple,threads,concurrently,for,a,stateful,one,different,instances,will,be,used,by,different,threads,return,true,if,the,serializer,is,stateful,false,if,it,is,stateless;public,abstract,boolean,is,stateful
TypeSerializer -> public abstract boolean isStateful()_;1415027294;Gets whether the serializer is stateful. Statefulness means in this context that some of the serializer's_methods have objects with state and are thus not inherently thread-safe. A stateful serializer might be used by_multiple threads concurrently. For a stateful one, different instances will be used by different threads.__@return True, if the serializer is stateful, false if it is stateless_;public abstract boolean isStateful()_;gets,whether,the,serializer,is,stateful,statefulness,means,in,this,context,that,some,of,the,serializer,s,methods,have,objects,with,state,and,are,thus,not,inherently,thread,safe,a,stateful,serializer,might,be,used,by,multiple,threads,concurrently,for,a,stateful,one,different,instances,will,be,used,by,different,threads,return,true,if,the,serializer,is,stateful,false,if,it,is,stateless;public,abstract,boolean,is,stateful
TypeSerializer -> public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;1494180263;Ensure compatibility of this serializer with a preceding serializer that was registered for serialization of_the same managed state (if any - this method is only relevant if this serializer is registered for_serialization of managed state).__The compatibility check in this method should be performed by inspecting the preceding serializer's configuration_snapshot. The method may reconfigure the serializer (if required and possible) so that it may be compatible,_or provide a signaling result that informs Flink that state migration is necessary before continuing to use_this serializer.__<p>The result can be one of the following:_<ul>_<li>{@link CompatibilityResult#compatible()}: this signals Flink that this serializer is compatible, or_has been reconfigured to be compatible, to continue reading previous data, and that the_serialization schema remains the same. No migration needs to be performed.</li>__<li>{@link CompatibilityResult#requiresMigration(TypeSerializer)}: this signals Flink that_migration needs to be performed, because this serializer is not compatible, or cannot be reconfigured to be_compatible, for previous data. Furthermore, in the case that the preceding serializer cannot be found or_restored to read the previous data to perform the migration, the provided convert deserializer can be_used (may be {@code null} if one cannot be provided).</li>_</ul>__@see CompatibilityResult__@param configSnapshot configuration snapshot of a preceding serializer for the same managed state__@return the determined compatibility result.;public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;ensure,compatibility,of,this,serializer,with,a,preceding,serializer,that,was,registered,for,serialization,of,the,same,managed,state,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,the,compatibility,check,in,this,method,should,be,performed,by,inspecting,the,preceding,serializer,s,configuration,snapshot,the,method,may,reconfigure,the,serializer,if,required,and,possible,so,that,it,may,be,compatible,or,provide,a,signaling,result,that,informs,flink,that,state,migration,is,necessary,before,continuing,to,use,this,serializer,p,the,result,can,be,one,of,the,following,ul,li,link,compatibility,result,compatible,this,signals,flink,that,this,serializer,is,compatible,or,has,been,reconfigured,to,be,compatible,to,continue,reading,previous,data,and,that,the,serialization,schema,remains,the,same,no,migration,needs,to,be,performed,li,li,link,compatibility,result,requires,migration,type,serializer,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,furthermore,in,the,case,that,the,preceding,serializer,cannot,be,found,or,restored,to,read,the,previous,data,to,perform,the,migration,the,provided,convert,deserializer,can,be,used,may,be,code,null,if,one,cannot,be,provided,li,ul,see,compatibility,result,param,config,snapshot,configuration,snapshot,of,a,preceding,serializer,for,the,same,managed,state,return,the,determined,compatibility,result;public,abstract,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot
TypeSerializer -> public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;1494186272;Ensure compatibility of this serializer with a preceding serializer that was registered for serialization of_the same managed state (if any - this method is only relevant if this serializer is registered for_serialization of managed state).__The compatibility check in this method should be performed by inspecting the preceding serializer's configuration_snapshot. The method may reconfigure the serializer (if required and possible) so that it may be compatible,_or provide a signaling result that informs Flink that state migration is necessary before continuing to use_this serializer.__<p>The result can be one of the following:_<ul>_<li>{@link CompatibilityResult#compatible()}: this signals Flink that this serializer is compatible, or_has been reconfigured to be compatible, to continue reading previous data, and that the_serialization schema remains the same. No migration needs to be performed.</li>__<li>{@link CompatibilityResult#requiresMigration(TypeDeserializer)}: this signals Flink that_migration needs to be performed, because this serializer is not compatible, or cannot be reconfigured to be_compatible, for previous data. Furthermore, in the case that the preceding serializer cannot be found or_restored to read the previous data to perform the migration, the provided convert deserializer can be_used (may be {@code null} if one cannot be provided).</li>_</ul>__@see CompatibilityResult__@param configSnapshot configuration snapshot of a preceding serializer for the same managed state__@return the determined compatibility result.;public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;ensure,compatibility,of,this,serializer,with,a,preceding,serializer,that,was,registered,for,serialization,of,the,same,managed,state,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,the,compatibility,check,in,this,method,should,be,performed,by,inspecting,the,preceding,serializer,s,configuration,snapshot,the,method,may,reconfigure,the,serializer,if,required,and,possible,so,that,it,may,be,compatible,or,provide,a,signaling,result,that,informs,flink,that,state,migration,is,necessary,before,continuing,to,use,this,serializer,p,the,result,can,be,one,of,the,following,ul,li,link,compatibility,result,compatible,this,signals,flink,that,this,serializer,is,compatible,or,has,been,reconfigured,to,be,compatible,to,continue,reading,previous,data,and,that,the,serialization,schema,remains,the,same,no,migration,needs,to,be,performed,li,li,link,compatibility,result,requires,migration,type,deserializer,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,furthermore,in,the,case,that,the,preceding,serializer,cannot,be,found,or,restored,to,read,the,previous,data,to,perform,the,migration,the,provided,convert,deserializer,can,be,used,may,be,code,null,if,one,cannot,be,provided,li,ul,see,compatibility,result,param,config,snapshot,configuration,snapshot,of,a,preceding,serializer,for,the,same,managed,state,return,the,determined,compatibility,result;public,abstract,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot
TypeSerializer -> public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;1494658833;Ensure compatibility of this serializer with a preceding serializer that was registered for serialization of_the same managed state (if any - this method is only relevant if this serializer is registered for_serialization of managed state).__The compatibility check in this method should be performed by inspecting the preceding serializer's configuration_snapshot. The method may reconfigure the serializer (if required and possible) so that it may be compatible,_or provide a signaling result that informs Flink that state migration is necessary before continuing to use_this serializer.__<p>The result can be one of the following:_<ul>_<li>{@link CompatibilityResult#compatible()}: this signals Flink that this serializer is compatible, or_has been reconfigured to be compatible, to continue reading previous data, and that the_serialization schema remains the same. No migration needs to be performed.</li>__<li>{@link CompatibilityResult#requiresMigration(TypeDeserializer)}: this signals Flink that_migration needs to be performed, because this serializer is not compatible, or cannot be reconfigured to be_compatible, for previous data. Furthermore, in the case that the preceding serializer cannot be found or_restored to read the previous data to perform the migration, the provided convert deserializer can be_used as a fallback resort.</li>__<li>{@link CompatibilityResult#requiresMigration()}: this signals Flink that migration needs to be_performed, because this serializer is not compatible, or cannot be reconfigured to be compatible, for_previous data. If the preceding serializer cannot be found (either its implementation changed or it was_removed from the classpath) then the migration will fail due to incapability to read previous data.</li>_</ul>__@see CompatibilityResult__@param configSnapshot configuration snapshot of a preceding serializer for the same managed state__@return the determined compatibility result (cannot be {@code null}).;public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;ensure,compatibility,of,this,serializer,with,a,preceding,serializer,that,was,registered,for,serialization,of,the,same,managed,state,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,the,compatibility,check,in,this,method,should,be,performed,by,inspecting,the,preceding,serializer,s,configuration,snapshot,the,method,may,reconfigure,the,serializer,if,required,and,possible,so,that,it,may,be,compatible,or,provide,a,signaling,result,that,informs,flink,that,state,migration,is,necessary,before,continuing,to,use,this,serializer,p,the,result,can,be,one,of,the,following,ul,li,link,compatibility,result,compatible,this,signals,flink,that,this,serializer,is,compatible,or,has,been,reconfigured,to,be,compatible,to,continue,reading,previous,data,and,that,the,serialization,schema,remains,the,same,no,migration,needs,to,be,performed,li,li,link,compatibility,result,requires,migration,type,deserializer,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,furthermore,in,the,case,that,the,preceding,serializer,cannot,be,found,or,restored,to,read,the,previous,data,to,perform,the,migration,the,provided,convert,deserializer,can,be,used,as,a,fallback,resort,li,li,link,compatibility,result,requires,migration,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,if,the,preceding,serializer,cannot,be,found,either,its,implementation,changed,or,it,was,removed,from,the,classpath,then,the,migration,will,fail,due,to,incapability,to,read,previous,data,li,ul,see,compatibility,result,param,config,snapshot,configuration,snapshot,of,a,preceding,serializer,for,the,same,managed,state,return,the,determined,compatibility,result,cannot,be,code,null;public,abstract,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot
TypeSerializer -> public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;1497328666;Ensure compatibility of this serializer with a preceding serializer that was registered for serialization of_the same managed state (if any - this method is only relevant if this serializer is registered for_serialization of managed state).__The compatibility check in this method should be performed by inspecting the preceding serializer's configuration_snapshot. The method may reconfigure the serializer (if required and possible) so that it may be compatible,_or provide a signaling result that informs Flink that state migration is necessary before continuing to use_this serializer.__<p>The result can be one of the following:_<ul>_<li>{@link CompatibilityResult#compatible()}: this signals Flink that this serializer is compatible, or_has been reconfigured to be compatible, to continue reading previous data, and that the_serialization schema remains the same. No migration needs to be performed.</li>__<li>{@link CompatibilityResult#requiresMigration(TypeDeserializer)}: this signals Flink that_migration needs to be performed, because this serializer is not compatible, or cannot be reconfigured to be_compatible, for previous data. Furthermore, in the case that the preceding serializer cannot be found or_restored to read the previous data to perform the migration, the provided convert deserializer can be_used as a fallback resort.</li>__<li>{@link CompatibilityResult#requiresMigration()}: this signals Flink that migration needs to be_performed, because this serializer is not compatible, or cannot be reconfigured to be compatible, for_previous data. If the preceding serializer cannot be found (either its implementation changed or it was_removed from the classpath) then the migration will fail due to incapability to read previous data.</li>_</ul>__@see CompatibilityResult__@param configSnapshot configuration snapshot of a preceding serializer for the same managed state__@return the determined compatibility result (cannot be {@code null}).;public abstract CompatibilityResult<T> ensureCompatibility(TypeSerializerConfigSnapshot configSnapshot)_;ensure,compatibility,of,this,serializer,with,a,preceding,serializer,that,was,registered,for,serialization,of,the,same,managed,state,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,the,compatibility,check,in,this,method,should,be,performed,by,inspecting,the,preceding,serializer,s,configuration,snapshot,the,method,may,reconfigure,the,serializer,if,required,and,possible,so,that,it,may,be,compatible,or,provide,a,signaling,result,that,informs,flink,that,state,migration,is,necessary,before,continuing,to,use,this,serializer,p,the,result,can,be,one,of,the,following,ul,li,link,compatibility,result,compatible,this,signals,flink,that,this,serializer,is,compatible,or,has,been,reconfigured,to,be,compatible,to,continue,reading,previous,data,and,that,the,serialization,schema,remains,the,same,no,migration,needs,to,be,performed,li,li,link,compatibility,result,requires,migration,type,deserializer,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,furthermore,in,the,case,that,the,preceding,serializer,cannot,be,found,or,restored,to,read,the,previous,data,to,perform,the,migration,the,provided,convert,deserializer,can,be,used,as,a,fallback,resort,li,li,link,compatibility,result,requires,migration,this,signals,flink,that,migration,needs,to,be,performed,because,this,serializer,is,not,compatible,or,cannot,be,reconfigured,to,be,compatible,for,previous,data,if,the,preceding,serializer,cannot,be,found,either,its,implementation,changed,or,it,was,removed,from,the,classpath,then,the,migration,will,fail,due,to,incapability,to,read,previous,data,li,ul,see,compatibility,result,param,config,snapshot,configuration,snapshot,of,a,preceding,serializer,for,the,same,managed,state,return,the,determined,compatibility,result,cannot,be,code,null;public,abstract,compatibility,result,t,ensure,compatibility,type,serializer,config,snapshot,config,snapshot
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1412082638;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@result The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,result,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1415027294;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1423484372;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1424271128;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1441738685;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1442481573;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1455479358;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1480022562;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1481734251;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1490330043;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1494180263;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1494186272;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1494658833;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1497328666;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1539149027;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1539149033;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1539149114;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1540907751;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract T deserialize(DataInputView source) throws IOException_;1550652777;De-serializes a record from the given source input view.__@param source The input view from which to read the data._@return The deserialized element.__@throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the_input view, which may have an underlying I/O channel from which it reads.;public abstract T deserialize(DataInputView source) throws IOException_;de,serializes,a,record,from,the,given,source,input,view,param,source,the,input,view,from,which,to,read,the,data,return,the,deserialized,element,throws,ioexception,thrown,if,the,de,serialization,encountered,an,i,o,related,error,typically,raised,by,the,input,view,which,may,have,an,underlying,i,o,channel,from,which,it,reads;public,abstract,t,deserialize,data,input,view,source,throws,ioexception
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1423484372;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1424271128;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1441738685;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1442481573;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1455479358;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1480022562;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1481734251;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1490330043;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1494180263;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1494186272;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1494658833;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1497328666;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1539149027;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1539149033;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1539149114;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1540907751;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializer<T> duplicate()_;1550652777;Creates a deep copy of this serializer if it is necessary, i.e. if it is stateful. This_can return itself if the serializer is not stateful.__We need this because Serializers might be used in several threads. Stateless serializers_are inherently thread-safe while stateful serializers might not be thread-safe.;public abstract TypeSerializer<T> duplicate()_;creates,a,deep,copy,of,this,serializer,if,it,is,necessary,i,e,if,it,is,stateful,this,can,return,itself,if,the,serializer,is,not,stateful,we,need,this,because,serializers,might,be,used,in,several,threads,stateless,serializers,are,inherently,thread,safe,while,stateful,serializers,might,not,be,thread,safe;public,abstract,type,serializer,t,duplicate
TypeSerializer -> public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;1494180263;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;1494186272;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;1494658833;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,snapshot,configuration
TypeSerializer -> public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;1497328666;Create a snapshot of the serializer's current configuration to be stored along with the managed state it is_registered to (if any - this method is only relevant if this serializer is registered for serialization of_managed state).__<p>The configuration snapshot should contain information about the serializer's parameter settings and its_serialization format. When a new serializer is registered to serialize the same managed state that this_serializer was registered to, the returned configuration snapshot can be used to ensure compatibility_of the new serializer and determine if state migration is required.__@see TypeSerializerConfigSnapshot__@return snapshot of the serializer's current configuration (cannot be {@code null}).;public abstract TypeSerializerConfigSnapshot snapshotConfiguration()_;create,a,snapshot,of,the,serializer,s,current,configuration,to,be,stored,along,with,the,managed,state,it,is,registered,to,if,any,this,method,is,only,relevant,if,this,serializer,is,registered,for,serialization,of,managed,state,p,the,configuration,snapshot,should,contain,information,about,the,serializer,s,parameter,settings,and,its,serialization,format,when,a,new,serializer,is,registered,to,serialize,the,same,managed,state,that,this,serializer,was,registered,to,the,returned,configuration,snapshot,can,be,used,to,ensure,compatibility,of,the,new,serializer,and,determine,if,state,migration,is,required,see,type,serializer,config,snapshot,return,snapshot,of,the,serializer,s,current,configuration,cannot,be,code,null;public,abstract,type,serializer,config,snapshot,snapshot,configuration
TypeSerializer -> public abstract T copy(T from, T reuse)_;1405024514;Creates a copy from the given element, storing the copied result in the given reuse element if type is mutable.__@param from The element reuse be copied._@param reuse The element to be reused.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,storing,the,copied,result,in,the,given,reuse,element,if,type,is,mutable,param,from,the,element,reuse,be,copied,param,reuse,the,element,to,be,reused;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1405090423;Creates a copy from the given element, storing the copied result in the given reuse element if type is mutable.__@param from The element reuse be copied._@param reuse The element to be reused.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,storing,the,copied,result,in,the,given,reuse,element,if,type,is,mutable,param,from,the,element,reuse,be,copied,param,reuse,the,element,to,be,reused;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1411473593;Creates a copy from the given element, storing the copied result in the given reuse element if type is mutable.__@param from The element reuse be copied._@param reuse The element to be reused.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,storing,the,copied,result,in,the,given,reuse,element,if,type,is,mutable,param,from,the,element,reuse,be,copied,param,reuse,the,element,to,be,reused;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1412082638;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1415027294;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1423484372;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1424271128;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1441738685;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1442481573;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1455479358;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1480022562;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1481734251;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1490330043;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1494180263;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1494186272;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1494658833;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1497328666;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1539149027;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1539149033;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1539149114;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1540907751;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract T copy(T from, T reuse)_;1550652777;Creates a copy from the given element._The method makes an attempt to store the copy in the given reuse element, if the type is mutable._This is, however, not guaranteed.__@param from The element to be copied._@param reuse The element to be reused. May or may not be used._@return A deep copy of the element.;public abstract T copy(T from, T reuse)_;creates,a,copy,from,the,given,element,the,method,makes,an,attempt,to,store,the,copy,in,the,given,reuse,element,if,the,type,is,mutable,this,is,however,not,guaranteed,param,from,the,element,to,be,copied,param,reuse,the,element,to,be,reused,may,or,may,not,be,used,return,a,deep,copy,of,the,element;public,abstract,t,copy,t,from,t,reuse
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1442481573;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1455479358;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1480022562;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1481734251;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1490330043;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1494180263;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1494186272;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1494658833;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1497328666;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1539149027;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1539149033;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1539149114;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeSerializer -> public abstract boolean canEqual(Object obj)_;1540907751;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
