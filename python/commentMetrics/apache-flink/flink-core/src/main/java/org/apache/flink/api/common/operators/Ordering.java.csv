# id;timestamp;commentText;codeText;commentWords;codeWords
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1405024514;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1405090423;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1411473593;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1422405540;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1422405541;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1426583408;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1455479358;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1457441341;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1475688973;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering createNewOrderingUpToIndex(int exclusiveIndex);1475788128;Creates a new ordering the represents an ordering on a prefix of the fields. If the_exclusive index up to which to create the ordering is <code>0</code>, then there is_no resulting ordering and this method return <code>null</code>.__@param exclusiveIndex The index (exclusive) up to which to create the ordering._@return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.;public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {_		if (exclusiveIndex == 0) {_			return null__		}_		final Ordering newOrdering = new Ordering()__		for (int i = 0_ i < exclusiveIndex_ i++) {_			newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i))__		}_		return newOrdering__	};creates,a,new,ordering,the,represents,an,ordering,on,a,prefix,of,the,fields,if,the,exclusive,index,up,to,which,to,create,the,ordering,is,code,0,code,then,there,is,no,resulting,ordering,and,this,method,return,code,null,code,param,exclusive,index,the,index,exclusive,up,to,which,to,create,the,ordering,return,the,new,ordering,on,the,prefix,of,the,fields,or,code,null,code,if,the,prefix,is,empty;public,ordering,create,new,ordering,up,to,index,int,exclusive,index,if,exclusive,index,0,return,null,final,ordering,new,ordering,new,ordering,for,int,i,0,i,exclusive,index,i,new,ordering,append,ordering,this,indexes,get,i,this,types,get,i,this,orders,get,i,return,new,ordering
Ordering -> public Ordering(int index, Class<? extends Comparable<?>> type, Order order);1457441341;@param index_@param type_@param order;public Ordering(int index, Class<? extends Comparable<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,comparable,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Comparable<?>> type, Order order);1475688973;@param index_@param type_@param order;public Ordering(int index, Class<? extends Comparable<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,comparable,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Comparable<?>> type, Order order);1475788128;@param index_@param type_@param order;public Ordering(int index, Class<? extends Comparable<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,comparable,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering();1405024514;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1405090423;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1411473593;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1422405540;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1422405541;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1426583408;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1455479358;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1457441341;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1475688973;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering();1475788128;Creates an empty ordering.;public Ordering() {};creates,an,empty,ordering;public,ordering
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1405024514;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1405090423;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1411473593;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1422405540;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1422405541;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1426583408;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering(int index, Class<? extends Key<?>> type, Order order);1455479358;@param index_@param type_@param order;public Ordering(int index, Class<? extends Key<?>> type, Order order) {_		appendOrdering(index, type, order)__	};param,index,param,type,param,order;public,ordering,int,index,class,extends,key,type,order,order,append,ordering,index,type,order
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1405024514;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1405090423;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1411473593;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1422405540;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1422405541;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1426583408;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order);1455479358;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Key<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,key,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order);1457441341;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,comparable,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order);1475688973;Extends this ordering by appending an additional order requirement.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order) {_		if (index.intValue() < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}_		_		this.indexes = this.indexes.addField(index)__		this.types.add(type)__		this.orders.add(order)__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,comparable,type,order,order,if,index,int,value,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
Ordering -> public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order);1475788128;Extends this ordering by appending an additional order requirement._If the index has been previously appended then the unmodified Ordering_is returned.__@param index Field index of the appended order requirement._@param type Type of the appended order requirement._@param order Order of the appended order requirement.__@return This ordering with an additional appended order requirement.;public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order) {_		if (index < 0) {_			throw new IllegalArgumentException("The key index must not be negative.")__		}_		if (order == null) {_			throw new NullPointerException()__		}_		if (order == Order.NONE) {_			throw new IllegalArgumentException("An ordering must not be created with a NONE order.")__		}__		if (!this.indexes.contains(index)) {_			this.indexes = this.indexes.addField(index)__			this.types.add(type)__			this.orders.add(order)__		}__		return this__	};extends,this,ordering,by,appending,an,additional,order,requirement,if,the,index,has,been,previously,appended,then,the,unmodified,ordering,is,returned,param,index,field,index,of,the,appended,order,requirement,param,type,type,of,the,appended,order,requirement,param,order,order,of,the,appended,order,requirement,return,this,ordering,with,an,additional,appended,order,requirement;public,ordering,append,ordering,integer,index,class,extends,comparable,type,order,order,if,index,0,throw,new,illegal,argument,exception,the,key,index,must,not,be,negative,if,order,null,throw,new,null,pointer,exception,if,order,order,none,throw,new,illegal,argument,exception,an,ordering,must,not,be,created,with,a,none,order,if,this,indexes,contains,index,this,indexes,this,indexes,add,field,index,this,types,add,type,this,orders,add,order,return,this
