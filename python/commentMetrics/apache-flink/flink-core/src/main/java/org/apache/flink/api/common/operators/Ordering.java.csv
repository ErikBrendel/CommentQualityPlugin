commented;modifiers;parameterAmount;loc;comment;code
true;public;3;19;/**  * Extends this ordering by appending an additional order requirement.  * If the index has been previously appended then the unmodified Ordering  * is returned.  *  * @param index Field index of the appended order requirement.  * @param type Type of the appended order requirement.  * @param order Order of the appended order requirement.  *  * @return This ordering with an additional appended order requirement.  */ ;/**  * Extends this ordering by appending an additional order requirement.  * If the index has been previously appended then the unmodified Ordering  * is returned.  *  * @param index Field index of the appended order requirement.  * @param type Type of the appended order requirement.  * @param order Order of the appended order requirement.  *  * @return This ordering with an additional appended order requirement.  */ public Ordering appendOrdering(Integer index, Class<? extends Comparable<?>> type, Order order) {     if (index < 0) {         throw new IllegalArgumentException("The key index must not be negative.").     }     if (order == null) {         throw new NullPointerException().     }     if (order == Order.NONE) {         throw new IllegalArgumentException("An ordering must not be created with a NONE order.").     }     if (!this.indexes.contains(index)) {         this.indexes = this.indexes.addField(index).         this.types.add(type).         this.orders.add(order).     }     return this. }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public int getNumberOfFields() {     return this.indexes.size(). }
false;public;0;3;;public FieldList getInvolvedIndexes() {     return this.indexes. }
false;public;1;6;;public Integer getFieldNumber(int index) {     if (index < 0 || index >= this.indexes.size()) {         throw new IndexOutOfBoundsException(String.valueOf(index)).     }     return this.indexes.get(index). }
false;public;1;6;;public Class<? extends Comparable<?>> getType(int index) {     if (index < 0 || index >= this.types.size()) {         throw new IndexOutOfBoundsException(String.valueOf(index)).     }     return this.types.get(index). }
false;public;1;6;;public Order getOrder(int index) {     if (index < 0 || index >= this.types.size()) {         throw new IndexOutOfBoundsException(String.valueOf(index)).     }     return orders.get(index). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @SuppressWarnings("unchecked") public Class<? extends Comparable<?>>[] getTypes() {     return this.types.toArray(new Class[this.types.size()]). }
false;public;0;7;;public int[] getFieldPositions() {     final int[] ia = new int[this.indexes.size()].     for (int i = 0. i < ia.length. i++) {         ia[i] = this.indexes.get(i).     }     return ia. }
false;public;0;3;;public Order[] getFieldOrders() {     return this.orders.toArray(new Order[this.orders.size()]). }
false;public;0;7;;public boolean[] getFieldSortDirections() {     final boolean[] directions = new boolean[this.orders.size()].     for (int i = 0. i < directions.length. i++) {         directions[i] = this.orders.get(i) != Order.DESCENDING.     }     return directions. }
false;public;1;25;;// -------------------------------------------------------------------------------------------- public boolean isMetBy(Ordering otherOrdering) {     if (otherOrdering == null || this.indexes.size() > otherOrdering.indexes.size()) {         return false.     }     for (int i = 0. i < this.indexes.size(). i++) {         if (!this.indexes.get(i).equals(otherOrdering.indexes.get(i))) {             return false.         }         // if this one request no order, everything is good         if (this.orders.get(i) != Order.NONE) {             if (this.orders.get(i) == Order.ANY) {                 // if any order is requested, any not NONE order is good                 if (otherOrdering.orders.get(i) == Order.NONE) {                     return false.                 }             } else if (otherOrdering.orders.get(i) != this.orders.get(i)) {                 // the orders must be equal                 return false.             }         }     }     return true. }
false;public;2;14;;public boolean isOrderEqualOnFirstNFields(Ordering other, int n) {     if (n > getNumberOfFields() || n > other.getNumberOfFields()) {         throw new IndexOutOfBoundsException().     }     for (int i = 0. i < n. i++) {         final Order o = this.orders.get(i).         if (o == Order.NONE || o == Order.ANY || o != other.orders.get(i)) {             return false.         }     }     return true. }
true;public;1;10;/**  * Creates a new ordering the represents an ordering on a prefix of the fields. If the  * exclusive index up to which to create the ordering is <code>0</code>, then there is  * no resulting ordering and this method return <code>null</code>.  *  * @param exclusiveIndex The index (exclusive) up to which to create the ordering.  * @return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.  */ ;/**  * Creates a new ordering the represents an ordering on a prefix of the fields. If the  * exclusive index up to which to create the ordering is <code>0</code>, then there is  * no resulting ordering and this method return <code>null</code>.  *  * @param exclusiveIndex The index (exclusive) up to which to create the ordering.  * @return The new ordering on the prefix of the fields, or <code>null</code>, if the prefix is empty.  */ public Ordering createNewOrderingUpToIndex(int exclusiveIndex) {     if (exclusiveIndex == 0) {         return null.     }     final Ordering newOrdering = new Ordering().     for (int i = 0. i < exclusiveIndex. i++) {         newOrdering.appendOrdering(this.indexes.get(i), this.types.get(i), this.orders.get(i)).     }     return newOrdering. }
false;public;1;12;;public boolean groupsFields(FieldSet fields) {     if (fields.size() > this.indexes.size()) {         return false.     }     for (int i = 0. i < fields.size(). i++) {         if (!fields.contains(this.indexes.get(i))) {             return false.         }     }     return true. }
false;public;0;7;;// -------------------------------------------------------------------------------------------- public Ordering clone() {     Ordering newOrdering = new Ordering().     newOrdering.indexes = this.indexes.     newOrdering.types.addAll(this.types).     newOrdering.orders.addAll(this.orders).     return newOrdering. }
false;public;0;9;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((indexes == null) ? 0 : indexes.hashCode()).     result = prime * result + ((orders == null) ? 0 : orders.hashCode()).     result = prime * result + ((types == null) ? 0 : types.hashCode()).     return result. }
false;public;1;35;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Ordering other = (Ordering) obj.     if (indexes == null) {         if (other.indexes != null) {             return false.         }     } else if (!indexes.equals(other.indexes)) {         return false.     }     if (orders == null) {         if (other.orders != null) {             return false.         }     } else if (!orders.equals(other.orders)) {         return false.     }     if (types == null) {         if (other.types != null) {             return false.         }     } else if (!types.equals(other.types)) {         return false.     }     return true. }
false;public;0;17;;public String toString() {     final StringBuilder buf = new StringBuilder("[").     for (int i = 0. i < indexes.size(). i++) {         if (i != 0) {             buf.append(",").         }         buf.append(this.indexes.get(i)).         if (this.types.get(i) != null) {             buf.append(":").             buf.append(this.types.get(i).getName()).         }         buf.append(":").         buf.append(this.orders.get(i).getShortName()).     }     buf.append("]").     return buf.toString(). }
