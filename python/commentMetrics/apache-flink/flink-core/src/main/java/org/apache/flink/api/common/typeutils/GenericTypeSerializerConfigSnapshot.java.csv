commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void write(DataOutputView out) throws IOException {     super.write(out).     // write only the classname to avoid Java serialization     out.writeUTF(typeClass.getName()). }
false;public;1;12;;@SuppressWarnings("unchecked") @Override public void read(DataInputView in) throws IOException {     super.read(in).     String genericTypeClassname = in.readUTF().     try {         typeClass = (Class<T>) Class.forName(genericTypeClassname, true, getUserCodeClassLoader()).     } catch (ClassNotFoundException e) {         throw new IOException("Could not find the requested class " + genericTypeClassname + " in classpath.", e).     } }
false;public;0;3;;public Class<T> getTypeClass() {     return typeClass. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null) {         return false.     }     return (obj.getClass().equals(getClass())) && typeClass.equals(((GenericTypeSerializerConfigSnapshot) obj).getTypeClass()). }
false;public;0;4;;@Override public int hashCode() {     return typeClass.hashCode(). }
