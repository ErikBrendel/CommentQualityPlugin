# id;timestamp;commentText;codeText;commentWords;codeWords
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405024514;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405090423;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405529390;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1409911022;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411236168;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411473593;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1415027086;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1418925508;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1418925510;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1422268176;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1439469746;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1446112342;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1405024514;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1405090423;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1405529390;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1409911022;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1411236168;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1411473593;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1415027086;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1418925508;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1418925510;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1422268176;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1439469746;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target);1446112342;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureFileFormat(FileDataSinkBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,file,format,file,data,sink,base,target,return,new,config,builder,target,get,parameters
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1405024514;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1405090423;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1405529390;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1409911022;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1411236168;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1411473593;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1415027086;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1418925508;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1418925510;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1422268176;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1439469746;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration targetConfig);1446112342;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration targetConfig) {_			this.config = targetConfig__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,target,config,this,config,target,config
FileOutputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1469630409;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(_				ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY,_				ConfigConstants.DEFAULT_FILESYSTEM_OVERWRITE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(_			ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY,_			ConfigConstants.DEFAULT_FILESYSTEM_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,config,constants,config,constants,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,config,constants,config,constants,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1481644337;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(_				ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY,_				ConfigConstants.DEFAULT_FILESYSTEM_OVERWRITE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(_			ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY,_			ConfigConstants.DEFAULT_FILESYSTEM_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,config,constants,config,constants,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,config,constants,config,constants,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1487548884;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(_				ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY,_				ConfigConstants.DEFAULT_FILESYSTEM_OVERWRITE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(_			ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY,_			ConfigConstants.DEFAULT_FILESYSTEM_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,config,constants,config,constants,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,config,constants,config,constants,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> private static void initDefaultsFromConfiguration(Configuration configuration);1518605788;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;private static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(CoreOptions.FILESYTEM_DEFAULT_OVERRIDE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(CoreOptions.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;private,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,core,options,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,core,options,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> public static void initDefaultsFromConfiguration(Configuration configuration);1519121818;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution, see LocalFlinkMiniCluster._@param configuration The configuration to load defaults from;public static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(CoreOptions.FILESYTEM_DEFAULT_OVERRIDE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(CoreOptions.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,see,local,flink,mini,cluster,param,configuration,the,configuration,to,load,defaults,from;public,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,core,options,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,core,options,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> public static void initDefaultsFromConfiguration(Configuration configuration);1550483152;Initialize defaults for output format. Needs to be a static method because it is configured for local_cluster execution._@param configuration The configuration to load defaults from;public static void initDefaultsFromConfiguration(Configuration configuration) {_		final boolean overwrite = configuration.getBoolean(CoreOptions.FILESYTEM_DEFAULT_OVERRIDE)__	_		DEFAULT_WRITE_MODE = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE__		_		final boolean alwaysCreateDirectory = configuration.getBoolean(CoreOptions.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY)__	_		DEFAULT_OUTPUT_DIRECTORY_MODE = alwaysCreateDirectory ? OutputDirectoryMode.ALWAYS : OutputDirectoryMode.PARONLY__	};initialize,defaults,for,output,format,needs,to,be,a,static,method,because,it,is,configured,for,local,cluster,execution,param,configuration,the,configuration,to,load,defaults,from;public,static,void,init,defaults,from,configuration,configuration,configuration,final,boolean,overwrite,configuration,get,boolean,core,options,overwrite,write,mode,overwrite,write,mode,final,boolean,always,create,directory,configuration,get,boolean,core,options,always,create,directory,output,directory,mode,always,output,directory,mode,paronly
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1405024514;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1405090423;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1405529390;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1409911022;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1411236168;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1411473593;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1415027086;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1418925508;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1418925510;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1422268176;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1439469746;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1446112342;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1448901852;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1452178883;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1456237208;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1469630409;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1481644337;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1487548884;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1518605788;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1519121818;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
FileOutputFormat -> @Override 	public void initializeGlobal(int parallelism) throws IOException;1550483152;Initialization of the distributed file system if it is used.__@param parallelism The task parallelism.;@Override_	public void initializeGlobal(int parallelism) throws IOException {_		final Path path = getOutputFilePath()__		final FileSystem fs = path.getFileSystem()__		_		_		if (fs.isDistributedFS()) {_			_			final WriteMode writeMode = getWriteMode()__			final OutputDirectoryMode outDirMode = getOutputDirectoryMode()___			if (parallelism == 1 && outDirMode == OutputDirectoryMode.PARONLY) {_				_				_				if(!fs.initOutPathDistFS(path, writeMode, false)) {_					_					throw new IOException("Output path could not be initialized.")__				}__			} else {_				__				_				if(!fs.initOutPathDistFS(path, writeMode, true)) {_					throw new IOException("Output directory could not be created.")__				}_			}_		}_	};initialization,of,the,distributed,file,system,if,it,is,used,param,parallelism,the,task,parallelism;override,public,void,initialize,global,int,parallelism,throws,ioexception,final,path,path,get,output,file,path,final,file,system,fs,path,get,file,system,if,fs,is,distributed,fs,final,write,mode,write,mode,get,write,mode,final,output,directory,mode,out,dir,mode,get,output,directory,mode,if,parallelism,1,out,dir,mode,output,directory,mode,paronly,if,fs,init,out,path,dist,fs,path,write,mode,false,throw,new,ioexception,output,path,could,not,be,initialized,else,if,fs,init,out,path,dist,fs,path,write,mode,true,throw,new,ioexception,output,directory,could,not,be,created
