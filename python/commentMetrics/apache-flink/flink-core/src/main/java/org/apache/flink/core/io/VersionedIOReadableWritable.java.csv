commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(getVersion()). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     this.readVersion = in.readInt().     resolveVersionRead(readVersion). }
true;public;0;3;/**  * Returns the found serialization version. If this instance was not read from serialized bytes  * but simply instantiated, then the current version is returned.  *  * @return the read serialization version, or the current version if the instance was not read from bytes.  */ ;/**  * Returns the found serialization version. If this instance was not read from serialized bytes  * but simply instantiated, then the current version is returned.  *  * @return the read serialization version, or the current version if the instance was not read from bytes.  */ public int getReadVersion() {     return (readVersion == Integer.MIN_VALUE) ? getVersion() : readVersion. }
true;public;0;3;/**  * Returns the compatible version values.  *  * <p>By default, the base implementation recognizes only the current version (identified by {@link #getVersion()})  * as compatible. This method can be used as a hook and may be overridden to identify more compatible versions.  *  * @return an array of integers representing the compatible version values.  */ ;/**  * Returns the compatible version values.  *  * <p>By default, the base implementation recognizes only the current version (identified by {@link #getVersion()})  * as compatible. This method can be used as a hook and may be overridden to identify more compatible versions.  *  * @return an array of integers representing the compatible version values.  */ public int[] getCompatibleVersions() {     return new int[] { getVersion() }. }
false;private;1;12;;private void resolveVersionRead(int readVersion) throws VersionMismatchException {     int[] compatibleVersions = getCompatibleVersions().     for (int compatibleVersion : compatibleVersions) {         if (compatibleVersion == readVersion) {             return.         }     }     throw new VersionMismatchException("Incompatible version: found " + readVersion + ", compatible versions are " + Arrays.toString(compatibleVersions)). }
