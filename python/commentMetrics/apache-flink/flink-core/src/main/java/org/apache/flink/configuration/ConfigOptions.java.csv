commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Starts building a new {@link ConfigOption}.  *  * @param key The key for the config option.  * @return The builder for the config option with the given key.  */ ;/**  * Starts building a new {@link ConfigOption}.  *  * @param key The key for the config option.  * @return The builder for the config option with the given key.  */ public static OptionBuilder key(String key) {     checkNotNull(key).     return new OptionBuilder(key). }
true;public;1;4;/**  * Creates a ConfigOption with the given default value.  *  * <p>This method does not accept "null". For options with no default value, choose  * one of the {@code noDefaultValue} methods.  *  * @param value The default value for the config option  * @param <T> The type of the default value.  * @return The config option with the default value.  */ ;/**  * Creates a ConfigOption with the given default value.  *  * <p>This method does not accept "null". For options with no default value, choose  * one of the {@code noDefaultValue} methods.  *  * @param value The default value for the config option  * @param <T> The type of the default value.  * @return The config option with the default value.  */ public <T> ConfigOption<T> defaultValue(T value) {     checkNotNull(value).     return new ConfigOption<>(key, value). }
true;public;0;3;/**  * Creates a string-valued option with no default value.  * String-valued options are the only ones that can have no  * default value.  *  * @return The created ConfigOption.  */ ;/**  * Creates a string-valued option with no default value.  * String-valued options are the only ones that can have no  * default value.  *  * @return The created ConfigOption.  */ public ConfigOption<String> noDefaultValue() {     return new ConfigOption<>(key, null). }
