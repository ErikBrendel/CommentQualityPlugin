commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public Time createInstance() {     return new Time(0L). }
false;public;1;7;;@Override public Time copy(Time from) {     if (from == null) {         return null.     }     return new Time(from.getTime()). }
false;public;2;8;;@Override public Time copy(Time from, Time reuse) {     if (from == null) {         return null.     }     reuse.setTime(from.getTime()).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return 8. }
false;public;2;8;;@Override public void serialize(Time record, DataOutputView target) throws IOException {     if (record == null) {         target.writeLong(Long.MIN_VALUE).     } else {         target.writeLong(record.getTime()).     } }
false;public;1;9;;@Override public Time deserialize(DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     } else {         return new Time(v).     } }
false;public;2;9;;@Override public Time deserialize(Time reuse, DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     }     reuse.setTime(v).     return reuse. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeLong(source.readLong()). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<Time> snapshotConfiguration() {     return new SqlTimeSerializerSnapshot(). }
