commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// -------------------------------------------------------------------------------------------- public String getFunctionName() {     return functionName. }
false;public;0;3;;public InvalidTypesException getTypeException() {     return typeException. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public boolean isBasicType() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;0;4;;@Override public boolean isTupleType() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;0;4;;@Override public int getArity() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;0;4;;@Override public Class<InvalidTypesException> getTypeClass() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;0;4;;@Override public boolean isKeyType() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;1;4;;@Override public TypeSerializer<InvalidTypesException> createSerializer(ExecutionConfig executionConfig) {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "<" + functionName + ", " + typeException.getMessage() + ">". }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj instanceof MissingTypeInfo) {         MissingTypeInfo missingTypeInfo = (MissingTypeInfo) obj.         return missingTypeInfo.canEqual(this) && functionName.equals(missingTypeInfo.functionName) && typeException.equals(missingTypeInfo.typeException).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 31 * functionName.hashCode() + typeException.hashCode(). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof MissingTypeInfo. }
false;public;0;4;;@Override public int getTotalFields() {     throw new UnsupportedOperationException("The missing type information cannot be used as a type information."). }
