commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;10;/**  * Get job manager's heap memory. This method will check the new key  * {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY} and  * the old key {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.  *  * @param configuration the configuration object  * @return the memory size of job manager's heap memory.  */ ;/**  * Get job manager's heap memory. This method will check the new key  * {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY} and  * the old key {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.  *  * @param configuration the configuration object  * @return the memory size of job manager's heap memory.  */ public static MemorySize getJobManagerHeapMemory(Configuration configuration) {     if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY.key())) {         return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY)).     } else if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB.key())) {         return MemorySize.parse(configuration.getInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB) + "m").     } else {         // use default value         return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY)).     } }
true;public,static;1;10;/**  * Get task manager's heap memory. This method will check the new key  * {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY} and  * the old key {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.  *  * @param configuration the configuration object  * @return the memory size of task manager's heap memory.  */ ;/**  * Get task manager's heap memory. This method will check the new key  * {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY} and  * the old key {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.  *  * @param configuration the configuration object  * @return the memory size of task manager's heap memory.  */ public static MemorySize getTaskManagerHeapMemory(Configuration configuration) {     if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY.key())) {         return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY)).     } else if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB.key())) {         return MemorySize.parse(configuration.getInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB) + "m").     } else {         // use default value         return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY)).     } }
true;public,static;1;8;/**  * @return extracted {@link MetricOptions#SYSTEM_RESOURCE_METRICS_PROBING_INTERVAL} or {@code Optional.empty()} if  * {@link MetricOptions#SYSTEM_RESOURCE_METRICS} are disabled.  */ ;/**  * @return extracted {@link MetricOptions#SYSTEM_RESOURCE_METRICS_PROBING_INTERVAL} or {@code Optional.empty()} if  * {@link MetricOptions#SYSTEM_RESOURCE_METRICS} are disabled.  */ public static Optional<Time> getSystemResourceMetricsProbingInterval(Configuration configuration) {     if (!configuration.getBoolean(SYSTEM_RESOURCE_METRICS)) {         return Optional.empty().     } else {         return Optional.of(Time.milliseconds(configuration.getLong(SYSTEM_RESOURCE_METRICS_PROBING_INTERVAL))).     } }
true;public,static;1;4;/**  * Extracts the task manager directories for temporary files as defined by  * {@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.  *  * @param configuration configuration object  * @return array of configured directories (in order)  */ ;/**  * Extracts the task manager directories for temporary files as defined by  * {@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.  *  * @param configuration configuration object  * @return array of configured directories (in order)  */ @Nonnull public static String[] parseTempDirectories(Configuration configuration) {     return splitPaths(configuration.getString(CoreOptions.TMP_DIRS)). }
true;public,static;1;5;/**  * Extracts the local state directories  as defined by  * {@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.  *  * @param configuration configuration object  * @return array of configured directories (in order)  */ ;/**  * Extracts the local state directories  as defined by  * {@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.  *  * @param configuration configuration object  * @return array of configured directories (in order)  */ @Nonnull public static String[] parseLocalStateDirectories(Configuration configuration) {     String configValue = configuration.getString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, "").     return splitPaths(configValue). }
true;public,static;1;12;/**  * Creates a new {@link Configuration} from the given {@link Properties}.  *  * @param properties to convert into a {@link Configuration}  * @return {@link Configuration} which has been populated by the values of the given {@link Properties}  */ ;/**  * Creates a new {@link Configuration} from the given {@link Properties}.  *  * @param properties to convert into a {@link Configuration}  * @return {@link Configuration} which has been populated by the values of the given {@link Properties}  */ @Nonnull public static Configuration createConfiguration(Properties properties) {     final Configuration configuration = new Configuration().     final Set<String> propertyNames = properties.stringPropertyNames().     for (String propertyName : propertyNames) {         configuration.setString(propertyName, properties.getProperty(propertyName)).     }     return configuration. }
false;private,static;1;4;;@Nonnull private static String[] splitPaths(@Nonnull String separatedPaths) {     return separatedPaths.length() > 0 ? separatedPaths.split(",|" + File.pathSeparator) : EMPTY. }
