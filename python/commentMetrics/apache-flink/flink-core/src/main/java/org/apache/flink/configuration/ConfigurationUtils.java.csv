# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationUtils -> @Nonnull 	public static String[] parseTempDirectories(Configuration configuration);1519568061;Extracts the task manager directories for temporary files as defined by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseTempDirectories(Configuration configuration) {_		return splitPaths(configuration.getString(CoreOptions.TMP_DIRS))__	};extracts,the,task,manager,directories,for,temporary,files,as,defined,by,link,org,apache,flink,configuration,core,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,temp,directories,configuration,configuration,return,split,paths,configuration,get,string,core,options
ConfigurationUtils -> @Nonnull 	public static String[] parseTempDirectories(Configuration configuration);1531497714;Extracts the task manager directories for temporary files as defined by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseTempDirectories(Configuration configuration) {_		return splitPaths(configuration.getString(CoreOptions.TMP_DIRS))__	};extracts,the,task,manager,directories,for,temporary,files,as,defined,by,link,org,apache,flink,configuration,core,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,temp,directories,configuration,configuration,return,split,paths,configuration,get,string,core,options
ConfigurationUtils -> @Nonnull 	public static String[] parseTempDirectories(Configuration configuration);1531895624;Extracts the task manager directories for temporary files as defined by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseTempDirectories(Configuration configuration) {_		return splitPaths(configuration.getString(CoreOptions.TMP_DIRS))__	};extracts,the,task,manager,directories,for,temporary,files,as,defined,by,link,org,apache,flink,configuration,core,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,temp,directories,configuration,configuration,return,split,paths,configuration,get,string,core,options
ConfigurationUtils -> @Nonnull 	public static String[] parseTempDirectories(Configuration configuration);1533555608;Extracts the task manager directories for temporary files as defined by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseTempDirectories(Configuration configuration) {_		return splitPaths(configuration.getString(CoreOptions.TMP_DIRS))__	};extracts,the,task,manager,directories,for,temporary,files,as,defined,by,link,org,apache,flink,configuration,core,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,temp,directories,configuration,configuration,return,split,paths,configuration,get,string,core,options
ConfigurationUtils -> public static MemorySize getTaskManagerHeapMemory(Configuration configuration);1531895624;Get task manager's heap memory. This method will check the new key_{@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY} and_the old key {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.__@param configuration the configuration object_@return the memory size of task manager's heap memory.;public static MemorySize getTaskManagerHeapMemory(Configuration configuration) {_		if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY.key())) {_			return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY))__		} else if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB.key())) {_			return MemorySize.parse(configuration.getInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB) + "m")__		} else {_			_			return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY))__		}_	};get,task,manager,s,heap,memory,this,method,will,check,the,new,key,link,task,manager,options,and,the,old,key,link,task,manager,options,for,backwards,compatibility,param,configuration,the,configuration,object,return,the,memory,size,of,task,manager,s,heap,memory;public,static,memory,size,get,task,manager,heap,memory,configuration,configuration,if,configuration,contains,key,task,manager,options,key,return,memory,size,parse,configuration,get,string,task,manager,options,else,if,configuration,contains,key,task,manager,options,key,return,memory,size,parse,configuration,get,integer,task,manager,options,m,else,return,memory,size,parse,configuration,get,string,task,manager,options
ConfigurationUtils -> public static MemorySize getTaskManagerHeapMemory(Configuration configuration);1533555608;Get task manager's heap memory. This method will check the new key_{@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY} and_the old key {@link TaskManagerOptions#TASK_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.__@param configuration the configuration object_@return the memory size of task manager's heap memory.;public static MemorySize getTaskManagerHeapMemory(Configuration configuration) {_		if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY.key())) {_			return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY))__		} else if (configuration.containsKey(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB.key())) {_			return MemorySize.parse(configuration.getInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB) + "m")__		} else {_			_			return MemorySize.parse(configuration.getString(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY))__		}_	};get,task,manager,s,heap,memory,this,method,will,check,the,new,key,link,task,manager,options,and,the,old,key,link,task,manager,options,for,backwards,compatibility,param,configuration,the,configuration,object,return,the,memory,size,of,task,manager,s,heap,memory;public,static,memory,size,get,task,manager,heap,memory,configuration,configuration,if,configuration,contains,key,task,manager,options,key,return,memory,size,parse,configuration,get,string,task,manager,options,else,if,configuration,contains,key,task,manager,options,key,return,memory,size,parse,configuration,get,integer,task,manager,options,m,else,return,memory,size,parse,configuration,get,string,task,manager,options
ConfigurationUtils -> @Nonnull 	public static String[] parseLocalStateDirectories(Configuration configuration);1519568061;Extracts the local state directories  as defined by_{@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseLocalStateDirectories(Configuration configuration) {_		String configValue = configuration.getString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, "")__		return splitPaths(configValue)__	};extracts,the,local,state,directories,as,defined,by,link,checkpointing,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,local,state,directories,configuration,configuration,string,config,value,configuration,get,string,checkpointing,options,return,split,paths,config,value
ConfigurationUtils -> @Nonnull 	public static String[] parseLocalStateDirectories(Configuration configuration);1531497714;Extracts the local state directories  as defined by_{@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseLocalStateDirectories(Configuration configuration) {_		String configValue = configuration.getString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, "")__		return splitPaths(configValue)__	};extracts,the,local,state,directories,as,defined,by,link,checkpointing,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,local,state,directories,configuration,configuration,string,config,value,configuration,get,string,checkpointing,options,return,split,paths,config,value
ConfigurationUtils -> @Nonnull 	public static String[] parseLocalStateDirectories(Configuration configuration);1531895624;Extracts the local state directories  as defined by_{@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseLocalStateDirectories(Configuration configuration) {_		String configValue = configuration.getString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, "")__		return splitPaths(configValue)__	};extracts,the,local,state,directories,as,defined,by,link,checkpointing,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,local,state,directories,configuration,configuration,string,config,value,configuration,get,string,checkpointing,options,return,split,paths,config,value
ConfigurationUtils -> @Nonnull 	public static String[] parseLocalStateDirectories(Configuration configuration);1533555608;Extracts the local state directories  as defined by_{@link CheckpointingOptions#LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS}.__@param configuration configuration object_@return array of configured directories (in order);@Nonnull_	public static String[] parseLocalStateDirectories(Configuration configuration) {_		String configValue = configuration.getString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, "")__		return splitPaths(configValue)__	};extracts,the,local,state,directories,as,defined,by,link,checkpointing,options,param,configuration,configuration,object,return,array,of,configured,directories,in,order;nonnull,public,static,string,parse,local,state,directories,configuration,configuration,string,config,value,configuration,get,string,checkpointing,options,return,split,paths,config,value
ConfigurationUtils -> @Nonnull 	public static Configuration createConfiguration(Properties properties);1531497714;Creates a new {@link Configuration} from the given {@link Properties}.__@param properties to convert into a {@link Configuration}_@return {@link Configuration} which has been populated by the values of the given {@link Properties};@Nonnull_	public static Configuration createConfiguration(Properties properties) {_		final Configuration configuration = new Configuration()___		final Set<String> propertyNames = properties.stringPropertyNames()___		for (String propertyName : propertyNames) {_			configuration.setString(propertyName, properties.getProperty(propertyName))__		}__		return configuration__	};creates,a,new,link,configuration,from,the,given,link,properties,param,properties,to,convert,into,a,link,configuration,return,link,configuration,which,has,been,populated,by,the,values,of,the,given,link,properties;nonnull,public,static,configuration,create,configuration,properties,properties,final,configuration,configuration,new,configuration,final,set,string,property,names,properties,string,property,names,for,string,property,name,property,names,configuration,set,string,property,name,properties,get,property,property,name,return,configuration
ConfigurationUtils -> @Nonnull 	public static Configuration createConfiguration(Properties properties);1531895624;Creates a new {@link Configuration} from the given {@link Properties}.__@param properties to convert into a {@link Configuration}_@return {@link Configuration} which has been populated by the values of the given {@link Properties};@Nonnull_	public static Configuration createConfiguration(Properties properties) {_		final Configuration configuration = new Configuration()___		final Set<String> propertyNames = properties.stringPropertyNames()___		for (String propertyName : propertyNames) {_			configuration.setString(propertyName, properties.getProperty(propertyName))__		}__		return configuration__	};creates,a,new,link,configuration,from,the,given,link,properties,param,properties,to,convert,into,a,link,configuration,return,link,configuration,which,has,been,populated,by,the,values,of,the,given,link,properties;nonnull,public,static,configuration,create,configuration,properties,properties,final,configuration,configuration,new,configuration,final,set,string,property,names,properties,string,property,names,for,string,property,name,property,names,configuration,set,string,property,name,properties,get,property,property,name,return,configuration
ConfigurationUtils -> @Nonnull 	public static Configuration createConfiguration(Properties properties);1533555608;Creates a new {@link Configuration} from the given {@link Properties}.__@param properties to convert into a {@link Configuration}_@return {@link Configuration} which has been populated by the values of the given {@link Properties};@Nonnull_	public static Configuration createConfiguration(Properties properties) {_		final Configuration configuration = new Configuration()___		final Set<String> propertyNames = properties.stringPropertyNames()___		for (String propertyName : propertyNames) {_			configuration.setString(propertyName, properties.getProperty(propertyName))__		}__		return configuration__	};creates,a,new,link,configuration,from,the,given,link,properties,param,properties,to,convert,into,a,link,configuration,return,link,configuration,which,has,been,populated,by,the,values,of,the,given,link,properties;nonnull,public,static,configuration,create,configuration,properties,properties,final,configuration,configuration,new,configuration,final,set,string,property,names,properties,string,property,names,for,string,property,name,property,names,configuration,set,string,property,name,properties,get,property,property,name,return,configuration
ConfigurationUtils -> public static MemorySize getJobManagerHeapMemory(Configuration configuration);1531895624;Get job manager's heap memory. This method will check the new key_{@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY} and_the old key {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.__@param configuration the configuration object_@return the memory size of job manager's heap memory.;public static MemorySize getJobManagerHeapMemory(Configuration configuration) {_		if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY.key())) {_			return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY))__		} else if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB.key())) {_			return MemorySize.parse(configuration.getInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB) + "m")__		} else {_			_			return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY))__		}_	};get,job,manager,s,heap,memory,this,method,will,check,the,new,key,link,job,manager,options,and,the,old,key,link,job,manager,options,for,backwards,compatibility,param,configuration,the,configuration,object,return,the,memory,size,of,job,manager,s,heap,memory;public,static,memory,size,get,job,manager,heap,memory,configuration,configuration,if,configuration,contains,key,job,manager,options,key,return,memory,size,parse,configuration,get,string,job,manager,options,else,if,configuration,contains,key,job,manager,options,key,return,memory,size,parse,configuration,get,integer,job,manager,options,m,else,return,memory,size,parse,configuration,get,string,job,manager,options
ConfigurationUtils -> public static MemorySize getJobManagerHeapMemory(Configuration configuration);1533555608;Get job manager's heap memory. This method will check the new key_{@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY} and_the old key {@link JobManagerOptions#JOB_MANAGER_HEAP_MEMORY_MB} for backwards compatibility.__@param configuration the configuration object_@return the memory size of job manager's heap memory.;public static MemorySize getJobManagerHeapMemory(Configuration configuration) {_		if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY.key())) {_			return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY))__		} else if (configuration.containsKey(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB.key())) {_			return MemorySize.parse(configuration.getInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB) + "m")__		} else {_			_			return MemorySize.parse(configuration.getString(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY))__		}_	};get,job,manager,s,heap,memory,this,method,will,check,the,new,key,link,job,manager,options,and,the,old,key,link,job,manager,options,for,backwards,compatibility,param,configuration,the,configuration,object,return,the,memory,size,of,job,manager,s,heap,memory;public,static,memory,size,get,job,manager,heap,memory,configuration,configuration,if,configuration,contains,key,job,manager,options,key,return,memory,size,parse,configuration,get,string,job,manager,options,else,if,configuration,contains,key,job,manager,options,key,return,memory,size,parse,configuration,get,integer,job,manager,options,m,else,return,memory,size,parse,configuration,get,string,job,manager,options
