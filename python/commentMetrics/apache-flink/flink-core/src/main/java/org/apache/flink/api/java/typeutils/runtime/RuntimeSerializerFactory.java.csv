commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void writeParametersToConfig(Configuration config) {     try {         InstantiationUtil.writeObjectToConfig(clazz, config, CONFIG_KEY_CLASS).         InstantiationUtil.writeObjectToConfig(serializer, config, CONFIG_KEY_SER).     } catch (Exception e) {         throw new RuntimeException("Could not serialize serializer into the configuration.", e).     } }
false;public;2;19;;@SuppressWarnings("unchecked") @Override public void readParametersFromConfig(Configuration config, ClassLoader cl) throws ClassNotFoundException {     if (config == null || cl == null) {         throw new NullPointerException().     }     try {         this.clazz = (Class<T>) InstantiationUtil.readObjectFromConfig(config, CONFIG_KEY_CLASS, cl).         this.serializer = (TypeSerializer<T>) InstantiationUtil.readObjectFromConfig(config, CONFIG_KEY_SER, cl).         firstSerializer = true.     } catch (ClassNotFoundException e) {         throw e.     } catch (Exception e) {         throw new RuntimeException("Could not load deserializer from the configuration.", e).     } }
false;public;0;13;;@Override public TypeSerializer<T> getSerializer() {     if (this.serializer != null) {         if (firstSerializer) {             firstSerializer = false.             return this.serializer.         } else {             return this.serializer.duplicate().         }     } else {         throw new RuntimeException("SerializerFactory has not been initialized from configuration.").     } }
false;public;0;4;;@Override public Class<T> getDataType() {     return clazz. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return clazz.hashCode() ^ serializer.hashCode(). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj instanceof RuntimeSerializerFactory) {         RuntimeSerializerFactory<?> other = (RuntimeSerializerFactory<?>) obj.         return this.clazz == other.clazz && this.serializer.equals(other.serializer).     } else {         return false.     } }
