# id;timestamp;commentText;codeText;commentWords;codeWords
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1428663519;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1431464429;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1437575568;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1440758046;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1440782435;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1442492511;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1455479358;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1468944004;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes(Object name, 												Class<? extends Accumulator> first, 												Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1494598316;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(Object name,_												Class<? extends Accumulator> first,_												Class<? extends Accumulator> second)_			throws UnsupportedOperationException_	{_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes( 			Object name, 			Class<? extends Accumulator> first, 			Class<? extends Accumulator> second) throws UnsupportedOperationException;1516970986;Compare both classes and throw {@link UnsupportedOperationException} if_they differ.;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(_			Object name,_			Class<? extends Accumulator> first,_			Class<? extends Accumulator> second) throws UnsupportedOperationException {_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> @SuppressWarnings("rawtypes") 	public static void compareAccumulatorTypes( 			Object name, 			Class<? extends Accumulator> first, 			Class<? extends Accumulator> second) throws UnsupportedOperationException;1522049586;Compare both classes and throw {@link UnsupportedOperationException} if_they differ.;@SuppressWarnings("rawtypes")_	public static void compareAccumulatorTypes(_			Object name,_			Class<? extends Accumulator> first,_			Class<? extends Accumulator> second) throws UnsupportedOperationException {_		if (first == null || second == null) {_			throw new NullPointerException()__		}__		if (first != second) {_			if (!first.getName().equals(second.getName())) {_				throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first.getName() + " and " + second.getName())__			} else {_				_				throw new UnsupportedOperationException("The accumulator object '" + name_						+ "' was created with two different classes: " + first + " and " + second_						+ " Both have the same type (" + first.getName() + ") but different classloaders: "_						+ first.getClassLoader() + " and " + second.getClassLoader())__			}_		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;suppress,warnings,rawtypes,public,static,void,compare,accumulator,types,object,name,class,extends,accumulator,first,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,null,second,null,throw,new,null,pointer,exception,if,first,second,if,first,get,name,equals,second,get,name,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,get,name,and,second,get,name,else,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,classes,first,and,second,both,have,the,same,type,first,get,name,but,different,classloaders,first,get,class,loader,and,second,get,class,loader
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1440782435;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1442492511;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1455479358;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1468944004;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1494598316;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static Map<String, Object> deserializeAccumulators( 			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader) 			throws IOException, ClassNotFoundException;1516970986;Takes the serialized accumulator results and tries to deserialize them using the provided_class loader._@param serializedAccumulators The serialized accumulator results._@param loader The class loader to use._@return The deserialized accumulator results._@throws IOException_@throws ClassNotFoundException;public static Map<String, Object> deserializeAccumulators(_			Map<String, SerializedValue<Object>> serializedAccumulators, ClassLoader loader)_			throws IOException, ClassNotFoundException {__		if (serializedAccumulators == null || serializedAccumulators.isEmpty()) {_			return Collections.emptyMap()__		}__		Map<String, Object> accumulators = new HashMap<>(serializedAccumulators.size())___		for (Map.Entry<String, SerializedValue<Object>> entry : serializedAccumulators.entrySet()) {__			Object value = null__			if (entry.getValue() != null) {_				value = entry.getValue().deserializeValue(loader)__			}__			accumulators.put(entry.getKey(), value)__		}__		return accumulators__	};takes,the,serialized,accumulator,results,and,tries,to,deserialize,them,using,the,provided,class,loader,param,serialized,accumulators,the,serialized,accumulator,results,param,loader,the,class,loader,to,use,return,the,deserialized,accumulator,results,throws,ioexception,throws,class,not,found,exception;public,static,map,string,object,deserialize,accumulators,map,string,serialized,value,object,serialized,accumulators,class,loader,loader,throws,ioexception,class,not,found,exception,if,serialized,accumulators,null,serialized,accumulators,is,empty,return,collections,empty,map,map,string,object,accumulators,new,hash,map,serialized,accumulators,size,for,map,entry,string,serialized,value,object,entry,serialized,accumulators,entry,set,object,value,null,if,entry,get,value,null,value,entry,get,value,deserialize,value,loader,accumulators,put,entry,get,key,value,return,accumulators
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1405024514;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1405090423;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1411473593;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1418925508;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1418925508;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1428663519;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			} else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1431464429;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1437575568;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1440758046;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1440782435;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1442492511;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1455479358;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1468944004;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1494598316;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge);1516970986;Merge two collections of accumulators. The second will be merged into the_first.__@param target_The collection of accumulators that will be updated_@param toMerge_The collection of accumulators that will be merged into the_other;public static void mergeInto(Map<String, Accumulator<?, ?>> target, Map<String, Accumulator<?, ?>> toMerge) {_		for (Map.Entry<String, Accumulator<?, ?>> otherEntry : toMerge.entrySet()) {_			Accumulator<?, ?> ownAccumulator = target.get(otherEntry.getKey())__			if (ownAccumulator == null) {_				_				target.put(otherEntry.getKey(), otherEntry.getValue().clone())__			}_			else {_				_				AccumulatorHelper.compareAccumulatorTypes(otherEntry.getKey(),_						ownAccumulator.getClass(), otherEntry.getValue().getClass())__				_				mergeSingle(ownAccumulator, otherEntry.getValue())__			}_		}_	};merge,two,collections,of,accumulators,the,second,will,be,merged,into,the,first,param,target,the,collection,of,accumulators,that,will,be,updated,param,to,merge,the,collection,of,accumulators,that,will,be,merged,into,the,other;public,static,void,merge,into,map,string,accumulator,target,map,string,accumulator,to,merge,for,map,entry,string,accumulator,other,entry,to,merge,entry,set,accumulator,own,accumulator,target,get,other,entry,get,key,if,own,accumulator,null,target,put,other,entry,get,key,other,entry,get,value,clone,else,accumulator,helper,compare,accumulator,types,other,entry,get,key,own,accumulator,get,class,other,entry,get,value,get,class,merge,single,own,accumulator,other,entry,get,value
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1418925508;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1428663519;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1431464429;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1437575568;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1440758046;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1440782435;Workaround method for type safety;private static final <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1442492511;Workaround method for type safety;private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1455479358;Workaround method for type safety;private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1468944004;Workaround method for type safety;private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1494598316;Workaround method for type safety;private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target, 															Accumulator<?, ?> toMerge);1516970986;Workaround method for type safety.;private static <V, R extends Serializable> void mergeSingle(Accumulator<?, ?> target,_															Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,v,r,extends,serializable,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1405024514;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1405090423;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1411473593;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1418925508;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1418925508;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1428663519;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1431464429;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1437575568;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1440758046;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1440782435;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), (Object) entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,object,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1442492511;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1455479358;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1468944004;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1494598316;Transform the Map with accumulators into a Map containing only the_results;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators);1516970986;Transform the Map with accumulators into a Map containing only the_results.;public static Map<String, Object> toResultMap(Map<String, Accumulator<?, ?>> accumulators) {_		Map<String, Object> resultMap = new HashMap<String, Object>()__		for (Map.Entry<String, Accumulator<?, ?>> entry : accumulators.entrySet()) {_			resultMap.put(entry.getKey(), entry.getValue().getLocalValue())__		}_		return resultMap__	};transform,the,map,with,accumulators,into,a,map,containing,only,the,results;public,static,map,string,object,to,result,map,map,string,accumulator,accumulators,map,string,object,result,map,new,hash,map,string,object,for,map,entry,string,accumulator,entry,accumulators,entry,set,result,map,put,entry,get,key,entry,get,value,get,local,value,return,result,map
AccumulatorHelper -> private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge);1405024514;Workaround method for type safety;private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge);1405090423;Workaround method for type safety;private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge);1411473593;Workaround method for type safety;private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge);1418925508;Workaround method for type safety;private static final <V, R> void mergeSingle(Accumulator<?, ?> target, Accumulator<?, ?> toMerge) {_		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedTarget = (Accumulator<V, R>) target___		@SuppressWarnings("unchecked")_		Accumulator<V, R> typedToMerge = (Accumulator<V, R>) toMerge___		typedTarget.merge(typedToMerge)__	};workaround,method,for,type,safety;private,static,final,v,r,void,merge,single,accumulator,target,accumulator,to,merge,suppress,warnings,unchecked,accumulator,v,r,typed,target,accumulator,v,r,target,suppress,warnings,unchecked,accumulator,v,r,typed,to,merge,accumulator,v,r,to,merge,typed,target,merge,typed,to,merge
AccumulatorHelper -> public static void compareAccumulatorTypes(Object name, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1405024514;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;public static void compareAccumulatorTypes(Object name,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second)_			throws UnsupportedOperationException {_		if (first != second) {_			throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first + " and " + second)__		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;public,static,void,compare,accumulator,types,object,name,suppress,warnings,rawtypes,class,extends,accumulator,first,suppress,warnings,rawtypes,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,second,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,and,second
AccumulatorHelper -> public static void compareAccumulatorTypes(Object name, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1405090423;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;public static void compareAccumulatorTypes(Object name,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second)_			throws UnsupportedOperationException {_		if (first != second) {_			throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first + " and " + second)__		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;public,static,void,compare,accumulator,types,object,name,suppress,warnings,rawtypes,class,extends,accumulator,first,suppress,warnings,rawtypes,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,second,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,and,second
AccumulatorHelper -> public static void compareAccumulatorTypes(Object name, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1411473593;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;public static void compareAccumulatorTypes(Object name,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second)_			throws UnsupportedOperationException {_		if (first != second) {_			throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first + " and " + second)__		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;public,static,void,compare,accumulator,types,object,name,suppress,warnings,rawtypes,class,extends,accumulator,first,suppress,warnings,rawtypes,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,second,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,and,second
AccumulatorHelper -> public static void compareAccumulatorTypes(Object name, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1418925508;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;public static void compareAccumulatorTypes(Object name,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second)_			throws UnsupportedOperationException {_		if (first != second) {_			throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first + " and " + second)__		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;public,static,void,compare,accumulator,types,object,name,suppress,warnings,rawtypes,class,extends,accumulator,first,suppress,warnings,rawtypes,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,second,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,and,second
AccumulatorHelper -> public static void compareAccumulatorTypes(Object name, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first, 			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second) 			throws UnsupportedOperationException;1418925508;Compare both classes and throw {@link UnsupportedOperationException} if_they differ;public static void compareAccumulatorTypes(Object name,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> first,_			@SuppressWarnings("rawtypes") Class<? extends Accumulator> second)_			throws UnsupportedOperationException {_		if (first != second) {_			throw new UnsupportedOperationException("The accumulator object '" + name_					+ "' was created with two different types: " + first + " and " + second)__		}_	};compare,both,classes,and,throw,link,unsupported,operation,exception,if,they,differ;public,static,void,compare,accumulator,types,object,name,suppress,warnings,rawtypes,class,extends,accumulator,first,suppress,warnings,rawtypes,class,extends,accumulator,second,throws,unsupported,operation,exception,if,first,second,throw,new,unsupported,operation,exception,the,accumulator,object,name,was,created,with,two,different,types,first,and,second
