commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ------------------------------------------------------------------------ @Override public int getCurrentVersion() {     return CURRENT_VERSION. }
false;public;1;5;;@Override public void writeSnapshot(DataOutputView out) throws IOException {     checkState(nestedSnapshot != null).     nestedSnapshot.writeNestedSerializerSnapshots(out). }
false;public;3;13;;@Override public void readSnapshot(int readVersion, DataInputView in, ClassLoader classLoader) throws IOException {     switch(readVersion) {         case 1:             readV1(in, classLoader).             break.         case 2:             readV2(in, classLoader).             break.         default:             throw new IllegalArgumentException("Unrecognized version: " + readVersion).     } }
false;private;2;3;;private void readV1(DataInputView in, ClassLoader classLoader) throws IOException {     nestedSnapshot = NestedSerializersSnapshotDelegate.legacyReadNestedSerializerSnapshots(in, classLoader). }
false;private;2;3;;private void readV2(DataInputView in, ClassLoader classLoader) throws IOException {     nestedSnapshot = NestedSerializersSnapshotDelegate.readNestedSerializerSnapshots(in, classLoader). }
false;public;0;7;;@Override public EitherSerializer<L, R> restoreSerializer() {     checkState(nestedSnapshot != null).     return new EitherSerializer<>(nestedSnapshot.getRestoredNestedSerializer(0), nestedSnapshot.getRestoredNestedSerializer(1)). }
false;public;1;16;;@Override public TypeSerializerSchemaCompatibility<Either<L, R>> resolveSchemaCompatibility(TypeSerializer<Either<L, R>> newSerializer) {     checkState(nestedSnapshot != null).     if (newSerializer instanceof EitherSerializer) {         // delegate compatibility check to the new snapshot class         return CompositeTypeSerializerUtil.delegateCompatibilityCheckToNewSnapshot(newSerializer, new JavaEitherSerializerSnapshot<>(), nestedSnapshot.getNestedSerializerSnapshots()).     } else {         return TypeSerializerSchemaCompatibility.incompatible().     } }
