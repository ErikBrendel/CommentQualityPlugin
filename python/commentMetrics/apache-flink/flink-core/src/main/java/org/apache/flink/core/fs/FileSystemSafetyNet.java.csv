commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;11;/**  * Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread  * that called this method will be guarded, meaning that their created streams are tracked and can  * be closed via the safety net closing hook.  *  * <p>This method should be called at the beginning of a thread that should be guarded.  *  * @throws IllegalStateException Thrown, if a safety net was already registered for the thread.  */ ;// ------------------------------------------------------------------------ // Activating / Deactivating // ------------------------------------------------------------------------ /**  * Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread  * that called this method will be guarded, meaning that their created streams are tracked and can  * be closed via the safety net closing hook.  *  * <p>This method should be called at the beginning of a thread that should be guarded.  *  * @throws IllegalStateException Thrown, if a safety net was already registered for the thread.  */ @Internal public static void initializeSafetyNetForThread() {     SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get().     checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " + "This may indicate an accidental repeated initialization, or a leak of the" + "(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry).     SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry().     REGISTRIES.set(newRegistry). }
true;public,static;0;8;/**  * Closes the safety net for a thread. This closes all remaining unclosed streams that were opened  * by safety-net-guarded file systems. After this method was called, no streams can be opened any more  * from any FileSystem instance that was obtained while the thread was guarded by the safety net.  *  * <p>This method should be called at the very end of a guarded thread.  */ ;/**  * Closes the safety net for a thread. This closes all remaining unclosed streams that were opened  * by safety-net-guarded file systems. After this method was called, no streams can be opened any more  * from any FileSystem instance that was obtained while the thread was guarded by the safety net.  *  * <p>This method should be called at the very end of a guarded thread.  */ @Internal public static void closeSafetyNetAndGuardedResourcesForThread() {     SafetyNetCloseableRegistry registry = REGISTRIES.get().     if (null != registry) {         REGISTRIES.remove().         IOUtils.closeQuietly(registry).     } }
true;public,static;0;5;/**  * Returns the active safety-net registry for the current thread.  * @deprecated This method should be removed after FLINK-6684 is implemented.  */ ;/**  * Returns the active safety-net registry for the current thread.  * @deprecated This method should be removed after FLINK-6684 is implemented.  */ @Deprecated @Internal public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread() {     return REGISTRIES.get(). }
true;public,static;1;4;/**  * Sets the active safety-net registry for the current thread.  */ ;/**  * Sets the active safety-net registry for the current thread.  */ @Internal public static void setSafetyNetCloseableRegistryForThread(SafetyNetCloseableRegistry registry) {     REGISTRIES.set(registry). }
false;static;1;4;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ static FileSystem wrapWithSafetyNetWhenActivated(FileSystem fs) {     SafetyNetCloseableRegistry reg = REGISTRIES.get().     return reg != null ? new SafetyNetWrapperFileSystem(fs, reg) : fs. }
