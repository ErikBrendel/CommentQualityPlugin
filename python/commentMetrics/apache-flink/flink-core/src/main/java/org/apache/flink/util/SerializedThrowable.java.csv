commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;public Throwable deserializeError(ClassLoader classloader) {     if (serializedException == null) {         // return this SerializedThrowable as a stand in         return this.     }     Throwable cached = cachedException == null ? null : cachedException.get().     if (cached == null) {         try {             cached = InstantiationUtil.deserializeObject(serializedException, classloader).             cachedException = new WeakReference<>(cached).         } catch (Throwable t) {             // return this SerializedThrowable as a stand in             return this.         }     }     return cached. }
false;public;0;3;;public String getOriginalErrorClassName() {     return originalErrorClassName. }
false;public;0;3;;public byte[] getSerializedException() {     return serializedException. }
false;public;0;3;;public String getFullStringifiedStackTrace() {     return fullStringifiedStackTrace. }
false;public;1;5;;// ------------------------------------------------------------------------ // Override the behavior of Throwable // ------------------------------------------------------------------------ @Override public void printStackTrace(PrintStream s) {     s.print(fullStringifiedStackTrace).     s.flush(). }
false;public;1;5;;@Override public void printStackTrace(PrintWriter s) {     s.print(fullStringifiedStackTrace).     s.flush(). }
false;public;0;5;;@Override public String toString() {     String message = getLocalizedMessage().     return (message != null) ? (originalErrorClassName + ": " + message) : originalErrorClassName. }
false;public,static;2;7;;// ------------------------------------------------------------------------ // Static utilities // ------------------------------------------------------------------------ public static Throwable get(Throwable serThrowable, ClassLoader loader) {     if (serThrowable instanceof SerializedThrowable) {         return ((SerializedThrowable) serThrowable).deserializeError(loader).     } else {         return serThrowable.     } }
false;private,static;1;8;;private static String getMessageOrError(Throwable error) {     try {         return error.getMessage().     } catch (Throwable t) {         return "(failed to get message)".     } }
