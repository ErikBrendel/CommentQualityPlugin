commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TypeSerializer<BT> getBuildSerializer() {     return buildSerializer. }
false;public;0;3;;public TypeComparator<BT> getBuildComparator() {     return buildComparator. }
false;public;2;3;;public <PT> Prober<PT> createProber(TypeComparator<PT> probeComparator, TypePairComparator<PT, BT> pairComparator) {     return new Prober<PT>(probeComparator, pairComparator). }
false;public;1;16;;@SuppressWarnings("unchecked") public void insertOrReplace(BT record) {     int hashCode = hash(buildComparator.hash(record)).     int index = hashIndex(hashCode, data.length).     buildComparator.setReference(record).     HashEntry entry = data[index].     while (entry != null) {         if (entryHashCode(entry) == hashCode && buildComparator.equalToReference((BT) entry.getValue())) {             entry.setValue(record).             return.         }         entry = entryNext(entry).     }     addMapping(index, hashCode, null, record). }
false;public;1;14;;@SuppressWarnings("unchecked") public BT lookupMatch(PT record) {     int hashCode = hash(probeComparator.hash(record)).     int index = hashIndex(hashCode, data.length).     pairComparator.setReference(record).     HashEntry entry = data[index].     while (entry != null) {         if (entryHashCode(entry) == hashCode && pairComparator.equalToReference((BT) entry.getValue())) {             return (BT) entry.getValue().         }         entry = entryNext(entry).     }     return null. }
