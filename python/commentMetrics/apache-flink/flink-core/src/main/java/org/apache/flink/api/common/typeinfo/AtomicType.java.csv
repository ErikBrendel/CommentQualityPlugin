commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Creates a comparator for this type.  *  * @param sortOrderAscending True, if the comparator should define the order to be ascending,  *                           false, if the comparator should define the order to be descending.  * @param executionConfig The config from which the comparator will be parametrized. Parametrization  *                        includes for example registration of class tags for frameworks like Kryo.  * @return A comparator for this type.  */ ;/**  * Creates a comparator for this type.  *  * @param sortOrderAscending True, if the comparator should define the order to be ascending,  *                           false, if the comparator should define the order to be descending.  * @param executionConfig The config from which the comparator will be parametrized. Parametrization  *                        includes for example registration of class tags for frameworks like Kryo.  * @return A comparator for this type.  */ TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig).
