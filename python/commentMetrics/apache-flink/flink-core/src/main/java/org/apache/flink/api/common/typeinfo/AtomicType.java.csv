# id;timestamp;commentText;codeText;commentWords;codeWords
AtomicType -> TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;1424115592;Creates a comparator for this type.__@param sortOrderAscending True, if the comparator should define the order to be ascending,_false, if the comparator should define the order to be descending._@param executionConfig The config from which the comparator will be parameterized. Parameterization_includes for example registration of class tags for frameworks like Kryo._@return A comparator for this type.;TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;creates,a,comparator,for,this,type,param,sort,order,ascending,true,if,the,comparator,should,define,the,order,to,be,ascending,false,if,the,comparator,should,define,the,order,to,be,descending,param,execution,config,the,config,from,which,the,comparator,will,be,parameterized,parameterization,includes,for,example,registration,of,class,tags,for,frameworks,like,kryo,return,a,comparator,for,this,type;type,comparator,t,create,comparator,boolean,sort,order,ascending,execution,config,execution,config
AtomicType -> TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;1454679829;Creates a comparator for this type.__@param sortOrderAscending True, if the comparator should define the order to be ascending,_false, if the comparator should define the order to be descending._@param executionConfig The config from which the comparator will be parameterized. Parameterization_includes for example registration of class tags for frameworks like Kryo._@return A comparator for this type.;TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;creates,a,comparator,for,this,type,param,sort,order,ascending,true,if,the,comparator,should,define,the,order,to,be,ascending,false,if,the,comparator,should,define,the,order,to,be,descending,param,execution,config,the,config,from,which,the,comparator,will,be,parameterized,parameterization,includes,for,example,registration,of,class,tags,for,frameworks,like,kryo,return,a,comparator,for,this,type;type,comparator,t,create,comparator,boolean,sort,order,ascending,execution,config,execution,config
AtomicType -> TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;1524407314;Creates a comparator for this type.__@param sortOrderAscending True, if the comparator should define the order to be ascending,_false, if the comparator should define the order to be descending._@param executionConfig The config from which the comparator will be parametrized. Parametrization_includes for example registration of class tags for frameworks like Kryo._@return A comparator for this type.;TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)_;creates,a,comparator,for,this,type,param,sort,order,ascending,true,if,the,comparator,should,define,the,order,to,be,ascending,false,if,the,comparator,should,define,the,order,to,be,descending,param,execution,config,the,config,from,which,the,comparator,will,be,parametrized,parametrization,includes,for,example,registration,of,class,tags,for,frameworks,like,kryo,return,a,comparator,for,this,type;type,comparator,t,create,comparator,boolean,sort,order,ascending,execution,config,execution,config
