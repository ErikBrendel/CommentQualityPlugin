commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return true. }
false;public;0;4;;@Override public BigDecimal createInstance() {     return BigDecimal.ZERO. }
false;public;1;4;;@Override public BigDecimal copy(BigDecimal from) {     return from. }
false;public;2;4;;@Override public BigDecimal copy(BigDecimal from, BigDecimal reuse) {     return from. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;28;;@Override public void serialize(BigDecimal record, DataOutputView target) throws IOException {     // null value support     if (record == null) {         BigIntSerializer.writeBigInteger(null, target).         return.     } else // only reference equality is checked because equals would be too expensive     if (record == BigDecimal.ZERO) {         BigIntSerializer.writeBigInteger(BigInteger.ZERO, target).         target.writeInt(0).         return.     } else if (record == BigDecimal.ONE) {         BigIntSerializer.writeBigInteger(BigInteger.ONE, target).         target.writeInt(0).         return.     } else if (record == BigDecimal.TEN) {         BigIntSerializer.writeBigInteger(BigInteger.TEN, target).         target.writeInt(0).         return.     }     // default     BigIntSerializer.writeBigInteger(record.unscaledValue(), target).     target.writeInt(record.scale()). }
false;public;1;4;;@Override public BigDecimal deserialize(DataInputView source) throws IOException {     return readBigDecimal(source). }
false;public;2;4;;@Override public BigDecimal deserialize(BigDecimal reuse, DataInputView source) throws IOException {     return readBigDecimal(source). }
false;public;2;8;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final boolean isNull = BigIntSerializer.copyBigInteger(source, target).     if (!isNull) {         final int scale = source.readInt().         target.writeInt(scale).     } }
false;public,static;1;21;;// -------------------------------------------------------------------------------------------- // Static Helpers for BigInteger Serialization // -------------------------------------------------------------------------------------------- public static BigDecimal readBigDecimal(DataInputView source) throws IOException {     final BigInteger unscaledValue = BigIntSerializer.readBigInteger(source).     if (unscaledValue == null) {         return null.     }     final int scale = source.readInt().     // fast-path for 0, 1, 10     if (scale == 0) {         if (unscaledValue == BigInteger.ZERO) {             return BigDecimal.ZERO.         } else if (unscaledValue == BigInteger.ONE) {             return BigDecimal.ONE.         } else if (unscaledValue == BigInteger.TEN) {             return BigDecimal.TEN.         }     }     // default     return new BigDecimal(unscaledValue, scale). }
false;public;0;4;;@Override public TypeSerializerSnapshot<BigDecimal> snapshotConfiguration() {     return new BigDecSerializerSnapshot(). }
