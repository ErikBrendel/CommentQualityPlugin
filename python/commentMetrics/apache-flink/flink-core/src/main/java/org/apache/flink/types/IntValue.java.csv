commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value of the encapsulated int.  *  * @return the value of the encapsulated int.  */ ;/**  * Returns the value of the encapsulated int.  *  * @return the value of the encapsulated int.  */ public int getValue() {     return this.value. }
true;public;1;3;/**  * Sets the encapsulated int to the specified value.  *  * @param value  *        the new value of the encapsulated int.  */ ;/**  * Sets the encapsulated int to the specified value.  *  * @param value  *        the new value of the encapsulated int.  */ public void setValue(int value) {     this.value = value. }
false;public;1;4;;@Override public void setValue(IntValue value) {     this.value = value.value. }
false;public;0;4;;@Override public String toString() {     return String.valueOf(this.value). }
false;public;1;4;;// -------------------------------------------------------------------------------------------- @Override public void read(DataInputView in) throws IOException {     this.value = in.readInt(). }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(this.value). }
false;public;1;5;;// -------------------------------------------------------------------------------------------- @Override public int compareTo(IntValue o) {     final int other = o.value.     return this.value < other ? -1 : this.value > other ? 1 : 0. }
false;public;0;4;;@Override public int hashCode() {     return this.value. }
false;public;1;7;;@Override public boolean equals(final Object obj) {     if (obj instanceof IntValue) {         return ((IntValue) obj).value == this.value.     }     return false. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getMaxNormalizedKeyLen() {     return 4. }
false;public;3;24;;@Override public void copyNormalizedKey(MemorySegment target, int offset, int len) {     // most significant byte comes first.     if (len == 4) {         target.putIntBigEndian(offset, value - Integer.MIN_VALUE).     } else if (len <= 0) {     } else if (len < 4) {         int value = this.value - Integer.MIN_VALUE.         for (int i = 0. len > 0. len--, i++) {             target.put(offset + i, (byte) ((value >>> ((3 - i) << 3)) & 0xff)).         }     } else {         target.putIntBigEndian(offset, value - Integer.MIN_VALUE).         for (int i = 4. i < len. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int getBinaryLength() {     return 4. }
false;public;1;4;;@Override public void copyTo(IntValue target) {     target.value = this.value. }
false;public;0;4;;@Override public IntValue copy() {     return new IntValue(this.value). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, 4). }
