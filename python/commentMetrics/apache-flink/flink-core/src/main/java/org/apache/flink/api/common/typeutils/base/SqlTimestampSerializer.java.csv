commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public Timestamp createInstance() {     return new Timestamp(0L). }
false;public;1;9;;@Override public Timestamp copy(Timestamp from) {     if (from == null) {         return null.     }     final Timestamp t = new Timestamp(from.getTime()).     t.setNanos(from.getNanos()).     return t. }
false;public;2;9;;@Override public Timestamp copy(Timestamp from, Timestamp reuse) {     if (from == null) {         return null.     }     reuse.setTime(from.getTime()).     reuse.setNanos(from.getNanos()).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return 12. }
false;public;2;10;;@Override public void serialize(Timestamp record, DataOutputView target) throws IOException {     if (record == null) {         target.writeLong(Long.MIN_VALUE).         target.writeInt(0).     } else {         target.writeLong(record.getTime()).         target.writeInt(record.getNanos()).     } }
false;public;1;11;;@Override public Timestamp deserialize(DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     } else {         final Timestamp t = new Timestamp(v).         t.setNanos(source.readInt()).         return t.     } }
false;public;2;10;;@Override public Timestamp deserialize(Timestamp reuse, DataInputView source) throws IOException {     final long v = source.readLong().     if (v == Long.MIN_VALUE) {         return null.     }     reuse.setTime(v).     reuse.setNanos(source.readInt()).     return reuse. }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeLong(source.readLong()).     target.writeInt(source.readInt()). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Timestamp> snapshotConfiguration() {     return new SqlTimestampSerializerSnapshot(). }
