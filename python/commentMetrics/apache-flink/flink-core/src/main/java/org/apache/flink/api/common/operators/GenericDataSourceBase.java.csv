commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the class describing the input format.  *  * @return The class describing the input format.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the class describing the input format.  *  * @return The class describing the input format.  */ public UserCodeWrapper<? extends T> getFormatWrapper() {     return this.formatWrapper. }
true;public;0;4;/**  * Gets the class describing the input format.  * <p>  * This method is basically identical to {@link #getFormatWrapper()}.  *  * @return The class describing the input format.  *  * @see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper()  */ ;/**  * Gets the class describing the input format.  * <p>  * This method is basically identical to {@link #getFormatWrapper()}.  *  * @return The class describing the input format.  *  * @see org.apache.flink.api.common.operators.Operator#getUserCodeWrapper()  */ @Override public UserCodeWrapper<? extends T> getUserCodeWrapper() {     return this.formatWrapper. }
true;public;0;3;/**  * Gets the key under which statistics about this data source may be obtained from the  * statistics cache.  *  * @return The statistics cache key.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the key under which statistics about this data source may be obtained from the  * statistics cache.  *  * @return The statistics cache key.  */ public String getStatisticsKey() {     return this.statisticsKey. }
true;public;1;3;/**  * Sets the key under which statistics about this data source may be obtained from the  * statistics cache. Useful for testing purposes, when providing mock statistics.  *  * @param statisticsKey The key for the statistics object.  */ ;/**  * Sets the key under which statistics about this data source may be obtained from the  * statistics cache. Useful for testing purposes, when providing mock statistics.  *  * @param statisticsKey The key for the statistics object.  */ public void setStatisticsKey(String statisticsKey) {     this.statisticsKey = statisticsKey. }
true;public;1;3;/**  * Sets properties of input splits for this data source.  * Split properties can help to generate more efficient execution plans.  * <br>  * <b>  *     IMPORTANT: Providing wrong split data properties can cause wrong results!  * </b>  *  * @param splitDataProperties The data properties of this data source's splits.  */ ;/**  * Sets properties of input splits for this data source.  * Split properties can help to generate more efficient execution plans.  * <br>  * <b>  *     IMPORTANT: Providing wrong split data properties can cause wrong results!  * </b>  *  * @param splitDataProperties The data properties of this data source's splits.  */ public void setSplitDataProperties(SplitDataProperties<OUT> splitDataProperties) {     this.splitProperties = splitDataProperties. }
true;public;0;3;/**  * Returns the data properties of this data source's splits.  *  * @return The data properties of this data source's splits or null if no properties have been set.  */ ;/**  * Returns the data properties of this data source's splits.  *  * @return The data properties of this data source's splits or null if no properties have been set.  */ public SplitDataProperties<OUT> getSplitDataProperties() {     return this.splitProperties. }
true;public;1;6;/**  * Accepts the visitor and applies it this instance. Since the data sources have no inputs, no recursive descend  * happens. The visitors pre-visit method is called and, if returning <tt>true</tt>, the post-visit method is called.  *  * @param visitor The visitor.  *  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ ;// -------------------------------------------------------------------------------------------- /**  * Accepts the visitor and applies it this instance. Since the data sources have no inputs, no recursive descend  * happens. The visitors pre-visit method is called and, if returning <tt>true</tt>, the post-visit method is called.  *  * @param visitor The visitor.  *  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ @Override public void accept(Visitor<Operator<?>> visitor) {     if (visitor.preVisit(this)) {         visitor.postVisit(this).     } }
false;protected;2;38;;// -------------------------------------------------------------------------------------------- protected List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig) throws Exception {     @SuppressWarnings("unchecked")     InputFormat<OUT, InputSplit> inputFormat = (InputFormat<OUT, InputSplit>) this.formatWrapper.getUserCodeObject().     // configure the input format     inputFormat.configure(this.parameters).     // open the input format     if (inputFormat instanceof RichInputFormat) {         ((RichInputFormat) inputFormat).setRuntimeContext(ctx).         ((RichInputFormat) inputFormat).openInputFormat().     }     List<OUT> result = new ArrayList<OUT>().     // splits     InputSplit[] splits = inputFormat.createInputSplits(1).     TypeSerializer<OUT> serializer = getOperatorInfo().getOutputType().createSerializer(executionConfig).     for (InputSplit split : splits) {         inputFormat.open(split).         while (!inputFormat.reachedEnd()) {             OUT next = inputFormat.nextRecord(serializer.createInstance()).             if (next != null) {                 result.add(serializer.copy(next)).             }         }         inputFormat.close().     }     // close the input format     if (inputFormat instanceof RichInputFormat) {         ((RichInputFormat) inputFormat).closeInputFormat().     }     return result. }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public String toString() {     return this.name. }
false;public;0;1;;public int[] getSplitPartitionKeys().
false;public;0;1;;public Partitioner<T> getSplitPartitioner().
false;public;0;1;;public int[] getSplitGroupKeys().
false;public;0;1;;public Ordering getSplitOrder().
