# id;timestamp;commentText;codeText;commentWords;codeWords
MathUtils -> public static int roundUpToPowerOfTwo(int x);1472663401;Round the given number to the next power of two_@param x number to round_@return x rounded up to the next power of two;public static int roundUpToPowerOfTwo(int x) {_		x = x - 1__		x |= x >> 1__		x |= x >> 2__		x |= x >> 4__		x |= x >> 8__		x |= x >> 16__		return x + 1__	};round,the,given,number,to,the,next,power,of,two,param,x,number,to,round,return,x,rounded,up,to,the,next,power,of,two;public,static,int,round,up,to,power,of,two,int,x,x,x,1,x,x,1,x,x,2,x,x,4,x,x,8,x,x,16,return,x,1
MathUtils -> public static int roundUpToPowerOfTwo(int x);1474380620;Round the given number to the next power of two_@param x number to round_@return x rounded up to the next power of two;public static int roundUpToPowerOfTwo(int x) {_		x = x - 1__		x |= x >> 1__		x |= x >> 2__		x |= x >> 4__		x |= x >> 8__		x |= x >> 16__		return x + 1__	};round,the,given,number,to,the,next,power,of,two,param,x,number,to,round,return,x,rounded,up,to,the,next,power,of,two;public,static,int,round,up,to,power,of,two,int,x,x,x,1,x,x,1,x,x,2,x,x,4,x,x,8,x,x,16,return,x,1
MathUtils -> public static int roundUpToPowerOfTwo(int x);1489685642;Round the given number to the next power of two_@param x number to round_@return x rounded up to the next power of two;public static int roundUpToPowerOfTwo(int x) {_		x = x - 1__		x |= x >> 1__		x |= x >> 2__		x |= x >> 4__		x |= x >> 8__		x |= x >> 16__		return x + 1__	};round,the,given,number,to,the,next,power,of,two,param,x,number,to,round,return,x,rounded,up,to,the,next,power,of,two;public,static,int,round,up,to,power,of,two,int,x,x,x,1,x,x,1,x,x,2,x,x,4,x,x,8,x,x,16,return,x,1
MathUtils -> public static int roundUpToPowerOfTwo(int x);1516295284;Round the given number to the next power of two._@param x number to round_@return x rounded up to the next power of two;public static int roundUpToPowerOfTwo(int x) {_		x = x - 1__		x |= x >> 1__		x |= x >> 2__		x |= x >> 4__		x |= x >> 8__		x |= x >> 16__		return x + 1__	};round,the,given,number,to,the,next,power,of,two,param,x,number,to,round,return,x,rounded,up,to,the,next,power,of,two;public,static,int,round,up,to,power,of,two,int,x,x,x,1,x,x,1,x,x,2,x,x,4,x,x,8,x,x,16,return,x,1
MathUtils -> public static int roundUpToPowerOfTwo(int x);1530639128;Round the given number to the next power of two._@param x number to round_@return x rounded up to the next power of two;public static int roundUpToPowerOfTwo(int x) {_		x = x - 1__		x |= x >> 1__		x |= x >> 2__		x |= x >> 4__		x |= x >> 8__		x |= x >> 16__		return x + 1__	};round,the,given,number,to,the,next,power,of,two,param,x,number,to,round,return,x,rounded,up,to,the,next,power,of,two;public,static,int,round,up,to,power,of,two,int,x,x,x,1,x,x,1,x,x,2,x,x,4,x,x,8,x,x,16,return,x,1
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1460741894;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		_		int log = 0__		while ((value = value >>> 1) != 0) {_			log++__		}_		_		return log__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,int,log,0,while,value,value,1,0,log,return,log
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1465321874;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1468240246;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1468441547;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1470067338;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1472663401;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1474380620;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1489685642;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1516295284;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2floor(int value) throws ArithmeticException;1530639128;Computes the logarithm of the given value to the base of 2, rounded down. It corresponds to the_position of the highest non-zero bit. The position is counted, starting with 0 from the least_significant bit to the most significant bit. For example, <code>log2floor(16) = 4</code>, and_<code>log2floor(10) = 3</code>.__@param value The value to compute the logarithm for._@return The logarithm (rounded down) to the base of 2._@throws ArithmeticException Thrown, if the given value is zero.;public static int log2floor(int value) throws ArithmeticException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}__		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,rounded,down,it,corresponds,to,the,position,of,the,highest,non,zero,bit,the,position,is,counted,starting,with,0,from,the,least,significant,bit,to,the,most,significant,bit,for,example,code,log2floor,16,4,code,and,code,log2floor,10,3,code,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,rounded,down,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero;public,static,int,log2floor,int,value,throws,arithmetic,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int longToIntWithBitMixing(long in);1489685642;Pseudo-randomly maps a long (64-bit) to an integer (32-bit) using some bit-mixing for better distribution.__@param in the long (64-bit)input._@return the bit-mixed int (32-bit) output;public static int longToIntWithBitMixing(long in) {_		in = (in ^ (in >>> 30)) * 0xbf58476d1ce4e5b9L__		in = (in ^ (in >>> 27)) * 0x94d049bb133111ebL__		in = in ^ (in >>> 31)__		return (int) in__	};pseudo,randomly,maps,a,long,64,bit,to,an,integer,32,bit,using,some,bit,mixing,for,better,distribution,param,in,the,long,64,bit,input,return,the,bit,mixed,int,32,bit,output;public,static,int,long,to,int,with,bit,mixing,long,in,in,in,in,30,0xbf58476d1ce4e5b9l,in,in,in,27,0x94d049bb133111eb,l,in,in,in,31,return,int,in
MathUtils -> public static int longToIntWithBitMixing(long in);1516295284;Pseudo-randomly maps a long (64-bit) to an integer (32-bit) using some bit-mixing for better distribution.__@param in the long (64-bit)input._@return the bit-mixed int (32-bit) output;public static int longToIntWithBitMixing(long in) {_		in = (in ^ (in >>> 30)) * 0xbf58476d1ce4e5b9L__		in = (in ^ (in >>> 27)) * 0x94d049bb133111ebL__		in = in ^ (in >>> 31)__		return (int) in__	};pseudo,randomly,maps,a,long,64,bit,to,an,integer,32,bit,using,some,bit,mixing,for,better,distribution,param,in,the,long,64,bit,input,return,the,bit,mixed,int,32,bit,output;public,static,int,long,to,int,with,bit,mixing,long,in,in,in,in,30,0xbf58476d1ce4e5b9l,in,in,in,27,0x94d049bb133111eb,l,in,in,in,31,return,int,in
MathUtils -> public static int longToIntWithBitMixing(long in);1530639128;Pseudo-randomly maps a long (64-bit) to an integer (32-bit) using some bit-mixing for better distribution.__@param in the long (64-bit)input._@return the bit-mixed int (32-bit) output;public static int longToIntWithBitMixing(long in) {_		in = (in ^ (in >>> 30)) * 0xbf58476d1ce4e5b9L__		in = (in ^ (in >>> 27)) * 0x94d049bb133111ebL__		in = in ^ (in >>> 31)__		return (int) in__	};pseudo,randomly,maps,a,long,64,bit,to,an,integer,32,bit,using,some,bit,mixing,for,better,distribution,param,in,the,long,64,bit,input,return,the,bit,mixed,int,32,bit,output;public,static,int,long,to,int,with,bit,mixing,long,in,in,in,in,30,0xbf58476d1ce4e5b9l,in,in,in,27,0x94d049bb133111eb,l,in,in,in,31,return,int,in
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1460741894;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		_		int log = 0__		while ((value = value >>> 1) != 0) {_			log++__		}_		_		return log__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,int,log,0,while,value,value,1,0,log,return,log
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1465321874;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1468240246;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1468441547;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1470067338;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1472663401;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1474380620;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1489685642;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1516295284;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException;1530639128;Computes the logarithm of the given value to the base of 2. This method throws an error,_if the given argument is not a power of 2.__@param value The value to compute the logarithm for._@return The logarithm to the base of 2._@throws ArithmeticException Thrown, if the given value is zero._@throws IllegalArgumentException Thrown, if the given value is not a power of two.;public static int log2strict(int value) throws ArithmeticException, IllegalArgumentException {_		if (value == 0) {_			throw new ArithmeticException("Logarithm of zero is undefined.")__		}_		if ((value & (value - 1)) != 0) {_			throw new IllegalArgumentException("The given value " + value + " is not a power of two.")__		}_		return 31 - Integer.numberOfLeadingZeros(value)__	};computes,the,logarithm,of,the,given,value,to,the,base,of,2,this,method,throws,an,error,if,the,given,argument,is,not,a,power,of,2,param,value,the,value,to,compute,the,logarithm,for,return,the,logarithm,to,the,base,of,2,throws,arithmetic,exception,thrown,if,the,given,value,is,zero,throws,illegal,argument,exception,thrown,if,the,given,value,is,not,a,power,of,two;public,static,int,log2strict,int,value,throws,arithmetic,exception,illegal,argument,exception,if,value,0,throw,new,arithmetic,exception,logarithm,of,zero,is,undefined,if,value,value,1,0,throw,new,illegal,argument,exception,the,given,value,value,is,not,a,power,of,two,return,31,integer,number,of,leading,zeros,value
MathUtils -> public static int bitMix(int in);1489685642;Bit-mixing for pseudo-randomization of integers (e.g., to guard against bad hash functions). Implementation is_from Murmur's 32 bit finalizer.__@param in the input value_@return the bit-mixed output value;public static int bitMix(int in) {_		in ^= in >>> 16__		in *= 0x85ebca6b__		in ^= in >>> 13__		in *= 0xc2b2ae35__		in ^= in >>> 16__		return in__	};bit,mixing,for,pseudo,randomization,of,integers,e,g,to,guard,against,bad,hash,functions,implementation,is,from,murmur,s,32,bit,finalizer,param,in,the,input,value,return,the,bit,mixed,output,value;public,static,int,bit,mix,int,in,in,in,16,in,0x85ebca6b,in,in,13,in,0xc2b2ae35,in,in,16,return,in
MathUtils -> public static int bitMix(int in);1516295284;Bit-mixing for pseudo-randomization of integers (e.g., to guard against bad hash functions). Implementation is_from Murmur's 32 bit finalizer.__@param in the input value_@return the bit-mixed output value;public static int bitMix(int in) {_		in ^= in >>> 16__		in *= 0x85ebca6b__		in ^= in >>> 13__		in *= 0xc2b2ae35__		in ^= in >>> 16__		return in__	};bit,mixing,for,pseudo,randomization,of,integers,e,g,to,guard,against,bad,hash,functions,implementation,is,from,murmur,s,32,bit,finalizer,param,in,the,input,value,return,the,bit,mixed,output,value;public,static,int,bit,mix,int,in,in,in,16,in,0x85ebca6b,in,in,13,in,0xc2b2ae35,in,in,16,return,in
MathUtils -> public static int bitMix(int in);1530639128;Bit-mixing for pseudo-randomization of integers (e.g., to guard against bad hash functions). Implementation is_from Murmur's 32 bit finalizer.__@param in the input value_@return the bit-mixed output value;public static int bitMix(int in) {_		in ^= in >>> 16__		in *= 0x85ebca6b__		in ^= in >>> 13__		in *= 0xc2b2ae35__		in ^= in >>> 16__		return in__	};bit,mixing,for,pseudo,randomization,of,integers,e,g,to,guard,against,bad,hash,functions,implementation,is,from,murmur,s,32,bit,finalizer,param,in,the,input,value,return,the,bit,mixed,output,value;public,static,int,bit,mix,int,in,in,in,16,in,0x85ebca6b,in,in,13,in,0xc2b2ae35,in,in,16,return,in
MathUtils -> private MathUtils();1460741894;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1465321874;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1468240246;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1468441547;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1470067338;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1472663401;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1474380620;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1489685642;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1516295284;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> private MathUtils();1530639128;Prevent Instantiation through private constructor.;private MathUtils() {};prevent,instantiation,through,private,constructor;private,math,utils
MathUtils -> public static int checkedDownCast(long value);1460741894;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1465321874;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1468240246;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1468441547;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1470067338;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1472663401;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer.;public static int checkedDownCast(long value) {_		if (value > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return (int) value__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer;public,static,int,checked,down,cast,long,value,if,value,integer,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,int,value
MathUtils -> public static int checkedDownCast(long value);1474380620;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer._@see Math#toIntExact(long);public static int checkedDownCast(long value) {_		int downCast = (int) value__		if (downCast != value) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return downCast__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer,see,math,to,int,exact,long;public,static,int,checked,down,cast,long,value,int,down,cast,int,value,if,down,cast,value,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,down,cast
MathUtils -> public static int checkedDownCast(long value);1489685642;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception._<p>_This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer._@see Math#toIntExact(long);public static int checkedDownCast(long value) {_		int downCast = (int) value__		if (downCast != value) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return downCast__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer,see,math,to,int,exact,long;public,static,int,checked,down,cast,long,value,int,down,cast,int,value,if,down,cast,value,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,down,cast
MathUtils -> public static int checkedDownCast(long value);1516295284;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception.__<p>This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer._@see Math#toIntExact(long);public static int checkedDownCast(long value) {_		int downCast = (int) value__		if (downCast != value) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return downCast__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer,see,math,to,int,exact,long;public,static,int,checked,down,cast,long,value,int,down,cast,int,value,if,down,cast,value,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,down,cast
MathUtils -> public static int checkedDownCast(long value);1530639128;Casts the given value to a 32 bit integer, if it can be safely done. If the cast would change the numeric_value, this method raises an exception.__<p>This method is a protection in places where one expects to be able to safely case, but where unexpected_situations could make the cast unsafe and would cause hidden problems that are hard to track down.__@param value The value to be cast to an integer._@return The given value as an integer._@see Math#toIntExact(long);public static int checkedDownCast(long value) {_		int downCast = (int) value__		if (downCast != value) {_			throw new IllegalArgumentException("Cannot downcast long value " + value + " to integer.")__		}_		return downCast__	};casts,the,given,value,to,a,32,bit,integer,if,it,can,be,safely,done,if,the,cast,would,change,the,numeric,value,this,method,raises,an,exception,p,this,method,is,a,protection,in,places,where,one,expects,to,be,able,to,safely,case,but,where,unexpected,situations,could,make,the,cast,unsafe,and,would,cause,hidden,problems,that,are,hard,to,track,down,param,value,the,value,to,be,cast,to,an,integer,return,the,given,value,as,an,integer,see,math,to,int,exact,long;public,static,int,checked,down,cast,long,value,int,down,cast,int,value,if,down,cast,value,throw,new,illegal,argument,exception,cannot,downcast,long,value,value,to,integer,return,down,cast
MathUtils -> public static int murmurHash(int code);1460741894;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1465321874;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1468240246;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		_		_		_		code *= 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1468441547;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		_		_		_		code *= 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1470067338;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1472663401;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1474380620;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code ^= code >>> 16__		code *= 0x85ebca6b__		code ^= code >>> 13__		code *= 0xc2b2ae35__		code ^= code >>> 16___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,code,16,code,0x85ebca6b,code,code,13,code,0xc2b2ae35,code,code,16,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1489685642;This function hashes an integer value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code = bitMix(code)___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,bit,mix,code,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1516295284;This function hashes an integer value.__<p>It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code = bitMix(code)___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,p,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,bit,mix,code,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int murmurHash(int code);1530639128;This function hashes an integer value.__<p>It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning across machines.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int murmurHash(int code) {_		code *= 0xcc9e2d51__		code = Integer.rotateLeft(code, 15)__		code *= 0x1b873593___		code = Integer.rotateLeft(code, 13)__		code = code * 5 + 0xe6546b64___		code ^= 4__		code = bitMix(code)___		if (code >= 0) {_			return code__		}_		else if (code != Integer.MIN_VALUE) {_			return -code__		}_		else {_			return 0__		}_	};this,function,hashes,an,integer,value,p,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,across,machines,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,murmur,hash,int,code,code,0xcc9e2d51,code,integer,rotate,left,code,15,code,0x1b873593,code,integer,rotate,left,code,13,code,code,5,0xe6546b64,code,4,code,bit,mix,code,if,code,0,return,code,else,if,code,integer,return,code,else,return,0
MathUtils -> public static int roundDownToPowerOf2(int value);1460741894;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of to and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,to,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1465321874;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of to and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,to,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1468240246;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of to and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,to,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1468441547;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1470067338;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1472663401;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1474380620;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1489685642;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1516295284;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static int roundDownToPowerOf2(int value);1530639128;Decrements the given number down to the closest power of two. If the argument is a_power of two, it remains unchanged.__@param value The value to round down._@return The closest value that is a power of two and less or equal than the given value.;public static int roundDownToPowerOf2(int value) {_		return Integer.highestOneBit(value)__	};decrements,the,given,number,down,to,the,closest,power,of,two,if,the,argument,is,a,power,of,two,it,remains,unchanged,param,value,the,value,to,round,down,return,the,closest,value,that,is,a,power,of,two,and,less,or,equal,than,the,given,value;public,static,int,round,down,to,power,of2,int,value,return,integer,highest,one,bit,value
MathUtils -> public static boolean isPowerOf2(long value);1460741894;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1465321874;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1468240246;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1468441547;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1470067338;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1472663401;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1474380620;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1489685642;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1516295284;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static boolean isPowerOf2(long value);1530639128;Checks whether the given value is a power of two.__@param value The value to check._@return True, if the value is a power of two, false otherwise.;public static boolean isPowerOf2(long value) {_		return (value & (value - 1)) == 0__	};checks,whether,the,given,value,is,a,power,of,two,param,value,the,value,to,check,return,true,if,the,value,is,a,power,of,two,false,otherwise;public,static,boolean,is,power,of2,long,value,return,value,value,1,0
MathUtils -> public static int jenkinsHash(int code);1460741894;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1465321874;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1468240246;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1468441547;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1470067338;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1472663401;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1474380620;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1489685642;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1516295284;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__<p>It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,p,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
MathUtils -> public static int jenkinsHash(int code);1530639128;This function hashes an integer value. It is adapted from Bob Jenkins' website_<a href="http://www.burtleburtle.net/bob/hash/integer.html">http://www.burtleburtle.net/bob/hash/integer.html</a>._The hash function has the <i>full avalanche</i> property, meaning that every bit of the value to be hashed_affects every bit of the hash value.__<p>It is crucial to use different hash functions to partition data across machines and the internal partitioning of_data structures. This hash function is intended for partitioning internally in data structures.__@param code The integer to be hashed._@return The non-negative hash code for the integer.;public static int jenkinsHash(int code) {_		code = (code + 0x7ed55d16) + (code << 12)__		code = (code ^ 0xc761c23c) ^ (code >>> 19)__		code = (code + 0x165667b1) + (code << 5)__		code = (code + 0xd3a2646c) ^ (code << 9)__		code = (code + 0xfd7046c5) + (code << 3)__		code = (code ^ 0xb55a4f09) ^ (code >>> 16)__		return code >= 0 ? code : -(code + 1)__	};this,function,hashes,an,integer,value,it,is,adapted,from,bob,jenkins,website,a,href,http,www,burtleburtle,net,bob,hash,integer,html,http,www,burtleburtle,net,bob,hash,integer,html,a,the,hash,function,has,the,i,full,avalanche,i,property,meaning,that,every,bit,of,the,value,to,be,hashed,affects,every,bit,of,the,hash,value,p,it,is,crucial,to,use,different,hash,functions,to,partition,data,across,machines,and,the,internal,partitioning,of,data,structures,this,hash,function,is,intended,for,partitioning,internally,in,data,structures,param,code,the,integer,to,be,hashed,return,the,non,negative,hash,code,for,the,integer;public,static,int,jenkins,hash,int,code,code,code,0x7ed55d16,code,12,code,code,0xc761c23c,code,19,code,code,0x165667b1,code,5,code,code,0xd3a2646c,code,9,code,code,0xfd7046c5,code,3,code,code,0xb55a4f09,code,16,return,code,0,code,code,1
