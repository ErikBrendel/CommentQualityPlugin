# id;timestamp;commentText;codeText;commentWords;codeWords
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1405024514;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1405090423;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1409911022;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1411473593;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1414786554;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1416416483;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1422280244;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1436793281;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1436793281;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target);1448491888;Creates a configuration builder that can be used to set the input format's parameters to the config in a fluent_fashion.__@return A config builder for setting parameters.;public static ConfigBuilder configureDelimitedFormat(FileDataSourceBase<?> target) {_		return new ConfigBuilder(target.getParameters())__	};creates,a,configuration,builder,that,can,be,used,to,set,the,input,format,s,parameters,to,the,config,in,a,fluent,fashion,return,a,config,builder,for,setting,parameters;public,static,config,builder,configure,delimited,format,file,data,source,base,target,return,new,config,builder,target,get,parameters
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1481228508;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1487199189;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1491417674;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1494073903;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1497970731;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1511814440;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1515177485;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1517944847;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1518454519;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1518772855;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> @PublicEvolving 	public Charset getCharset();1518772855;Get the character set used for the row delimiter. This is also used by_subclasses to interpret field delimiters, comment strings, and for_configuring {@link FieldParser}s.__@return the charset;@PublicEvolving_	public Charset getCharset() {_		if (this.charset == null) {_			this.charset = Charset.forName(charsetName)__		}_		return this.charset__	};get,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,return,the,charset;public,evolving,public,charset,get,charset,if,this,charset,null,this,charset,charset,for,name,charset,name,return,this,charset
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1405024514;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1405090423;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1409911022;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1411473593;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1414786554;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1416416483;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1422280244;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1436793281;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1436793281;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter);1448491888;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the platforms default charset.__@param delimiter The delimiter string._@return The builder itself.;public T recordDelimiter(String delimiter) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,platforms,default,charset,param,delimiter,the,delimiter,string,return,the,builder,itself;public,t,record,delimiter,string,delimiter,this,config,set,string,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1405024514;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1405090423;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1409911022;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1411473593;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1414786554;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1416416483;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1422280244;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1436793281;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1436793281;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(char delimiter);1448491888;Sets the delimiter to be a single character, namely the given one. The character must be within_the value range <code>0</code> to <code>127</code>.__@param delimiter The delimiter character._@return The builder itself.;public T recordDelimiter(char delimiter) {_			if (delimiter == '\n') {_				this.config.setString(RECORD_DELIMITER, NEWLINE_DELIMITER)__			} else {_				this.config.setString(RECORD_DELIMITER, String.valueOf(delimiter))__			}_			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,a,single,character,namely,the,given,one,the,character,must,be,within,the,value,range,code,0,code,to,code,127,code,param,delimiter,the,delimiter,character,return,the,builder,itself;public,t,record,delimiter,char,delimiter,if,delimiter,n,this,config,set,string,else,this,config,set,string,string,value,of,delimiter,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1405024514;This function parses the given byte array which represents a serialized records._The parsed content is then returned by setting the pair variables. If the_byte array contains invalid content the record can be skipped by returning <tt>false</tt>.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return returns whether the record was successfully deserialized or not.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,records,the,parsed,content,is,then,returned,by,setting,the,pair,variables,if,the,byte,array,contains,invalid,content,the,record,can,be,skipped,by,returning,tt,false,tt,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,whether,the,record,was,successfully,deserialized,or,not;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1405090423;This function parses the given byte array which represents a serialized records._The parsed content is then returned by setting the pair variables. If the_byte array contains invalid content the record can be skipped by returning <tt>false</tt>.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return returns whether the record was successfully deserialized or not.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,records,the,parsed,content,is,then,returned,by,setting,the,pair,variables,if,the,byte,array,contains,invalid,content,the,record,can,be,skipped,by,returning,tt,false,tt,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,whether,the,record,was,successfully,deserialized,or,not;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1409911022;This function parses the given byte array which represents a serialized records._The parsed content is then returned by setting the pair variables. If the_byte array contains invalid content the record can be skipped by returning <tt>false</tt>.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return returns whether the record was successfully deserialized or not.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,records,the,parsed,content,is,then,returned,by,setting,the,pair,variables,if,the,byte,array,contains,invalid,content,the,record,can,be,skipped,by,returning,tt,false,tt,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,whether,the,record,was,successfully,deserialized,or,not;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1411473593;This function parses the given byte array which represents a serialized records._The parsed content is then returned by setting the pair variables. If the_byte array contains invalid content the record can be skipped by returning <tt>false</tt>.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return returns whether the record was successfully deserialized or not.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,records,the,parsed,content,is,then,returned,by,setting,the,pair,variables,if,the,byte,array,contains,invalid,content,the,record,can,be,skipped,by,returning,tt,false,tt,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,whether,the,record,was,successfully,deserialized,or,not;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1414786554;This function parses the given byte array which represents a serialized records._The parsed content is then returned by setting the pair variables. If the_byte array contains invalid content the record can be skipped by returning <tt>false</tt>.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return returns whether the record was successfully deserialized or not.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,records,the,parsed,content,is,then,returned,by,setting,the,pair,variables,if,the,byte,array,contains,invalid,content,the,record,can,be,skipped,by,returning,tt,false,tt,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,whether,the,record,was,successfully,deserialized,or,not;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1416416483;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1422280244;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1436793281;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1436793281;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1448491888;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1448901852;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1452178883;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1460741894;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1465920682;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1466163122;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1468399420;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1469030375;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1469630409;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1481228508;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1487199189;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1491417674;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1494073903;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1497970731;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1511814440;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1515177485;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1517944847;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1518454519;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1518772855;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;1518772855;This function parses the given byte array which represents a serialized record._The function returns a valid record or throws an IOException.__@param reuse An optionally reusable object._@param bytes Binary data of serialized records._@param offset The offset where to start to read the record data._@param numBytes The number of bytes that can be read starting at the offset position.__@return Returns the read record if it was successfully deserialized._@throws IOException if the record could not be read.;public abstract OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException_;this,function,parses,the,given,byte,array,which,represents,a,serialized,record,the,function,returns,a,valid,record,or,throws,an,ioexception,param,reuse,an,optionally,reusable,object,param,bytes,binary,data,of,serialized,records,param,offset,the,offset,where,to,start,to,read,the,record,data,param,num,bytes,the,number,of,bytes,that,can,be,read,starting,at,the,offset,position,return,returns,the,read,record,if,it,was,successfully,deserialized,throws,ioexception,if,the,record,could,not,be,read;public,abstract,ot,read,record,ot,reuse,byte,bytes,int,offset,int,num,bytes,throws,ioexception
DelimitedInputFormat -> @Override 	public void close() throws IOException;1405024514;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1405090423;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1409911022;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1411473593;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1414786554;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1416416483;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1422280244;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1436793281;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1436793281;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1448491888;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1448901852;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1452178883;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1460741894;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1465920682;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1466163122;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1468399420;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1469030375;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1469630409;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1481228508;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1487199189;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1491417674;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1494073903;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1497970731;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1511814440;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1515177485;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1517944847;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1518454519;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1518772855;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Override 	public void close() throws IOException;1518772855;Closes the input by releasing all buffers and closing the file input stream.__@throws IOException Thrown, if the closing of the file stream causes an I/O error.;@Override_	public void close() throws IOException {_		this.wrapBuffer = null__		this.readBuffer = null__		super.close()__	};closes,the,input,by,releasing,all,buffers,and,closing,the,file,input,stream,throws,ioexception,thrown,if,the,closing,of,the,file,stream,causes,an,i,o,error;override,public,void,close,throws,ioexception,this,wrap,buffer,null,this,read,buffer,null,super,close
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1469630409;@Deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1481228508;@Deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1487199189;@Deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1491417674;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1494073903;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1497970731;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1511814440;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1515177485;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1517944847;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1518454519;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1518772855;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> @Deprecated 	protected static void loadGlobalConfigParams();1518772855;@deprecated Please use {@code loadConfigParameters(Configuration config};@Deprecated_	protected static void loadGlobalConfigParams() {_		loadConfigParameters(GlobalConfiguration.loadConfiguration())__	};deprecated,please,use,code,load,config,parameters,configuration,config;deprecated,protected,static,void,load,global,config,params,load,config,parameters,global,configuration,load,configuration
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1405024514;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1405090423;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1409911022;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1411473593;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1414786554;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1416416483;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1422280244;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1436793281;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1436793281;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> protected AbstractConfigBuilder(Configuration config);1448491888;Creates a new builder for the given configuration.__@param config The configuration into which the parameters will be written.;protected AbstractConfigBuilder(Configuration config) {_			super(config)__		};creates,a,new,builder,for,the,given,configuration,param,config,the,configuration,into,which,the,parameters,will,be,written;protected,abstract,config,builder,configuration,config,super,config
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1405024514;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1405090423;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1409911022;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1411473593;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1414786554;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1416416483;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1422280244;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1436793281;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1436793281;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T numSamplesForStatistics(int numSamples);1448491888;Sets the number of line samples to take in order to estimate the base statistics for the_input format.__@param numSamples The number of line samples to take._@return The builder itself.;public T numSamplesForStatistics(int numSamples) {_			this.config.setInteger(NUM_STATISTICS_SAMPLES, numSamples)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,number,of,line,samples,to,take,in,order,to,estimate,the,base,statistics,for,the,input,format,param,num,samples,the,number,of,line,samples,to,take,return,the,builder,itself;public,t,num,samples,for,statistics,int,num,samples,this,config,set,integer,num,samples,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1405024514;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1405090423;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1409911022;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1411473593;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1414786554;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> AbstractConfigBuilder -> public T recordDelimiter(String delimiter, String charsetName);1416416483;Sets the delimiter to be the given string. The string will be converted to bytes for more efficient_comparison during input parsing. The conversion will be done using the charset with the given name._The charset must be available on the processing nodes, otherwise an exception will be raised at_runtime.__@param delimiter The delimiter string._@param charsetName The name of the encoding character set._@return The builder itself.;public T recordDelimiter(String delimiter, String charsetName) {_			this.config.setString(RECORD_DELIMITER, delimiter)__			this.config.setString(RECORD_DELIMITER_ENCODING, charsetName)__			@SuppressWarnings("unchecked")_			T ret = (T) this__			return ret__		};sets,the,delimiter,to,be,the,given,string,the,string,will,be,converted,to,bytes,for,more,efficient,comparison,during,input,parsing,the,conversion,will,be,done,using,the,charset,with,the,given,name,the,charset,must,be,available,on,the,processing,nodes,otherwise,an,exception,will,be,raised,at,runtime,param,delimiter,the,delimiter,string,param,charset,name,the,name,of,the,encoding,character,set,return,the,builder,itself;public,t,record,delimiter,string,delimiter,string,charset,name,this,config,set,string,delimiter,this,config,set,string,charset,name,suppress,warnings,unchecked,t,ret,t,this,return,ret
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1405024514;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1405090423;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1409911022;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1411473593;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1414786554;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1416416483;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			String charsetName = parameters.getString(RECORD_DELIMITER_ENCODING, null)___			if (charsetName == null) {_				setDelimiter(delimString)__			} else {_				try {_					setDelimiter(delimString, charsetName)__				}_				catch (UnsupportedCharsetException e) {_					throw new IllegalArgumentException("The charset with the name '" + charsetName + _							"' is not supported on this TaskManager instance.", e)__				}_			}_		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,string,charset,name,parameters,get,string,null,if,charset,name,null,set,delimiter,delim,string,else,try,set,delimiter,delim,string,charset,name,catch,unsupported,charset,exception,e,throw,new,illegal,argument,exception,the,charset,with,the,name,charset,name,is,not,supported,on,this,task,manager,instance,e,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1422280244;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1436793281;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1436793281;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1448491888;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1448901852;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1452178883;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1460741894;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1465920682;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1466163122;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1468399420;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)__		_		String delimString = parameters.getString(RECORD_DELIMITER, null)__		if (delimString != null) {_			setDelimiter(delimString)__		}_		_		_		String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__		if (samplesString != null) {_			try {_				setNumLineSamples(Integer.parseInt(samplesString))__			}_			catch (NumberFormatException e) {_				if (LOG.isWarnEnabled()) {_					LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__				}_				setNumLineSamples(0)__			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1469030375;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1469630409;Configures this input format by reading the path to the file from the configuration andge the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,andge,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1481228508;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1487199189;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1491417674;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1494073903;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1497970731;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1511814440;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1515177485;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1517944847;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1518454519;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1518772855;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void configure(Configuration parameters);1518772855;Configures this input format by reading the path to the file from the configuration and the string that_defines the record delimiter.__@param parameters The configuration object to read the parameters from.;@Override_	public void configure(Configuration parameters) {_		super.configure(parameters)___		_		__		if (Arrays.equals(delimiter, new byte[] {'\n'})) {_			String delimString = parameters.getString(RECORD_DELIMITER, null)__			if (delimString != null) {_				setDelimiter(delimString)__			}_		}_		_		_		if (numLineSamples == NUM_SAMPLES_UNDEFINED) {_			String samplesString = parameters.getString(NUM_STATISTICS_SAMPLES, null)__			if (samplesString != null) {_				try {_					setNumLineSamples(Integer.parseInt(samplesString))__				} catch (NumberFormatException e) {_					if (LOG.isWarnEnabled()) {_						LOG.warn("Invalid value for number of samples to take: " + samplesString + ". Skipping sampling.")__					}_					setNumLineSamples(0)__				}_			}_		}_	};configures,this,input,format,by,reading,the,path,to,the,file,from,the,configuration,and,the,string,that,defines,the,record,delimiter,param,parameters,the,configuration,object,to,read,the,parameters,from;override,public,void,configure,configuration,parameters,super,configure,parameters,if,arrays,equals,delimiter,new,byte,n,string,delim,string,parameters,get,string,null,if,delim,string,null,set,delimiter,delim,string,if,num,line,samples,string,samples,string,parameters,get,string,null,if,samples,string,null,try,set,num,line,samples,integer,parse,int,samples,string,catch,number,format,exception,e,if,log,is,warn,enabled,log,warn,invalid,value,for,number,of,samples,to,take,samples,string,skipping,sampling,set,num,line,samples,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1405024514;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1405090423;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1409911022;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1411473593;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1414786554;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1416416483;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1422280244;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1436793281;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1436793281;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1448491888;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1448901852;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1452178883;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1460741894;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		_		this.bufferSize = this.bufferSize <= 0 ? DEFAULT_READ_BUFFER_SIZE : this.bufferSize__		_		if (this.readBuffer == null || this.readBuffer.length != this.bufferSize) {_			this.readBuffer = new byte[this.bufferSize]__		}_		if (this.wrapBuffer == null || this.wrapBuffer.length < 256) {_			this.wrapBuffer = new byte[256]__		}__		this.readPos = 0__		this.limit = 0__		this.overLimit = false__		this.end = false___		if (this.splitStart != 0) {_			this.stream.seek(this.splitStart)__			readLine()__			_			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,this,buffer,size,this,buffer,size,0,this,buffer,size,if,this,read,buffer,null,this,read,buffer,length,this,buffer,size,this,read,buffer,new,byte,this,buffer,size,if,this,wrap,buffer,null,this,wrap,buffer,length,256,this,wrap,buffer,new,byte,256,this,read,pos,0,this,limit,0,this,over,limit,false,this,end,false,if,this,split,start,0,this,stream,seek,this,split,start,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1465920682;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1466163122;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1468399420;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1469030375;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1469630409;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1481228508;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1487199189;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1491417674;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1494073903;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer()__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1497970731;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1511814440;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1515177485;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1517944847;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1518454519;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1518772855;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public void open(FileInputSplit split) throws IOException;1518772855;Opens the given input split. This method opens the input stream to the specified file, allocates read buffers_and positions the stream at the correct position, making sure that any partial record at the beginning is skipped.__@param split The input split to open.__@see org.apache.flink.api.common.io.FileInputFormat#open(org.apache.flink.core.fs.FileInputSplit);@Override_	public void open(FileInputSplit split) throws IOException {_		super.open(split)__		initBuffers()___		this.offset = splitStart__		if (this.splitStart != 0) {_			this.stream.seek(offset)__			readLine()__			_			_			if (this.overLimit) {_				this.end = true__			}_		} else {_			fillBuffer(0)__		}_	};opens,the,given,input,split,this,method,opens,the,input,stream,to,the,specified,file,allocates,read,buffers,and,positions,the,stream,at,the,correct,position,making,sure,that,any,partial,record,at,the,beginning,is,skipped,param,split,the,input,split,to,open,see,org,apache,flink,api,common,io,file,input,format,open,org,apache,flink,core,fs,file,input,split;override,public,void,open,file,input,split,split,throws,ioexception,super,open,split,init,buffers,this,offset,split,start,if,this,split,start,0,this,stream,seek,offset,read,line,if,this,over,limit,this,end,true,else,fill,buffer,0
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1405024514;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1405090423;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1409911022;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1411473593;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1414786554;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1416416483;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1422280244;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1436793281;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1436793281;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1448491888;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1448901852;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1452178883;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1460741894;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1465920682;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1466163122;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1468399420;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1469030375;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1469630409;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1481228508;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1487199189;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1491417674;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1494073903;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1497970731;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1511814440;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1515177485;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1517944847;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1518454519;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1518772855;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> @Override 	public boolean reachedEnd();1518772855;Checks whether the current split is at its end.__@return True, if the split is at its end, false otherwise.;@Override_	public boolean reachedEnd() {_		return this.end__	};checks,whether,the,current,split,is,at,its,end,return,true,if,the,split,is,at,its,end,false,otherwise;override,public,boolean,reached,end,return,this,end
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1497970731;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1511814440;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1515177485;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1517944847;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1518454519;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1518772855;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> private boolean fillBuffer(int offset) throws IOException;1518772855;Fills the read buffer with bytes read from the file starting from an offset.;private boolean fillBuffer(int offset) throws IOException {_		int maxReadLength = this.readBuffer.length - offset__		_		if (this.splitLength == FileInputFormat.READ_WHOLE_SPLIT_FLAG) {_			int read = this.stream.read(this.readBuffer, offset, maxReadLength)__			if (read == -1) {_				this.stream.close()__				this.stream = null__				return false__			} else {_				this.readPos = offset__				this.limit = read__				return true__			}_		}_		_		_		int toRead__		if (this.splitLength > 0) {_			_			toRead = this.splitLength > maxReadLength ? maxReadLength : (int) this.splitLength__		}_		else {_			_			_			_			_			_			toRead = maxReadLength__			this.overLimit = true__		}__		int read = this.stream.read(this.readBuffer, offset, toRead)___		if (read == -1) {_			this.stream.close()__			this.stream = null__			return false__		} else {_			this.splitLength -= read__			this.readPos = offset_ _			this.limit = read + offset_ _			return true__		}_	};fills,the,read,buffer,with,bytes,read,from,the,file,starting,from,an,offset;private,boolean,fill,buffer,int,offset,throws,ioexception,int,max,read,length,this,read,buffer,length,offset,if,this,split,length,file,input,format,int,read,this,stream,read,this,read,buffer,offset,max,read,length,if,read,1,this,stream,close,this,stream,null,return,false,else,this,read,pos,offset,this,limit,read,return,true,int,to,read,if,this,split,length,0,to,read,this,split,length,max,read,length,max,read,length,int,this,split,length,else,to,read,max,read,length,this,over,limit,true,int,read,this,stream,read,this,read,buffer,offset,to,read,if,read,1,this,stream,close,this,stream,null,return,false,else,this,split,length,read,this,read,pos,offset,this,limit,read,offset,return,true
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405024514;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1405090423;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1409911022;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1411473593;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1414786554;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1416416483;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1422280244;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1436793281;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1436793281;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> ConfigBuilder -> protected ConfigBuilder(Configuration targetConfig);1448491888;Creates a new builder for the given configuration.__@param targetConfig The configuration into which the parameters will be written.;protected ConfigBuilder(Configuration targetConfig) {_			super(targetConfig)__		};creates,a,new,builder,for,the,given,configuration,param,target,config,the,configuration,into,which,the,parameters,will,be,written;protected,config,builder,configuration,target,config,super,target,config
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1481228508;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1487199189;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1491417674;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1494073903;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1497970731;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1511814440;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1515177485;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1517944847;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1518454519;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1518772855;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
DelimitedInputFormat -> @PublicEvolving 	public void setCharset(String charset);1518772855;Set the name of the character set used for the row delimiter. This is_also used by subclasses to interpret field delimiters, comment strings,_and for configuring {@link FieldParser}s.__These fields are interpreted when set. Changing the charset thereafter_may cause unexpected results.__@param charset name of the charset;@PublicEvolving_	public void setCharset(String charset) {_		this.charsetName = Preconditions.checkNotNull(charset)__		this.charset = null___		if (this.delimiterString != null) {_			this.delimiter = delimiterString.getBytes(getCharset())__		}_	};set,the,name,of,the,character,set,used,for,the,row,delimiter,this,is,also,used,by,subclasses,to,interpret,field,delimiters,comment,strings,and,for,configuring,link,field,parser,s,these,fields,are,interpreted,when,set,changing,the,charset,thereafter,may,cause,unexpected,results,param,charset,name,of,the,charset;public,evolving,public,void,set,charset,string,charset,this,charset,name,preconditions,check,not,null,charset,this,charset,null,if,this,delimiter,string,null,this,delimiter,delimiter,string,get,bytes,get,charset
