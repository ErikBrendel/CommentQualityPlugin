commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Writes a {@link TypeSerializerSnapshot} to the provided data output view.  *  * <p>It is written with a format that can be later read again using  * {@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.  *  * @param out the data output view  * @param serializerSnapshot the serializer configuration snapshot to write  * @param serializer the prior serializer. This needs to be written of the serializer snapshot  *                   if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.  */ ;/**  * Writes a {@link TypeSerializerSnapshot} to the provided data output view.  *  * <p>It is written with a format that can be later read again using  * {@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.  *  * @param out the data output view  * @param serializerSnapshot the serializer configuration snapshot to write  * @param serializer the prior serializer. This needs to be written of the serializer snapshot  *                   if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.  */ public static <T> void writeSerializerSnapshot(DataOutputView out, TypeSerializerSnapshot<T> serializerSnapshot, TypeSerializer<T> serializer) throws IOException {     new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out). }
true;public,static;3;11;/**  * Reads from a data input view a {@link TypeSerializerSnapshot} that was previously  * written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.  *  * @param in the data input view  * @param userCodeClassLoader the user code class loader to use  * @param existingPriorSerializer the prior serializer. This would only be non-null if we are  *                                restoring from a snapshot taken with Flink version <= 1.6.  *  * @return the read serializer configuration snapshot  */ ;/**  * Reads from a data input view a {@link TypeSerializerSnapshot} that was previously  * written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.  *  * @param in the data input view  * @param userCodeClassLoader the user code class loader to use  * @param existingPriorSerializer the prior serializer. This would only be non-null if we are  *                                restoring from a snapshot taken with Flink version <= 1.6.  *  * @return the read serializer configuration snapshot  */ public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(DataInputView in, ClassLoader userCodeClassLoader, @Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {     final TypeSerializerSnapshotSerializationProxy<T> proxy = new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer).     proxy.read(in).     return proxy.getSerializerSnapshot(). }
false;public,static;2;6;;public static <T> TypeSerializerSnapshot<T> readAndInstantiateSnapshotClass(DataInputView in, ClassLoader cl) throws IOException {     Class<TypeSerializerSnapshot<T>> clazz = InstantiationUtil.resolveClassByName(in, cl, TypeSerializerSnapshot.class).     return InstantiationUtil.instantiate(clazz). }
true;public;1;10;/**  * Binary format layout of a written serializer snapshot is as follows:  *  * <ul>  *     <li>1. Format version of this util.</li>  *     <li>2. Name of the TypeSerializerSnapshot class.</li>  *     <li>3. The version of the TypeSerializerSnapshot's binary format.</li>  *     <li>4. The actual serializer snapshot data.</li>  * </ul>  */ ;/**  * Binary format layout of a written serializer snapshot is as follows:  *  * <ul>  *     <li>1. Format version of this util.</li>  *     <li>2. Name of the TypeSerializerSnapshot class.</li>  *     <li>3. The version of the TypeSerializerSnapshot's binary format.</li>  *     <li>4. The actual serializer snapshot data.</li>  * </ul>  */ @SuppressWarnings("deprecation") @Override public void write(DataOutputView out) throws IOException {     setSerializerForWriteIfOldPath(serializerSnapshot, serializer).     // write the format version of this utils format     super.write(out).     TypeSerializerSnapshot.writeVersionedSnapshot(out, serializerSnapshot). }
false;public;1;18;;@SuppressWarnings("unchecked") @Override public void read(DataInputView in) throws IOException {     // read version     super.read(in).     final int version = getReadVersion().     switch(version) {         case 2:             serializerSnapshot = deserializeV2(in, userCodeClassLoader).             break.         case 1:             serializerSnapshot = deserializeV1(in, userCodeClassLoader, serializer).             break.         default:             throw new IOException("Unrecognized version for TypeSerializerSnapshot format: " + version).     } }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;0;4;;@Override public int[] getCompatibleVersions() {     return new int[] { VERSION, 1 }. }
false;;0;3;;TypeSerializerSnapshot<T> getSerializerSnapshot() {     return serializerSnapshot. }
true;static;2;4;/**  * Deserialization path for Flink versions 1.7+.  */ ;/**  * Deserialization path for Flink versions 1.7+.  */ @VisibleForTesting static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException {     return TypeSerializerSnapshot.readVersionedSnapshot(in, cl). }
true;static;3;26;/**  * Deserialization path for Flink versions in [1.4, 1.6].  */ ;/**  * Deserialization path for Flink versions in [1.4, 1.6].  */ @VisibleForTesting @SuppressWarnings("deprecation") static <T> TypeSerializerSnapshot<T> deserializeV1(DataInputView in, ClassLoader cl, @Nullable TypeSerializer<T> serializer) throws IOException {     TypeSerializerSnapshot<T> snapshot = readAndInstantiateSnapshotClass(in, cl).     // - new snapshot type that understands the old format and can produce a restore serializer from it     if (snapshot instanceof TypeSerializerConfigSnapshot) {         TypeSerializerConfigSnapshot<T> oldTypeSnapshot = (TypeSerializerConfigSnapshot<T>) snapshot.         oldTypeSnapshot.setPriorSerializer(serializer).         oldTypeSnapshot.setUserCodeClassLoader(cl).         oldTypeSnapshot.read(in).     } else {         // new type, simple case         int readVersion = in.readInt().         snapshot.readSnapshot(readVersion, in, cl).     }     return snapshot. }
false;private,static;2;13;;@SuppressWarnings("deprecation") private static <T> void setSerializerForWriteIfOldPath(TypeSerializerSnapshot<T> serializerSnapshot, TypeSerializer<T> serializer) {     // config snapshot if it of the old version     if (serializerSnapshot instanceof TypeSerializerConfigSnapshot) {         checkState(serializer != null).         ((TypeSerializerConfigSnapshot<T>) serializerSnapshot).setPriorSerializer(serializer).     } }
