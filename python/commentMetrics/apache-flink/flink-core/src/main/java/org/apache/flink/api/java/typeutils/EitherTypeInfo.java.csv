commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @PublicEvolving public boolean isBasicType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public boolean isTupleType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public int getArity() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public int getTotalFields() {     return 1. }
false;public;0;6;;@SuppressWarnings("unchecked") @Override @PublicEvolving public Class<Either<L, R>> getTypeClass() {     return (Class<Either<L, R>>) (Class<?>) Either.class. }
false;public;0;8;;@Override @PublicEvolving public Map<String, TypeInformation<?>> getGenericParameters() {     Map<String, TypeInformation<?>> m = new HashMap<>().     m.put("L", this.leftType).     m.put("R", this.rightType).     return m. }
false;public;0;5;;@Override @PublicEvolving public boolean isKeyType() {     return false. }
false;public;1;6;;@Override @PublicEvolving public TypeSerializer<Either<L, R>> createSerializer(ExecutionConfig config) {     return new EitherSerializer<L, R>(leftType.createSerializer(config), rightType.createSerializer(config)). }
false;public;0;4;;@Override public String toString() {     return "Either <" + leftType.toString() + ", " + rightType.toString() + ">". }
false;public;1;13;;@SuppressWarnings("unchecked") @Override public boolean equals(Object obj) {     if (obj instanceof EitherTypeInfo) {         EitherTypeInfo<L, R> other = (EitherTypeInfo<L, R>) obj.         return other.canEqual(this) && leftType.equals(other.leftType) && rightType.equals(other.rightType).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 17 * leftType.hashCode() + rightType.hashCode(). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof EitherTypeInfo. }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public TypeInformation<L> getLeftType() {     return leftType. }
false;public;0;3;;public TypeInformation<R> getRightType() {     return rightType. }
