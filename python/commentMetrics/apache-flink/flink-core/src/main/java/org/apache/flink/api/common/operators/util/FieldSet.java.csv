commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;// -------------------------------------------------------------------------------------------- public FieldSet addField(Integer fieldID) {     if (fieldID == null) {         throw new IllegalArgumentException("Field ID must not be null.").     }     return new FieldSet(this, fieldID). }
false;public;1;3;;public FieldSet addFields(int... fieldIDs) {     return new FieldSet(this, fieldIDs). }
false;public;1;15;;public FieldSet addFields(FieldSet set) {     if (set == null) {         throw new IllegalArgumentException("FieldSet to add must not be null.").     }     if (set.size() == 0) {         return this.     } else if (this.size() == 0) {         return set.     } else {         return new FieldSet(this, set).     } }
false;public;1;3;;public boolean contains(Integer columnIndex) {     return this.collection.contains(columnIndex). }
false;public;0;3;;public int size() {     return this.collection.size(). }
false;public;0;4;;@Override public Iterator<Integer> iterator() {     return this.collection.iterator(). }
true;public;0;5;/**  * Turns the FieldSet into an ordered FieldList.  *  * @return An ordered FieldList.  */ ;/**  * Turns the FieldSet into an ordered FieldList.  *  * @return An ordered FieldList.  */ public FieldList toFieldList() {     int[] pos = toArray().     Arrays.sort(pos).     return new FieldList(pos). }
true;public;0;8;/**  * Transforms the field set into an array of field IDs. Whether the IDs are ordered  * or unordered depends on the specific subclass of the field set.  *  * @return An array of all contained field IDs.  */ ;/**  * Transforms the field set into an array of field IDs. Whether the IDs are ordered  * or unordered depends on the specific subclass of the field set.  *  * @return An array of all contained field IDs.  */ public int[] toArray() {     int[] a = new int[this.collection.size()].     int i = 0.     for (int col : this.collection) {         a[i++] = col.     }     return a. }
true;public;1;11;/**  * Checks if the given set of fields is a valid subset of this set of fields. For unordered  * sets, this is the case if all of the given set's fields are also part of this field.  * <p>  * Subclasses that describe field sets where the field order matters must override this method  * to implement a field ordering sensitive check.  *  * @param set The set that is a candidate subset.  * @return True, if the given set is a subset of this set, false otherwise.  */ ;// -------------------------------------------------------------------------------------------- /**  * Checks if the given set of fields is a valid subset of this set of fields. For unordered  * sets, this is the case if all of the given set's fields are also part of this field.  * <p>  * Subclasses that describe field sets where the field order matters must override this method  * to implement a field ordering sensitive check.  *  * @param set The set that is a candidate subset.  * @return True, if the given set is a subset of this set, false otherwise.  */ public boolean isValidSubset(FieldSet set) {     if (set.size() > size()) {         return false.     }     for (Integer i : set) {         if (!contains(i)) {             return false.         }     }     return true. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return this.collection.hashCode(). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj instanceof FieldSet) {         return this.collection.equals(((FieldSet) obj).collection).     } else {         return false.     } }
false;public;0;15;;@Override public String toString() {     StringBuilder bld = new StringBuilder().     bld.append(getDescriptionPrefix()).     for (Integer i : this.collection) {         bld.append(i).         bld.append(',').         bld.append(' ').     }     if (this.collection.size() > 0) {         bld.setLength(bld.length() - 2).     }     bld.append(getDescriptionSuffix()).     return bld.toString(). }
true;public;0;3;/**  * Since instances of FieldSet are strictly immutable, this method does not actually clone,  * but it only returns the original instance.  *  * @return This objects reference, unmodified.  */ ;/**  * Since instances of FieldSet are strictly immutable, this method does not actually clone,  * but it only returns the original instance.  *  * @return This objects reference, unmodified.  */ public FieldSet clone() {     return this. }
false;protected;0;3;;// -------------------------------------------------------------------------------------------- protected String getDescriptionPrefix() {     return "(". }
false;protected;0;3;;protected String getDescriptionSuffix() {     return ")". }
