commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;// -------------------------------------------------------------------------------------------- @Override @PublicEvolving public boolean isBasicType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public boolean isTupleType() {     return false. }
false;public;0;5;;@Override @PublicEvolving public int getArity() {     return 1. }
false;public;0;5;;@Override @PublicEvolving public int getTotalFields() {     return 1. }
false;public;0;6;;@SuppressWarnings("unchecked") @Override @PublicEvolving public Class<T> getTypeClass() {     return arrayType. }
false;public;0;4;;@PublicEvolving public TypeInformation<C> getComponentInfo() {     return componentInfo. }
false;public;0;5;;@Override @PublicEvolving public boolean isKeyType() {     return false. }
false;public;1;8;;@SuppressWarnings("unchecked") @Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig) {     return (TypeSerializer<T>) new GenericArraySerializer<C>(componentInfo.getTypeClass(), componentInfo.createSerializer(executionConfig)). }
false;public;0;4;;@Override public String toString() {     return this.getClass().getSimpleName() + "<" + this.componentInfo + ">". }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj instanceof ObjectArrayTypeInfo) {         @SuppressWarnings("unchecked")         ObjectArrayTypeInfo<T, C> objectArrayTypeInfo = (ObjectArrayTypeInfo<T, C>) obj.         return objectArrayTypeInfo.canEqual(this) && arrayType == objectArrayTypeInfo.arrayType && componentInfo.equals(objectArrayTypeInfo.componentInfo).     } else {         return false.     } }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof ObjectArrayTypeInfo. }
false;public;0;4;;@Override public int hashCode() {     return 31 * this.arrayType.hashCode() + this.componentInfo.hashCode(). }
false;public,static;2;8;;// -------------------------------------------------------------------------------------------- @PublicEvolving public static <T, C> ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo) {     checkNotNull(arrayClass).     checkNotNull(componentInfo).     checkArgument(arrayClass.isArray(), "Class " + arrayClass + " must be an array.").     return new ObjectArrayTypeInfo<T, C>(arrayClass, componentInfo). }
true;public,static;1;9;/**  * Creates a new {@link org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo} from a  * {@link TypeInformation} for the component type.  *  * <p>  * This must be used in cases where the complete type of the array is not available as a  * {@link java.lang.reflect.Type} or {@link java.lang.Class}.  */ ;/**  * Creates a new {@link org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo} from a  * {@link TypeInformation} for the component type.  *  * <p>  * This must be used in cases where the complete type of the array is not available as a  * {@link java.lang.reflect.Type} or {@link java.lang.Class}.  */ @SuppressWarnings("unchecked") @PublicEvolving public static <T, C> ObjectArrayTypeInfo<T, C> getInfoFor(TypeInformation<C> componentInfo) {     checkNotNull(componentInfo).     return new ObjectArrayTypeInfo<T, C>((Class<T>) Array.newInstance(componentInfo.getTypeClass(), 0).getClass(), componentInfo). }
