# id;timestamp;commentText;codeText;commentWords;codeWords
Row -> public void setField(int pos, Object value);1481798200;Sets the field at the specified position.__@param pos The position of the field, 0-based._@param value The value to be assigned to the field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public void setField(int pos, Object value) {_		fields[pos] = value__	};sets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,param,value,the,value,to,be,assigned,to,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,void,set,field,int,pos,object,value,fields,pos,value
Row -> public void setField(int pos, Object value);1482418854;Sets the field at the specified position.__@param pos The position of the field, 0-based._@param value The value to be assigned to the field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public void setField(int pos, Object value) {_		fields[pos] = value__	};sets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,param,value,the,value,to,be,assigned,to,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,void,set,field,int,pos,object,value,fields,pos,value
Row -> public void setField(int pos, Object value);1488589862;Sets the field at the specified position.__@param pos The position of the field, 0-based._@param value The value to be assigned to the field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public void setField(int pos, Object value) {_		fields[pos] = value__	};sets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,param,value,the,value,to,be,assigned,to,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,void,set,field,int,pos,object,value,fields,pos,value
Row -> public void setField(int pos, Object value);1508229353;Sets the field at the specified position.__@param pos The position of the field, 0-based._@param value The value to be assigned to the field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public void setField(int pos, Object value) {_		fields[pos] = value__	};sets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,param,value,the,value,to,be,assigned,to,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,void,set,field,int,pos,object,value,fields,pos,value
Row -> public void setField(int pos, Object value);1515168870;Sets the field at the specified position.__@param pos The position of the field, 0-based._@param value The value to be assigned to the field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public void setField(int pos, Object value) {_		fields[pos] = value__	};sets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,param,value,the,value,to,be,assigned,to,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,void,set,field,int,pos,object,value,fields,pos,value
Row -> public static Row copy(Row row);1488589862;Creates a new Row which copied from another row.__@param row The row being copied._@return The cloned new Row;public static Row copy(Row row) {_		Row ret = new Row(row.getArity())__		for (int i = 0_ i < row.getArity()_ ++i) {_			ret.setField(i, row.getField(i))__		}_		return ret__	};creates,a,new,row,which,copied,from,another,row,param,row,the,row,being,copied,return,the,cloned,new,row;public,static,row,copy,row,row,row,ret,new,row,row,get,arity,for,int,i,0,i,row,get,arity,i,ret,set,field,i,row,get,field,i,return,ret
Row -> public static Row copy(Row row);1508229353;Creates a new Row which copied from another row._This method does not perform a deep copy.__@param row The row being copied._@return The cloned new Row;public static Row copy(Row row) {_		final Row newRow = new Row(row.fields.length)__		System.arraycopy(row.fields, 0, newRow.fields, 0, row.fields.length)__		return newRow__	};creates,a,new,row,which,copied,from,another,row,this,method,does,not,perform,a,deep,copy,param,row,the,row,being,copied,return,the,cloned,new,row;public,static,row,copy,row,row,final,row,new,row,new,row,row,fields,length,system,arraycopy,row,fields,0,new,row,fields,0,row,fields,length,return,new,row
Row -> public static Row copy(Row row);1515168870;Creates a new Row which copied from another row._This method does not perform a deep copy.__@param row The row being copied._@return The cloned new Row;public static Row copy(Row row) {_		final Row newRow = new Row(row.fields.length)__		System.arraycopy(row.fields, 0, newRow.fields, 0, row.fields.length)__		return newRow__	};creates,a,new,row,which,copied,from,another,row,this,method,does,not,perform,a,deep,copy,param,row,the,row,being,copied,return,the,cloned,new,row;public,static,row,copy,row,row,final,row,new,row,new,row,row,fields,length,system,arraycopy,row,fields,0,new,row,fields,0,row,fields,length,return,new,row
Row -> public static Row of(Object... values);1482418854;Creates a new Row and assigns the given values to the Row's fields._This is more convenient than using the constructor.__<p>For example:__<pre>_Row.of("hello", true, 1L)_}_</pre>_instead of_<pre>_Row row = new Row(3)__row.setField(0, "hello")__row.setField(1, true)__row.setField(2, 1L)__</pre>;public static Row of(Object... values) {_		Row row = new Row(values.length)__		for (int i = 0_ i < values.length_ i++) {_			row.setField(i, values[i])__		}_		return row__	};creates,a,new,row,and,assigns,the,given,values,to,the,row,s,fields,this,is,more,convenient,than,using,the,constructor,p,for,example,pre,row,of,hello,true,1l,pre,instead,of,pre,row,row,new,row,3,row,set,field,0,hello,row,set,field,1,true,row,set,field,2,1l,pre;public,static,row,of,object,values,row,row,new,row,values,length,for,int,i,0,i,values,length,i,row,set,field,i,values,i,return,row
Row -> public static Row of(Object... values);1488589862;Creates a new Row and assigns the given values to the Row's fields._This is more convenient than using the constructor.__<p>For example:__<pre>_Row.of("hello", true, 1L)_}_</pre>_instead of_<pre>_Row row = new Row(3)__row.setField(0, "hello")__row.setField(1, true)__row.setField(2, 1L)__</pre>;public static Row of(Object... values) {_		Row row = new Row(values.length)__		for (int i = 0_ i < values.length_ i++) {_			row.setField(i, values[i])__		}_		return row__	};creates,a,new,row,and,assigns,the,given,values,to,the,row,s,fields,this,is,more,convenient,than,using,the,constructor,p,for,example,pre,row,of,hello,true,1l,pre,instead,of,pre,row,row,new,row,3,row,set,field,0,hello,row,set,field,1,true,row,set,field,2,1l,pre;public,static,row,of,object,values,row,row,new,row,values,length,for,int,i,0,i,values,length,i,row,set,field,i,values,i,return,row
Row -> public static Row of(Object... values);1508229353;Creates a new Row and assigns the given values to the Row's fields._This is more convenient than using the constructor.__<p>For example:__<pre>_Row.of("hello", true, 1L)_}_</pre>_instead of_<pre>_Row row = new Row(3)__row.setField(0, "hello")__row.setField(1, true)__row.setField(2, 1L)__</pre>;public static Row of(Object... values) {_		Row row = new Row(values.length)__		for (int i = 0_ i < values.length_ i++) {_			row.setField(i, values[i])__		}_		return row__	};creates,a,new,row,and,assigns,the,given,values,to,the,row,s,fields,this,is,more,convenient,than,using,the,constructor,p,for,example,pre,row,of,hello,true,1l,pre,instead,of,pre,row,row,new,row,3,row,set,field,0,hello,row,set,field,1,true,row,set,field,2,1l,pre;public,static,row,of,object,values,row,row,new,row,values,length,for,int,i,0,i,values,length,i,row,set,field,i,values,i,return,row
Row -> public static Row of(Object... values);1515168870;Creates a new Row and assigns the given values to the Row's fields._This is more convenient than using the constructor.__<p>For example:__<pre>_Row.of("hello", true, 1L)_}_</pre>_instead of_<pre>_Row row = new Row(3)__row.setField(0, "hello")__row.setField(1, true)__row.setField(2, 1L)__</pre>;public static Row of(Object... values) {_		Row row = new Row(values.length)__		for (int i = 0_ i < values.length_ i++) {_			row.setField(i, values[i])__		}_		return row__	};creates,a,new,row,and,assigns,the,given,values,to,the,row,s,fields,this,is,more,convenient,than,using,the,constructor,p,for,example,pre,row,of,hello,true,1l,pre,instead,of,pre,row,row,new,row,3,row,set,field,0,hello,row,set,field,1,true,row,set,field,2,1l,pre;public,static,row,of,object,values,row,row,new,row,values,length,for,int,i,0,i,values,length,i,row,set,field,i,values,i,return,row
Row -> public Object getField(int pos);1481798200;Gets the field at the specified position._@param pos The position of the field, 0-based._@return The field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public Object getField(int pos) {_		return fields[pos]__	};gets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,return,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,object,get,field,int,pos,return,fields,pos
Row -> public Object getField(int pos);1482418854;Gets the field at the specified position._@param pos The position of the field, 0-based._@return The field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public Object getField(int pos) {_		return fields[pos]__	};gets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,return,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,object,get,field,int,pos,return,fields,pos
Row -> public Object getField(int pos);1488589862;Gets the field at the specified position._@param pos The position of the field, 0-based._@return The field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public Object getField(int pos) {_		return fields[pos]__	};gets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,return,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,object,get,field,int,pos,return,fields,pos
Row -> public Object getField(int pos);1508229353;Gets the field at the specified position._@param pos The position of the field, 0-based._@return The field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public Object getField(int pos) {_		return fields[pos]__	};gets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,return,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,object,get,field,int,pos,return,fields,pos
Row -> public Object getField(int pos);1515168870;Gets the field at the specified position._@param pos The position of the field, 0-based._@return The field at the specified position._@throws IndexOutOfBoundsException Thrown, if the position is negative, or equal to, or larger than the number of fields.;public Object getField(int pos) {_		return fields[pos]__	};gets,the,field,at,the,specified,position,param,pos,the,position,of,the,field,0,based,return,the,field,at,the,specified,position,throws,index,out,of,bounds,exception,thrown,if,the,position,is,negative,or,equal,to,or,larger,than,the,number,of,fields;public,object,get,field,int,pos,return,fields,pos
Row -> public int getArity();1481798200;Get the number of fields in the Row._@return The number of fields in the Row.;public int getArity() {_		return fields.length__	};get,the,number,of,fields,in,the,row,return,the,number,of,fields,in,the,row;public,int,get,arity,return,fields,length
Row -> public int getArity();1482418854;Get the number of fields in the Row._@return The number of fields in the Row.;public int getArity() {_		return fields.length__	};get,the,number,of,fields,in,the,row,return,the,number,of,fields,in,the,row;public,int,get,arity,return,fields,length
Row -> public int getArity();1488589862;Get the number of fields in the Row._@return The number of fields in the Row.;public int getArity() {_		return fields.length__	};get,the,number,of,fields,in,the,row,return,the,number,of,fields,in,the,row;public,int,get,arity,return,fields,length
Row -> public int getArity();1508229353;Get the number of fields in the Row._@return The number of fields in the Row.;public int getArity() {_		return fields.length__	};get,the,number,of,fields,in,the,row,return,the,number,of,fields,in,the,row;public,int,get,arity,return,fields,length
Row -> public int getArity();1515168870;Get the number of fields in the Row._@return The number of fields in the Row.;public int getArity() {_		return fields.length__	};get,the,number,of,fields,in,the,row,return,the,number,of,fields,in,the,row;public,int,get,arity,return,fields,length
Row -> public Row(int arity);1481798200;Create a new Row instance._@param arity The number of fields in the Row;public Row(int arity) {_		this.fields = new Object[arity]__	};create,a,new,row,instance,param,arity,the,number,of,fields,in,the,row;public,row,int,arity,this,fields,new,object,arity
Row -> public Row(int arity);1482418854;Create a new Row instance._@param arity The number of fields in the Row;public Row(int arity) {_		this.fields = new Object[arity]__	};create,a,new,row,instance,param,arity,the,number,of,fields,in,the,row;public,row,int,arity,this,fields,new,object,arity
Row -> public Row(int arity);1488589862;Create a new Row instance._@param arity The number of fields in the Row;public Row(int arity) {_		this.fields = new Object[arity]__	};create,a,new,row,instance,param,arity,the,number,of,fields,in,the,row;public,row,int,arity,this,fields,new,object,arity
Row -> public Row(int arity);1508229353;Create a new Row instance._@param arity The number of fields in the Row;public Row(int arity) {_		this.fields = new Object[arity]__	};create,a,new,row,instance,param,arity,the,number,of,fields,in,the,row;public,row,int,arity,this,fields,new,object,arity
Row -> public Row(int arity);1515168870;Create a new Row instance._@param arity The number of fields in the Row;public Row(int arity) {_		this.fields = new Object[arity]__	};create,a,new,row,instance,param,arity,the,number,of,fields,in,the,row;public,row,int,arity,this,fields,new,object,arity
Row -> public static Row project(Row row, int[] fields);1508229353;Creates a new Row with projected fields from another row._This method does not perform a deep copy.__@param fields fields to be projected_@return the new projected Row;public static Row project(Row row, int[] fields) {_		final Row newRow = new Row(fields.length)__		for (int i = 0_ i < fields.length_ i++) {_			newRow.fields[i] = row.fields[fields[i]]__		}_		return newRow__	};creates,a,new,row,with,projected,fields,from,another,row,this,method,does,not,perform,a,deep,copy,param,fields,fields,to,be,projected,return,the,new,projected,row;public,static,row,project,row,row,int,fields,final,row,new,row,new,row,fields,length,for,int,i,0,i,fields,length,i,new,row,fields,i,row,fields,fields,i,return,new,row
Row -> public static Row project(Row row, int[] fields);1515168870;Creates a new Row with projected fields from another row._This method does not perform a deep copy.__@param fields fields to be projected_@return the new projected Row;public static Row project(Row row, int[] fields) {_		final Row newRow = new Row(fields.length)__		for (int i = 0_ i < fields.length_ i++) {_			newRow.fields[i] = row.fields[fields[i]]__		}_		return newRow__	};creates,a,new,row,with,projected,fields,from,another,row,this,method,does,not,perform,a,deep,copy,param,fields,fields,to,be,projected,return,the,new,projected,row;public,static,row,project,row,row,int,fields,final,row,new,row,new,row,fields,length,for,int,i,0,i,fields,length,i,new,row,fields,i,row,fields,fields,i,return,new,row
