commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;// -------------------------------------------------------------------------------------------- @Override public FieldList addField(Integer fieldID) {     if (fieldID == null) {         throw new IllegalArgumentException("Field ID must not be null.").     }     if (size() == 0) {         return new FieldList(fieldID).     } else {         ArrayList<Integer> list = new ArrayList<Integer>(size() + 1).         list.addAll(this.collection).         list.add(fieldID).         return new FieldList(Collections.unmodifiableList(list)).     } }
false;public;1;17;;@Override public FieldList addFields(int... fieldIDs) {     if (fieldIDs == null || fieldIDs.length == 0) {         return this.     }     if (size() == 0) {         return new FieldList(fieldIDs).     } else {         ArrayList<Integer> list = new ArrayList<Integer>(size() + fieldIDs.length).         list.addAll(this.collection).         for (int i = 0. i < fieldIDs.length. i++) {             list.add(fieldIDs[i]).         }         return new FieldList(Collections.unmodifiableList(list)).     } }
false;public;1;19;;@Override public FieldList addFields(FieldSet set) {     if (set == null) {         throw new IllegalArgumentException("FieldSet to add must not be null.").     }     if (set.size() == 0) {         return this.     } else if (size() == 0 && set instanceof FieldList) {         return (FieldList) set.     } else {         ArrayList<Integer> list = new ArrayList<Integer>(size() + set.size()).         list.addAll(this.collection).         list.addAll(set.collection).         return new FieldList(Collections.unmodifiableList(list)).     } }
false;public;1;3;;public Integer get(int pos) {     return get().get(pos). }
false;public;0;4;;@Override public FieldList toFieldList() {     return this. }
false;public;1;8;;// -------------------------------------------------------------------------------------------- @Override public boolean isValidSubset(FieldSet set) {     if (set instanceof FieldList) {         return (isValidSubset((FieldList) set)).     } else {         return false.     } }
false;public;1;15;;public boolean isValidSubset(FieldList list) {     if (list.size() > size()) {         return false.     }     final List<Integer> myList = get().     final List<Integer> theirList = list.get().     for (int i = 0. i < theirList.size(). i++) {         Integer myInt = myList.get(i).         Integer theirInt = theirList.get(i).         if (myInt.intValue() != theirInt.intValue()) {             return false.         }     }     return true. }
false;public;1;13;;public boolean isValidUnorderedPrefix(FieldSet set) {     if (set.size() > size()) {         return false.     }     List<Integer> list = get().     for (int i = 0. i < set.size(). i++) {         if (!set.contains(list.get(i))) {             return false.         }     }     return true. }
false;public;1;12;;public boolean isExactMatch(FieldList list) {     if (this.size() != list.size()) {         return false.     } else {         for (int i = 0. i < this.size(). i++) {             if (!this.get(i).equals(list.get(i))) {                 return false.             }         }         return true.     } }
false;protected;0;4;;// -------------------------------------------------------------------------------------------- @Override protected String getDescriptionPrefix() {     return "[". }
false;protected;0;4;;@Override protected String getDescriptionSuffix() {     return "]". }
false;private;0;3;;private List<Integer> get() {     return (List<Integer>) this.collection. }
false;private,static,final;1;11;;private static final List<Integer> fromInts(int... ints) {     if (ints == null || ints.length == 0) {         return Collections.emptyList().     } else {         ArrayList<Integer> al = new ArrayList<Integer>(ints.length).         for (int i = 0. i < ints.length. i++) {             al.add(ints[i]).         }         return Collections.unmodifiableList(al).     } }
