commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the type information for the elements contained in the list  */ ;// ------------------------------------------------------------------------ // ListTypeInfo specific properties // ------------------------------------------------------------------------ /**  * Gets the type information for the elements contained in the list  */ public TypeInformation<T> getElementTypeInfo() {     return elementTypeInfo. }
false;public;0;4;;// ------------------------------------------------------------------------ // TypeInformation implementation // ------------------------------------------------------------------------ @Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 0. }
false;public;0;6;;@Override public int getTotalFields() {     // since the list's elements are not addressable, we do not expose them     return 1. }
false;public;0;5;;@SuppressWarnings("unchecked") @Override public Class<List<T>> getTypeClass() {     return (Class<List<T>>) (Class<?>) List.class. }
false;public;0;4;;@Override public boolean isKeyType() {     return false. }
false;public;1;5;;@Override public TypeSerializer<List<T>> createSerializer(ExecutionConfig config) {     TypeSerializer<T> elementTypeSerializer = elementTypeInfo.createSerializer(config).     return new ListSerializer<>(elementTypeSerializer). }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public String toString() {     return "List<" + elementTypeInfo + '>'. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj instanceof ListTypeInfo) {         final ListTypeInfo<?> other = (ListTypeInfo<?>) obj.         return other.canEqual(this) && elementTypeInfo.equals(other.elementTypeInfo).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return 31 * elementTypeInfo.hashCode() + 1. }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj != null && obj.getClass() == getClass(). }
