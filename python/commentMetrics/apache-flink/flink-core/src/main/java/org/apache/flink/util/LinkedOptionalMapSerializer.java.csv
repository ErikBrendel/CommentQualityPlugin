commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;28;;public static <K, V> void writeOptionalMap(DataOutputView out, LinkedOptionalMap<K, V> map, BiConsumerWithException<DataOutputView, K, IOException> keyWriter, BiConsumerWithException<DataOutputView, V, IOException> valueWriter) throws IOException {     out.writeLong(HEADER).     out.writeInt(map.size()).     map.forEach(((keyName, key, value) -> {         out.writeUTF(keyName).         if (key == null) {             out.writeBoolean(false).         } else {             out.writeBoolean(true).             writeFramed(out, keyWriter, key).         }         if (value == null) {             out.writeBoolean(false).         } else {             out.writeBoolean(true).             writeFramed(out, valueWriter, value).         }     })). }
false;public,static;3;33;;public static <K, V> LinkedOptionalMap<K, V> readOptionalMap(DataInputView in, BiFunctionWithException<DataInputView, String, K, IOException> keyReader, BiFunctionWithException<DataInputView, String, V, IOException> valueReader) throws IOException {     final long header = in.readLong().     checkState(header == HEADER, "Corrupted stream received header %d", header).     long mapSize = in.readInt().     LinkedOptionalMap<K, V> map = new LinkedOptionalMap<>().     for (int i = 0. i < mapSize. i++) {         String keyName = in.readUTF().         final K key.         if (in.readBoolean()) {             key = tryReadFrame(in, keyName, keyReader).         } else {             key = null.         }         final V value.         if (in.readBoolean()) {             value = tryReadFrame(in, keyName, valueReader).         } else {             value = null.         }         map.put(keyName, key, value).     }     return map. }
false;private,static;3;8;;private static <T> void writeFramed(DataOutputView out, BiConsumerWithException<DataOutputView, T, IOException> writer, T item) throws IOException {     DataOutputSerializer frame = new DataOutputSerializer(64).     writer.accept(frame, item).     final byte[] buffer = frame.getCopyOfBuffer().     out.writeInt(buffer.length).     out.write(buffer). }
false;private,static;3;8;;@Nullable private static <T> T tryReadFrame(DataInputView in, String keyName, BiFunctionWithException<DataInputView, String, T, IOException> reader) throws IOException {     final int bufferSize = in.readInt().     final byte[] buffer = new byte[bufferSize].     in.readFully(buffer).     DataInputDeserializer frame = new DataInputDeserializer(buffer).     return reader.apply(frame, keyName). }
