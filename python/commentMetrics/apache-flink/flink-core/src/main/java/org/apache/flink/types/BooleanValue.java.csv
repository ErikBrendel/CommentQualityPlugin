commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean get() {     return value. }
false;public;1;3;;public void set(boolean value) {     this.value = value. }
false;public;0;3;;public boolean getValue() {     return value. }
false;public;1;3;;public void setValue(boolean value) {     this.value = value. }
false;public;1;4;;@Override public void setValue(BooleanValue value) {     this.value = value.value. }
false;public;1;4;;// -------------------------------------------------------------------------------------------- @Override public void write(DataOutputView out) throws IOException {     out.writeBoolean(this.value). }
false;public;1;4;;@Override public void read(DataInputView in) throws IOException {     this.value = in.readBoolean(). }
false;public;0;4;;@Override public int hashCode() {     return this.value ? 1 : 0. }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj instanceof BooleanValue) {         return ((BooleanValue) obj).value == this.value.     }     return false. }
false;public;1;6;;@Override public int compareTo(BooleanValue o) {     final int ov = o.value ? 1 : 0.     final int tv = this.value ? 1 : 0.     return tv - ov. }
false;public;0;4;;@Override public String toString() {     return this.value ? "true" : "false". }
false;public;0;4;;@Override public int getBinaryLength() {     return 1. }
false;public;1;4;;@Override public void copyTo(BooleanValue target) {     target.value = this.value. }
false;public;0;4;;@Override public BooleanValue copy() {     return new BooleanValue(this.value). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, 1). }
false;public;0;4;;@Override public int getMaxNormalizedKeyLen() {     return 1. }
false;public;3;10;;@Override public void copyNormalizedKey(MemorySegment target, int offset, int len) {     if (len > 0) {         target.put(offset, (byte) (this.value ? 1 : 0)).         for (offset = offset + 1. len > 1. len--) {             target.put(offset++, (byte) 0).         }     } }
