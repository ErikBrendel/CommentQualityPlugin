commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Class<C> getComponentClass() {     return componentClass. }
false;public;0;3;;public TypeSerializer<C> getComponentSerializer() {     return componentSerializer. }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;10;;@Override public GenericArraySerializer<C> duplicate() {     TypeSerializer<C> duplicateComponentSerializer = this.componentSerializer.duplicate().     if (duplicateComponentSerializer == this.componentSerializer) {         // is not stateful, return ourselves         return this.     } else {         return new GenericArraySerializer<C>(componentClass, duplicateComponentSerializer).     } }
false;public;0;8;;@Override public C[] createInstance() {     if (EMPTY == null) {         EMPTY = create(0).     }     return EMPTY. }
false;public;1;18;;@Override public C[] copy(C[] from) {     final TypeSerializer<C> serializer = this.componentSerializer.     if (serializer.isImmutableType()) {         return Arrays.copyOf(from, from.length).     } else {         C[] copy = create(from.length).         for (int i = 0. i < copy.length. i++) {             C val = from[i].             if (val != null) {                 copy[i] = serializer.copy(val).             }         }         return copy.     } }
false;public;2;4;;@Override public C[] copy(C[] from, C[] reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;13;;@Override public void serialize(C[] value, DataOutputView target) throws IOException {     target.writeInt(value.length).     for (int i = 0. i < value.length. i++) {         C val = value[i].         if (val == null) {             target.writeBoolean(false).         } else {             target.writeBoolean(true).             componentSerializer.serialize(val, target).         }     } }
false;public;1;17;;@Override public C[] deserialize(DataInputView source) throws IOException {     int len = source.readInt().     C[] array = create(len).     for (int i = 0. i < len. i++) {         boolean isNonNull = source.readBoolean().         if (isNonNull) {             array[i] = componentSerializer.deserialize(source).         } else {             array[i] = null.         }     }     return array. }
false;public;2;4;;@Override public C[] deserialize(C[] reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;14;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     int len = source.readInt().     target.writeInt(len).     for (int i = 0. i < len. i++) {         boolean isNonNull = source.readBoolean().         target.writeBoolean(isNonNull).         if (isNonNull) {             componentSerializer.copy(source, target).         }     } }
false;private,final;1;4;;@SuppressWarnings("unchecked") private final C[] create(int len) {     return (C[]) Array.newInstance(componentClass, len). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return 31 * componentClass.hashCode() + componentSerializer.hashCode(). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj instanceof GenericArraySerializer) {         GenericArraySerializer<?> other = (GenericArraySerializer<?>) obj.         return componentClass == other.componentClass && componentSerializer.equals(other.componentSerializer).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return "Serializer " + componentClass.getName() + "[]". }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting & compatibility // -------------------------------------------------------------------------------------------- @Override public GenericArraySerializerSnapshot<C> snapshotConfiguration() {     return new GenericArraySerializerSnapshot<>(this). }
