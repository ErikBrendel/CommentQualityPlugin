commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Type getType() {     return Type.MAP. }
true;public;0;8;/**  * Gets the serializer for the keys in the state.  *  * @return The serializer for the keys in the state.  */ ;/**  * Gets the serializer for the keys in the state.  *  * @return The serializer for the keys in the state.  */ public TypeSerializer<UK> getKeySerializer() {     final TypeSerializer<Map<UK, UV>> rawSerializer = getSerializer().     if (!(rawSerializer instanceof MapSerializer)) {         throw new IllegalStateException("Unexpected serializer type.").     }     return ((MapSerializer<UK, UV>) rawSerializer).getKeySerializer(). }
true;public;0;8;/**  * Gets the serializer for the values in the state.  *  * @return The serializer for the values in the state.  */ ;/**  * Gets the serializer for the values in the state.  *  * @return The serializer for the values in the state.  */ public TypeSerializer<UV> getValueSerializer() {     final TypeSerializer<Map<UK, UV>> rawSerializer = getSerializer().     if (!(rawSerializer instanceof MapSerializer)) {         throw new IllegalStateException("Unexpected serializer type.").     }     return ((MapSerializer<UK, UV>) rawSerializer).getValueSerializer(). }
