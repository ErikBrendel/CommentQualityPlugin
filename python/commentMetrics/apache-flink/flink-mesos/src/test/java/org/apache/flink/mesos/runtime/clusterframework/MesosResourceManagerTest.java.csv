commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     system = AkkaUtils.createLocalActorSystem(flinkConfig). }
false;public;0;4;;@After public void teardown() {     JavaTestKit.shutdownActorSystem(system). }
false;protected;0;4;;@Override protected ActorRef createConnectionMonitor() {     return connectionMonitor.ref(). }
false;protected;1;4;;@Override protected ActorRef createTaskMonitor(SchedulerDriver schedulerDriver) {     return taskRouter.ref(). }
false;protected;2;4;;@Override protected ActorRef createLaunchCoordinator(SchedulerDriver schedulerDriver, ActorRef selfActorRef) {     return launchCoordinator.ref(). }
false;protected;1;4;;@Override protected ActorRef createReconciliationCoordinator(SchedulerDriver schedulerDriver) {     return reconciliationCoordinator.ref(). }
false;protected;2;5;;@Override protected void closeTaskManagerConnection(ResourceID resourceID, Exception cause) {     super.closeTaskManagerConnection(resourceID, cause).     closedTaskManagerConnections.add(resourceID). }
false;public;2;5;;@VisibleForTesting @Override public <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {     return super.callAsync(callable, timeout). }
false;public;1;6;;@Override public Object answer(InvocationOnMock invocation) throws Throwable {     rmActions = invocation.getArgument(2).     slotManagerStarted.complete(true).     return null. }
false;public;0;4;;public void grantLeadership() throws Exception {     rmLeaderSessionId = UUID.randomUUID().     rmLeaderElectionService.isLeader(rmLeaderSessionId).get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS). }
false;public;2;4;;@Override public MesosWorkerStore createMesosWorkerStore(Configuration configuration, Executor executor) throws Exception {     return rmServices.workerStore. }
false;public;0;4;;@Override public ActorSystem getLocalActorSystem() {     return system. }
false;public;0;4;;@Override public MesosArtifactServer getArtifactServer() {     return rmServices.artifactServer. }
false;public;1;3;;@Override public void close(boolean cleanup) throws Exception { }
false;private;2;6;;private MockJobMaster mockJobMaster(MockResourceManagerRuntimeServices rmServices, JobID jobID) {     MockJobMaster jm = new MockJobMaster(jobID).     rpcService.registerGateway(jm.address, jm.gateway).     rmServices.highAvailabilityServices.setJobMasterLeaderRetriever(jm.jobID, jm.leaderRetrievalService).     return jm. }
false;private;1;5;;private MockTaskExecutor mockTaskExecutor(Protos.TaskID taskID) {     MockTaskExecutor task = new MockTaskExecutor(taskID).     rpcService.registerGateway(task.address, task.gateway).     return task. }
true;public;0;8;/**  * Start the resource manager and grant leadership to it.  */ ;/**  * Start the resource manager and grant leadership to it.  */ public void startResourceManager() throws Exception {     resourceManager.start().     rmServices.grantLeadership().     // drain probe events     verify(rmServices.schedulerDriver).start().     resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class). }
true;public;1;5;/**  * Register a job master with the RM.  */ ;/**  * Register a job master with the RM.  */ public void registerJobMaster(MockJobMaster jobMaster) throws Exception {     CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout).     assertTrue(registration.get() instanceof JobMasterRegistrationSuccess). }
true;public;2;22;/**  * Allocate a worker using the RM.  */ ;/**  * Allocate a worker using the RM.  */ public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {     when(rmServices.workerStore.newTaskID()).thenReturn(taskID).     rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS).     CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(() -> {         rmServices.rmActions.allocateResource(resourceProfile).         return null.     }, timeout).     MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile).     // check for exceptions     allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS).     // drain the probe messages     verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected).     assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected)).     resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class).     resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class).     return expected. }
true;public;1;6;/**  * Prepares a launch operation.  */ ;/**  * Prepares a launch operation.  */ public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {     return Protos.Offer.Operation.newBuilder().setType(Protos.Offer.Operation.Type.LAUNCH).setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))).build(). }
false;public;0;5;;@Override public void close() throws Exception {     rpcService.stopService().get().     fatalErrorHandler.rethrowError(). }
false;public;0;7;;@Test public void testInitialize() throws Exception {     new Context() {          {             startResourceManager().             LOG.info("initialized").         }     }. }
true;public;0;26;/**  * Test recovery of persistent workers.  */ ;/**  * Test recovery of persistent workers.  */ @Test public void testRecoverWorkers() throws Exception {     new Context() {          {             // set the initial persistent state then initialize the RM             MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1).             MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host).             MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker().             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3)).             startResourceManager().             // verify that the internal state was updated, the task router was notified,             // and the launch coordinator was asked to launch a task.             // note: "new" workers are discarded             assertThat(resourceManager.workersInNew.entrySet(), empty()).             assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2)).             assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3)).             resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class).             LaunchCoordinator.Assign actualAssign = resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class).             assertThat(actualAssign.tasks(), hasSize(1)).             assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue())).             assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host)).             resourceManager.launchCoordinator.expectNoMsg().         }     }. }
true;public;0;28;/**  * Test request for new workers.  */ ;/**  * Test request for new workers.  */ @Test public void testRequestNewWorkers() throws Exception {     new Context() {          {             startResourceManager().             // allocate a worker             when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError()).             rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS).             CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(() -> {                 rmServices.rmActions.allocateResource(resourceProfile1).                 return null.             }, timeout).             // check for exceptions             allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS).             // verify that a new worker was persisted, the internal state was updated, the task router was notified,             // and the launch coordinator was asked to launch a task             MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1).             verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected).             assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected)).             resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class).             resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class).         }     }. }
true;public;0;12;/**  * Test offer handling.  */ ;/**  * Test offer handling.  */ @Test public void testOfferHandling() throws Exception {     new Context() {          {             startResourceManager().             // Verify that the RM forwards offers to the launch coordinator.             resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList())).             resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class).             resourceManager.offerRescinded(new OfferRescinded(offer1)).             resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class).         }     }. }
true;public;0;26;/**  * Test offer acceptance.  */ ;/**  * Test offer acceptance.  */ @Test public void testAcceptOffers() throws Exception {     new Context() {          {             startResourceManager().             // allocate a new worker             MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1).             // send an AcceptOffers message as the LaunchCoordinator would             // to launch task1 onto slave1 with offer1             Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder().setTaskId(task1).setName("").setSlaveId(slave1).build().             AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info))).             resourceManager.acceptOffers(msg).             // verify that the worker was persisted, the internal state was updated,             // Mesos was asked to launch task1, and the task router was notified             MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host).             verify(rmServices.workerStore).putWorker(worker1launched).             assertThat(resourceManager.workersInNew.entrySet(), empty()).             assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched)).             resourceManager.taskRouter.expectMsg(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched))).             verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters()).         }     }. }
true;public;0;12;/**  * Test status handling.  */ ;/**  * Test status handling.  */ @Test public void testStatusHandling() throws Exception {     new Context() {          {             startResourceManager().             // Verify that the RM forwards status updates to the launch coordinator and task router.             resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build())).             resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class).             resourceManager.taskRouter.expectMsgClass(StatusUpdate.class).         }     }. }
true;public;0;28;/**  * Test worker registration after launch.  */ ;/**  * Test worker registration after launch.  */ @Test public void testWorkerStarted() throws Exception {     new Context() {          {             // set the initial state with a (recovered) launched worker             MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host).             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched)).             startResourceManager().             assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched)).             final int dataPort = 1234.             final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L).             // send registration message             CompletableFuture<RegistrationResponse> successfulFuture = resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout).             RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS).             assertTrue(response instanceof TaskExecutorRegistrationSuccess).             final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response.             final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout).             // check for errors             initialSlotReportFuture.get().             // verify the internal state             assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched)).         }     }. }
true;public;0;25;/**  * Test unplanned task failure of a pending worker.  */ ;/**  * Test unplanned task failure of a pending worker.  */ @Test public void testWorkerFailed() throws Exception {     new Context() {          {             // set the initial persistent state with a launched worker             MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host).             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched)).             when(rmServices.workerStore.newTaskID()).thenReturn(task2).             startResourceManager().             // tell the RM that a task failed             when(rmServices.workerStore.removeWorker(task1)).thenReturn(true).             resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder().setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build())).             // verify that the instance state was updated             verify(rmServices.workerStore).removeWorker(task1).             assertThat(resourceManager.workersInLaunch.entrySet(), empty()).             assertThat(resourceManager.workersBeingReturned.entrySet(), empty()).             assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2))).             // verify that `closeTaskManagerConnection` was called             assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1))).         }     }. }
true;public;0;26;/**  * Test planned stop of a launched worker.  */ ;/**  * Test planned stop of a launched worker.  */ @Test public void testStopWorker() throws Exception {     new Context() {          {             // set the initial persistent state with a launched worker             MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host).             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched)).             startResourceManager().             // drain the assign message             resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class).             // tell the RM to stop the worker             resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched)).             // verify that the instance state was updated             MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker().             verify(rmServices.workerStore).putWorker(worker1Released).             assertThat(resourceManager.workersInLaunch.entrySet(), empty()).             assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released)).             // verify that the monitor was notified             resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class).             resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class).         }     }. }
true;public;0;11;/**  * Test application shutdown handling.  */ ;/**  * Test application shutdown handling.  */ @Test public void testShutdownApplication() throws Exception {     new Context() {          {             startResourceManager().             resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "").             // verify that the Mesos framework is shutdown             verify(rmServices.schedulerDriver).stop(false).             verify(rmServices.workerStore).stop(true).         }     }. }
true;public;0;16;/**  * Test Mesos registration handling.  */ ;// ------------- connectivity tests ----------------------------- /**  * Test Mesos registration handling.  */ @Test public void testRegistered() throws Exception {     new Context() {          {             startResourceManager().             Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder().setId("master1").setIp(0).setPort(5050).build().             resourceManager.registered(new Registered(framework1, masterInfo)).             verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1)).             resourceManager.connectionMonitor.expectMsgClass(Registered.class).             resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class).             resourceManager.launchCoordinator.expectMsgClass(Registered.class).             resourceManager.taskRouter.expectMsgClass(Registered.class).         }     }. }
true;public;0;16;/**  * Test Mesos re-registration handling.  */ ;/**  * Test Mesos re-registration handling.  */ @Test public void testReRegistered() throws Exception {     new Context() {          {             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             startResourceManager().             Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder().setId("master1").setIp(0).setPort(5050).build().             resourceManager.reregistered(new ReRegistered(masterInfo)).             resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class).             resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class).             resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class).             resourceManager.taskRouter.expectMsgClass(ReRegistered.class).         }     }. }
true;public;0;14;/**  * Test Mesos re-registration handling.  */ ;/**  * Test Mesos re-registration handling.  */ @Test public void testDisconnected() throws Exception {     new Context() {          {             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             startResourceManager().             resourceManager.disconnected(new Disconnected()).             resourceManager.connectionMonitor.expectMsgClass(Disconnected.class).             resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class).             resourceManager.launchCoordinator.expectMsgClass(Disconnected.class).             resourceManager.taskRouter.expectMsgClass(Disconnected.class).         }     }. }
false;public;0;19;;@Test public void testClearStateAfterRevokeLeadership() throws Exception {     new Context() {          {             final MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1).             final MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host).             final MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker().             when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1)).             when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3)).thenReturn(Collections.emptyList()).             startResourceManager().             rmServices.rmLeaderElectionService.notLeader().             rmServices.grantLeadership().             assertThat(resourceManager.workersInNew.size(), equalTo(0)).             assertThat(resourceManager.workersInLaunch.size(), equalTo(0)).             assertThat(resourceManager.workersBeingReturned.size(), equalTo(0)).             verify(rmServices.schedulerDriver).stop(true).         }     }. }
