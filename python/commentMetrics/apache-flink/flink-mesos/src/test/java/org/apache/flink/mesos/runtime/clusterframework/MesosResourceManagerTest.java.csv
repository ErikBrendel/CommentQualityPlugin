# id;timestamp;commentText;codeText;commentWords;codeWords
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1498718472;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1498718493;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1498718494;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1501760738;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1502452184;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1502706197;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1503156321;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1503156481;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1504525441;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1504608225;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1508597556;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1509547920;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1509547921;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1510063662;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1510152676;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1516971021;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1517302807;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1517915730;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1519406526;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1519638690;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1521804760;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1525961911;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1527173115;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1530393587;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1530683488;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1532290976;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1533306679;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1534403158;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1538127495;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1538998760;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1539582211;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testWorkerFailed() throws Exception;1548932321;Test unplanned task failure of a pending worker.;@Test_	public void testWorkerFailed() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			when(rmServices.workerStore.newTaskID()).thenReturn(task2)__			startResourceManager()___			_			when(rmServices.workerStore.removeWorker(task1)).thenReturn(true)__			resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1, Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()))___			_			verify(rmServices.workerStore).removeWorker(task1)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned.entrySet(), empty())__			assertThat(resourceManager.workersInNew, hasKey(extractResourceID(task2)))___			_			assertThat(resourceManager.closedTaskManagerConnections, hasItem(extractResourceID(task1)))__		}}__	};test,unplanned,task,failure,of,a,pending,worker;test,public,void,test,worker,failed,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,when,rm,services,worker,store,new,task,id,then,return,task2,start,resource,manager,when,rm,services,worker,store,remove,worker,task1,then,return,true,resource,manager,task,terminated,new,task,monitor,task,terminated,task1,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,verify,rm,services,worker,store,remove,worker,task1,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,entry,set,empty,assert,that,resource,manager,workers,in,new,has,key,extract,resource,id,task2,assert,that,resource,manager,closed,task,manager,connections,has,item,extract,resource,id,task1
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1498718472;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1498718493;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1498718494;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1501760738;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1502452184;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1502706197;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1503156321;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1503156481;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1504525441;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1504608225;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1508597556;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1509547920;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1509547921;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1510063662;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1510152676;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1516971021;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1517302807;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1517915730;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1519406526;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1519638690;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.shutDownCluster(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,shut,down,cluster,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1521804760;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1525961911;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1527173115;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1530393587;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1530683488;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1532290976;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1533306679;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1534403158;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1538127495;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1538998760;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1539582211;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testShutdownApplication() throws Exception;1548932321;Test application shutdown handling.;@Test_	public void testShutdownApplication() throws Exception {_		new Context() {{_			startResourceManager()__			resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, "")___			_			verify(rmServices.schedulerDriver).stop(false)__			verify(rmServices.workerStore).stop(true)__		}}__	};test,application,shutdown,handling;test,public,void,test,shutdown,application,throws,exception,new,context,start,resource,manager,resource,manager,deregister,application,application,status,succeeded,verify,rm,services,scheduler,driver,stop,false,verify,rm,services,worker,store,stop,true
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1498718472;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1498718493;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1498718494;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1501760738;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1502452184;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1502706197;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1503156321;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1503156481;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1504525441;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1504608225;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1508597556;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1509547920;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1509547921;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1510063662;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1510152676;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1516971021;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1517302807;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1517915730;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1519406526;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1519638690;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1521804760;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1525961911;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1527173115;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1530393587;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1530683488;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1532290976;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1533306679;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1534403158;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1538127495;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1538998760;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1539582211;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testReRegistered() throws Exception;1548932321;Test Mesos re-registration handling.;@Test_	public void testReRegistered() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.reregistered(new ReRegistered(masterInfo))___			resourceManager.connectionMonitor.expectMsgClass(ReRegistered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.launchCoordinator.expectMsgClass(ReRegistered.class)__			resourceManager.taskRouter.expectMsgClass(ReRegistered.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,re,registered,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,reregistered,new,re,registered,master,info,resource,manager,connection,monitor,expect,msg,class,re,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,re,registered,class,resource,manager,launch,coordinator,expect,msg,class,re,registered,class,resource,manager,task,router,expect,msg,class,re,registered,class
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1498718472;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1498718493;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1498718494;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1501760738;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1502452184;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1502706197;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1503156321;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1503156481;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(rmServices.rmLeaderSessionId, task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,rm,services,rm,leader,session,id,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1504525441;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1504608225;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1508597556;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1509547920;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1509547921;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1510063662;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1510152676;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1516971021;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1517302807;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1517915730;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1519406526;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1519638690;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1521804760;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1525961911;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1527173115;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1530393587;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1530683488;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1532290976;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1533306679;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1534403158;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1538127495;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1538998760;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1539582211;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testWorkerStarted() throws Exception;1548932321;Test worker registration after launch.;@Test_	public void testWorkerStarted() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))___			final int dataPort = 1234__			final HardwareDescription hardwareDescription = new HardwareDescription(1, 2L, 3L, 4L)__			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(task1Executor.address, task1Executor.resourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskExecutorRegistrationSuccess registrationResponse = (TaskExecutorRegistrationSuccess) response___			final CompletableFuture<Acknowledge> initialSlotReportFuture = resourceManager.sendSlotReport(task1Executor.resourceID, registrationResponse.getRegistrationId(), slotReport, timeout)___			_			initialSlotReportFuture.get()___			_			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__		}}__	};test,worker,registration,after,launch;test,public,void,test,worker,started,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,final,int,data,port,1234,final,hardware,description,hardware,description,new,hardware,description,1,2l,3l,4l,completable,future,registration,response,successful,future,resource,manager,register,task,executor,task1executor,address,task1executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,executor,registration,success,registration,response,task,executor,registration,success,response,final,completable,future,acknowledge,initial,slot,report,future,resource,manager,send,slot,report,task1executor,resource,id,registration,response,get,registration,id,slot,report,timeout,initial,slot,report,future,get,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1498718472;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1498718493;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1498718494;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1501760738;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1502452184;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1502706197;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1503156321;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1503156481;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1504525441;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1504608225;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1508597556;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1509547920;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1509547921;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1510063662;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1510152676;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1516971021;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1517302807;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1517915730;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1519406526;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1519638690;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1521804760;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1525961911;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1527173115;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1530393587;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1530683488;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1532290976;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1533306679;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1534403158;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1538127495;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1538998760;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1539582211;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testAcceptOffers() throws Exception;1548932321;Test offer acceptance.;@Test_	public void testAcceptOffers() throws Exception {_		new Context() {{_			startResourceManager()___			_			MesosWorkerStore.Worker worker1 = allocateWorker(task1, resourceProfile1)___			_			_			Protos.TaskInfo task1info = Protos.TaskInfo.newBuilder()_				.setTaskId(task1).setName("").setSlaveId(slave1).build()__			AcceptOffers msg = new AcceptOffers(slave1host, singletonList(offer1), singletonList(launch(task1info)))__			resourceManager.acceptOffers(msg)___			_			_			MesosWorkerStore.Worker worker1launched = worker1.launchWorker(slave1, slave1host)__			verify(rmServices.workerStore).putWorker(worker1launched)__			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched))__			resourceManager.taskRouter.expectMsg(_				new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker1launched)))__			verify(rmServices.schedulerDriver).acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}}__	};test,offer,acceptance;test,public,void,test,accept,offers,throws,exception,new,context,start,resource,manager,mesos,worker,store,worker,worker1,allocate,worker,task1,resource,profile1,protos,task,info,task1info,protos,task,info,new,builder,set,task,id,task1,set,name,set,slave,id,slave1,build,accept,offers,msg,new,accept,offers,slave1host,singleton,list,offer1,singleton,list,launch,task1info,resource,manager,accept,offers,msg,mesos,worker,store,worker,worker1launched,worker1,launch,worker,slave1,slave1host,verify,rm,services,worker,store,put,worker,worker1launched,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task1,worker1launched,resource,manager,task,router,expect,msg,new,task,monitor,task,goal,state,updated,extract,goal,state,worker1launched,verify,rm,services,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1503156481;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1504525441;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1504608225;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1508597556;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1509547920;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1509547921;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1510063662;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(extractResourceID(task1))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,extract,resource,id,task1,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1510152676;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1516971021;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1517302807;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1517915730;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1519406526;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1519638690;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1521804760;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1525961911;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1527173115;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1530393587;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1530683488;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1532290976;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1533306679;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1534403158;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1538127495;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1538998760;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1539582211;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> @Test 	public void testStopWorker() throws Exception;1548932321;Test planned stop of a launched worker.;@Test_	public void testStopWorker() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1launched = MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1, slave1host)__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched))__			startResourceManager()___			_			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)___			_			resourceManager.stopWorker(new RegisteredMesosWorkerNode(worker1launched))___			_			MesosWorkerStore.Worker worker1Released = worker1launched.releaseWorker()__			verify(rmServices.workerStore).putWorker(worker1Released)__			assertThat(resourceManager.workersInLaunch.entrySet(), empty())__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released))___			_			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Unassign.class)__		}}__	};test,planned,stop,of,a,launched,worker;test,public,void,test,stop,worker,throws,exception,new,context,mesos,worker,store,worker,worker1launched,mesos,worker,store,worker,new,worker,task1,launch,worker,slave1,slave1host,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,singleton,list,worker1launched,start,resource,manager,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,resource,manager,stop,worker,new,registered,mesos,worker,node,worker1launched,mesos,worker,store,worker,worker1released,worker1launched,release,worker,verify,rm,services,worker,store,put,worker,worker1released,assert,that,resource,manager,workers,in,launch,entry,set,empty,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task1,worker1released,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,unassign,class
MesosResourceManagerTest -> Context -> Context() throws Exception;1498718493;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingSerialRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					rmAddress,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					system,_					flinkConfig,_					rmServices.mesosConfig,_					rmServices.workerStore,_					tmParams,_					containerSpecification,_					rmServices.artifactResolver_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1,0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,serial,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,address,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,system,flink,config,rm,services,mesos,config,rm,services,worker,store,tm,params,container,specification,rm,services,artifact,resolver,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1498718494;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingSerialRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					system,_					flinkConfig,_					rmServices.mesosConfig,_					rmServices.workerStore,_					tmParams,_					containerSpecification,_					rmServices.artifactResolver_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,serial,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,system,flink,config,rm,services,mesos,config,rm,services,worker,store,tm,params,container,specification,rm,services,artifact,resolver,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1501760738;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingSerialRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					system,_					flinkConfig,_					rmServices.mesosConfig,_					rmServices.workerStore,_					tmParams,_					containerSpecification,_					rmServices.artifactResolver_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,serial,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,system,flink,config,rm,services,mesos,config,rm,services,worker,store,tm,params,container,specification,rm,services,artifact,resolver,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1502452184;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingSerialRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					system,_					flinkConfig,_					rmServices.mesosConfig,_					rmServices.workerStore,_					tmParams,_					containerSpecification,_					rmServices.artifactResolver_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,serial,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,system,flink,config,rm,services,mesos,config,rm,services,worker,store,tm,params,container,specification,rm,services,artifact,resolver,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1502706197;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					system,_					flinkConfig,_					rmServices.mesosConfig,_					rmServices.workerStore,_					tmParams,_					containerSpecification,_					rmServices.artifactResolver_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,system,flink,config,rm,services,mesos,config,rm,services,worker,store,tm,params,container,specification,rm,services,artifact,resolver,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1503156321;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1503156481;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1504525441;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1504608225;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1508597556;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1509547920;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1509547921;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1510063662;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1510152676;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1516971021;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1517302807;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1517915730;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1519406526;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1519638690;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1521804760;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1525961911;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1527173115;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1530393587;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(),_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1530683488;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmConfiguration = new ResourceManagerConfiguration(_				Time.seconds(5L),_				Time.seconds(5L))__			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmConfiguration,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,configuration,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1532290976;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1533306679;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1534403158;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1538127495;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1538998760;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification_				)___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1539582211;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification,_					UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup())___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,unregistered,metric,groups,create,unregistered,job,manager,metric,group,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> Context() throws Exception;1548932321;Create mock RM dependencies.;Context() throws Exception {_			rpcService = new TestingRpcService()__			fatalErrorHandler = new TestingFatalErrorHandler()__			rmServices = new MockMesosResourceManagerRuntimeServices()__			mesosServices = new MockMesosServices()___			_			ContainerSpecification containerSpecification = new ContainerSpecification()__			ContaineredTaskManagerParameters containeredParams =_				new ContaineredTaskManagerParameters(1024, 768, 256, 4, new HashMap<String, String>())__			MesosTaskManagerParameters tmParams = new MesosTaskManagerParameters(_				1.0, 1, MesosTaskManagerParameters.ContainerType.MESOS, Option.<String>empty(), containeredParams,_				Collections.<Protos.Volume>emptyList(), Collections.<Protos.Parameter>emptyList(), false,_				Collections.<ConstraintEvaluator>emptyList(), "", Option.<String>empty(),_				Option.<String>empty(), Collections.<String>emptyList())___			_			rmResourceID = ResourceID.generate()__			resourceManager =_				new TestingMesosResourceManager(_					rpcService,_					RM_ADDRESS,_					rmResourceID,_					rmServices.highAvailabilityServices,_					rmServices.heartbeatServices,_					rmServices.slotManager,_					rmServices.metricRegistry,_					rmServices.jobLeaderIdService,_					fatalErrorHandler,_					_					flinkConfig,_					mesosServices,_					rmServices.mesosConfig,_					tmParams,_					containerSpecification,_					UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup())___			_			task1Executor = mockTaskExecutor(task1)__			task2Executor = mockTaskExecutor(task2)__			task3Executor = mockTaskExecutor(task3)___			_			jobMaster1 = mockJobMaster(rmServices, new JobID(1, 0))__		};create,mock,rm,dependencies;context,throws,exception,rpc,service,new,testing,rpc,service,fatal,error,handler,new,testing,fatal,error,handler,rm,services,new,mock,mesos,resource,manager,runtime,services,mesos,services,new,mock,mesos,services,container,specification,container,specification,new,container,specification,containered,task,manager,parameters,containered,params,new,containered,task,manager,parameters,1024,768,256,4,new,hash,map,string,string,mesos,task,manager,parameters,tm,params,new,mesos,task,manager,parameters,1,0,1,mesos,task,manager,parameters,container,type,mesos,option,string,empty,containered,params,collections,protos,volume,empty,list,collections,protos,parameter,empty,list,false,collections,constraint,evaluator,empty,list,option,string,empty,option,string,empty,collections,string,empty,list,rm,resource,id,resource,id,generate,resource,manager,new,testing,mesos,resource,manager,rpc,service,rm,resource,id,rm,services,high,availability,services,rm,services,heartbeat,services,rm,services,slot,manager,rm,services,metric,registry,rm,services,job,leader,id,service,fatal,error,handler,flink,config,mesos,services,rm,services,mesos,config,tm,params,container,specification,unregistered,metric,groups,create,unregistered,job,manager,metric,group,task1executor,mock,task,executor,task1,task2executor,mock,task,executor,task2,task3executor,mock,task,executor,task3,job,master1,mock,job,master,rm,services,new,job,id,1,0
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1498718472;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1498718493;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1498718494;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1501760738;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1502452184;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1502706197;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1503156321;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1503156481;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1504525441;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1504608225;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1508597556;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1509547920;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1509547921;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1510063662;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1510152676;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1516971021;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1517302807;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1517915730;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1519406526;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1519638690;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1521804760;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1525961911;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1527173115;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1530393587;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1530683488;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1532290976;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1533306679;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1534403158;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1538127495;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1538998760;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1539582211;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> Context -> public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo);1548932321;Prepares a launch operation.;public Protos.Offer.Operation launch(Protos.TaskInfo... taskInfo) {_			return Protos.Offer.Operation.newBuilder()_				.setType(Protos.Offer.Operation.Type.LAUNCH)_				.setLaunch(Protos.Offer.Operation.Launch.newBuilder().addAllTaskInfos(Arrays.asList(taskInfo))_				).build()__		};prepares,a,launch,operation;public,protos,offer,operation,launch,protos,task,info,task,info,return,protos,offer,operation,new,builder,set,type,protos,offer,operation,type,launch,set,launch,protos,offer,operation,launch,new,builder,add,all,task,infos,arrays,as,list,task,info,build
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1498718472;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1498718493;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1498718494;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1501760738;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1502452184;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1502706197;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1503156321;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1503156481;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1504525441;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1504608225;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1508597556;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1509547920;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1509547921;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1510063662;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1510152676;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1516971021;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1517302807;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1517915730;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1519406526;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1519638690;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1521804760;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1525961911;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1527173115;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1530393587;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1530683488;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1532290976;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1533306679;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1534403158;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1538127495;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1538998760;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1539582211;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testStatusHandling() throws Exception;1548932321;Test status handling.;@Test_	public void testStatusHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.statusUpdate(new StatusUpdate(Protos.TaskStatus.newBuilder()_				.setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_LOST).build()))__			resourceManager.reconciliationCoordinator.expectMsgClass(StatusUpdate.class)__			resourceManager.taskRouter.expectMsgClass(StatusUpdate.class)__		}}__	};test,status,handling;test,public,void,test,status,handling,throws,exception,new,context,start,resource,manager,resource,manager,status,update,new,status,update,protos,task,status,new,builder,set,task,id,task1,set,slave,id,slave1,set,state,protos,task,state,build,resource,manager,reconciliation,coordinator,expect,msg,class,status,update,class,resource,manager,task,router,expect,msg,class,status,update,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1498718472;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1498718493;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1498718494;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1501760738;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1502452184;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1502706197;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1503156321;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1503156481;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1504525441;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1504608225;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1508597556;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1509547920;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1509547921;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1510063662;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1510152676;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1516971021;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1517302807;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1517915730;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1519406526;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1519638690;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1521804760;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1525961911;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1527173115;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1530393587;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1530683488;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1532290976;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1533306679;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1534403158;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1538127495;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1538998760;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1539582211;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testDisconnected() throws Exception;1548932321;Test Mesos re-registration handling.;@Test_	public void testDisconnected() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()___			resourceManager.disconnected(new Disconnected())___			resourceManager.connectionMonitor.expectMsgClass(Disconnected.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.launchCoordinator.expectMsgClass(Disconnected.class)__			resourceManager.taskRouter.expectMsgClass(Disconnected.class)__		}}__	};test,mesos,re,registration,handling;test,public,void,test,disconnected,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,disconnected,new,disconnected,resource,manager,connection,monitor,expect,msg,class,disconnected,class,resource,manager,reconciliation,coordinator,expect,msg,class,disconnected,class,resource,manager,launch,coordinator,expect,msg,class,disconnected,class,resource,manager,task,router,expect,msg,class,disconnected,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1498718472;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1498718493;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1498718494;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1501760738;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1502452184;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1502706197;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1503156321;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1503156481;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1504525441;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1504608225;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile1)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile1,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1508597556;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1509547920;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1509547921;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1510063662;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1510152676;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1516971021;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1517302807;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1517915730;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1519406526;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1519638690;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1521804760;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1525961911;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1527173115;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1530393587;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1530683488;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1532290976;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1533306679;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1534403158;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1538127495;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1538998760;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1539582211;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testRequestNewWorkers() throws Exception;1548932321;Test request for new workers.;@Test_	public void testRequestNewWorkers() throws Exception {_		new Context() {{_			startResourceManager()___			_			when(rmServices.workerStore.newTaskID()).thenReturn(task1).thenThrow(new AssertionFailedError())__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile1)__					return null__				},_				timeout)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			_			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(task1, resourceProfile1)__			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__		}}__	};test,request,for,new,workers;test,public,void,test,request,new,workers,throws,exception,new,context,start,resource,manager,when,rm,services,worker,store,new,task,id,then,return,task1,then,throw,new,assertion,failed,error,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile1,return,null,timeout,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task1,resource,profile1,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task1,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1498718472;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1498718493;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1498718494;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1501760738;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1502452184;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1502706197;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1503156321;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1503156481;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1504525441;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1504608225;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1508597556;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1509547920;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1509547921;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1510063662;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1510152676;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1516971021;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1517302807;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1517915730;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1519406526;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1519638690;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1521804760;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1525961911;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1527173115;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1530393587;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1530683488;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1532290976;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1533306679;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1534403158;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1538127495;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1538998760;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1539582211;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testOfferHandling() throws Exception;1548932321;Test offer handling.;@Test_	public void testOfferHandling() throws Exception {_		new Context() {{_			startResourceManager()___			_			resourceManager.resourceOffers(new ResourceOffers(Collections.<Protos.Offer>emptyList()))__			resourceManager.launchCoordinator.expectMsgClass(ResourceOffers.class)__			resourceManager.offerRescinded(new OfferRescinded(offer1))__			resourceManager.launchCoordinator.expectMsgClass(OfferRescinded.class)__		}}__	};test,offer,handling;test,public,void,test,offer,handling,throws,exception,new,context,start,resource,manager,resource,manager,resource,offers,new,resource,offers,collections,protos,offer,empty,list,resource,manager,launch,coordinator,expect,msg,class,resource,offers,class,resource,manager,offer,rescinded,new,offer,rescinded,offer1,resource,manager,launch,coordinator,expect,msg,class,offer,rescinded,class
MesosResourceManagerTest -> @Test 	public void testError() throws Exception;1498718472;Test Mesos scheduler error.;@Test_	public void testError() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()__			resourceManager.error(new Error("test"))__			assertTrue(fatalErrorHandler.hasExceptionOccurred())__		}}__	};test,mesos,scheduler,error;test,public,void,test,error,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,error,new,error,test,assert,true,fatal,error,handler,has,exception,occurred
MesosResourceManagerTest -> @Test 	public void testError() throws Exception;1498718493;Test Mesos scheduler error.;@Test_	public void testError() throws Exception {_		new Context() {{_			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			startResourceManager()__			resourceManager.error(new Error("test"))__			assertTrue(fatalErrorHandler.hasExceptionOccurred())__		}}__	};test,mesos,scheduler,error;test,public,void,test,error,throws,exception,new,context,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,start,resource,manager,resource,manager,error,new,error,test,assert,true,fatal,error,handler,has,exception,occurred
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1498718472;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1498718493;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1498718494;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1501760738;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1502452184;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1502706197;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1503156321;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1503156481;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1504525441;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1504608225;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1508597556;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1509547920;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1509547921;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1510063662;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1510152676;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1516971021;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1517302807;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1517915730;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1519406526;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1519638690;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1521804760;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1525961911;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1527173115;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1530393587;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1530683488;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1532290976;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1533306679;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1534403158;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1538127495;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1538998760;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1539582211;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> @Test 	public void testRecoverWorkers() throws Exception;1548932321;Test recovery of persistent workers.;@Test_	public void testRecoverWorkers() throws Exception {_		new Context() {{_			_			MesosWorkerStore.Worker worker1 = MesosWorkerStore.Worker.newWorker(task1)__			MesosWorkerStore.Worker worker2 = MesosWorkerStore.Worker.newWorker(task2).launchWorker(slave1, slave1host)__			MesosWorkerStore.Worker worker3 = MesosWorkerStore.Worker.newWorker(task3).launchWorker(slave1, slave1host).releaseWorker()__			when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1))__			when(rmServices.workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1, worker2, worker3))__			startResourceManager()___			_			_			_			assertThat(resourceManager.workersInNew.entrySet(), empty())__			assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task2), worker2))__			assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task3), worker3))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			LaunchCoordinator.Assign actualAssign =_				resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class)__			assertThat(actualAssign.tasks(), hasSize(1))__			assertThat(actualAssign.tasks().get(0).f0.getId(), equalTo(task2.getValue()))__			assertThat(actualAssign.tasks().get(0).f1, equalTo(slave1host))__			resourceManager.launchCoordinator.expectNoMsg()__		}}__	};test,recovery,of,persistent,workers;test,public,void,test,recover,workers,throws,exception,new,context,mesos,worker,store,worker,worker1,mesos,worker,store,worker,new,worker,task1,mesos,worker,store,worker,worker2,mesos,worker,store,worker,new,worker,task2,launch,worker,slave1,slave1host,mesos,worker,store,worker,worker3,mesos,worker,store,worker,new,worker,task3,launch,worker,slave1,slave1host,release,worker,when,rm,services,worker,store,get,framework,id,then,return,option,apply,framework1,when,rm,services,worker,store,recover,workers,then,return,arrays,as,list,worker1,worker2,worker3,start,resource,manager,assert,that,resource,manager,workers,in,new,entry,set,empty,assert,that,resource,manager,workers,in,launch,has,entry,extract,resource,id,task2,worker2,assert,that,resource,manager,workers,being,returned,has,entry,extract,resource,id,task3,worker3,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,launch,coordinator,assign,actual,assign,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,assign,class,assert,that,actual,assign,tasks,has,size,1,assert,that,actual,assign,tasks,get,0,f0,get,id,equal,to,task2,get,value,assert,that,actual,assign,tasks,get,0,f1,equal,to,slave1host,resource,manager,launch,coordinator,expect,no,msg
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1498718472;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			Future<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1498718493;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			Future<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1498718494;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			Future<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1501760738;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1502452184;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1502706197;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1503156321;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1503156481;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				rmServices.rmLeaderSessionId, jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,rm,services,rm,leader,session,id,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1504525441;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.leaderSessionID, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,leader,session,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1504608225;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1508597556;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1509547920;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1509547921;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1510063662;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1510152676;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1516971021;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1517302807;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1517915730;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1519406526;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1519638690;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1521804760;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1525961911;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1527173115;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1530393587;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1530683488;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1532290976;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1533306679;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1534403158;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1538127495;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1538998760;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1539582211;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public void registerJobMaster(MockJobMaster jobMaster) throws Exception;1548932321;Register a job master with the RM.;public void registerJobMaster(MockJobMaster jobMaster) throws Exception  {_			CompletableFuture<RegistrationResponse> registration = resourceManager.registerJobManager(_				jobMaster.jobMasterId, jobMaster.resourceID, jobMaster.address, jobMaster.jobID, timeout)__			assertTrue(registration.get() instanceof JobMasterRegistrationSuccess)__		};register,a,job,master,with,the,rm;public,void,register,job,master,mock,job,master,job,master,throws,exception,completable,future,registration,response,registration,resource,manager,register,job,manager,job,master,job,master,id,job,master,resource,id,job,master,address,job,master,job,id,timeout,assert,true,registration,get,instanceof,job,master,registration,success
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1498718472;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1498718493;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1498718494;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1501760738;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1502452184;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1502706197;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1503156321;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1503156481;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1504525441;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1504608225;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			rmServices.rmActions.allocateResource(resourceProfile)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,rm,services,rm,actions,allocate,resource,resource,profile,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1508597556;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1509547920;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1509547921;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1510063662;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1510152676;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1516971021;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1517302807;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1517915730;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1519406526;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1519638690;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1521804760;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1525961911;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1527173115;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1530393587;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1530683488;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1532290976;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1533306679;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1534403158;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1538127495;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1538998760;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1539582211;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> Context -> public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception;1548932321;Allocate a worker using the RM.;public MesosWorkerStore.Worker allocateWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) throws Exception {_			when(rmServices.workerStore.newTaskID()).thenReturn(taskID)__			rmServices.slotManagerStarted.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Void> allocateResourceFuture = resourceManager.callAsync(_				() -> {_					rmServices.rmActions.allocateResource(resourceProfile)__					return null__				},_				timeout)__			MesosWorkerStore.Worker expected = MesosWorkerStore.Worker.newWorker(taskID, resourceProfile)___			_			allocateResourceFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			verify(rmServices.workerStore, Mockito.timeout(timeout.toMilliseconds())).putWorker(expected)__			assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(taskID), expected))__			resourceManager.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class)__			resourceManager.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class)__			return expected__		};allocate,a,worker,using,the,rm;public,mesos,worker,store,worker,allocate,worker,protos,task,id,task,id,resource,profile,resource,profile,throws,exception,when,rm,services,worker,store,new,task,id,then,return,task,id,rm,services,slot,manager,started,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,void,allocate,resource,future,resource,manager,call,async,rm,services,rm,actions,allocate,resource,resource,profile,return,null,timeout,mesos,worker,store,worker,expected,mesos,worker,store,worker,new,worker,task,id,resource,profile,allocate,resource,future,get,timeout,to,milliseconds,time,unit,milliseconds,verify,rm,services,worker,store,mockito,timeout,timeout,to,milliseconds,put,worker,expected,assert,that,resource,manager,workers,in,new,has,entry,extract,resource,id,task,id,expected,resource,manager,task,router,expect,msg,class,task,monitor,task,goal,state,updated,class,resource,manager,launch,coordinator,expect,msg,class,launch,coordinator,launch,class,return,expected
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1498718472;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1498718493;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1498718494;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1501760738;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1502452184;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1502706197;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1503156321;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1503156481;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1504525441;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1504608225;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1508597556;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1509547920;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1509547921;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1510063662;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1510152676;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1516971021;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1517302807;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1517915730;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1519406526;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1519638690;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1521804760;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1525961911;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1527173115;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1530393587;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1530683488;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1532290976;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1533306679;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1534403158;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1538127495;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1538998760;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1539582211;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> @Test 	public void testRegistered() throws Exception;1548932321;Test Mesos registration handling.;@Test_	public void testRegistered() throws Exception {_		new Context() {{_			startResourceManager()___			Protos.MasterInfo masterInfo = Protos.MasterInfo.newBuilder()_				.setId("master1").setIp(0).setPort(5050).build()__			resourceManager.registered(new Registered(framework1, masterInfo))___			verify(rmServices.workerStore).setFrameworkID(Option.apply(framework1))__			resourceManager.connectionMonitor.expectMsgClass(Registered.class)__			resourceManager.reconciliationCoordinator.expectMsgClass(Registered.class)__			resourceManager.launchCoordinator.expectMsgClass(Registered.class)__			resourceManager.taskRouter.expectMsgClass(Registered.class)__		}}__	};test,mesos,registration,handling;test,public,void,test,registered,throws,exception,new,context,start,resource,manager,protos,master,info,master,info,protos,master,info,new,builder,set,id,master1,set,ip,0,set,port,5050,build,resource,manager,registered,new,registered,framework1,master,info,verify,rm,services,worker,store,set,framework,id,option,apply,framework1,resource,manager,connection,monitor,expect,msg,class,registered,class,resource,manager,reconciliation,coordinator,expect,msg,class,registered,class,resource,manager,launch,coordinator,expect,msg,class,registered,class,resource,manager,task,router,expect,msg,class,registered,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1498718493;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1498718494;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1501760738;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1502452184;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1502706197;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1503156321;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1503156481;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1504525441;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1504608225;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1508597556;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1509547920;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1509547921;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1510063662;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1510152676;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1516971021;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1517302807;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1517915730;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1519406526;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1519638690;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1521804760;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1525961911;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1527173115;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1530393587;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1530683488;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1532290976;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1533306679;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1534403158;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1538127495;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1538998760;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1539582211;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
MesosResourceManagerTest -> Context -> public void startResourceManager() throws Exception;1548932321;Start the resource manager and grant leadership to it.;public void startResourceManager() throws Exception {_			resourceManager.start()__			rmServices.grantLeadership()___			_			verify(rmServices.schedulerDriver).start()__			resourceManager.connectionMonitor.expectMsgClass(ConnectionMonitor.Start.class)__		};start,the,resource,manager,and,grant,leadership,to,it;public,void,start,resource,manager,throws,exception,resource,manager,start,rm,services,grant,leadership,verify,rm,services,scheduler,driver,start,resource,manager,connection,monitor,expect,msg,class,connection,monitor,start,class
