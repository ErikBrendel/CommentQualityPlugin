commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Tests that reserved resources are prioritized.  */ ;// region Reservations /**  * Tests that reserved resources are prioritized.  */ @Test public void testReservationPrioritization() {     MesosResourceAllocation allocation = new MesosResourceAllocation(resources(cpus(ROLE_A, 1.0), cpus(UNRESERVED_ROLE, 1.0), cpus(ROLE_B, 1.0))).     Assert.assertEquals(resources(cpus(ROLE_A, 1.0), cpus(ROLE_B, 1.0), cpus(UNRESERVED_ROLE, 1.0)), allocation.getRemaining()). }
true;public;0;42;/**  * Tests that resources are filtered according to the framework role (if any).  */ ;/**  * Tests that resources are filtered according to the framework role (if any).  */ @Test public void testReservationFiltering() {     MesosResourceAllocation allocation.     // unreserved resources     allocation = new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE, 1.0), ports(UNRESERVED_ROLE, range(80, 80)))).     Assert.assertEquals(resources(cpus(UNRESERVED_ROLE, 1.0)), allocation.takeScalar("cpus", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(ports(UNRESERVED_ROLE, range(80, 80))), allocation.takeRanges("ports", 1, AS_NO_ROLE)).     allocation = new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE, 1.0), ports(UNRESERVED_ROLE, range(80, 80)))).     Assert.assertEquals(resources(cpus(UNRESERVED_ROLE, 1.0)), allocation.takeScalar("cpus", 1.0, AS_ROLE_A)).     Assert.assertEquals(resources(ports(UNRESERVED_ROLE, range(80, 80))), allocation.takeRanges("ports", 1, AS_ROLE_A)).     // reserved for the framework role     allocation = new MesosResourceAllocation(resources(cpus(ROLE_A, 1.0), ports(ROLE_A, range(80, 80)))).     Assert.assertEquals(resources(), allocation.takeScalar("cpus", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.takeRanges("ports", 1, AS_NO_ROLE)).     Assert.assertEquals(resources(cpus(ROLE_A, 1.0)), allocation.takeScalar("cpus", 1.0, AS_ROLE_A)).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 80))), allocation.takeRanges("ports", 1, AS_ROLE_A)).     // reserved for a different role     allocation = new MesosResourceAllocation(resources(cpus(ROLE_B, 1.0), ports(ROLE_B, range(80, 80)))).     Assert.assertEquals(resources(), allocation.takeScalar("cpus", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.takeRanges("ports", 1, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.takeScalar("cpus", 1.0, AS_ROLE_A)).     Assert.assertEquals(resources(), allocation.takeRanges("ports", 1, AS_ROLE_A)). }
true;public;0;26;/**  * Tests resource naming and typing.  */ ;// endregion // region General /**  * Tests resource naming and typing.  */ @Test public void testResourceSpecificity() {     MesosResourceAllocation allocation = new MesosResourceAllocation(resources(cpus(1.0), ports(range(80, 80)))).     // mismatched name     Assert.assertEquals(resources(), allocation.takeScalar("other", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.takeRanges("other", 1, AS_NO_ROLE)).     // mismatched type     Assert.assertEquals(resources(), allocation.takeScalar("ports", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.takeRanges("cpus", 1, AS_NO_ROLE)).     // nothing lost     Assert.assertEquals(resources(cpus(1.0), ports(range(80, 80))), allocation.getRemaining()). }
true;public;0;30;/**  * Tests scalar resource accounting.  */ ;// endregion // region Scalar Resources /**  * Tests scalar resource accounting.  */ @Test public void testScalarResourceAccounting() {     MesosResourceAllocation allocation.     // take part of a resource     allocation = new MesosResourceAllocation(resources(cpus(1.0))).     Assert.assertEquals(resources(cpus(0.25)), allocation.takeScalar("cpus", 0.25, AS_NO_ROLE)).     Assert.assertEquals(resources(cpus(0.75)), allocation.getRemaining()).     // take a whole resource     allocation = new MesosResourceAllocation(resources(cpus(1.0))).     Assert.assertEquals(resources(cpus(1.0)), allocation.takeScalar("cpus", 1.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.getRemaining()).     // take multiple resources     allocation = new MesosResourceAllocation(resources(cpus(ROLE_A, 1.0), cpus(UNRESERVED_ROLE, 1.0))).     Assert.assertEquals(resources(cpus(ROLE_A, 1.0), cpus(UNRESERVED_ROLE, 0.25)), allocation.takeScalar("cpus", 1.25, AS_ROLE_A)).     Assert.assertEquals(resources(cpus(UNRESERVED_ROLE, 0.75)), allocation.getRemaining()). }
true;public;0;8;/**  * Tests scalar resource exhaustion (i.e. insufficient resources).  */ ;/**  * Tests scalar resource exhaustion (i.e. insufficient resources).  */ @Test public void testScalarResourceExhaustion() {     MesosResourceAllocation allocation = new MesosResourceAllocation(resources(cpus(1.0))).     Assert.assertEquals(resources(cpus(1.0)), allocation.takeScalar("cpus", 2.0, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.getRemaining()). }
true;public;0;60;/**  * Tests range resource accounting.  */ ;// endregion // region Range Resources /**  * Tests range resource accounting.  */ @Test public void testRangeResourceAccounting() {     MesosResourceAllocation allocation.     List<Protos.Resource> ports = resources(ports(ROLE_A, range(80, 81), range(443, 444)), ports(UNRESERVED_ROLE, range(1024, 1025), range(8080, 8081))).     // take a partial range of one resource     allocation = new MesosResourceAllocation(ports).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 80))), allocation.takeRanges("ports", 1, AS_ROLE_A)).     Assert.assertEquals(resources(ports(ROLE_A, range(81, 81), range(443, 444)), ports(UNRESERVED_ROLE, range(1024, 1025), range(8080, 8081))), allocation.getRemaining()).     // take a whole range of one resource     allocation = new MesosResourceAllocation(ports).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 81))), allocation.takeRanges("ports", 2, AS_ROLE_A)).     Assert.assertEquals(resources(ports(ROLE_A, range(443, 444)), ports(UNRESERVED_ROLE, range(1024, 1025), range(8080, 8081))), allocation.getRemaining()).     // take numerous ranges of one resource     allocation = new MesosResourceAllocation(ports).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 81), range(443, 443))), allocation.takeRanges("ports", 3, AS_ROLE_A)).     Assert.assertEquals(resources(ports(ROLE_A, range(444, 444)), ports(UNRESERVED_ROLE, range(1024, 1025), range(8080, 8081))), allocation.getRemaining()).     // take a whole resource     allocation = new MesosResourceAllocation(ports).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 81), range(443, 444))), allocation.takeRanges("ports", 4, AS_ROLE_A)).     Assert.assertEquals(resources(ports(UNRESERVED_ROLE, range(1024, 1025), range(8080, 8081))), allocation.getRemaining()).     // take numerous resources     allocation = new MesosResourceAllocation(ports).     Assert.assertEquals(resources(ports(ROLE_A, range(80, 81), range(443, 444)), ports(UNRESERVED_ROLE, range(1024, 1024))), allocation.takeRanges("ports", 5, AS_ROLE_A)).     Assert.assertEquals(resources(ports(UNRESERVED_ROLE, range(1025, 1025), range(8080, 8081))), allocation.getRemaining()). }
true;public;0;8;/**  * Tests range resource exhaustion (i.e. insufficient resources).  */ ;/**  * Tests range resource exhaustion (i.e. insufficient resources).  */ @Test public void testRangeResourceExhaustion() {     MesosResourceAllocation allocation = new MesosResourceAllocation(resources(ports(range(80, 80)))).     Assert.assertEquals(resources(ports(range(80, 80))), allocation.takeRanges("ports", 2, AS_NO_ROLE)).     Assert.assertEquals(resources(), allocation.getRemaining()). }
