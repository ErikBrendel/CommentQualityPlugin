commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The Mesos connection string.  *  * <p>The value should be in one of the following forms:  * <pre>  * {@code  *     host:port  *     zk://host1:port1,host2:port2,.../path  *     zk://username:password@host1:port1,host2:port2,.../path  *     file:///path/to/file (where file contains one of the above)  * }  * </pre>  */ ;/**  * The Mesos connection string.  *  * <p>The value should be in one of the following forms:  * <pre>  * {@code  *     host:port  *     zk://host1:port1,host2:port2,.../path  *     zk://username:password@host1:port1,host2:port2,.../path  *     file:///path/to/file (where file contains one of the above)  * }  * </pre>  */ public String masterUrl() {     return masterUrl. }
true;public;0;3;/**  * The framework registration info.  */ ;/**  * The framework registration info.  */ public Protos.FrameworkInfo.Builder frameworkInfo() {     return frameworkInfo. }
true;public;0;3;/**  * The credential to authenticate the framework principal.  */ ;/**  * The credential to authenticate the framework principal.  */ public Option<Protos.Credential.Builder> credential() {     return credential. }
true;public;1;3;/**  * Revise the configuration with updated framework info.  */ ;/**  * Revise the configuration with updated framework info.  */ public MesosConfiguration withFrameworkInfo(Protos.FrameworkInfo.Builder frameworkInfo) {     return new MesosConfiguration(masterUrl, frameworkInfo, credential). }
true;public;0;4;/**  * Gets the roles associated with the framework.  */ ;/**  * Gets the roles associated with the framework.  */ public Set<String> roles() {     return frameworkInfo.hasRole() && !"*".equals(frameworkInfo.getRole()) ? Collections.singleton(frameworkInfo.getRole()) : Collections.emptySet(). }
true;public;2;14;/**  * Create the Mesos scheduler driver based on this configuration.  * @param scheduler the scheduler to use.  * @param implicitAcknowledgements whether to configure the driver for implicit acknowledgements.  * @return a scheduler driver.  */ ;/**  * Create the Mesos scheduler driver based on this configuration.  * @param scheduler the scheduler to use.  * @param implicitAcknowledgements whether to configure the driver for implicit acknowledgements.  * @return a scheduler driver.  */ public SchedulerDriver createDriver(Scheduler scheduler, boolean implicitAcknowledgements) {     MesosSchedulerDriver schedulerDriver.     if (this.credential().isDefined()) {         schedulerDriver = new MesosSchedulerDriver(scheduler, frameworkInfo.build(), this.masterUrl(), implicitAcknowledgements, this.credential().get().build()).     } else {         schedulerDriver = new MesosSchedulerDriver(scheduler, frameworkInfo.build(), this.masterUrl(), implicitAcknowledgements).     }     return schedulerDriver. }
false;public;0;8;;@Override public String toString() {     return "MesosConfiguration{" + "masterUrl='" + masterUrl + '\'' + ", frameworkInfo=" + frameworkInfo + ", credential=" + (credential.isDefined() ? "(not shown)" : "(none)") + '}'. }
true;public,static;2;29;/**  * A utility method to log relevant Mesos connection info.  */ ;/**  * A utility method to log relevant Mesos connection info.  */ public static void logMesosConfig(Logger log, MesosConfiguration config) {     Map<String, String> env = System.getenv().     Protos.FrameworkInfo.Builder info = config.frameworkInfo().     log.info("--------------------------------------------------------------------------------").     log.info(" Mesos Info:").     log.info("    Master URL: {}", config.masterUrl()).     log.info(" Framework Info:").     log.info("    ID: {}", info.hasId() ? info.getId().getValue() : "(none)").     log.info("    Name: {}", info.hasName() ? info.getName() : "(none)").     log.info("    Failover Timeout (secs): {}", info.getFailoverTimeout()).     log.info("    Role: {}", info.hasRole() ? info.getRole() : "(none)").     log.info("    Capabilities: {}", info.getCapabilitiesList().size() > 0 ? info.getCapabilitiesList() : "(none)").     log.info("    Principal: {}", info.hasPrincipal() ? info.getPrincipal() : "(none)").     log.info("    Host: {}", info.hasHostname() ? info.getHostname() : "(none)").     if (env.containsKey("LIBPROCESS_IP")) {         log.info("    LIBPROCESS_IP: {}", env.get("LIBPROCESS_IP")).     }     if (env.containsKey("LIBPROCESS_PORT")) {         log.info("    LIBPROCESS_PORT: {}", env.get("LIBPROCESS_PORT")).     }     log.info("    Web UI: {}", info.hasWebuiUrl() ? info.getWebuiUrl() : "(none)").     log.info("--------------------------------------------------------------------------------"). }
