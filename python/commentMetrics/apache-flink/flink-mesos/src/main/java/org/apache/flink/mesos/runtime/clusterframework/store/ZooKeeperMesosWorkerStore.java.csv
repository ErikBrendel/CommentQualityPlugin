commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void start() throws Exception {     synchronized (startStopLock) {         if (!isRunning) {             isRunning = true.             frameworkIdInZooKeeper.start().             totalTaskCountInZooKeeper.start().         }     } }
false;public;1;14;;public void stop(boolean cleanup) throws Exception {     synchronized (startStopLock) {         if (isRunning) {             frameworkIdInZooKeeper.close().             totalTaskCountInZooKeeper.close().             if (cleanup) {                 workersInZooKeeper.releaseAndTryRemoveAll().             }             isRunning = false.         }     } }
true;private;0;3;/**  * Verifies that the state is running.  */ ;/**  * Verifies that the state is running.  */ private void verifyIsRunning() {     checkState(isRunning, "Not running. Forgot to call start()?"). }
true;public;0;17;/**  * Get the persisted framework ID.  * @return the current ID or empty if none is yet persisted.  * @throws Exception on ZK failures, interruptions.  */ ;/**  * Get the persisted framework ID.  * @return the current ID or empty if none is yet persisted.  * @throws Exception on ZK failures, interruptions.  */ @Override public Option<Protos.FrameworkID> getFrameworkID() throws Exception {     synchronized (startStopLock) {         verifyIsRunning().         Option<Protos.FrameworkID> frameworkID.         byte[] value = frameworkIdInZooKeeper.getValue().         if (value.length == 0) {             frameworkID = Option.empty().         } else {             frameworkID = Option.apply(Protos.FrameworkID.newBuilder().setValue(new String(value, ConfigConstants.DEFAULT_CHARSET)).build()).         }         return frameworkID.     } }
true;public;1;10;/**  * Update the persisted framework ID.  * @param frameworkID the new ID or empty to remove the persisted ID.  * @throws Exception on ZK failures, interruptions.  */ ;/**  * Update the persisted framework ID.  * @param frameworkID the new ID or empty to remove the persisted ID.  * @throws Exception on ZK failures, interruptions.  */ @Override public void setFrameworkID(Option<Protos.FrameworkID> frameworkID) throws Exception {     synchronized (startStopLock) {         verifyIsRunning().         byte[] value = frameworkID.isDefined() ? frameworkID.get().getValue().getBytes(ConfigConstants.DEFAULT_CHARSET) : new byte[0].         frameworkIdInZooKeeper.setValue(value).     } }
true;public;0;18;/**  * Generates a new task ID.  */ ;/**  * Generates a new task ID.  */ @Override public Protos.TaskID newTaskID() throws Exception {     synchronized (startStopLock) {         verifyIsRunning().         int nextCount.         boolean success.         do {             ZooKeeperVersionedValue<Integer> count = totalTaskCountInZooKeeper.getVersionedValue().             nextCount = count.getValue() + 1.             success = totalTaskCountInZooKeeper.trySetCount(count, nextCount).         } while (!success).         Protos.TaskID taskID = Protos.TaskID.newBuilder().setValue(TASKID_FORMAT.format(nextCount)).build().         return taskID.     } }
false;public;0;35;;@Override public List<MesosWorkerStore.Worker> recoverWorkers() throws Exception {     synchronized (startStopLock) {         verifyIsRunning().         List<Tuple2<RetrievableStateHandle<Worker>, String>> handles = workersInZooKeeper.getAllAndLock().         if (handles.isEmpty()) {             return Collections.emptyList().         } else {             List<MesosWorkerStore.Worker> workers = new ArrayList<>(handles.size()).             for (Tuple2<RetrievableStateHandle<Worker>, String> handle : handles) {                 final Worker worker.                 try {                     worker = handle.f0.retrieveState().                 } catch (ClassNotFoundException cnfe) {                     throw new FlinkException("Could not retrieve Mesos worker from state handle under " + handle.f1 + ". This indicates that you are trying to recover from state written by an " + "older Flink version which is not compatible. Try cleaning the state handle store.", cnfe).                 } catch (IOException ioe) {                     throw new FlinkException("Could not retrieve Mesos worker from state handle under " + handle.f1 + ". This indicates that the retrieved state handle is broken. Try cleaning " + "the state handle store.", ioe).                 }                 workers.add(worker).             }             return workers.         }     } }
false;public;1;19;;@Override public void putWorker(MesosWorkerStore.Worker worker) throws Exception {     checkNotNull(worker, "worker").     String path = getPathForWorker(worker.taskID()).     synchronized (startStopLock) {         verifyIsRunning().         int currentVersion = workersInZooKeeper.exists(path).         if (currentVersion == -1) {             workersInZooKeeper.addAndLock(path, worker).             LOG.debug("Added {} in ZooKeeper.", worker).         } else {             workersInZooKeeper.replace(path, currentVersion, worker).             LOG.debug("Updated {} in ZooKeeper.", worker).         }     } }
false;public;1;17;;@Override public boolean removeWorker(Protos.TaskID taskID) throws Exception {     checkNotNull(taskID, "taskID").     String path = getPathForWorker(taskID).     synchronized (startStopLock) {         verifyIsRunning().         if (workersInZooKeeper.exists(path) == -1) {             LOG.debug("No such worker {} in ZooKeeper.", taskID).             return false.         }         workersInZooKeeper.releaseAndTryRemove(path).         LOG.debug("Removed worker {} from ZooKeeper.", taskID).         return true.     } }
true;private,static;1;4;/**  * Get the ZK path for the given task ID (with leading slash).  */ ;/**  * Get the ZK path for the given task ID (with leading slash).  */ private static String getPathForWorker(Protos.TaskID taskID) {     checkNotNull(taskID, "taskID").     return String.format("/%s", taskID.getValue()). }
