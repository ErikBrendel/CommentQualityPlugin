commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Start the worker store.  */ ;/**  * Start the worker store.  */ void start() throws Exception.
true;;1;1;/**  * Stop the worker store.  * @param cleanup if true, cleanup any stored information.  */ ;/**  * Stop the worker store.  * @param cleanup if true, cleanup any stored information.  */ void stop(boolean cleanup) throws Exception.
true;;0;1;/**  * Get the stored Mesos framework ID.  */ ;/**  * Get the stored Mesos framework ID.  */ Option<Protos.FrameworkID> getFrameworkID() throws Exception.
true;;1;1;/**  * Set the stored Mesos framework ID.  */ ;/**  * Set the stored Mesos framework ID.  */ void setFrameworkID(Option<Protos.FrameworkID> frameworkID) throws Exception.
true;;0;1;/**  * Recover the stored workers.  */ ;/**  * Recover the stored workers.  */ List<Worker> recoverWorkers() throws Exception.
true;;0;1;/**  * Generate a new task ID for a worker.  */ ;/**  * Generate a new task ID for a worker.  */ Protos.TaskID newTaskID() throws Exception.
true;;1;1;/**  * Put a worker into storage.  */ ;/**  * Put a worker into storage.  */ void putWorker(Worker worker) throws Exception.
true;;1;1;/**  * Remove a worker from storage.  * @return true if the worker existed.  */ ;/**  * Remove a worker from storage.  * @return true if the worker existed.  */ boolean removeWorker(Protos.TaskID taskID) throws Exception.
true;public;0;3;/**  * Get the worker's task ID.  */ ;/**  * Get the worker's task ID.  */ public Protos.TaskID taskID() {     return taskID. }
true;public;0;3;/**  * Get the resource profile associated with the worker.  * @return  */ ;/**  * Get the resource profile associated with the worker.  * @return  */ public ResourceProfile profile() {     return profile. }
true;public;0;3;/**  * Get the worker's assigned slave ID.  */ ;/**  * Get the worker's assigned slave ID.  */ public Option<Protos.SlaveID> slaveID() {     return slaveID. }
true;public;0;3;/**  * Get the worker's assigned hostname.  */ ;/**  * Get the worker's assigned hostname.  */ public Option<String> hostname() {     return hostname. }
true;public;0;3;/**  * Get the worker's state.  */ ;/**  * Get the worker's state.  */ public WorkerState state() {     return state. }
true;public,static;1;7;/**  * Create a new worker with the given taskID.  * @return a new worker instance.  */ ;// valid transition methods /**  * Create a new worker with the given taskID.  * @return a new worker instance.  */ public static Worker newWorker(Protos.TaskID taskID) {     return new Worker(taskID, ResourceProfile.UNKNOWN, Option.<Protos.SlaveID>empty(), Option.<String>empty(), WorkerState.New). }
true;public,static;2;7;/**  * Create a new worker with the given taskID.  * @return a new worker instance.  */ ;/**  * Create a new worker with the given taskID.  * @return a new worker instance.  */ public static Worker newWorker(Protos.TaskID taskID, ResourceProfile profile) {     return new Worker(taskID, profile, Option.<Protos.SlaveID>empty(), Option.<String>empty(), WorkerState.New). }
true;public;2;3;/**  * Transition the worker to a launched state.  * @return a new worker instance (does not mutate the current instance).  */ ;/**  * Transition the worker to a launched state.  * @return a new worker instance (does not mutate the current instance).  */ public Worker launchWorker(Protos.SlaveID slaveID, String hostname) {     return new Worker(taskID, profile, Option.apply(slaveID), Option.apply(hostname), WorkerState.Launched). }
true;public;0;3;/**  * Transition the worker to a released state.  * @return a new worker instance (does not mutate the current instance).  */ ;/**  * Transition the worker to a released state.  * @return a new worker instance (does not mutate the current instance).  */ public Worker releaseWorker() {     return new Worker(taskID, profile, slaveID, hostname, WorkerState.Released). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Worker worker = (Worker) o.     return Objects.equals(taskID, worker.taskID) && Objects.equals(slaveID, worker.slaveID) && Objects.equals(hostname, worker.hostname) && Objects.equals(profile, worker.profile) && state == worker.state. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(taskID, slaveID, hostname, state, profile). }
false;public;0;10;;@Override public String toString() {     return "Worker{" + "taskID=" + taskID + ", slaveID=" + slaveID + ", hostname=" + hostname + ", state=" + state + ", profile=" + profile + '}'. }
