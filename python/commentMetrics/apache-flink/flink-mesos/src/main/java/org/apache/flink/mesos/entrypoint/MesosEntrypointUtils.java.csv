commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;46;/**  * Loads and validates the Mesos scheduler configuration.  * @param flinkConfig the global configuration.  * @param hostname the hostname to advertise to the Mesos master.  */ ;/**  * Loads and validates the Mesos scheduler configuration.  * @param flinkConfig the global configuration.  * @param hostname the hostname to advertise to the Mesos master.  */ public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {     Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder().setHostname(hostname).     Protos.Credential.Builder credential = null.     if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {         throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.").     }     String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL).     Duration failoverTimeout = FiniteDuration.apply(flinkConfig.getInteger(MesosOptions.FAILOVER_TIMEOUT_SECONDS), TimeUnit.SECONDS).     frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds()).     frameworkInfo.setName(flinkConfig.getString(MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME)).     frameworkInfo.setRole(flinkConfig.getString(MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE)).     frameworkInfo.setUser(flinkConfig.getString(MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER)).     if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {         frameworkInfo.setPrincipal(flinkConfig.getString(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)).         credential = Protos.Credential.newBuilder().         credential.setPrincipal(frameworkInfo.getPrincipal()).         // and thus don't set the 'secret' configuration setting         if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {             credential.setSecret(flinkConfig.getString(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)).         }     }     MesosConfiguration mesos = new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential)).     return mesos. }
false;public,static;2;16;;public static MesosTaskManagerParameters createTmParameters(Configuration configuration, Logger log) {     // TM configuration     final MesosTaskManagerParameters taskManagerParameters = MesosTaskManagerParameters.create(configuration).     log.info("TaskManagers will be created with {} task slots", taskManagerParameters.containeredParameters().numSlots()).     log.info("TaskManagers will be started with container size {} MB, JVM heap size {} MB, " + "JVM direct memory limit {} MB, {} cpus, {} gpus", taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB(), taskManagerParameters.containeredParameters().taskManagerHeapSizeMB(), taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB(), taskManagerParameters.cpus(), taskManagerParameters.gpus()).     return taskManagerParameters. }
false;public,static;2;12;;public static ContainerSpecification createContainerSpec(Configuration configuration, Configuration dynamicProperties) throws Exception {     // generate a container spec which conveys the artifacts/vars needed to launch a TM     ContainerSpecification spec = new ContainerSpecification().     // propagate the AM dynamic configuration to the TM     spec.getDynamicConfiguration().addAll(dynamicProperties).     applyOverlays(configuration, spec).     return spec. }
true;public,static;2;16;/**  * Generate a container specification as a TaskManager template.  *  * <p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager  * needs (such as JAR file, config file, ...) and all environment variables into a container specification.  * The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory.  * A lightweight HTTP server serves the artifacts to the fetcher.  */ ;/**  * Generate a container specification as a TaskManager template.  *  * <p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager  * needs (such as JAR file, config file, ...) and all environment variables into a container specification.  * The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory.  * A lightweight HTTP server serves the artifacts to the fetcher.  */ public static void applyOverlays(Configuration configuration, ContainerSpecification containerSpec) throws IOException {     // create the overlays that will produce the specification     CompositeContainerOverlay overlay = new CompositeContainerOverlay(FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(), HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(), HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(), KeytabOverlay.newBuilder().fromEnvironment(configuration).build(), Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(), SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()).     // apply the overlays     overlay.configure(containerSpec). }
true;public,static;2;12;/**  * Loads the global configuration, adds the given dynamic properties configuration, and sets  * the temp directory paths.  *  * @param dynamicProperties dynamic properties to integrate  * @param log logger instance  * @return the loaded and adapted global configuration  */ ;/**  * Loads the global configuration, adds the given dynamic properties configuration, and sets  * the temp directory paths.  *  * @param dynamicProperties dynamic properties to integrate  * @param log logger instance  * @return the loaded and adapted global configuration  */ public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log) {     Configuration configuration = GlobalConfiguration.loadConfigurationWithDynamicProperties(dynamicProperties).     // read the environment variables     final Map<String, String> envs = System.getenv().     final String tmpDirs = envs.get(MesosConfigKeys.ENV_FLINK_TMP_DIR).     BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, tmpDirs).     return configuration. }
