commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public List<GlobalPropertiesPair> getPossibleGlobalProperties() {     if (this.globalProps == null) {         this.globalProps = createPossibleGlobalProperties().     }     return this.globalProps. }
false;public;0;7;;public List<LocalPropertiesPair> getPossibleLocalProperties() {     if (this.localProps == null) {         this.localProps = createPossibleLocalProperties().     }     return this.localProps. }
false;protected,abstract;0;1;;protected abstract List<GlobalPropertiesPair> createPossibleGlobalProperties().
false;protected,abstract;0;1;;protected abstract List<LocalPropertiesPair> createPossibleLocalProperties().
false;public,abstract;4;2;;public abstract boolean areCompatible(RequestedGlobalProperties requested1, RequestedGlobalProperties requested2, GlobalProperties produced1, GlobalProperties produced2).
false;public,abstract;4;2;;public abstract boolean areCoFulfilled(RequestedLocalProperties requested1, RequestedLocalProperties requested2, LocalProperties produced1, LocalProperties produced2).
false;public,abstract;3;1;;public abstract DualInputPlanNode instantiate(Channel in1, Channel in2, TwoInputNode node).
false;public,abstract;2;1;;public abstract GlobalProperties computeGlobalProperties(GlobalProperties in1, GlobalProperties in2).
false;public,abstract;2;1;;public abstract LocalProperties computeLocalProperties(LocalProperties in1, LocalProperties in2).
false;protected;2;9;;protected boolean checkEquivalentFieldPositionsInKeyFields(FieldList fields1, FieldList fields2) {     // check number of produced partitioning fields     if (fields1.size() != fields2.size()) {         return false.     } else {         return checkEquivalentFieldPositionsInKeyFields(fields1, fields2, fields1.size()).     } }
false;protected;3;30;;protected boolean checkEquivalentFieldPositionsInKeyFields(FieldList fields1, FieldList fields2, int numRelevantFields) {     // check number of produced partitioning fields     if (fields1.size() < numRelevantFields || fields2.size() < numRelevantFields) {         return false.     } else {         for (int i = 0. i < numRelevantFields. i++) {             int pField1 = fields1.get(i).             int pField2 = fields2.get(i).             // check if position of both produced fields is the same in both requested fields             int j.             for (j = 0. j < this.keys1.size(). j++) {                 if (this.keys1.get(j) == pField1 && this.keys2.get(j) == pField2) {                     break.                 } else if (this.keys1.get(j) != pField1 && this.keys2.get(j) != pField2) {                 // do nothing                 } else {                     return false.                 }             }             if (j == this.keys1.size()) {                 throw new CompilerException("Fields were not found in key fields.").             }         }     }     return true. }
false;protected;3;22;;protected boolean checkSameOrdering(GlobalProperties produced1, GlobalProperties produced2, int numRelevantFields) {     Ordering prod1 = produced1.getPartitioningOrdering().     Ordering prod2 = produced2.getPartitioningOrdering().     if (prod1 == null || prod2 == null) {         throw new CompilerException("The given properties do not meet this operators requirements.").     }     // check that order of fields is equivalent     if (!checkEquivalentFieldPositionsInKeyFields(prod1.getInvolvedIndexes(), prod2.getInvolvedIndexes(), numRelevantFields)) {         return false.     }     // check that both inputs have the same directions of order     for (int i = 0. i < numRelevantFields. i++) {         if (prod1.getOrder(i) != prod2.getOrder(i)) {             return false.         }     }     return true. }
false;protected;3;22;;protected boolean checkSameOrdering(LocalProperties produced1, LocalProperties produced2, int numRelevantFields) {     Ordering prod1 = produced1.getOrdering().     Ordering prod2 = produced2.getOrdering().     if (prod1 == null || prod2 == null) {         throw new CompilerException("The given properties do not meet this operators requirements.").     }     // check that order of fields is equivalent     if (!checkEquivalentFieldPositionsInKeyFields(prod1.getInvolvedIndexes(), prod2.getInvolvedIndexes(), numRelevantFields)) {         return false.     }     // check that both inputs have the same directions of order     for (int i = 0. i < numRelevantFields. i++) {         if (prod1.getOrder(i) != prod2.getOrder(i)) {             return false.         }     }     return true. }
false;public;0;3;;public RequestedGlobalProperties getProperties1() {     return this.props1. }
false;public;0;3;;public RequestedGlobalProperties getProperties2() {     return this.props2. }
false;public;0;4;;@Override public int hashCode() {     return (this.props1 == null ? 0 : this.props1.hashCode()) ^ (this.props2 == null ? 0 : this.props2.hashCode()). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj.getClass() == GlobalPropertiesPair.class) {         final GlobalPropertiesPair other = (GlobalPropertiesPair) obj.         return (this.props1 == null ? other.props1 == null : this.props1.equals(other.props1)) && (this.props2 == null ? other.props2 == null : this.props2.equals(other.props2)).     }     return false. }
false;public;0;4;;@Override public String toString() {     return "{" + this.props1 + " / " + this.props2 + "}". }
false;public;0;3;;public RequestedLocalProperties getProperties1() {     return this.props1. }
false;public;0;3;;public RequestedLocalProperties getProperties2() {     return this.props2. }
false;public;0;4;;@Override public int hashCode() {     return (this.props1 == null ? 0 : this.props1.hashCode()) ^ (this.props2 == null ? 0 : this.props2.hashCode()). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj.getClass() == LocalPropertiesPair.class) {         final LocalPropertiesPair other = (LocalPropertiesPair) obj.         return (this.props1 == null ? other.props1 == null : this.props1.equals(other.props1)) && (this.props2 == null ? other.props2 == null : this.props2.equals(other.props2)).     }     return false. }
false;public;0;4;;@Override public String toString() {     return "{" + this.props1 + " / " + this.props2 + "}". }
