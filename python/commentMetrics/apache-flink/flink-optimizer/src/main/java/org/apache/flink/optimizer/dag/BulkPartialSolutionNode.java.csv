commented;modifiers;parameterAmount;loc;comment;code
false;public;3;8;;// -------------------------------------------------------------------------------------------- public void setCandidateProperties(GlobalProperties gProps, LocalProperties lProps, Channel initialInput) {     if (this.cachedPlans != null) {         throw new IllegalStateException().     } else {         this.cachedPlans = Collections.<PlanNode>singletonList(new BulkPartialSolutionPlanNode(this, "PartialSolution (" + this.getOperator().getName() + ")", gProps, lProps, initialInput)).     } }
false;public;0;7;;public BulkPartialSolutionPlanNode getCurrentPartialSolutionPlanNode() {     if (this.cachedPlans != null) {         return (BulkPartialSolutionPlanNode) this.cachedPlans.get(0).     } else {         throw new IllegalStateException().     } }
false;public;0;3;;public BulkIterationNode getIterationNode() {     return this.iterationNode. }
false;public;1;4;;@Override public void computeOutputEstimates(DataStatistics statistics) {     copyEstimates(this.iterationNode.getPredecessorNode()). }
true;public;0;4;/**  * Gets the operator (here the {@link PartialSolutionPlaceHolder}) that is represented by this  * optimizer node.  *  * @return The operator represented by this optimizer node.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the operator (here the {@link PartialSolutionPlaceHolder}) that is represented by this  * optimizer node.  *  * @return The operator represented by this optimizer node.  */ @Override public PartialSolutionPlaceHolder<?> getOperator() {     return (PartialSolutionPlaceHolder<?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Bulk Partial Solution". }
false;public;0;12;;@Override public void computeUnclosedBranchStack() {     if (this.openBranches != null) {         return.     }     OptimizerNode inputToIteration = this.iterationNode.getPredecessorNode().     addClosedBranches(inputToIteration.closedBranchingNodes).     List<UnclosedBranchDescriptor> fromInput = inputToIteration.getBranchesForParent(this.iterationNode.getIncomingConnection()).     this.openBranches = (fromInput == null || fromInput.isEmpty()) ? Collections.<UnclosedBranchDescriptor>emptyList() : fromInput. }
