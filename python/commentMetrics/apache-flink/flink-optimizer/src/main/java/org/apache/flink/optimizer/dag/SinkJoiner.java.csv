commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getOperatorName() {     return "Internal Utility Node". }
false;public;0;4;;@Override public List<DagConnection> getOutgoingConnections() {     return Collections.emptyList(). }
false;public;0;34;;@Override public void computeUnclosedBranchStack() {     if (this.openBranches != null) {         return.     }     addClosedBranches(getFirstPredecessorNode().closedBranchingNodes).     addClosedBranches(getSecondPredecessorNode().closedBranchingNodes).     List<UnclosedBranchDescriptor> pred1branches = getFirstPredecessorNode().openBranches.     List<UnclosedBranchDescriptor> pred2branches = getSecondPredecessorNode().openBranches.     // a common data flow.     if (pred1branches == null || pred1branches.isEmpty()) {         this.openBranches = (pred2branches == null || pred2branches.isEmpty()) ? // both empty - disconnected flow         Collections.<UnclosedBranchDescriptor>emptyList() : pred2branches.     } else if (pred2branches == null || pred2branches.isEmpty()) {         this.openBranches = pred1branches.     } else {         // copy the lists and merge         List<UnclosedBranchDescriptor> result1 = new ArrayList<UnclosedBranchDescriptor>(pred1branches).         List<UnclosedBranchDescriptor> result2 = new ArrayList<UnclosedBranchDescriptor>(pred2branches).         ArrayList<UnclosedBranchDescriptor> result = new ArrayList<UnclosedBranchDescriptor>().         mergeLists(result1, result2, result, false).         this.openBranches = result.isEmpty() ? Collections.<UnclosedBranchDescriptor>emptyList() : result.     } }
false;protected;0;4;;@Override protected List<OperatorDescriptorDual> getPossibleProperties() {     return Collections.<OperatorDescriptorDual>singletonList(new UtilSinkJoinOpDescriptor()). }
false;public;1;4;;@Override public void computeOutputEstimates(DataStatistics statistics) { // nothing to be done here }
false;protected;1;4;;@Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) { // no estimates needed at this point }
