commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.BINARY_NO_OP. }
false;protected;0;6;;@Override protected List<GlobalPropertiesPair> createPossibleGlobalProperties() {     // all properties are possible     return Collections.singletonList(new GlobalPropertiesPair(new RequestedGlobalProperties(), new RequestedGlobalProperties())). }
false;protected;0;6;;@Override protected List<LocalPropertiesPair> createPossibleLocalProperties() {     // all properties are possible     return Collections.singletonList(new LocalPropertiesPair(new RequestedLocalProperties(), new RequestedLocalProperties())). }
false;public;4;5;;@Override public boolean areCompatible(RequestedGlobalProperties requested1, RequestedGlobalProperties requested2, GlobalProperties produced1, GlobalProperties produced2) {     return true. }
false;public;4;5;;@Override public boolean areCoFulfilled(RequestedLocalProperties requested1, RequestedLocalProperties requested2, LocalProperties produced1, LocalProperties produced2) {     return true. }
false;public;3;8;;@Override public DualInputPlanNode instantiate(Channel in1, Channel in2, TwoInputNode node) {     if (node instanceof SinkJoiner) {         return new SinkJoinerPlanNode((SinkJoiner) node, in1, in2).     } else {         throw new CompilerException().     } }
false;public;2;4;;@Override public LocalProperties computeLocalProperties(LocalProperties in1, LocalProperties in2) {     return new LocalProperties(). }
false;public;2;4;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties in1, GlobalProperties in2) {     return GlobalProperties.combine(in1, in2). }
