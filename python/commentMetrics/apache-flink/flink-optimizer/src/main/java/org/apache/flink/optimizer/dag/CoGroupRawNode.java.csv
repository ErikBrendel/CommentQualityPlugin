commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Gets the operator for this CoGroup node.  *  * @return The CoGroup operator.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the operator for this CoGroup node.  *  * @return The CoGroup operator.  */ @Override public CoGroupRawOperatorBase<?, ?, ?, ?> getOperator() {     return (CoGroupRawOperatorBase<?, ?, ?, ?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "CoGroup". }
false;protected;0;4;;@Override protected List<OperatorDescriptorDual> getPossibleProperties() {     return this.dataProperties. }
false;protected;1;4;;@Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) { // for CoGroup, we currently make no reasonable default estimates }
false;private;0;17;;private List<OperatorDescriptorDual> initializeDataProperties() {     Ordering groupOrder1 = null.     Ordering groupOrder2 = null.     CoGroupRawOperatorBase<?, ?, ?, ?> cgc = getOperator().     groupOrder1 = cgc.getGroupOrderForInputOne().     groupOrder2 = cgc.getGroupOrderForInputTwo().     if (groupOrder1 != null && groupOrder1.getNumberOfFields() == 0) {         groupOrder1 = null.     }     if (groupOrder2 != null && groupOrder2.getNumberOfFields() == 0) {         groupOrder2 = null.     }     return Collections.<OperatorDescriptorDual>singletonList(new CoGroupRawDescriptor(this.keys1, this.keys2, groupOrder1, groupOrder2)). }
