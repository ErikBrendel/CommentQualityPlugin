commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setCustomPartitioner(Partitioner<?> customPartitioner) {     this.customPartitioner = customPartitioner. }
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.CO_GROUP. }
false;protected;0;30;;@Override protected List<GlobalPropertiesPair> createPossibleGlobalProperties() {     if (this.customPartitioner == null) {         // we accept compatible partitionings of any type         RequestedGlobalProperties partitioned_left_any = new RequestedGlobalProperties().         RequestedGlobalProperties partitioned_right_any = new RequestedGlobalProperties().         partitioned_left_any.setAnyPartitioning(this.keys1).         partitioned_right_any.setAnyPartitioning(this.keys2).         // add strict hash partitioning of both inputs on their full key sets         RequestedGlobalProperties partitioned_left_hash = new RequestedGlobalProperties().         RequestedGlobalProperties partitioned_right_hash = new RequestedGlobalProperties().         partitioned_left_hash.setHashPartitioned(this.keys1).         partitioned_right_hash.setHashPartitioned(this.keys2).         return Arrays.asList(new GlobalPropertiesPair(partitioned_left_any, partitioned_right_any), new GlobalPropertiesPair(partitioned_left_hash, partitioned_right_hash)).     } else {         RequestedGlobalProperties partitioned_left = new RequestedGlobalProperties().         partitioned_left.setCustomPartitioned(this.keys1, this.customPartitioner).         RequestedGlobalProperties partitioned_right = new RequestedGlobalProperties().         partitioned_right.setCustomPartitioned(this.keys2, this.customPartitioner).         return Collections.singletonList(new GlobalPropertiesPair(partitioned_left, partitioned_right)).     } }
false;protected;0;6;;@Override protected List<LocalPropertiesPair> createPossibleLocalProperties() {     RequestedLocalProperties sort1 = new RequestedLocalProperties(this.ordering1).     RequestedLocalProperties sort2 = new RequestedLocalProperties(this.ordering2).     return Collections.singletonList(new LocalPropertiesPair(sort1, sort2)). }
false;public;4;40;;@Override public boolean areCompatible(RequestedGlobalProperties requested1, RequestedGlobalProperties requested2, GlobalProperties produced1, GlobalProperties produced2) {     if (produced1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED && produced2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {         // both are hash partitioned, check that partitioning fields are equivalently chosen         return checkEquivalentFieldPositionsInKeyFields(produced1.getPartitioningFields(), produced2.getPartitioningFields()).     } else if (produced1.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED && produced2.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED && produced1.getDataDistribution() != null && produced2.getDataDistribution() != null) {         return produced1.getPartitioningFields().size() == produced2.getPartitioningFields().size() && checkSameOrdering(produced1, produced2, produced1.getPartitioningFields().size()) && produced1.getDataDistribution().equals(produced2.getDataDistribution()).     } else if (produced1.getPartitioning() == PartitioningProperty.CUSTOM_PARTITIONING && produced2.getPartitioning() == PartitioningProperty.CUSTOM_PARTITIONING) {         // both use a custom partitioner. Check that both keys are exactly as specified and that both the same partitioner         return produced1.getPartitioningFields().isExactMatch(this.keys1) && produced2.getPartitioningFields().isExactMatch(this.keys2) && produced1.getCustomPartitioner() != null && produced2.getCustomPartitioner() != null && produced1.getCustomPartitioner().equals(produced2.getCustomPartitioner()).     } else {         // For co-groups we must ensure that both sides are exactly identically partitioned, ANY is not good enough.         return false.     } }
false;public;4;6;;@Override public boolean areCoFulfilled(RequestedLocalProperties requested1, RequestedLocalProperties requested2, LocalProperties produced1, LocalProperties produced2) {     int numRelevantFields = this.keys1.size().     return checkSameOrdering(produced1, produced2, numRelevantFields). }
false;public;3;14;;@Override public DualInputPlanNode instantiate(Channel in1, Channel in2, TwoInputNode node) {     boolean[] inputOrders = in1.getLocalProperties().getOrdering() == null ? null : in1.getLocalProperties().getOrdering().getFieldSortDirections().     if (inputOrders == null || inputOrders.length < this.keys1.size()) {         throw new CompilerException("BUG: The input strategy does not sufficiently describe the sort orders for a CoGroup operator.").     } else if (inputOrders.length > this.keys1.size()) {         boolean[] tmp = new boolean[this.keys1.size()].         System.arraycopy(inputOrders, 0, tmp, 0, tmp.length).         inputOrders = tmp.     }     return new DualInputPlanNode(node, "CoGroup (" + node.getOperator().getName() + ")", in1, in2, DriverStrategy.CO_GROUP, this.keys1, this.keys2, inputOrders). }
false;public;2;11;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties in1, GlobalProperties in2) {     GlobalProperties gp = GlobalProperties.combine(in1, in2).     if (gp.getUniqueFieldCombination() != null && gp.getUniqueFieldCombination().size() > 0 && gp.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED) {         gp.setAnyPartitioning(gp.getUniqueFieldCombination().iterator().next().toFieldList()).     }     gp.clearUniqueFieldCombinations().     return gp. }
false;public;2;5;;@Override public LocalProperties computeLocalProperties(LocalProperties in1, LocalProperties in2) {     LocalProperties comb = LocalProperties.combine(in1, in2).     return comb.clearUniqueFieldSets(). }
