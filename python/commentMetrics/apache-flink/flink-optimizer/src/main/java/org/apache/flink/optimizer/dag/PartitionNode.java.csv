commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PartitionOperatorBase<?> getOperator() {     return (PartitionOperatorBase<?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Partition". }
false;protected;0;4;;@Override protected List<OperatorDescriptorSingle> getPossibleProperties() {     return this.possibleProperties. }
false;protected;1;6;;@Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {     // partitioning does not change the number of records     this.estimatedNumRecords = getPredecessorNode().getEstimatedNumRecords().     this.estimatedOutputSize = getPredecessorNode().getEstimatedOutputSize(). }
false;public;0;4;;@Override public SemanticProperties getSemanticProperties() {     return new SingleInputSemanticProperties.AllFieldsForwardedProperties(). }
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.UNARY_NO_OP. }
false;public;2;4;;@Override public SingleInputPlanNode instantiate(Channel in, SingleInputNode node) {     return new SingleInputPlanNode(node, "Partition", in, DriverStrategy.UNARY_NO_OP). }
false;protected;0;23;;@Override protected List<RequestedGlobalProperties> createPossibleGlobalProperties() {     RequestedGlobalProperties rgps = new RequestedGlobalProperties().     switch(this.pMethod) {         case HASH:             rgps.setHashPartitioned(this.keys).             break.         case REBALANCE:             rgps.setForceRebalancing().             break.         case CUSTOM:             rgps.setCustomPartitioned(this.keys, this.customPartitioner).             break.         case RANGE:             rgps.setRangePartitioned(ordering, distribution).             break.         default:             throw new IllegalArgumentException("Invalid partition method").     }     return Collections.singletonList(rgps). }
false;protected;0;5;;@Override protected List<RequestedLocalProperties> createPossibleLocalProperties() {     // partitioning does not require any local property.     return Collections.singletonList(new RequestedLocalProperties()). }
false;public;1;5;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties gProps) {     // the partition node is a no-operation operation, such that all global properties are preserved.     return gProps. }
false;public;1;5;;@Override public LocalProperties computeLocalProperties(LocalProperties lProps) {     // the partition node is a no-operation operation, such that all global properties are preserved.     return lProps. }
