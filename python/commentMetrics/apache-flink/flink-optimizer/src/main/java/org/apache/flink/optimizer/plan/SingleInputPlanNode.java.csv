commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;// -------------------------------------------------------------------------------------------- public SingleInputNode getSingleInputNode() {     if (this.template instanceof SingleInputNode) {         return (SingleInputNode) this.template.     } else {         throw new RuntimeException().     } }
true;public;0;3;/**  * Gets the input channel to this node.  *  * @return The input channel to this node.  */ ;/**  * Gets the input channel to this node.  *  * @return The input channel to this node.  */ public Channel getInput() {     return this.input. }
true;public;0;3;/**  * Gets the predecessor of this node, i.e. the source of the input channel.  *  * @return The predecessor of this node.  */ ;/**  * Gets the predecessor of this node, i.e. the source of the input channel.  *  * @return The predecessor of this node.  */ public PlanNode getPredecessor() {     return this.input.getSource(). }
true;public;2;3;/**  * Sets the key field indexes for the specified driver comparator.  *  * @param keys The key field indexes for the specified driver comparator.  * @param id The ID of the driver comparator.  */ ;/**  * Sets the key field indexes for the specified driver comparator.  *  * @param keys The key field indexes for the specified driver comparator.  * @param id The ID of the driver comparator.  */ public void setDriverKeyInfo(FieldList keys, int id) {     this.setDriverKeyInfo(keys, getTrueArray(keys.size()), id). }
true;public;3;8;/**  * Sets the key field information for the specified driver comparator.  *  * @param keys The key field indexes for the specified driver comparator.  * @param sortOrder The key sort order for the specified driver comparator.  * @param id The ID of the driver comparator.  */ ;/**  * Sets the key field information for the specified driver comparator.  *  * @param keys The key field indexes for the specified driver comparator.  * @param sortOrder The key sort order for the specified driver comparator.  * @param id The ID of the driver comparator.  */ public void setDriverKeyInfo(FieldList keys, boolean[] sortOrder, int id) {     if (id < 0 || id >= driverKeys.length) {         throw new CompilerException("Invalid id for driver key information. DriverStrategy requires only " + super.getDriverStrategy().getNumRequiredComparators() + " comparators.").     }     this.driverKeys[id] = keys.     this.driverSortOrders[id] = sortOrder. }
true;public;1;3;/**  * Gets the key field indexes for the specified driver comparator.  *  * @param id The id of the driver comparator for which the key field indexes are requested.  * @return The key field indexes of the specified driver comparator.  */ ;/**  * Gets the key field indexes for the specified driver comparator.  *  * @param id The id of the driver comparator for which the key field indexes are requested.  * @return The key field indexes of the specified driver comparator.  */ public FieldList getKeys(int id) {     return this.driverKeys[id]. }
true;public;1;3;/**  * Gets the sort order for the specified driver comparator.  *  * @param id The id of the driver comparator for which the sort order is requested.  * @return The sort order of the specified driver comparator.  */ ;/**  * Gets the sort order for the specified driver comparator.  *  * @param id The id of the driver comparator for which the sort order is requested.  * @return The sort order of the specified driver comparator.  */ public boolean[] getSortOrders(int id) {     return driverSortOrders[id]. }
true;public;1;3;/**  * Gets the specified comparator from this PlanNode.  *  * @param id The ID of the requested comparator.  *  * @return The specified comparator.  */ ;/**  * Gets the specified comparator from this PlanNode.  *  * @param id The ID of the requested comparator.  *  * @return The specified comparator.  */ public TypeComparatorFactory<?> getComparator(int id) {     return comparators[id]. }
true;public;2;3;/**  * Sets the specified comparator for this PlanNode.  *  * @param comparator The comparator to set.  * @param id The ID of the comparator to set.  */ ;/**  * Sets the specified comparator for this PlanNode.  *  * @param comparator The comparator to set.  * @param id The ID of the comparator to set.  */ public void setComparator(TypeComparatorFactory<?> comparator, int id) {     this.comparators[id] = comparator. }
false;public;1;12;;// -------------------------------------------------------------------------------------------- @Override public void accept(Visitor<PlanNode> visitor) {     if (visitor.preVisit(this)) {         this.input.getSource().accept(visitor).         for (Channel broadcastInput : getBroadcastInputs()) {             broadcastInput.getSource().accept(visitor).         }         visitor.postVisit(this).     } }
false;public;0;16;;@Override public Iterable<PlanNode> getPredecessors() {     if (getBroadcastInputs() == null || getBroadcastInputs().isEmpty()) {         return Collections.singleton(this.input.getSource()).     } else {         List<PlanNode> preds = new ArrayList<PlanNode>().         preds.add(input.getSource()).         for (Channel c : getBroadcastInputs()) {             preds.add(c.getSource()).         }         return preds.     } }
false;public;0;4;;@Override public Iterable<Channel> getInputs() {     return Collections.singleton(this.input). }
false;public;1;28;;@Override public SourceAndDamReport hasDamOnPathDownTo(PlanNode source) {     if (source == this) {         return FOUND_SOURCE.     }     SourceAndDamReport res = this.input.getSource().hasDamOnPathDownTo(source).     if (res == FOUND_SOURCE_AND_DAM) {         return FOUND_SOURCE_AND_DAM.     } else if (res == FOUND_SOURCE) {         return (this.input.getLocalStrategy().dams() || this.input.getTempMode().breaksPipeline() || getDriverStrategy().firstDam() == DamBehavior.FULL_DAM) ? FOUND_SOURCE_AND_DAM : FOUND_SOURCE.     } else {         for (NamedChannel nc : getBroadcastInputs()) {             SourceAndDamReport bcRes = nc.getSource().hasDamOnPathDownTo(source).             if (bcRes != NOT_FOUND) {                 // broadcast inputs are always dams                 return FOUND_SOURCE_AND_DAM.             }         }         return NOT_FOUND.     } }
false;protected,static;1;7;;// -------------------------------------------------------------------------------------------- protected static boolean[] getTrueArray(int length) {     final boolean[] a = new boolean[length].     for (int i = 0. i < length. i++) {         a[i] = true.     }     return a. }
