commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getOperatorName() {     return "MapPartition". }
false;protected;0;4;;@Override protected List<OperatorDescriptorSingle> getPossibleProperties() {     return this.possibleProperties. }
false;protected;0;14;;@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering() {     // Local properties for MapPartition may not be preserved.     SingleInputSemanticProperties origProps = ((SingleInputOperator<?, ?, ?>) getOperator()).getSemanticProperties().     SingleInputSemanticProperties filteredProps = new SingleInputSemanticProperties().     FieldSet readSet = origProps.getReadFields(0).     if (readSet != null) {         filteredProps.addReadFields(readSet).     }     return filteredProps. }
true;protected;1;4;/**  * Computes the estimates for the MapPartition operator.  * We assume that by default, Map takes one value and transforms it into another value.  * The cardinality consequently stays the same.  */ ;/**  * Computes the estimates for the MapPartition operator.  * We assume that by default, Map takes one value and transforms it into another value.  * The cardinality consequently stays the same.  */ @Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) { // we really cannot make any estimates here }
