commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ------------------------------------------------------------------------ @Override public CrossOperatorBase<?, ?, ?, ?> getOperator() {     return (CrossOperatorBase<?, ?, ?, ?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Cross". }
false;protected;0;4;;@Override protected List<OperatorDescriptorDual> getPossibleProperties() {     return this.dataProperties. }
true;protected;1;16;/**  * We assume that the cardinality is the product of  the input cardinalities  * and that the result width is the sum of the input widths.  *  * @param statistics The statistics object to optionally access.  */ ;/**  * We assume that the cardinality is the product of  the input cardinalities  * and that the result width is the sum of the input widths.  *  * @param statistics The statistics object to optionally access.  */ @Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {     long card1 = getFirstPredecessorNode().getEstimatedNumRecords().     long card2 = getSecondPredecessorNode().getEstimatedNumRecords().     this.estimatedNumRecords = (card1 < 0 || card2 < 0) ? -1 : card1 * card2.     if (this.estimatedNumRecords >= 0) {         float width1 = getFirstPredecessorNode().getEstimatedAvgWidthPerOutputRecord().         float width2 = getSecondPredecessorNode().getEstimatedAvgWidthPerOutputRecord().         float width = (width1 <= 0 || width2 <= 0) ? -1 : width1 + width2.         if (width > 0) {             this.estimatedOutputSize = (long) (width * this.estimatedNumRecords).         }     } }
