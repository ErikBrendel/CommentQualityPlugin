commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public FilterOperatorBase<?, ?> getOperator() {     return (FilterOperatorBase<?, ?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Filter". }
false;public;0;4;;@Override public SemanticProperties getSemanticProperties() {     return new SingleInputSemanticProperties.AllFieldsForwardedProperties(). }
false;protected;0;4;;@Override protected List<OperatorDescriptorSingle> getPossibleProperties() {     return this.possibleProperties. }
true;protected;1;5;/**  * Computes the estimates for the Filter operator. Since it applies a filter on the data we assume a cardinality  * decrease. To give the system a hint at data decrease, we use a default magic number to indicate a 0.5 decrease.  */ ;/**  * Computes the estimates for the Filter operator. Since it applies a filter on the data we assume a cardinality  * decrease. To give the system a hint at data decrease, we use a default magic number to indicate a 0.5 decrease.  */ @Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {     this.estimatedNumRecords = (long) (getPredecessorNode().getEstimatedNumRecords() * 0.5).     this.estimatedOutputSize = (long) (getPredecessorNode().getEstimatedOutputSize() * 0.5). }
