commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.CO_GROUP_RAW. }
false;protected;0;8;;@Override protected List<OperatorDescriptorDual.GlobalPropertiesPair> createPossibleGlobalProperties() {     RequestedGlobalProperties partitioned1 = new RequestedGlobalProperties().     partitioned1.setHashPartitioned(this.keys1).     RequestedGlobalProperties partitioned2 = new RequestedGlobalProperties().     partitioned2.setHashPartitioned(this.keys2).     return Collections.singletonList(new OperatorDescriptorDual.GlobalPropertiesPair(partitioned1, partitioned2)). }
false;protected;0;6;;@Override protected List<OperatorDescriptorDual.LocalPropertiesPair> createPossibleLocalProperties() {     RequestedLocalProperties sort1 = new RequestedLocalProperties(this.ordering1).     RequestedLocalProperties sort2 = new RequestedLocalProperties(this.ordering2).     return Collections.singletonList(new OperatorDescriptorDual.LocalPropertiesPair(sort1, sort2)). }
false;public;4;20;;@Override public boolean areCoFulfilled(RequestedLocalProperties requested1, RequestedLocalProperties requested2, LocalProperties produced1, LocalProperties produced2) {     int numRelevantFields = this.keys1.size().     Ordering prod1 = produced1.getOrdering().     Ordering prod2 = produced2.getOrdering().     if (prod1 == null || prod2 == null || prod1.getNumberOfFields() < numRelevantFields || prod2.getNumberOfFields() < numRelevantFields) {         throw new CompilerException("The given properties do not meet this operators requirements.").     }     for (int i = 0. i < numRelevantFields. i++) {         if (prod1.getOrder(i) != prod2.getOrder(i)) {             return false.         }     }     return true. }
false;public;3;15;;@Override public DualInputPlanNode instantiate(Channel in1, Channel in2, TwoInputNode node) {     boolean[] inputOrders = in1.getLocalProperties().getOrdering() == null ? null : in1.getLocalProperties().getOrdering().getFieldSortDirections().     if (inputOrders == null || inputOrders.length < this.keys1.size()) {         throw new CompilerException("BUG: The input strategy does not sufficiently describe the sort orders for a CoGroup operator.").     } else if (inputOrders.length > this.keys1.size()) {         boolean[] tmp = new boolean[this.keys1.size()].         System.arraycopy(inputOrders, 0, tmp, 0, tmp.length).         inputOrders = tmp.     }     return new DualInputPlanNode(node, "CoGroup (" + node.getOperator().getName() + ")", in1, in2, DriverStrategy.CO_GROUP_RAW, this.keys1, this.keys2, inputOrders). }
false;public;2;10;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties in1, GlobalProperties in2) {     GlobalProperties gp = GlobalProperties.combine(in1, in2).     if (gp.getUniqueFieldCombination() != null && gp.getUniqueFieldCombination().size() > 0 && gp.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED) {         gp.setAnyPartitioning(gp.getUniqueFieldCombination().iterator().next().toFieldList()).     }     gp.clearUniqueFieldCombinations().     return gp. }
false;public;2;5;;@Override public LocalProperties computeLocalProperties(LocalProperties in1, LocalProperties in2) {     LocalProperties comb = LocalProperties.combine(in1, in2).     return comb.clearUniqueFieldSets(). }
false;public;4;9;;@Override public boolean areCompatible(RequestedGlobalProperties requested1, RequestedGlobalProperties requested2, GlobalProperties produced1, GlobalProperties produced2) {     return produced1.getPartitioning() == produced2.getPartitioning() && (produced1.getCustomPartitioner() == null ? produced2.getCustomPartitioner() == null : produced1.getCustomPartitioner().equals(produced2.getCustomPartitioner())). }
