commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Gets the source of this Channel.  *  * @return The source.  */ ;// -------------------------------------------------------------------------------------------- // Accessors // -------------------------------------------------------------------------------------------- /**  * Gets the source of this Channel.  *  * @return The source.  */ @Override public PlanNode getSource() {     return this.source. }
false;public;1;3;;public void setSource(PlanNode source) {     this.source = source. }
true;public;1;3;/**  * Sets the target of this Channel.  *  * @param target The target.  */ ;/**  * Sets the target of this Channel.  *  * @param target The target.  */ public void setTarget(PlanNode target) {     this.target = target. }
true;public;0;3;/**  * Gets the target of this Channel.  *  * @return The target.  */ ;/**  * Gets the target of this Channel.  *  * @return The target.  */ public PlanNode getTarget() {     return this.target. }
false;public;2;3;;public void setShipStrategy(ShipStrategyType strategy, DataExchangeMode dataExchangeMode) {     setShipStrategy(strategy, null, null, null, dataExchangeMode). }
false;public;3;3;;public void setShipStrategy(ShipStrategyType strategy, FieldList keys, DataExchangeMode dataExchangeMode) {     setShipStrategy(strategy, keys, null, null, dataExchangeMode). }
false;public;4;4;;public void setShipStrategy(ShipStrategyType strategy, FieldList keys, boolean[] sortDirection, DataExchangeMode dataExchangeMode) {     setShipStrategy(strategy, keys, sortDirection, null, dataExchangeMode). }
false;public;4;4;;public void setShipStrategy(ShipStrategyType strategy, FieldList keys, Partitioner<?> partitioner, DataExchangeMode dataExchangeMode) {     setShipStrategy(strategy, keys, null, partitioner, dataExchangeMode). }
false;public;5;10;;public void setShipStrategy(ShipStrategyType strategy, FieldList keys, boolean[] sortDirection, Partitioner<?> partitioner, DataExchangeMode dataExchangeMode) {     this.shipStrategy = strategy.     this.shipKeys = keys.     this.shipSortOrder = sortDirection.     this.partitioner = partitioner.     this.dataExchangeMode = dataExchangeMode.     // reset the global properties     this.globalProps = null. }
true;public;1;3;/**  * Sets the data exchange mode (batch / pipelined) to use for the data  * exchange of this channel.  */ ;/**  * Sets the data exchange mode (batch / pipelined) to use for the data  * exchange of this channel.  */ public void setDataExchangeMode(DataExchangeMode dataExchangeMode) {     this.dataExchangeMode = checkNotNull(dataExchangeMode). }
true;public;0;3;/**  * Gets the data exchange mode (batch / pipelined) to use for the data  * exchange of this channel.  *  * @return The data exchange mode of this channel.  */ ;/**  * Gets the data exchange mode (batch / pipelined) to use for the data  * exchange of this channel.  *  * @return The data exchange mode of this channel.  */ public DataExchangeMode getDataExchangeMode() {     return dataExchangeMode. }
false;public;0;3;;public ShipStrategyType getShipStrategy() {     return this.shipStrategy. }
false;public;0;3;;public FieldList getShipStrategyKeys() {     return this.shipKeys. }
false;public;0;3;;public boolean[] getShipStrategySortOrder() {     return this.shipSortOrder. }
false;public;1;3;;public void setLocalStrategy(LocalStrategy strategy) {     setLocalStrategy(strategy, null, null). }
false;public;3;6;;public void setLocalStrategy(LocalStrategy strategy, FieldList keys, boolean[] sortDirection) {     this.localStrategy = strategy.     this.localKeys = keys.     this.localSortOrder = sortDirection.     // reset the local properties     this.localProps = null. }
false;public;0;3;;public LocalStrategy getLocalStrategy() {     return this.localStrategy. }
false;public;0;3;;public FieldList getLocalStrategyKeys() {     return this.localKeys. }
false;public;0;3;;public boolean[] getLocalStrategySortOrder() {     return this.localSortOrder. }
false;public;1;3;;public void setDataDistribution(DataDistribution dataDistribution) {     this.dataDistribution = dataDistribution. }
false;public;0;3;;public DataDistribution getDataDistribution() {     return this.dataDistribution. }
false;public;0;3;;public Partitioner<?> getPartitioner() {     return partitioner. }
false;public;0;3;;public TempMode getTempMode() {     return this.tempMode. }
true;public;1;3;/**  * Sets the temp mode of the connection.  *  * @param tempMode  *        The temp mode of the connection.  */ ;/**  * Sets the temp mode of the connection.  *  * @param tempMode  *        The temp mode of the connection.  */ public void setTempMode(TempMode tempMode) {     this.tempMode = tempMode. }
true;public;0;3;/**  * Gets the memory for materializing the channel's result from this Channel.  *  * @return The temp memory.  */ ;/**  * Gets the memory for materializing the channel's result from this Channel.  *  * @return The temp memory.  */ public double getRelativeTempMemory() {     return this.relativeTempMemory. }
true;public;1;3;/**  * Sets the memory for materializing the channel's result from this Channel.  *  * @param relativeTempMemory The memory for materialization.  */ ;/**  * Sets the memory for materializing the channel's result from this Channel.  *  * @param relativeTempMemory The memory for materialization.  */ public void setRelativeTempMemory(double relativeTempMemory) {     this.relativeTempMemory = relativeTempMemory. }
true;public;1;3;/**  * Sets the replication factor of the connection.  *  * @param factor The replication factor of the connection.  */ ;/**  * Sets the replication factor of the connection.  *  * @param factor The replication factor of the connection.  */ public void setReplicationFactor(int factor) {     this.replicationFactor = factor. }
true;public;0;3;/**  * Returns the replication factor of the connection.  *  * @return The replication factor of the connection.  */ ;/**  * Returns the replication factor of the connection.  *  * @return The replication factor of the connection.  */ public int getReplicationFactor() {     return this.replicationFactor. }
true;public;0;3;/**  * Gets the serializer from this Channel.  *  * @return The serializer.  */ ;/**  * Gets the serializer from this Channel.  *  * @return The serializer.  */ public TypeSerializerFactory<?> getSerializer() {     return serializer. }
true;public;1;3;/**  * Sets the serializer for this Channel.  *  * @param serializer The serializer to set.  */ ;/**  * Sets the serializer for this Channel.  *  * @param serializer The serializer to set.  */ public void setSerializer(TypeSerializerFactory<?> serializer) {     this.serializer = serializer. }
true;public;0;3;/**  * Gets the ship strategy comparator from this Channel.  *  * @return The ship strategy comparator.  */ ;/**  * Gets the ship strategy comparator from this Channel.  *  * @return The ship strategy comparator.  */ public TypeComparatorFactory<?> getShipStrategyComparator() {     return shipStrategyComparator. }
true;public;1;3;/**  * Sets the ship strategy comparator for this Channel.  *  * @param shipStrategyComparator The ship strategy comparator to set.  */ ;/**  * Sets the ship strategy comparator for this Channel.  *  * @param shipStrategyComparator The ship strategy comparator to set.  */ public void setShipStrategyComparator(TypeComparatorFactory<?> shipStrategyComparator) {     this.shipStrategyComparator = shipStrategyComparator. }
true;public;0;3;/**  * Gets the local strategy comparator from this Channel.  *  * @return The local strategy comparator.  */ ;/**  * Gets the local strategy comparator from this Channel.  *  * @return The local strategy comparator.  */ public TypeComparatorFactory<?> getLocalStrategyComparator() {     return localStrategyComparator. }
true;public;1;3;/**  * Sets the local strategy comparator for this Channel.  *  * @param localStrategyComparator The local strategy comparator to set.  */ ;/**  * Sets the local strategy comparator for this Channel.  *  * @param localStrategyComparator The local strategy comparator to set.  */ public void setLocalStrategyComparator(TypeComparatorFactory<?> localStrategyComparator) {     this.localStrategyComparator = localStrategyComparator. }
false;public;0;3;;public double getRelativeMemoryLocalStrategy() {     return relativeMemoryLocalStrategy. }
false;public;1;3;;public void setRelativeMemoryLocalStrategy(double relativeMemoryLocalStrategy) {     this.relativeMemoryLocalStrategy = relativeMemoryLocalStrategy. }
false;public;0;3;;public boolean isOnDynamicPath() {     return this.source.isOnDynamicPath(). }
false;public;0;3;;public int getCostWeight() {     return this.source.getCostWeight(). }
false;public;0;5;;// -------------------------------------------------------------------------------------------- // Statistic Estimates // -------------------------------------------------------------------------------------------- @Override public long getEstimatedOutputSize() {     long estimate = this.source.template.getEstimatedOutputSize().     return estimate < 0 ? estimate : estimate * this.replicationFactor. }
false;public;0;5;;@Override public long getEstimatedNumRecords() {     long estimate = this.source.template.getEstimatedNumRecords().     return estimate < 0 ? estimate : estimate * this.replicationFactor. }
false;public;0;4;;@Override public float getEstimatedAvgWidthPerOutputRecord() {     return this.source.template.getEstimatedAvgWidthPerOutputRecord(). }
false;public;0;3;;// -------------------------------------------------------------------------------------------- // Data Property Handling // -------------------------------------------------------------------------------------------- public RequestedGlobalProperties getRequiredGlobalProps() {     return requiredGlobalProps. }
false;public;1;3;;public void setRequiredGlobalProps(RequestedGlobalProperties requiredGlobalProps) {     this.requiredGlobalProps = requiredGlobalProps. }
false;public;0;3;;public RequestedLocalProperties getRequiredLocalProps() {     return requiredLocalProps. }
false;public;1;3;;public void setRequiredLocalProps(RequestedLocalProperties requiredLocalProps) {     this.requiredLocalProps = requiredLocalProps. }
false;public;0;32;;public GlobalProperties getGlobalProperties() {     if (this.globalProps == null) {         this.globalProps = this.source.getGlobalProperties().clone().         switch(this.shipStrategy) {             case BROADCAST:                 this.globalProps.clearUniqueFieldCombinations().                 this.globalProps.setFullyReplicated().                 break.             case PARTITION_HASH:                 this.globalProps.setHashPartitioned(this.shipKeys).                 break.             case PARTITION_RANGE:                 this.globalProps.setRangePartitioned(Utils.createOrdering(this.shipKeys, this.shipSortOrder), this.dataDistribution).                 break.             case FORWARD:                 break.             case PARTITION_RANDOM:                 this.globalProps.reset().                 break.             case PARTITION_FORCED_REBALANCE:                 this.globalProps.setForcedRebalanced().                 break.             case PARTITION_CUSTOM:                 this.globalProps.setCustomPartitioned(this.shipKeys, this.partitioner).                 break.             case NONE:                 throw new CompilerException("Cannot produce GlobalProperties before ship strategy is set.").         }     }     return this.globalProps. }
false;public;0;17;;public LocalProperties getLocalProperties() {     if (this.localProps == null) {         computeLocalPropertiesAfterShippingOnly().         switch(this.localStrategy) {             case NONE:                 break.             case SORT:             case COMBININGSORT:                 this.localProps = LocalProperties.forOrdering(Utils.createOrdering(this.localKeys, this.localSortOrder)).                 break.             default:                 throw new CompilerException("Unsupported local strategy for channel.").         }     }     return this.localProps. }
false;private;0;19;;private void computeLocalPropertiesAfterShippingOnly() {     switch(this.shipStrategy) {         case BROADCAST:         case PARTITION_HASH:         case PARTITION_CUSTOM:         case PARTITION_RANGE:         case PARTITION_RANDOM:         case PARTITION_FORCED_REBALANCE:             this.localProps = new LocalProperties().             break.         case FORWARD:             this.localProps = this.source.getLocalProperties().             break.         case NONE:             throw new CompilerException("ShipStrategy has not yet been set.").         default:             throw new CompilerException("Unknown ShipStrategy.").     } }
false;public;0;27;;public void adjustGlobalPropertiesForFullParallelismChange() {     if (this.shipStrategy == null || this.shipStrategy == ShipStrategyType.NONE) {         throw new IllegalStateException("Cannot adjust channel for parallelism " + "change before the ship strategy is set.").     }     // make sure the properties are acquired     if (this.globalProps == null) {         getGlobalProperties().     }     // some strategies globally reestablish properties     switch(this.shipStrategy) {         case FORWARD:             throw new CompilerException("Cannot use FORWARD strategy between operations " + "with different number of parallel instances.").         // excluded by sanity check. left here for verification check completion         case NONE:         case BROADCAST:         case PARTITION_HASH:         case PARTITION_RANGE:         case PARTITION_RANDOM:         case PARTITION_FORCED_REBALANCE:         case PARTITION_CUSTOM:             return.     }     throw new CompilerException("Unrecognized Ship Strategy Type: " + this.shipStrategy). }
true;public;1;7;/**  * Utility method used while swapping binary union nodes for n-ary union nodes.  */ ;// -------------------------------------------------------------------------------------------- /**  * Utility method used while swapping binary union nodes for n-ary union nodes.  */ public void swapUnionNodes(PlanNode newUnionNode) {     if (!(this.source instanceof BinaryUnionPlanNode)) {         throw new IllegalStateException().     } else {         this.source = newUnionNode.     } }
false;public;0;3;;// -------------------------------------------------------------------------------------------- public int getMaxDepth() {     return this.source.getOptimizerNode().getMaxDepth() + 1. }
false;public;0;6;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     return "Channel (" + this.source + (this.target == null ? ')' : ") -> (" + this.target + ')') + '[' + this.shipStrategy + "] [" + this.localStrategy + "] " + (this.tempMode == null || this.tempMode == TempMode.NONE ? "{NO-TEMP}" : this.tempMode). }
false;public;0;8;;@Override public Channel clone() {     try {         return (Channel) super.clone().     } catch (CloneNotSupportedException cnsex) {         throw new RuntimeException(cnsex).     } }
