commented;modifiers;parameterAmount;loc;comment;code
false;private;0;14;;private List<OperatorDescriptorSingle> initPossibleProperties() {     // check if we can work with a grouping (simple reducer), or if we need ordering because of a group order     Ordering groupOrder = getOperator().getGroupOrder().     if (groupOrder != null && groupOrder.getNumberOfFields() == 0) {         groupOrder = null.     }     OperatorDescriptorSingle props = (this.keys == null ? new AllGroupCombineProperties() : new GroupCombineProperties(this.keys, groupOrder)).     return Collections.singletonList(props). }
true;public;0;4;/**  * Gets the operator represented by this optimizer node.  *  * @return The operator represented by this optimizer node.  */ ;// ------------------------------------------------------------------------ /**  * Gets the operator represented by this optimizer node.  *  * @return The operator represented by this optimizer node.  */ @Override public GroupCombineOperatorBase<?, ?, ?> getOperator() {     return (GroupCombineOperatorBase<?, ?, ?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "GroupCombine". }
false;protected;0;4;;@Override protected List<OperatorDescriptorSingle> getPossibleProperties() {     return this.possibleProperties. }
false;protected;0;23;;@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering() {     // Local properties for GroupCombine may only be preserved on key fields.     SingleInputSemanticProperties origProps = ((SingleInputOperator<?, ?, ?>) getOperator()).getSemanticProperties().     SingleInputSemanticProperties filteredProps = new SingleInputSemanticProperties().     FieldSet readSet = origProps.getReadFields(0).     if (readSet != null) {         filteredProps.addReadFields(readSet).     }     // only add forward field information for key fields     if (this.keys != null) {         for (int f : this.keys) {             FieldSet targets = origProps.getForwardingTargetFields(0, f).             for (int t : targets) {                 filteredProps.addForwardedField(f, t).             }         }     }     return filteredProps. }
false;protected;1;4;;// -------------------------------------------------------------------------------------------- // Estimates // -------------------------------------------------------------------------------------------- @Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) { // no real estimates possible for a reducer. }
