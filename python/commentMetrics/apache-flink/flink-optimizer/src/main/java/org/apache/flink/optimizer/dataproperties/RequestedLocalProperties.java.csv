commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the key order.  *  * @return The key order, or <code>null</code> if nothing is ordered.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the key order.  *  * @return The key order, or <code>null</code> if nothing is ordered.  */ public Ordering getOrdering() {     return ordering. }
true;public;1;3;/**  * Sets the order for these interesting local properties.  *  * @param ordering The order to set.  */ ;/**  * Sets the order for these interesting local properties.  *  * @param ordering The order to set.  */ public void setOrdering(Ordering ordering) {     this.ordering = ordering. }
true;public;0;3;/**  * Gets the grouped fields.  *  * @return The grouped fields, or <code>null</code> if nothing is grouped.  */ ;/**  * Gets the grouped fields.  *  * @return The grouped fields, or <code>null</code> if nothing is grouped.  */ public FieldSet getGroupedFields() {     return this.groupedFields. }
true;public;1;3;/**  * Sets the fields that are grouped in these data properties.  *  * @param groupedFields The fields that are grouped in these data properties.  */ ;/**  * Sets the fields that are grouped in these data properties.  *  * @param groupedFields The fields that are grouped in these data properties.  */ public void setGroupedFields(FieldSet groupedFields) {     this.groupedFields = groupedFields. }
true;public;0;3;/**  * Checks, if the properties in this object are trivial, i.e. only standard values.  */ ;/**  * Checks, if the properties in this object are trivial, i.e. only standard values.  */ public boolean isTrivial() {     return ordering == null && this.groupedFields == null. }
true;public;0;4;/**  * This method resets the local properties to a state where no properties are given.  */ ;/**  * This method resets the local properties to a state where no properties are given.  */ public void reset() {     this.ordering = null.     this.groupedFields = null. }
true;public;2;38;/**  * Filters these properties by what can be preserved by the given SemanticProperties when propagated down  * to the given input.  *  * @param props The SemanticProperties which define which fields are preserved.  * @param input The index of the operator's input.  * @return The filtered RequestedLocalProperties  */ ;// -------------------------------------------------------------------------------------------- /**  * Filters these properties by what can be preserved by the given SemanticProperties when propagated down  * to the given input.  *  * @param props The SemanticProperties which define which fields are preserved.  * @param input The index of the operator's input.  * @return The filtered RequestedLocalProperties  */ public RequestedLocalProperties filterBySemanticProperties(SemanticProperties props, int input) {     // no semantic properties, all local properties are filtered     if (props == null) {         throw new NullPointerException("SemanticProperties may not be null.").     }     if (this.ordering != null) {         Ordering newOrdering = new Ordering().         for (int i = 0. i < this.ordering.getInvolvedIndexes().size(). i++) {             int targetField = this.ordering.getInvolvedIndexes().get(i).             int sourceField = props.getForwardingSourceField(input, targetField).             if (sourceField >= 0) {                 newOrdering.appendOrdering(sourceField, this.ordering.getType(i), this.ordering.getOrder(i)).             } else {                 return null.             }         }         return new RequestedLocalProperties(newOrdering).     } else if (this.groupedFields != null) {         FieldSet newGrouping = new FieldSet().         // check, whether the local key grouping is preserved         for (Integer targetField : this.groupedFields) {             int sourceField = props.getForwardingSourceField(input, targetField).             if (sourceField >= 0) {                 newGrouping = newGrouping.addField(sourceField).             } else {                 return null.             }         }         return new RequestedLocalProperties(newGrouping).     } else {         return null.     } }
true;public;1;15;/**  * Checks, if this set of properties, as interesting properties, is met by the given  * properties.  *  * @param other  *        The properties for which to check whether they meet these properties.  * @return True, if the properties are met, false otherwise.  */ ;/**  * Checks, if this set of properties, as interesting properties, is met by the given  * properties.  *  * @param other  *        The properties for which to check whether they meet these properties.  * @return True, if the properties are met, false otherwise.  */ public boolean isMetBy(LocalProperties other) {     if (this.ordering != null) {         // we demand an ordering         return other.getOrdering() != null && this.ordering.isMetBy(other.getOrdering()).     } else if (this.groupedFields != null) {         // check if the other fields are unique         if (other.getGroupedFields() != null && other.getGroupedFields().isValidUnorderedPrefix(this.groupedFields)) {             return true.         } else {             return other.areFieldsUnique(this.groupedFields).         }     } else {         return true.     } }
true;public;1;19;/**  * Parametrizes the local strategy fields of a channel such that the channel produces the desired local properties.  *  * @param channel The channel to parametrize.  */ ;/**  * Parametrizes the local strategy fields of a channel such that the channel produces the desired local properties.  *  * @param channel The channel to parametrize.  */ public void parameterizeChannel(Channel channel) {     LocalProperties current = channel.getLocalProperties().     if (isMetBy(current)) {         // we are met, all is good         channel.setLocalStrategy(LocalStrategy.NONE).     } else if (this.ordering != null) {         channel.setLocalStrategy(LocalStrategy.SORT, this.ordering.getInvolvedIndexes(), this.ordering.getFieldSortDirections()).     } else if (this.groupedFields != null) {         boolean[] dirs = new boolean[this.groupedFields.size()].         Arrays.fill(dirs, true).         channel.setLocalStrategy(LocalStrategy.SORT, Utils.createOrderedFromSet(this.groupedFields), dirs).     } else {         channel.setLocalStrategy(LocalStrategy.NONE).     } }
false;public;0;8;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + (this.ordering == null ? 0 : this.ordering.hashCode()).     result = prime * result + (this.groupedFields == null ? 0 : this.groupedFields.hashCode()).     return result. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof RequestedLocalProperties) {         final RequestedLocalProperties other = (RequestedLocalProperties) obj.         return (this.ordering == other.ordering || (this.ordering != null && this.ordering.equals(other.ordering))) && (this.groupedFields == other.groupedFields || (this.groupedFields != null && this.groupedFields.equals(other.groupedFields))).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return "Requested Local Properties [ordering=" + this.ordering + ", grouped=" + this.groupedFields + "]". }
false;public;0;4;;@Override public RequestedLocalProperties clone() {     return new RequestedLocalProperties(this.ordering, this.groupedFields). }
