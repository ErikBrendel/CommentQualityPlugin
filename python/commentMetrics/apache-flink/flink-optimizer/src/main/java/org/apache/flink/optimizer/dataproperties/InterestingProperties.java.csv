commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;// ------------------------------------------------------------------------ public void addGlobalProperties(RequestedGlobalProperties props) {     this.globalProps.add(props). }
false;public;1;3;;public void addLocalProperties(RequestedLocalProperties props) {     this.localProps.add(props). }
false;public;1;4;;public void addInterestingProperties(InterestingProperties other) {     this.globalProps.addAll(other.globalProps).     this.localProps.addAll(other.localProps). }
true;public;0;3;/**  * Gets the interesting local properties.  *  * @return The interesting local properties.  */ ;/**  * Gets the interesting local properties.  *  * @return The interesting local properties.  */ public Set<RequestedLocalProperties> getLocalProperties() {     return this.localProps. }
true;public;0;3;/**  * Gets the interesting global properties.  *  * @return The interesting global properties.  */ ;/**  * Gets the interesting global properties.  *  * @return The interesting global properties.  */ public Set<RequestedGlobalProperties> getGlobalProperties() {     return this.globalProps. }
false;public;2;23;;public InterestingProperties filterByCodeAnnotations(OptimizerNode node, int input) {     InterestingProperties iProps = new InterestingProperties().     SemanticProperties props.     if (node instanceof SingleInputNode || node instanceof TwoInputNode) {         props = node.getSemanticProperties().     } else {         props = new SemanticProperties.EmptySemanticProperties().     }     for (RequestedGlobalProperties rgp : this.globalProps) {         RequestedGlobalProperties filtered = rgp.filterBySemanticProperties(props, input).         if (filtered != null && !filtered.isTrivial()) {             iProps.addGlobalProperties(filtered).         }     }     for (RequestedLocalProperties rlp : this.localProps) {         RequestedLocalProperties filtered = rlp.filterBySemanticProperties(props, input).         if (filtered != null && !filtered.isTrivial()) {             iProps.addLocalProperties(filtered).         }     }     return iProps. }
false;public;0;17;;public void dropTrivials() {     for (Iterator<RequestedGlobalProperties> iter = this.globalProps.iterator(). iter.hasNext(). ) {         RequestedGlobalProperties gp = iter.next().         if (gp.isTrivial()) {             iter.remove().             break.         }     }     for (Iterator<RequestedLocalProperties> iter = this.localProps.iterator(). iter.hasNext(). ) {         RequestedLocalProperties lp = iter.next().         if (lp.isTrivial()) {             iter.remove().             break.         }     } }
false;public;0;8;;// ------------------------------------------------------------------------ @Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((globalProps == null) ? 0 : globalProps.hashCode()).     result = prime * result + ((localProps == null) ? 0 : localProps.hashCode()).     return result. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof InterestingProperties) {         InterestingProperties other = (InterestingProperties) obj.         return this.globalProps.equals(other.globalProps) && this.localProps.equals(other.localProps).     } else {         return false.     } }
false;public;0;5;;@Override public String toString() {     return "InterestingProperties [globalProps=" + this.globalProps + ", localProps=" + this.localProps + " ]". }
false;public;0;13;;@Override public InterestingProperties clone() {     HashSet<RequestedGlobalProperties> globalProps = new HashSet<RequestedGlobalProperties>().     for (RequestedGlobalProperties p : this.globalProps) {         globalProps.add(p.clone()).     }     HashSet<RequestedLocalProperties> localProps = new HashSet<RequestedLocalProperties>().     for (RequestedLocalProperties p : this.localProps) {         localProps.add(p.clone()).     }     return new InterestingProperties(globalProps, localProps). }
