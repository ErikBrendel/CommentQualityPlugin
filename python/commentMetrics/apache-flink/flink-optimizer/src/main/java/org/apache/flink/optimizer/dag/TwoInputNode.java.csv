# id;timestamp;commentText;codeText;commentWords;codeWords
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract);1426843274;Creates a new node with a single input for the optimizer plan.__@param pactContract_The PACT that the node represents.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract) {_		super(pactContract)___		int[] k1 = pactContract.getKeyColumns(0)__		int[] k2 = pactContract.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,node,with,a,single,input,for,the,optimizer,plan,param,pact,contract,the,pact,that,the,node,represents;public,two,input,node,dual,input,operator,pact,contract,super,pact,contract,int,k1,pact,contract,get,key,columns,0,int,k2,pact,contract,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract);1427097830;Creates a new node with a single input for the optimizer plan.__@param pactContract_The PACT that the node represents.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract) {_		super(pactContract)___		int[] k1 = pactContract.getKeyColumns(0)__		int[] k2 = pactContract.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,node,with,a,single,input,for,the,optimizer,plan,param,pact,contract,the,pact,that,the,node,represents;public,two,input,node,dual,input,operator,pact,contract,super,pact,contract,int,k1,pact,contract,get,key,columns,0,int,k2,pact,contract,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract);1428086387;Creates a new node with a single input for the optimizer plan.__@param pactContract_The PACT that the node represents.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> pactContract) {_		super(pactContract)___		int[] k1 = pactContract.getKeyColumns(0)__		int[] k2 = pactContract.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,node,with,a,single,input,for,the,optimizer,plan,param,pact,contract,the,pact,that,the,node,represents;public,two,input,node,dual,input,operator,pact,contract,super,pact,contract,int,k1,pact,contract,get,key,columns,0,int,k2,pact,contract,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public DagConnection getSecondIncomingConnection();1426843274;Gets the <tt>PactConnection</tt> through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1427097830;Gets the <tt>PactConnection</tt> through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1428086387;Gets the <tt>PactConnection</tt> through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1431981454;Gets the DagConnection through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,dag,connection,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1502726910;Gets the DagConnection through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,dag,connection,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1530185676;Gets the DagConnection through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,dag,connection,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public DagConnection getSecondIncomingConnection();1533553549;Gets the DagConnection through which this node receives its <i>second</i> input.__@return The second input connection.;public DagConnection getSecondIncomingConnection() {_		return this.input2__	};gets,the,dag,connection,through,which,this,node,receives,its,i,second,i,input,return,the,second,input,connection;public,dag,connection,get,second,incoming,connection,return,this,input2
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator);1431981454;Creates a new two input node for the optimizer plan, representing the given operator.__@param operator The operator that the optimizer DAG node should represent.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator) {_		super(operator)___		int[] k1 = operator.getKeyColumns(0)__		int[] k2 = operator.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,two,input,node,for,the,optimizer,plan,representing,the,given,operator,param,operator,the,operator,that,the,optimizer,dag,node,should,represent;public,two,input,node,dual,input,operator,operator,super,operator,int,k1,operator,get,key,columns,0,int,k2,operator,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator);1502726910;Creates a new two input node for the optimizer plan, representing the given operator.__@param operator The operator that the optimizer DAG node should represent.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator) {_		super(operator)___		int[] k1 = operator.getKeyColumns(0)__		int[] k2 = operator.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,two,input,node,for,the,optimizer,plan,representing,the,given,operator,param,operator,the,operator,that,the,optimizer,dag,node,should,represent;public,two,input,node,dual,input,operator,operator,super,operator,int,k1,operator,get,key,columns,0,int,k2,operator,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator);1530185676;Creates a new two input node for the optimizer plan, representing the given operator.__@param operator The operator that the optimizer DAG node should represent.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator) {_		super(operator)___		int[] k1 = operator.getKeyColumns(0)__		int[] k2 = operator.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,two,input,node,for,the,optimizer,plan,representing,the,given,operator,param,operator,the,operator,that,the,optimizer,dag,node,should,represent;public,two,input,node,dual,input,operator,operator,super,operator,int,k1,operator,get,key,columns,0,int,k2,operator,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator);1533553549;Creates a new two input node for the optimizer plan, representing the given operator.__@param operator The operator that the optimizer DAG node should represent.;public TwoInputNode(DualInputOperator<?, ?, ?, ?> operator) {_		super(operator)___		int[] k1 = operator.getKeyColumns(0)__		int[] k2 = operator.getKeyColumns(1)__		_		this.keys1 = k1 == null || k1.length == 0 ? null : new FieldList(k1)__		this.keys2 = k2 == null || k2.length == 0 ? null : new FieldList(k2)__		_		if (this.keys1 != null) {_			if (this.keys2 != null) {_				if (this.keys1.size() != this.keys2.size()) {_					throw new CompilerException("Unequal number of key fields on the two inputs.")__				}_			} else {_				throw new CompilerException("Keys are set on first input, but not on second.")__			}_		} else if (this.keys2 != null) {_			throw new CompilerException("Keys are set on second input, but not on first.")__		}_	};creates,a,new,two,input,node,for,the,optimizer,plan,representing,the,given,operator,param,operator,the,operator,that,the,optimizer,dag,node,should,represent;public,two,input,node,dual,input,operator,operator,super,operator,int,k1,operator,get,key,columns,0,int,k2,operator,get,key,columns,1,this,keys1,k1,null,k1,length,0,null,new,field,list,k1,this,keys2,k2,null,k2,length,0,null,new,field,list,k2,if,this,keys1,null,if,this,keys2,null,if,this,keys1,size,this,keys2,size,throw,new,compiler,exception,unequal,number,of,key,fields,on,the,two,inputs,else,throw,new,compiler,exception,keys,are,set,on,first,input,but,not,on,second,else,if,this,keys2,null,throw,new,compiler,exception,keys,are,set,on,second,input,but,not,on,first
TwoInputNode -> public DagConnection getFirstIncomingConnection();1426843274;Gets the <tt>PactConnection</tt> through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1427097830;Gets the <tt>PactConnection</tt> through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1428086387;Gets the <tt>PactConnection</tt> through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,tt,pact,connection,tt,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1431981454;Gets the DagConnection through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,dag,connection,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1502726910;Gets the DagConnection through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,dag,connection,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1530185676;Gets the DagConnection through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,dag,connection,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
TwoInputNode -> public DagConnection getFirstIncomingConnection();1533553549;Gets the DagConnection through which this node receives its <i>first</i> input.__@return The first input connection.;public DagConnection getFirstIncomingConnection() {_		return this.input1__	};gets,the,dag,connection,through,which,this,node,receives,its,i,first,i,input,return,the,first,input,connection;public,dag,connection,get,first,incoming,connection,return,this,input1
