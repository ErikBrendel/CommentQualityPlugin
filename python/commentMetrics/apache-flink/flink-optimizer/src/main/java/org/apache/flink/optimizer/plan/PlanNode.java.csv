# id;timestamp;commentText;codeText;commentWords;codeWords
PlanNode -> public GlobalProperties getGlobalProperties();1426843274;Gets the global properties from this PlanNode.__@return The global properties.;public GlobalProperties getGlobalProperties() {_		return this.globalProps__	};gets,the,global,properties,from,this,plan,node,return,the,global,properties;public,global,properties,get,global,properties,return,this,global,props
PlanNode -> public GlobalProperties getGlobalProperties();1442492509;Gets the global properties from this PlanNode.__@return The global properties.;public GlobalProperties getGlobalProperties() {_		return this.globalProps__	};gets,the,global,properties,from,this,plan,node,return,the,global,properties;public,global,properties,get,global,properties,return,this,global,props
PlanNode -> public GlobalProperties getGlobalProperties();1475688973;Gets the global properties from this PlanNode.__@return The global properties.;public GlobalProperties getGlobalProperties() {_		return this.globalProps__	};gets,the,global,properties,from,this,plan,node,return,the,global,properties;public,global,properties,get,global,properties,return,this,global,props
PlanNode -> public GlobalProperties getGlobalProperties();1488304750;Gets the global properties from this PlanNode.__@return The global properties.;public GlobalProperties getGlobalProperties() {_		return this.globalProps__	};gets,the,global,properties,from,this,plan,node,return,the,global,properties;public,global,properties,get,global,properties,return,this,global,props
PlanNode -> public GlobalProperties getGlobalProperties();1488304750;Gets the global properties from this PlanNode.__@return The global properties.;public GlobalProperties getGlobalProperties() {_		return this.globalProps__	};gets,the,global,properties,from,this,plan,node,return,the,global,properties;public,global,properties,get,global,properties,return,this,global,props
PlanNode -> public boolean isPruneMarkerSet();1426843274;Checks whether the pruning marker was set.__@return True, if the pruning marker was set, false otherwise.;public boolean isPruneMarkerSet() {_		return this.pFlag__	};checks,whether,the,pruning,marker,was,set,return,true,if,the,pruning,marker,was,set,false,otherwise;public,boolean,is,prune,marker,set,return,this,p,flag
PlanNode -> public boolean isPruneMarkerSet();1442492509;Checks whether the pruning marker was set.__@return True, if the pruning marker was set, false otherwise.;public boolean isPruneMarkerSet() {_		return this.pFlag__	};checks,whether,the,pruning,marker,was,set,return,true,if,the,pruning,marker,was,set,false,otherwise;public,boolean,is,prune,marker,set,return,this,p,flag
PlanNode -> public boolean isPruneMarkerSet();1475688973;Checks whether the pruning marker was set.__@return True, if the pruning marker was set, false otherwise.;public boolean isPruneMarkerSet() {_		return this.pFlag__	};checks,whether,the,pruning,marker,was,set,return,true,if,the,pruning,marker,was,set,false,otherwise;public,boolean,is,prune,marker,set,return,this,p,flag
PlanNode -> public boolean isPruneMarkerSet();1488304750;Checks whether the pruning marker was set.__@return True, if the pruning marker was set, false otherwise.;public boolean isPruneMarkerSet() {_		return this.pFlag__	};checks,whether,the,pruning,marker,was,set,return,true,if,the,pruning,marker,was,set,false,otherwise;public,boolean,is,prune,marker,set,return,this,p,flag
PlanNode -> public boolean isPruneMarkerSet();1488304750;Checks whether the pruning marker was set.__@return True, if the pruning marker was set, false otherwise.;public boolean isPruneMarkerSet() {_		return this.pFlag__	};checks,whether,the,pruning,marker,was,set,return,true,if,the,pruning,marker,was,set,false,otherwise;public,boolean,is,prune,marker,set,return,this,p,flag
PlanNode -> public LocalProperties getLocalProperties();1426843274;Gets the local properties from this PlanNode.__@return The local properties.;public LocalProperties getLocalProperties() {_		return this.localProps__	};gets,the,local,properties,from,this,plan,node,return,the,local,properties;public,local,properties,get,local,properties,return,this,local,props
PlanNode -> public LocalProperties getLocalProperties();1442492509;Gets the local properties from this PlanNode.__@return The local properties.;public LocalProperties getLocalProperties() {_		return this.localProps__	};gets,the,local,properties,from,this,plan,node,return,the,local,properties;public,local,properties,get,local,properties,return,this,local,props
PlanNode -> public LocalProperties getLocalProperties();1475688973;Gets the local properties from this PlanNode.__@return The local properties.;public LocalProperties getLocalProperties() {_		return this.localProps__	};gets,the,local,properties,from,this,plan,node,return,the,local,properties;public,local,properties,get,local,properties,return,this,local,props
PlanNode -> public LocalProperties getLocalProperties();1488304750;Gets the local properties from this PlanNode.__@return The local properties.;public LocalProperties getLocalProperties() {_		return this.localProps__	};gets,the,local,properties,from,this,plan,node,return,the,local,properties;public,local,properties,get,local,properties,return,this,local,props
PlanNode -> public LocalProperties getLocalProperties();1488304750;Gets the local properties from this PlanNode.__@return The local properties.;public LocalProperties getLocalProperties() {_		return this.localProps__	};gets,the,local,properties,from,this,plan,node,return,the,local,properties;public,local,properties,get,local,properties,return,this,local,props
PlanNode -> public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask);1426843274;Sets the memory dedicated to each task for this node.__@param relativeMemoryPerSubtask The relative memory per sub-task;public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask) {_		this.relativeMemoryPerSubTask = relativeMemoryPerSubtask__	};sets,the,memory,dedicated,to,each,task,for,this,node,param,relative,memory,per,subtask,the,relative,memory,per,sub,task;public,void,set,relative,memory,per,subtask,double,relative,memory,per,subtask,this,relative,memory,per,sub,task,relative,memory,per,subtask
PlanNode -> public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask);1442492509;Sets the memory dedicated to each task for this node.__@param relativeMemoryPerSubtask The relative memory per sub-task;public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask) {_		this.relativeMemoryPerSubTask = relativeMemoryPerSubtask__	};sets,the,memory,dedicated,to,each,task,for,this,node,param,relative,memory,per,subtask,the,relative,memory,per,sub,task;public,void,set,relative,memory,per,subtask,double,relative,memory,per,subtask,this,relative,memory,per,sub,task,relative,memory,per,subtask
PlanNode -> public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask);1475688973;Sets the memory dedicated to each task for this node.__@param relativeMemoryPerSubtask The relative memory per sub-task;public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask) {_		this.relativeMemoryPerSubTask = relativeMemoryPerSubtask__	};sets,the,memory,dedicated,to,each,task,for,this,node,param,relative,memory,per,subtask,the,relative,memory,per,sub,task;public,void,set,relative,memory,per,subtask,double,relative,memory,per,subtask,this,relative,memory,per,sub,task,relative,memory,per,subtask
PlanNode -> public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask);1488304750;Sets the memory dedicated to each task for this node.__@param relativeMemoryPerSubtask The relative memory per sub-task;public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask) {_		this.relativeMemoryPerSubTask = relativeMemoryPerSubtask__	};sets,the,memory,dedicated,to,each,task,for,this,node,param,relative,memory,per,subtask,the,relative,memory,per,sub,task;public,void,set,relative,memory,per,subtask,double,relative,memory,per,subtask,this,relative,memory,per,sub,task,relative,memory,per,subtask
PlanNode -> public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask);1488304750;Sets the memory dedicated to each task for this node.__@param relativeMemoryPerSubtask The relative memory per sub-task;public void setRelativeMemoryPerSubtask(double relativeMemoryPerSubtask) {_		this.relativeMemoryPerSubTask = relativeMemoryPerSubtask__	};sets,the,memory,dedicated,to,each,task,for,this,node,param,relative,memory,per,subtask,the,relative,memory,per,sub,task;public,void,set,relative,memory,per,subtask,double,relative,memory,per,subtask,this,relative,memory,per,sub,task,relative,memory,per,subtask
PlanNode -> public List<Channel> getOutgoingChannels();1426843274;Gets a list of all outgoing channels leading to successors.__@return A list of all channels leading to successors.;public List<Channel> getOutgoingChannels() {_		return this.outChannels__	};gets,a,list,of,all,outgoing,channels,leading,to,successors,return,a,list,of,all,channels,leading,to,successors;public,list,channel,get,outgoing,channels,return,this,out,channels
PlanNode -> public List<Channel> getOutgoingChannels();1442492509;Gets a list of all outgoing channels leading to successors.__@return A list of all channels leading to successors.;public List<Channel> getOutgoingChannels() {_		return this.outChannels__	};gets,a,list,of,all,outgoing,channels,leading,to,successors,return,a,list,of,all,channels,leading,to,successors;public,list,channel,get,outgoing,channels,return,this,out,channels
PlanNode -> public List<Channel> getOutgoingChannels();1475688973;Gets a list of all outgoing channels leading to successors.__@return A list of all channels leading to successors.;public List<Channel> getOutgoingChannels() {_		return this.outChannels__	};gets,a,list,of,all,outgoing,channels,leading,to,successors,return,a,list,of,all,channels,leading,to,successors;public,list,channel,get,outgoing,channels,return,this,out,channels
PlanNode -> public List<Channel> getOutgoingChannels();1488304750;Gets a list of all outgoing channels leading to successors.__@return A list of all channels leading to successors.;public List<Channel> getOutgoingChannels() {_		return this.outChannels__	};gets,a,list,of,all,outgoing,channels,leading,to,successors,return,a,list,of,all,channels,leading,to,successors;public,list,channel,get,outgoing,channels,return,this,out,channels
PlanNode -> public List<Channel> getOutgoingChannels();1488304750;Gets a list of all outgoing channels leading to successors.__@return A list of all channels leading to successors.;public List<Channel> getOutgoingChannels() {_		return this.outChannels__	};gets,a,list,of,all,outgoing,channels,leading,to,successors,return,a,list,of,all,channels,leading,to,successors;public,list,channel,get,outgoing,channels,return,this,out,channels
PlanNode -> public String getNodeName();1426843274;Gets the name of the plan node.__@return The name of the plan node.;public String getNodeName() {_		return this.nodeName__	};gets,the,name,of,the,plan,node,return,the,name,of,the,plan,node;public,string,get,node,name,return,this,node,name
PlanNode -> public String getNodeName();1442492509;Gets the name of the plan node.__@return The name of the plan node.;public String getNodeName() {_		return this.nodeName__	};gets,the,name,of,the,plan,node,return,the,name,of,the,plan,node;public,string,get,node,name,return,this,node,name
PlanNode -> public String getNodeName();1475688973;Gets the name of the plan node.__@return The name of the plan node.;public String getNodeName() {_		return this.nodeName__	};gets,the,name,of,the,plan,node,return,the,name,of,the,plan,node;public,string,get,node,name,return,this,node,name
PlanNode -> public String getNodeName();1488304750;Gets the name of the plan node.__@return The name of the plan node.;public String getNodeName() {_		return this.nodeName__	};gets,the,name,of,the,plan,node,return,the,name,of,the,plan,node;public,string,get,node,name,return,this,node,name
PlanNode -> public String getNodeName();1488304750;Gets the name of the plan node.__@return The name of the plan node.;public String getNodeName() {_		return this.nodeName__	};gets,the,name,of,the,plan,node,return,the,name,of,the,plan,node;public,string,get,node,name,return,this,node,name
PlanNode -> public void setBroadcastInputs(List<NamedChannel> broadcastInputs);1426843274;Sets a list of all broadcast inputs attached to this node.;public void setBroadcastInputs(List<NamedChannel> broadcastInputs) {_		if (broadcastInputs != null) {_			this.broadcastInputs = broadcastInputs__			_			_			for (NamedChannel nc : broadcastInputs) {_				PlanNode source = nc.getSource()__				_				mergeBranchPlanMaps(branchPlan, source.branchPlan)__			}_		}_		_		_		if (this.template.hasUnclosedBranches()) {_			if (this.branchPlan == null) {_				throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__			}_	_			for (UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {_				OptimizerNode brancher = uc.getBranchingNode()__				if (this.branchPlan.get(brancher) == null) {_					throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__				}_			}_		}_	};sets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,void,set,broadcast,inputs,list,named,channel,broadcast,inputs,if,broadcast,inputs,null,this,broadcast,inputs,broadcast,inputs,for,named,channel,nc,broadcast,inputs,plan,node,source,nc,get,source,merge,branch,plan,maps,branch,plan,source,branch,plan,if,this,template,has,unclosed,branches,if,this,branch,plan,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point,for,unclosed,branch,descriptor,uc,this,template,get,open,branches,optimizer,node,brancher,uc,get,branching,node,if,this,branch,plan,get,brancher,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point
PlanNode -> public void setBroadcastInputs(List<NamedChannel> broadcastInputs);1442492509;Sets a list of all broadcast inputs attached to this node.;public void setBroadcastInputs(List<NamedChannel> broadcastInputs) {_		if (broadcastInputs != null) {_			this.broadcastInputs = broadcastInputs__			_			_			for (NamedChannel nc : broadcastInputs) {_				PlanNode source = nc.getSource()__				_				mergeBranchPlanMaps(branchPlan, source.branchPlan)__			}_		}_		_		_		if (this.template.hasUnclosedBranches()) {_			if (this.branchPlan == null) {_				throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__			}_	_			for (UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {_				OptimizerNode brancher = uc.getBranchingNode()__				if (this.branchPlan.get(brancher) == null) {_					throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__				}_			}_		}_	};sets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,void,set,broadcast,inputs,list,named,channel,broadcast,inputs,if,broadcast,inputs,null,this,broadcast,inputs,broadcast,inputs,for,named,channel,nc,broadcast,inputs,plan,node,source,nc,get,source,merge,branch,plan,maps,branch,plan,source,branch,plan,if,this,template,has,unclosed,branches,if,this,branch,plan,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point,for,unclosed,branch,descriptor,uc,this,template,get,open,branches,optimizer,node,brancher,uc,get,branching,node,if,this,branch,plan,get,brancher,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point
PlanNode -> public void setBroadcastInputs(List<NamedChannel> broadcastInputs);1475688973;Sets a list of all broadcast inputs attached to this node.;public void setBroadcastInputs(List<NamedChannel> broadcastInputs) {_		if (broadcastInputs != null) {_			this.broadcastInputs = broadcastInputs__			_			_			for (NamedChannel nc : broadcastInputs) {_				PlanNode source = nc.getSource()__				_				mergeBranchPlanMaps(branchPlan, source.branchPlan)__			}_		}_		_		_		if (this.template.hasUnclosedBranches()) {_			if (this.branchPlan == null) {_				throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__			}_	_			for (UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {_				OptimizerNode brancher = uc.getBranchingNode()__				if (this.branchPlan.get(brancher) == null) {_					throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__				}_			}_		}_	};sets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,void,set,broadcast,inputs,list,named,channel,broadcast,inputs,if,broadcast,inputs,null,this,broadcast,inputs,broadcast,inputs,for,named,channel,nc,broadcast,inputs,plan,node,source,nc,get,source,merge,branch,plan,maps,branch,plan,source,branch,plan,if,this,template,has,unclosed,branches,if,this,branch,plan,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point,for,unclosed,branch,descriptor,uc,this,template,get,open,branches,optimizer,node,brancher,uc,get,branching,node,if,this,branch,plan,get,brancher,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point
PlanNode -> public void setBroadcastInputs(List<NamedChannel> broadcastInputs);1488304750;Sets a list of all broadcast inputs attached to this node.;public void setBroadcastInputs(List<NamedChannel> broadcastInputs) {_		if (broadcastInputs != null) {_			this.broadcastInputs = broadcastInputs__			_			_			for (NamedChannel nc : broadcastInputs) {_				PlanNode source = nc.getSource()__				_				mergeBranchPlanMaps(branchPlan, source.branchPlan)__			}_		}_		_		_		if (this.template.hasUnclosedBranches()) {_			if (this.branchPlan == null) {_				throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__			}_	_			for (UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {_				OptimizerNode brancher = uc.getBranchingNode()__				if (this.branchPlan.get(brancher) == null) {_					throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__				}_			}_		}_	};sets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,void,set,broadcast,inputs,list,named,channel,broadcast,inputs,if,broadcast,inputs,null,this,broadcast,inputs,broadcast,inputs,for,named,channel,nc,broadcast,inputs,plan,node,source,nc,get,source,merge,branch,plan,maps,branch,plan,source,branch,plan,if,this,template,has,unclosed,branches,if,this,branch,plan,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point,for,unclosed,branch,descriptor,uc,this,template,get,open,branches,optimizer,node,brancher,uc,get,branching,node,if,this,branch,plan,get,brancher,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point
PlanNode -> public void setBroadcastInputs(List<NamedChannel> broadcastInputs);1488304750;Sets a list of all broadcast inputs attached to this node.;public void setBroadcastInputs(List<NamedChannel> broadcastInputs) {_		if (broadcastInputs != null) {_			this.broadcastInputs = broadcastInputs__			_			_			for (NamedChannel nc : broadcastInputs) {_				PlanNode source = nc.getSource()__				_				mergeBranchPlanMaps(branchPlan, source.branchPlan)__			}_		}_		_		_		if (this.template.hasUnclosedBranches()) {_			if (this.branchPlan == null) {_				throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__			}_	_			for (UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {_				OptimizerNode brancher = uc.getBranchingNode()__				if (this.branchPlan.get(brancher) == null) {_					throw new CompilerException("Branching and rejoining logic did not find a candidate for the branching point.")__				}_			}_		}_	};sets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,void,set,broadcast,inputs,list,named,channel,broadcast,inputs,if,broadcast,inputs,null,this,broadcast,inputs,broadcast,inputs,for,named,channel,nc,broadcast,inputs,plan,node,source,nc,get,source,merge,branch,plan,maps,branch,plan,source,branch,plan,if,this,template,has,unclosed,branches,if,this,branch,plan,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point,for,unclosed,branch,descriptor,uc,this,template,get,open,branches,optimizer,node,brancher,uc,get,branching,node,if,this,branch,plan,get,brancher,null,throw,new,compiler,exception,branching,and,rejoining,logic,did,not,find,a,candidate,for,the,branching,point
PlanNode -> public List<NamedChannel> getBroadcastInputs();1426843274;Gets a list of all broadcast inputs attached to this node.;public List<NamedChannel> getBroadcastInputs() {_		return this.broadcastInputs__	};gets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,list,named,channel,get,broadcast,inputs,return,this,broadcast,inputs
PlanNode -> public List<NamedChannel> getBroadcastInputs();1442492509;Gets a list of all broadcast inputs attached to this node.;public List<NamedChannel> getBroadcastInputs() {_		return this.broadcastInputs__	};gets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,list,named,channel,get,broadcast,inputs,return,this,broadcast,inputs
PlanNode -> public List<NamedChannel> getBroadcastInputs();1475688973;Gets a list of all broadcast inputs attached to this node.;public List<NamedChannel> getBroadcastInputs() {_		return this.broadcastInputs__	};gets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,list,named,channel,get,broadcast,inputs,return,this,broadcast,inputs
PlanNode -> public List<NamedChannel> getBroadcastInputs();1488304750;Gets a list of all broadcast inputs attached to this node.;public List<NamedChannel> getBroadcastInputs() {_		return this.broadcastInputs__	};gets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,list,named,channel,get,broadcast,inputs,return,this,broadcast,inputs
PlanNode -> public List<NamedChannel> getBroadcastInputs();1488304750;Gets a list of all broadcast inputs attached to this node.;public List<NamedChannel> getBroadcastInputs() {_		return this.broadcastInputs__	};gets,a,list,of,all,broadcast,inputs,attached,to,this,node;public,list,named,channel,get,broadcast,inputs,return,this,broadcast,inputs
PlanNode -> public void addOutgoingChannel(Channel channel);1426843274;Adds a channel to a successor node to this node.__@param channel The channel to the successor.;public void addOutgoingChannel(Channel channel) {_		this.outChannels.add(channel)__	};adds,a,channel,to,a,successor,node,to,this,node,param,channel,the,channel,to,the,successor;public,void,add,outgoing,channel,channel,channel,this,out,channels,add,channel
PlanNode -> public void addOutgoingChannel(Channel channel);1442492509;Adds a channel to a successor node to this node.__@param channel The channel to the successor.;public void addOutgoingChannel(Channel channel) {_		this.outChannels.add(channel)__	};adds,a,channel,to,a,successor,node,to,this,node,param,channel,the,channel,to,the,successor;public,void,add,outgoing,channel,channel,channel,this,out,channels,add,channel
PlanNode -> public void addOutgoingChannel(Channel channel);1475688973;Adds a channel to a successor node to this node.__@param channel The channel to the successor.;public void addOutgoingChannel(Channel channel) {_		this.outChannels.add(channel)__	};adds,a,channel,to,a,successor,node,to,this,node,param,channel,the,channel,to,the,successor;public,void,add,outgoing,channel,channel,channel,this,out,channels,add,channel
PlanNode -> public void addOutgoingChannel(Channel channel);1488304750;Adds a channel to a successor node to this node.__@param channel The channel to the successor.;public void addOutgoingChannel(Channel channel) {_		this.outChannels.add(channel)__	};adds,a,channel,to,a,successor,node,to,this,node,param,channel,the,channel,to,the,successor;public,void,add,outgoing,channel,channel,channel,this,out,channels,add,channel
PlanNode -> public void addOutgoingChannel(Channel channel);1488304750;Adds a channel to a successor node to this node.__@param channel The channel to the successor.;public void addOutgoingChannel(Channel channel) {_		this.outChannels.add(channel)__	};adds,a,channel,to,a,successor,node,to,this,node,param,channel,the,channel,to,the,successor;public,void,add,outgoing,channel,channel,channel,this,out,channels,add,channel
PlanNode -> public double getRelativeMemoryPerSubTask();1426843274;Gets the memory dedicated to each sub-task for this node.__@return The memory per task, in bytes.;public double getRelativeMemoryPerSubTask() {_		return this.relativeMemoryPerSubTask__	};gets,the,memory,dedicated,to,each,sub,task,for,this,node,return,the,memory,per,task,in,bytes;public,double,get,relative,memory,per,sub,task,return,this,relative,memory,per,sub,task
PlanNode -> public double getRelativeMemoryPerSubTask();1442492509;Gets the memory dedicated to each sub-task for this node.__@return The memory per task, in bytes.;public double getRelativeMemoryPerSubTask() {_		return this.relativeMemoryPerSubTask__	};gets,the,memory,dedicated,to,each,sub,task,for,this,node,return,the,memory,per,task,in,bytes;public,double,get,relative,memory,per,sub,task,return,this,relative,memory,per,sub,task
PlanNode -> public double getRelativeMemoryPerSubTask();1475688973;Gets the memory dedicated to each sub-task for this node.__@return The memory per task, in bytes.;public double getRelativeMemoryPerSubTask() {_		return this.relativeMemoryPerSubTask__	};gets,the,memory,dedicated,to,each,sub,task,for,this,node,return,the,memory,per,task,in,bytes;public,double,get,relative,memory,per,sub,task,return,this,relative,memory,per,sub,task
PlanNode -> public double getRelativeMemoryPerSubTask();1488304750;Gets the memory dedicated to each sub-task for this node.__@return The memory per task, in bytes.;public double getRelativeMemoryPerSubTask() {_		return this.relativeMemoryPerSubTask__	};gets,the,memory,dedicated,to,each,sub,task,for,this,node,return,the,memory,per,task,in,bytes;public,double,get,relative,memory,per,sub,task,return,this,relative,memory,per,sub,task
PlanNode -> public double getRelativeMemoryPerSubTask();1488304750;Gets the memory dedicated to each sub-task for this node.__@return The memory per task, in bytes.;public double getRelativeMemoryPerSubTask() {_		return this.relativeMemoryPerSubTask__	};gets,the,memory,dedicated,to,each,sub,task,for,this,node,return,the,memory,per,task,in,bytes;public,double,get,relative,memory,per,sub,task,return,this,relative,memory,per,sub,task
PlanNode -> public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;1426843274;Checks whether this node has a dam on the way down to the given source node. This method_returns either that (a) the source node is not found as a (transitive) child of this node,_(b) the node is found, but no dam is on the path, or (c) the node is found and a dam is on_the path.__@param source The node on the path to which the dam is sought._@return The result whether the node is found and whether a dam is on the path.;public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;checks,whether,this,node,has,a,dam,on,the,way,down,to,the,given,source,node,this,method,returns,either,that,a,the,source,node,is,not,found,as,a,transitive,child,of,this,node,b,the,node,is,found,but,no,dam,is,on,the,path,or,c,the,node,is,found,and,a,dam,is,on,the,path,param,source,the,node,on,the,path,to,which,the,dam,is,sought,return,the,result,whether,the,node,is,found,and,whether,a,dam,is,on,the,path;public,abstract,source,and,dam,report,has,dam,on,path,down,to,plan,node,source
PlanNode -> public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;1442492509;Checks whether this node has a dam on the way down to the given source node. This method_returns either that (a) the source node is not found as a (transitive) child of this node,_(b) the node is found, but no dam is on the path, or (c) the node is found and a dam is on_the path.__@param source The node on the path to which the dam is sought._@return The result whether the node is found and whether a dam is on the path.;public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;checks,whether,this,node,has,a,dam,on,the,way,down,to,the,given,source,node,this,method,returns,either,that,a,the,source,node,is,not,found,as,a,transitive,child,of,this,node,b,the,node,is,found,but,no,dam,is,on,the,path,or,c,the,node,is,found,and,a,dam,is,on,the,path,param,source,the,node,on,the,path,to,which,the,dam,is,sought,return,the,result,whether,the,node,is,found,and,whether,a,dam,is,on,the,path;public,abstract,source,and,dam,report,has,dam,on,path,down,to,plan,node,source
PlanNode -> public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;1475688973;Checks whether this node has a dam on the way down to the given source node. This method_returns either that (a) the source node is not found as a (transitive) child of this node,_(b) the node is found, but no dam is on the path, or (c) the node is found and a dam is on_the path.__@param source The node on the path to which the dam is sought._@return The result whether the node is found and whether a dam is on the path.;public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;checks,whether,this,node,has,a,dam,on,the,way,down,to,the,given,source,node,this,method,returns,either,that,a,the,source,node,is,not,found,as,a,transitive,child,of,this,node,b,the,node,is,found,but,no,dam,is,on,the,path,or,c,the,node,is,found,and,a,dam,is,on,the,path,param,source,the,node,on,the,path,to,which,the,dam,is,sought,return,the,result,whether,the,node,is,found,and,whether,a,dam,is,on,the,path;public,abstract,source,and,dam,report,has,dam,on,path,down,to,plan,node,source
PlanNode -> public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;1488304750;Checks whether this node has a dam on the way down to the given source node. This method_returns either that (a) the source node is not found as a (transitive) child of this node,_(b) the node is found, but no dam is on the path, or (c) the node is found and a dam is on_the path.__@param source The node on the path to which the dam is sought._@return The result whether the node is found and whether a dam is on the path.;public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;checks,whether,this,node,has,a,dam,on,the,way,down,to,the,given,source,node,this,method,returns,either,that,a,the,source,node,is,not,found,as,a,transitive,child,of,this,node,b,the,node,is,found,but,no,dam,is,on,the,path,or,c,the,node,is,found,and,a,dam,is,on,the,path,param,source,the,node,on,the,path,to,which,the,dam,is,sought,return,the,result,whether,the,node,is,found,and,whether,a,dam,is,on,the,path;public,abstract,source,and,dam,report,has,dam,on,path,down,to,plan,node,source
PlanNode -> public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;1488304750;Checks whether this node has a dam on the way down to the given source node. This method_returns either that (a) the source node is not found as a (transitive) child of this node,_(b) the node is found, but no dam is on the path, or (c) the node is found and a dam is on_the path.__@param source The node on the path to which the dam is sought._@return The result whether the node is found and whether a dam is on the path.;public abstract SourceAndDamReport hasDamOnPathDownTo(PlanNode source)_;checks,whether,this,node,has,a,dam,on,the,way,down,to,the,given,source,node,this,method,returns,either,that,a,the,source,node,is,not,found,as,a,transitive,child,of,this,node,b,the,node,is,found,but,no,dam,is,on,the,path,or,c,the,node,is,found,and,a,dam,is,on,the,path,param,source,the,node,on,the,path,to,which,the,dam,is,sought,return,the,result,whether,the,node,is,found,and,whether,a,dam,is,on,the,path;public,abstract,source,and,dam,report,has,dam,on,path,down,to,plan,node,source
PlanNode -> public Costs getNodeCosts();1426843274;Gets the costs incurred by this node. The costs reflect also the costs incurred by the shipping strategies_of the incoming connections.__@return The node-costs, or null, if not yet set.;public Costs getNodeCosts() {_		return this.nodeCosts__	};gets,the,costs,incurred,by,this,node,the,costs,reflect,also,the,costs,incurred,by,the,shipping,strategies,of,the,incoming,connections,return,the,node,costs,or,null,if,not,yet,set;public,costs,get,node,costs,return,this,node,costs
PlanNode -> public Costs getNodeCosts();1442492509;Gets the costs incurred by this node. The costs reflect also the costs incurred by the shipping strategies_of the incoming connections.__@return The node-costs, or null, if not yet set.;public Costs getNodeCosts() {_		return this.nodeCosts__	};gets,the,costs,incurred,by,this,node,the,costs,reflect,also,the,costs,incurred,by,the,shipping,strategies,of,the,incoming,connections,return,the,node,costs,or,null,if,not,yet,set;public,costs,get,node,costs,return,this,node,costs
PlanNode -> public Costs getNodeCosts();1475688973;Gets the costs incurred by this node. The costs reflect also the costs incurred by the shipping strategies_of the incoming connections.__@return The node-costs, or null, if not yet set.;public Costs getNodeCosts() {_		return this.nodeCosts__	};gets,the,costs,incurred,by,this,node,the,costs,reflect,also,the,costs,incurred,by,the,shipping,strategies,of,the,incoming,connections,return,the,node,costs,or,null,if,not,yet,set;public,costs,get,node,costs,return,this,node,costs
PlanNode -> public Costs getNodeCosts();1488304750;Gets the costs incurred by this node. The costs reflect also the costs incurred by the shipping strategies_of the incoming connections.__@return The node-costs, or null, if not yet set.;public Costs getNodeCosts() {_		return this.nodeCosts__	};gets,the,costs,incurred,by,this,node,the,costs,reflect,also,the,costs,incurred,by,the,shipping,strategies,of,the,incoming,connections,return,the,node,costs,or,null,if,not,yet,set;public,costs,get,node,costs,return,this,node,costs
PlanNode -> public Costs getNodeCosts();1488304750;Gets the costs incurred by this node. The costs reflect also the costs incurred by the shipping strategies_of the incoming connections.__@return The node-costs, or null, if not yet set.;public Costs getNodeCosts() {_		return this.nodeCosts__	};gets,the,costs,incurred,by,this,node,the,costs,reflect,also,the,costs,incurred,by,the,shipping,strategies,of,the,incoming,connections,return,the,node,costs,or,null,if,not,yet,set;public,costs,get,node,costs,return,this,node,costs
PlanNode -> public OptimizerNode getOriginalOptimizerNode();1426843274;Gets the node from the optimizer DAG for which this plan candidate node was created.__@return The optimizer's DAG node.;public OptimizerNode getOriginalOptimizerNode() {_		return this.template__	};gets,the,node,from,the,optimizer,dag,for,which,this,plan,candidate,node,was,created,return,the,optimizer,s,dag,node;public,optimizer,node,get,original,optimizer,node,return,this,template
PlanNode -> public OptimizerNode getOriginalOptimizerNode();1442492509;Gets the node from the optimizer DAG for which this plan candidate node was created.__@return The optimizer's DAG node.;public OptimizerNode getOriginalOptimizerNode() {_		return this.template__	};gets,the,node,from,the,optimizer,dag,for,which,this,plan,candidate,node,was,created,return,the,optimizer,s,dag,node;public,optimizer,node,get,original,optimizer,node,return,this,template
PlanNode -> public OptimizerNode getOriginalOptimizerNode();1475688973;Gets the node from the optimizer DAG for which this plan candidate node was created.__@return The optimizer's DAG node.;public OptimizerNode getOriginalOptimizerNode() {_		return this.template__	};gets,the,node,from,the,optimizer,dag,for,which,this,plan,candidate,node,was,created,return,the,optimizer,s,dag,node;public,optimizer,node,get,original,optimizer,node,return,this,template
PlanNode -> public OptimizerNode getOriginalOptimizerNode();1488304750;Gets the node from the optimizer DAG for which this plan candidate node was created.__@return The optimizer's DAG node.;public OptimizerNode getOriginalOptimizerNode() {_		return this.template__	};gets,the,node,from,the,optimizer,dag,for,which,this,plan,candidate,node,was,created,return,the,optimizer,s,dag,node;public,optimizer,node,get,original,optimizer,node,return,this,template
PlanNode -> public OptimizerNode getOriginalOptimizerNode();1488304750;Gets the node from the optimizer DAG for which this plan candidate node was created.__@return The optimizer's DAG node.;public OptimizerNode getOriginalOptimizerNode() {_		return this.template__	};gets,the,node,from,the,optimizer,dag,for,which,this,plan,candidate,node,was,created,return,the,optimizer,s,dag,node;public,optimizer,node,get,original,optimizer,node,return,this,template
PlanNode -> public DriverStrategy getDriverStrategy();1426843274;Gets the driver strategy from this node. This determines for example for a <i>match</i> Pact whether_to use a merge or a hybrid hash strategy.__@return The driver strategy.;public DriverStrategy getDriverStrategy() {_		return this.driverStrategy__	};gets,the,driver,strategy,from,this,node,this,determines,for,example,for,a,i,match,i,pact,whether,to,use,a,merge,or,a,hybrid,hash,strategy,return,the,driver,strategy;public,driver,strategy,get,driver,strategy,return,this,driver,strategy
PlanNode -> public DriverStrategy getDriverStrategy();1442492509;Gets the driver strategy from this node. This determines for example for a <i>match</i> Pact whether_to use a merge or a hybrid hash strategy.__@return The driver strategy.;public DriverStrategy getDriverStrategy() {_		return this.driverStrategy__	};gets,the,driver,strategy,from,this,node,this,determines,for,example,for,a,i,match,i,pact,whether,to,use,a,merge,or,a,hybrid,hash,strategy,return,the,driver,strategy;public,driver,strategy,get,driver,strategy,return,this,driver,strategy
PlanNode -> public DriverStrategy getDriverStrategy();1475688973;Gets the driver strategy from this node. This determines for example for a <i>match</i> Pact whether_to use a merge or a hybrid hash strategy.__@return The driver strategy.;public DriverStrategy getDriverStrategy() {_		return this.driverStrategy__	};gets,the,driver,strategy,from,this,node,this,determines,for,example,for,a,i,match,i,pact,whether,to,use,a,merge,or,a,hybrid,hash,strategy,return,the,driver,strategy;public,driver,strategy,get,driver,strategy,return,this,driver,strategy
PlanNode -> public DriverStrategy getDriverStrategy();1488304750;Gets the driver strategy from this node. This determines for example for a <i>match</i> Pact whether_to use a merge or a hybrid hash strategy.__@return The driver strategy.;public DriverStrategy getDriverStrategy() {_		return this.driverStrategy__	};gets,the,driver,strategy,from,this,node,this,determines,for,example,for,a,i,match,i,pact,whether,to,use,a,merge,or,a,hybrid,hash,strategy,return,the,driver,strategy;public,driver,strategy,get,driver,strategy,return,this,driver,strategy
PlanNode -> public DriverStrategy getDriverStrategy();1488304750;Gets the driver strategy from this node. This determines for example for a <i>match</i> Pact whether_to use a merge or a hybrid hash strategy.__@return The driver strategy.;public DriverStrategy getDriverStrategy() {_		return this.driverStrategy__	};gets,the,driver,strategy,from,this,node,this,determines,for,example,for,a,i,match,i,pact,whether,to,use,a,merge,or,a,hybrid,hash,strategy,return,the,driver,strategy;public,driver,strategy,get,driver,strategy,return,this,driver,strategy
PlanNode -> public Costs getCumulativeCosts();1426843274;Gets the cumulative costs of this nose. The cumulative costs are the sum of the costs_of this node and of all nodes in the subtree below this node.__@return The cumulative costs, or null, if not yet set.;public Costs getCumulativeCosts() {_		return this.cumulativeCosts__	};gets,the,cumulative,costs,of,this,nose,the,cumulative,costs,are,the,sum,of,the,costs,of,this,node,and,of,all,nodes,in,the,subtree,below,this,node,return,the,cumulative,costs,or,null,if,not,yet,set;public,costs,get,cumulative,costs,return,this,cumulative,costs
PlanNode -> public Costs getCumulativeCosts();1442492509;Gets the cumulative costs of this nose. The cumulative costs are the sum of the costs_of this node and of all nodes in the subtree below this node.__@return The cumulative costs, or null, if not yet set.;public Costs getCumulativeCosts() {_		return this.cumulativeCosts__	};gets,the,cumulative,costs,of,this,nose,the,cumulative,costs,are,the,sum,of,the,costs,of,this,node,and,of,all,nodes,in,the,subtree,below,this,node,return,the,cumulative,costs,or,null,if,not,yet,set;public,costs,get,cumulative,costs,return,this,cumulative,costs
PlanNode -> public Costs getCumulativeCosts();1475688973;Gets the cumulative costs of this nose. The cumulative costs are the sum of the costs_of this node and of all nodes in the subtree below this node.__@return The cumulative costs, or null, if not yet set.;public Costs getCumulativeCosts() {_		return this.cumulativeCosts__	};gets,the,cumulative,costs,of,this,nose,the,cumulative,costs,are,the,sum,of,the,costs,of,this,node,and,of,all,nodes,in,the,subtree,below,this,node,return,the,cumulative,costs,or,null,if,not,yet,set;public,costs,get,cumulative,costs,return,this,cumulative,costs
PlanNode -> public Costs getCumulativeCosts();1488304750;Gets the cumulative costs of this nose. The cumulative costs are the sum of the costs_of this node and of all nodes in the subtree below this node.__@return The cumulative costs, or null, if not yet set.;public Costs getCumulativeCosts() {_		return this.cumulativeCosts__	};gets,the,cumulative,costs,of,this,nose,the,cumulative,costs,are,the,sum,of,the,costs,of,this,node,and,of,all,nodes,in,the,subtree,below,this,node,return,the,cumulative,costs,or,null,if,not,yet,set;public,costs,get,cumulative,costs,return,this,cumulative,costs
PlanNode -> public Costs getCumulativeCosts();1488304750;Gets the cumulative costs of this nose. The cumulative costs are the sum of the costs_of this node and of all nodes in the subtree below this node.__@return The cumulative costs, or null, if not yet set.;public Costs getCumulativeCosts() {_		return this.cumulativeCosts__	};gets,the,cumulative,costs,of,this,nose,the,cumulative,costs,are,the,sum,of,the,costs,of,this,node,and,of,all,nodes,in,the,subtree,below,this,node,return,the,cumulative,costs,or,null,if,not,yet,set;public,costs,get,cumulative,costs,return,this,cumulative,costs
PlanNode -> public void setCosts(Costs nodeCosts);1426843274;Sets the basic cost for this node to the given value, and sets the cumulative costs_to those costs plus the cost shares of all inputs (regular and broadcast).__@param nodeCosts	 The already knows costs for this node_(this cost a produces by a concrete {@code OptimizerNode} subclass.;public void setCosts(Costs nodeCosts) {_		_		this.nodeCosts = nodeCosts__		_		_		this.cumulativeCosts = nodeCosts.clone()__		_		_		for (PlanNode pred : getPredecessors()) {_			_			Costs parentCosts = pred.getCumulativeCostsShare()__			if (parentCosts != null) {_				this.cumulativeCosts.addCosts(parentCosts)__			} else {_				throw new CompilerException("Trying to set the costs of an operator before the predecessor costs are computed.")__			}_		}_		_		_		if (this.broadcastInputs != null) {_			for (NamedChannel nc : this.broadcastInputs) {_				Costs bcInputCost = nc.getSource().getCumulativeCostsShare()__				if (bcInputCost != null) {_					this.cumulativeCosts.addCosts(bcInputCost)__				} else {_					throw new CompilerException("Trying to set the costs of an operator before the broadcast input costs are computed.")__				}_			}_		}_	};sets,the,basic,cost,for,this,node,to,the,given,value,and,sets,the,cumulative,costs,to,those,costs,plus,the,cost,shares,of,all,inputs,regular,and,broadcast,param,node,costs,the,already,knows,costs,for,this,node,this,cost,a,produces,by,a,concrete,code,optimizer,node,subclass;public,void,set,costs,costs,node,costs,this,node,costs,node,costs,this,cumulative,costs,node,costs,clone,for,plan,node,pred,get,predecessors,costs,parent,costs,pred,get,cumulative,costs,share,if,parent,costs,null,this,cumulative,costs,add,costs,parent,costs,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,predecessor,costs,are,computed,if,this,broadcast,inputs,null,for,named,channel,nc,this,broadcast,inputs,costs,bc,input,cost,nc,get,source,get,cumulative,costs,share,if,bc,input,cost,null,this,cumulative,costs,add,costs,bc,input,cost,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,broadcast,input,costs,are,computed
PlanNode -> public void setCosts(Costs nodeCosts);1442492509;Sets the basic cost for this node to the given value, and sets the cumulative costs_to those costs plus the cost shares of all inputs (regular and broadcast).__@param nodeCosts	 The already knows costs for this node_(this cost a produces by a concrete {@code OptimizerNode} subclass.;public void setCosts(Costs nodeCosts) {_		_		this.nodeCosts = nodeCosts__		_		_		this.cumulativeCosts = nodeCosts.clone()__		_		_		for (PlanNode pred : getPredecessors()) {_			_			Costs parentCosts = pred.getCumulativeCostsShare()__			if (parentCosts != null) {_				this.cumulativeCosts.addCosts(parentCosts)__			} else {_				throw new CompilerException("Trying to set the costs of an operator before the predecessor costs are computed.")__			}_		}_		_		_		if (this.broadcastInputs != null) {_			for (NamedChannel nc : this.broadcastInputs) {_				Costs bcInputCost = nc.getSource().getCumulativeCostsShare()__				if (bcInputCost != null) {_					this.cumulativeCosts.addCosts(bcInputCost)__				} else {_					throw new CompilerException("Trying to set the costs of an operator before the broadcast input costs are computed.")__				}_			}_		}_	};sets,the,basic,cost,for,this,node,to,the,given,value,and,sets,the,cumulative,costs,to,those,costs,plus,the,cost,shares,of,all,inputs,regular,and,broadcast,param,node,costs,the,already,knows,costs,for,this,node,this,cost,a,produces,by,a,concrete,code,optimizer,node,subclass;public,void,set,costs,costs,node,costs,this,node,costs,node,costs,this,cumulative,costs,node,costs,clone,for,plan,node,pred,get,predecessors,costs,parent,costs,pred,get,cumulative,costs,share,if,parent,costs,null,this,cumulative,costs,add,costs,parent,costs,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,predecessor,costs,are,computed,if,this,broadcast,inputs,null,for,named,channel,nc,this,broadcast,inputs,costs,bc,input,cost,nc,get,source,get,cumulative,costs,share,if,bc,input,cost,null,this,cumulative,costs,add,costs,bc,input,cost,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,broadcast,input,costs,are,computed
PlanNode -> public void setCosts(Costs nodeCosts);1475688973;Sets the basic cost for this node to the given value, and sets the cumulative costs_to those costs plus the cost shares of all inputs (regular and broadcast).__@param nodeCosts	 The already knows costs for this node_(this cost a produces by a concrete {@code OptimizerNode} subclass.;public void setCosts(Costs nodeCosts) {_		_		this.nodeCosts = nodeCosts__		_		_		this.cumulativeCosts = nodeCosts.clone()__		_		_		for (PlanNode pred : getPredecessors()) {_			_			Costs parentCosts = pred.getCumulativeCostsShare()__			if (parentCosts != null) {_				this.cumulativeCosts.addCosts(parentCosts)__			} else {_				throw new CompilerException("Trying to set the costs of an operator before the predecessor costs are computed.")__			}_		}_		_		_		if (this.broadcastInputs != null) {_			for (NamedChannel nc : this.broadcastInputs) {_				Costs bcInputCost = nc.getSource().getCumulativeCostsShare()__				if (bcInputCost != null) {_					this.cumulativeCosts.addCosts(bcInputCost)__				} else {_					throw new CompilerException("Trying to set the costs of an operator before the broadcast input costs are computed.")__				}_			}_		}_	};sets,the,basic,cost,for,this,node,to,the,given,value,and,sets,the,cumulative,costs,to,those,costs,plus,the,cost,shares,of,all,inputs,regular,and,broadcast,param,node,costs,the,already,knows,costs,for,this,node,this,cost,a,produces,by,a,concrete,code,optimizer,node,subclass;public,void,set,costs,costs,node,costs,this,node,costs,node,costs,this,cumulative,costs,node,costs,clone,for,plan,node,pred,get,predecessors,costs,parent,costs,pred,get,cumulative,costs,share,if,parent,costs,null,this,cumulative,costs,add,costs,parent,costs,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,predecessor,costs,are,computed,if,this,broadcast,inputs,null,for,named,channel,nc,this,broadcast,inputs,costs,bc,input,cost,nc,get,source,get,cumulative,costs,share,if,bc,input,cost,null,this,cumulative,costs,add,costs,bc,input,cost,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,broadcast,input,costs,are,computed
PlanNode -> public void setCosts(Costs nodeCosts);1488304750;Sets the basic cost for this node to the given value, and sets the cumulative costs_to those costs plus the cost shares of all inputs (regular and broadcast).__@param nodeCosts	 The already knows costs for this node_(this cost a produces by a concrete {@code OptimizerNode} subclass.;public void setCosts(Costs nodeCosts) {_		_		this.nodeCosts = nodeCosts__		_		_		this.cumulativeCosts = nodeCosts.clone()__		_		_		for (PlanNode pred : getPredecessors()) {_			_			Costs parentCosts = pred.getCumulativeCostsShare()__			if (parentCosts != null) {_				this.cumulativeCosts.addCosts(parentCosts)__			} else {_				throw new CompilerException("Trying to set the costs of an operator before the predecessor costs are computed.")__			}_		}_		_		_		if (this.broadcastInputs != null) {_			for (NamedChannel nc : this.broadcastInputs) {_				Costs bcInputCost = nc.getSource().getCumulativeCostsShare()__				if (bcInputCost != null) {_					this.cumulativeCosts.addCosts(bcInputCost)__				} else {_					throw new CompilerException("Trying to set the costs of an operator before the broadcast input costs are computed.")__				}_			}_		}_	};sets,the,basic,cost,for,this,node,to,the,given,value,and,sets,the,cumulative,costs,to,those,costs,plus,the,cost,shares,of,all,inputs,regular,and,broadcast,param,node,costs,the,already,knows,costs,for,this,node,this,cost,a,produces,by,a,concrete,code,optimizer,node,subclass;public,void,set,costs,costs,node,costs,this,node,costs,node,costs,this,cumulative,costs,node,costs,clone,for,plan,node,pred,get,predecessors,costs,parent,costs,pred,get,cumulative,costs,share,if,parent,costs,null,this,cumulative,costs,add,costs,parent,costs,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,predecessor,costs,are,computed,if,this,broadcast,inputs,null,for,named,channel,nc,this,broadcast,inputs,costs,bc,input,cost,nc,get,source,get,cumulative,costs,share,if,bc,input,cost,null,this,cumulative,costs,add,costs,bc,input,cost,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,broadcast,input,costs,are,computed
PlanNode -> public void setCosts(Costs nodeCosts);1488304750;Sets the basic cost for this node to the given value, and sets the cumulative costs_to those costs plus the cost shares of all inputs (regular and broadcast).__@param nodeCosts	 The already knows costs for this node_(this cost a produces by a concrete {@code OptimizerNode} subclass.;public void setCosts(Costs nodeCosts) {_		_		this.nodeCosts = nodeCosts__		_		_		this.cumulativeCosts = nodeCosts.clone()__		_		_		for (PlanNode pred : getPredecessors()) {_			_			Costs parentCosts = pred.getCumulativeCostsShare()__			if (parentCosts != null) {_				this.cumulativeCosts.addCosts(parentCosts)__			} else {_				throw new CompilerException("Trying to set the costs of an operator before the predecessor costs are computed.")__			}_		}_		_		_		if (this.broadcastInputs != null) {_			for (NamedChannel nc : this.broadcastInputs) {_				Costs bcInputCost = nc.getSource().getCumulativeCostsShare()__				if (bcInputCost != null) {_					this.cumulativeCosts.addCosts(bcInputCost)__				} else {_					throw new CompilerException("Trying to set the costs of an operator before the broadcast input costs are computed.")__				}_			}_		}_	};sets,the,basic,cost,for,this,node,to,the,given,value,and,sets,the,cumulative,costs,to,those,costs,plus,the,cost,shares,of,all,inputs,regular,and,broadcast,param,node,costs,the,already,knows,costs,for,this,node,this,cost,a,produces,by,a,concrete,code,optimizer,node,subclass;public,void,set,costs,costs,node,costs,this,node,costs,node,costs,this,cumulative,costs,node,costs,clone,for,plan,node,pred,get,predecessors,costs,parent,costs,pred,get,cumulative,costs,share,if,parent,costs,null,this,cumulative,costs,add,costs,parent,costs,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,predecessor,costs,are,computed,if,this,broadcast,inputs,null,for,named,channel,nc,this,broadcast,inputs,costs,bc,input,cost,nc,get,source,get,cumulative,costs,share,if,bc,input,cost,null,this,cumulative,costs,add,costs,bc,input,cost,else,throw,new,compiler,exception,trying,to,set,the,costs,of,an,operator,before,the,broadcast,input,costs,are,computed
PlanNode -> public void setPruningMarker();1426843274;Sets the pruning marker to true.;public void setPruningMarker() {_		this.pFlag = true__	};sets,the,pruning,marker,to,true;public,void,set,pruning,marker,this,p,flag,true
PlanNode -> public void setPruningMarker();1442492509;Sets the pruning marker to true.;public void setPruningMarker() {_		this.pFlag = true__	};sets,the,pruning,marker,to,true;public,void,set,pruning,marker,this,p,flag,true
PlanNode -> public void setPruningMarker();1475688973;Sets the pruning marker to true.;public void setPruningMarker() {_		this.pFlag = true__	};sets,the,pruning,marker,to,true;public,void,set,pruning,marker,this,p,flag,true
PlanNode -> public void setPruningMarker();1488304750;Sets the pruning marker to true.;public void setPruningMarker() {_		this.pFlag = true__	};sets,the,pruning,marker,to,true;public,void,set,pruning,marker,this,p,flag,true
PlanNode -> public void setPruningMarker();1488304750;Sets the pruning marker to true.;public void setPruningMarker() {_		this.pFlag = true__	};sets,the,pruning,marker,to,true;public,void,set,pruning,marker,this,p,flag,true
PlanNode -> public Operator<?> getProgramOperator();1426843274;Gets the program operator that this node represents in the plan.__@return The program operator this node represents in the plan.;public Operator<?> getProgramOperator() {_		return this.template.getOperator()__	};gets,the,program,operator,that,this,node,represents,in,the,plan,return,the,program,operator,this,node,represents,in,the,plan;public,operator,get,program,operator,return,this,template,get,operator
PlanNode -> public Operator<?> getProgramOperator();1442492509;Gets the program operator that this node represents in the plan.__@return The program operator this node represents in the plan.;public Operator<?> getProgramOperator() {_		return this.template.getOperator()__	};gets,the,program,operator,that,this,node,represents,in,the,plan,return,the,program,operator,this,node,represents,in,the,plan;public,operator,get,program,operator,return,this,template,get,operator
PlanNode -> public Operator<?> getProgramOperator();1475688973;Gets the program operator that this node represents in the plan.__@return The program operator this node represents in the plan.;public Operator<?> getProgramOperator() {_		return this.template.getOperator()__	};gets,the,program,operator,that,this,node,represents,in,the,plan,return,the,program,operator,this,node,represents,in,the,plan;public,operator,get,program,operator,return,this,template,get,operator
PlanNode -> public Operator<?> getProgramOperator();1488304750;Gets the program operator that this node represents in the plan.__@return The program operator this node represents in the plan.;public Operator<?> getProgramOperator() {_		return this.template.getOperator()__	};gets,the,program,operator,that,this,node,represents,in,the,plan,return,the,program,operator,this,node,represents,in,the,plan;public,operator,get,program,operator,return,this,template,get,operator
PlanNode -> public Operator<?> getProgramOperator();1488304750;Gets the program operator that this node represents in the plan.__@return The program operator this node represents in the plan.;public Operator<?> getProgramOperator() {_		return this.template.getOperator()__	};gets,the,program,operator,that,this,node,represents,in,the,plan,return,the,program,operator,this,node,represents,in,the,plan;public,operator,get,program,operator,return,this,template,get,operator
PlanNode -> public void setDriverStrategy(DriverStrategy newDriverStrategy);1426843274;Sets the driver strategy for this node. Usually should not be changed.__@param newDriverStrategy The driver strategy.;public void setDriverStrategy(DriverStrategy newDriverStrategy) {_		this.driverStrategy = newDriverStrategy__	};sets,the,driver,strategy,for,this,node,usually,should,not,be,changed,param,new,driver,strategy,the,driver,strategy;public,void,set,driver,strategy,driver,strategy,new,driver,strategy,this,driver,strategy,new,driver,strategy
PlanNode -> public void setDriverStrategy(DriverStrategy newDriverStrategy);1442492509;Sets the driver strategy for this node. Usually should not be changed.__@param newDriverStrategy The driver strategy.;public void setDriverStrategy(DriverStrategy newDriverStrategy) {_		this.driverStrategy = newDriverStrategy__	};sets,the,driver,strategy,for,this,node,usually,should,not,be,changed,param,new,driver,strategy,the,driver,strategy;public,void,set,driver,strategy,driver,strategy,new,driver,strategy,this,driver,strategy,new,driver,strategy
PlanNode -> public void setDriverStrategy(DriverStrategy newDriverStrategy);1475688973;Sets the driver strategy for this node. Usually should not be changed.__@param newDriverStrategy The driver strategy.;public void setDriverStrategy(DriverStrategy newDriverStrategy) {_		this.driverStrategy = newDriverStrategy__	};sets,the,driver,strategy,for,this,node,usually,should,not,be,changed,param,new,driver,strategy,the,driver,strategy;public,void,set,driver,strategy,driver,strategy,new,driver,strategy,this,driver,strategy,new,driver,strategy
PlanNode -> public void setDriverStrategy(DriverStrategy newDriverStrategy);1488304750;Sets the driver strategy for this node. Usually should not be changed.__@param newDriverStrategy The driver strategy.;public void setDriverStrategy(DriverStrategy newDriverStrategy) {_		this.driverStrategy = newDriverStrategy__	};sets,the,driver,strategy,for,this,node,usually,should,not,be,changed,param,new,driver,strategy,the,driver,strategy;public,void,set,driver,strategy,driver,strategy,new,driver,strategy,this,driver,strategy,new,driver,strategy
PlanNode -> public void setDriverStrategy(DriverStrategy newDriverStrategy);1488304750;Sets the driver strategy for this node. Usually should not be changed.__@param newDriverStrategy The driver strategy.;public void setDriverStrategy(DriverStrategy newDriverStrategy) {_		this.driverStrategy = newDriverStrategy__	};sets,the,driver,strategy,for,this,node,usually,should,not,be,changed,param,new,driver,strategy,the,driver,strategy;public,void,set,driver,strategy,driver,strategy,new,driver,strategy,this,driver,strategy,new,driver,strategy
