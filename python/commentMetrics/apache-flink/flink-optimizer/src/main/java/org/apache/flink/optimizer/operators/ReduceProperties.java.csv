commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.SORTED_REDUCE. }
false;public;2;35;;@Override public SingleInputPlanNode instantiate(Channel in, SingleInputNode node) {     Channel toReducer = in.     if (in.getShipStrategy() == ShipStrategyType.FORWARD || (node.getBroadcastConnections() != null && !node.getBroadcastConnections().isEmpty())) {         if (in.getSource().getOptimizerNode() instanceof PartitionNode) {             LOG.warn("Cannot automatically inject combiner for ReduceFunction. Please add an explicit combiner with combineGroup() in front of the partition operator.").         }     } else if (combinerStrategy != DriverStrategy.NONE) {         // non forward case. all local properties are killed anyways, so we can safely plug in a combiner         Channel toCombiner = new Channel(in.getSource()).         toCombiner.setShipStrategy(ShipStrategyType.FORWARD, DataExchangeMode.PIPELINED).         // create an input node for combine with same parallelism as input node         ReduceNode combinerNode = ((ReduceNode) node).getCombinerUtilityNode().         combinerNode.setParallelism(in.getSource().getParallelism()).         SingleInputPlanNode combiner = new SingleInputPlanNode(combinerNode, "Combine (" + node.getOperator().getName() + ")", toCombiner, this.combinerStrategy, this.keyList).         combiner.setCosts(new Costs(0, 0)).         combiner.initProperties(toCombiner.getGlobalProperties(), toCombiner.getLocalProperties()).         toReducer = new Channel(combiner).         toReducer.setShipStrategy(in.getShipStrategy(), in.getShipStrategyKeys(), in.getShipStrategySortOrder(), in.getDataExchangeMode()).         toReducer.setLocalStrategy(LocalStrategy.SORT, in.getLocalStrategyKeys(), in.getLocalStrategySortOrder()).     }     return new SingleInputPlanNode(node, "Reduce (" + node.getOperator().getName() + ")", toReducer, DriverStrategy.SORTED_REDUCE, this.keyList). }
false;protected;0;10;;@Override protected List<RequestedGlobalProperties> createPossibleGlobalProperties() {     RequestedGlobalProperties props = new RequestedGlobalProperties().     if (customPartitioner == null) {         props.setAnyPartitioning(this.keys).     } else {         props.setCustomPartitioned(this.keys, this.customPartitioner).     }     return Collections.singletonList(props). }
false;protected;0;6;;@Override protected List<RequestedLocalProperties> createPossibleLocalProperties() {     RequestedLocalProperties props = new RequestedLocalProperties().     props.setGroupedFields(this.keys).     return Collections.singletonList(props). }
false;public;1;10;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties gProps) {     if (gProps.getUniqueFieldCombination() != null && gProps.getUniqueFieldCombination().size() > 0 && gProps.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED) {         gProps.setAnyPartitioning(gProps.getUniqueFieldCombination().iterator().next().toFieldList()).     }     gProps.clearUniqueFieldCombinations().     return gProps. }
false;public;1;4;;@Override public LocalProperties computeLocalProperties(LocalProperties lProps) {     return lProps.clearUniqueFieldSets(). }
