commented;modifiers;parameterAmount;loc;comment;code
false;public;3;8;;// -------------------------------------------------------------------------------------------- public void setCandidateProperties(GlobalProperties gProps, LocalProperties lProps, Channel initialInput) {     if (this.cachedPlans != null) {         throw new IllegalStateException().     } else {         WorksetPlanNode wspn = new WorksetPlanNode(this, "Workset (" + this.getOperator().getName() + ")", gProps, lProps, initialInput).         this.cachedPlans = Collections.<PlanNode>singletonList(wspn).     } }
false;public;0;7;;public WorksetPlanNode getCurrentWorksetPlanNode() {     if (this.cachedPlans != null) {         return (WorksetPlanNode) this.cachedPlans.get(0).     } else {         throw new IllegalStateException().     } }
false;public;0;3;;public WorksetIterationNode getIterationNode() {     return this.iterationNode. }
false;public;1;4;;@Override public void computeOutputEstimates(DataStatistics statistics) {     copyEstimates(this.iterationNode.getInitialWorksetPredecessorNode()). }
true;public;0;4;/**  * Gets the contract object for this data source node.  *  * @return The contract.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the contract object for this data source node.  *  * @return The contract.  */ @Override public WorksetPlaceHolder<?> getOperator() {     return (WorksetPlaceHolder<?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Workset". }
false;public;0;13;;@Override public void computeUnclosedBranchStack() {     if (this.openBranches != null) {         return.     }     DagConnection worksetInput = this.iterationNode.getSecondIncomingConnection().     OptimizerNode worksetSource = worksetInput.getSource().     addClosedBranches(worksetSource.closedBranchingNodes).     List<UnclosedBranchDescriptor> fromInput = worksetSource.getBranchesForParent(worksetInput).     this.openBranches = (fromInput == null || fromInput.isEmpty()) ? Collections.<UnclosedBranchDescriptor>emptyList() : fromInput. }
