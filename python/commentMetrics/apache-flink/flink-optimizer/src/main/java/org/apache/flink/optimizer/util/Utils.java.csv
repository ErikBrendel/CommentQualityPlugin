commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static FieldList createOrderedFromSet(FieldSet set) {     if (set instanceof FieldList) {         return (FieldList) set.     } else {         final int[] cols = set.toArray().         Arrays.sort(cols).         return new FieldList(cols).     } }
false;public,static;2;7;;public static Ordering createOrdering(FieldList fields, boolean[] directions) {     final Ordering o = new Ordering().     for (int i = 0. i < fields.size(). i++) {         o.appendOrdering(fields.get(i), null, directions == null || directions[i] ? Order.ASCENDING : Order.DESCENDING).     }     return o. }
false;public,static;1;7;;public static Ordering createOrdering(FieldList fields) {     final Ordering o = new Ordering().     for (int i = 0. i < fields.size(). i++) {         o.appendOrdering(fields.get(i), null, Order.ANY).     }     return o. }
false;public,static;2;12;;public static boolean[] getDirections(Ordering o, int numFields) {     final boolean[] dirs = o.getFieldSortDirections().     if (dirs.length == numFields) {         return dirs.     } else if (dirs.length > numFields) {         final boolean[] subSet = new boolean[numFields].         System.arraycopy(dirs, 0, subSet, 0, numFields).         return subSet.     } else {         throw new CompilerException().     } }
false;public,static;2;7;;public static TypeComparatorFactory<?> getShipComparator(Channel channel, ExecutionConfig executionConfig) {     PlanNode source = channel.getSource().     Operator<?> javaOp = source.getProgramOperator().     TypeInformation<?> type = javaOp.getOperatorInfo().getOutputType().     return createComparator(type, channel.getShipStrategyKeys(), getSortOrders(channel.getShipStrategyKeys(), channel.getShipStrategySortOrder()), executionConfig). }
false;private,static;4;16;;private static <T> TypeComparatorFactory<?> createComparator(TypeInformation<T> typeInfo, FieldList keys, boolean[] sortOrder, ExecutionConfig executionConfig) {     TypeComparator<T> comparator.     if (typeInfo instanceof CompositeType) {         comparator = ((CompositeType<T>) typeInfo).createComparator(keys.toArray(), sortOrder, 0, executionConfig).     } else if (typeInfo instanceof AtomicType) {         // handle grouping of atomic types         comparator = ((AtomicType<T>) typeInfo).createComparator(sortOrder[0], executionConfig).     } else {         throw new RuntimeException("Unrecognized type: " + typeInfo).     }     return new RuntimeComparatorFactory<>(comparator). }
false;private,static;2;7;;private static boolean[] getSortOrders(FieldList keys, boolean[] orders) {     if (orders == null) {         orders = new boolean[keys.size()].         Arrays.fill(orders, true).     }     return orders. }
