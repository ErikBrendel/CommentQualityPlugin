commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the data sources from this OptimizedPlan.  *  * @return The data sources.  */ ;/**  * Gets the data sources from this OptimizedPlan.  *  * @return The data sources.  */ public Collection<SourcePlanNode> getDataSources() {     return dataSources. }
true;public;0;3;/**  * Gets the data sinks from this OptimizedPlan.  *  * @return The data sinks.  */ ;/**  * Gets the data sinks from this OptimizedPlan.  *  * @return The data sinks.  */ public Collection<SinkPlanNode> getDataSinks() {     return dataSinks. }
true;public;0;3;/**  * Gets all the nodes from this OptimizedPlan.  *  * @return All nodes.  */ ;/**  * Gets all the nodes from this OptimizedPlan.  *  * @return All nodes.  */ public Collection<PlanNode> getAllNodes() {     return allNodes. }
true;public;0;3;/**  * Returns the name of the program.  *  * @return The name of the program.  */ ;/**  * Returns the name of the program.  *  * @return The name of the program.  */ public String getJobName() {     return this.jobName. }
true;public;0;3;/**  * Gets the original program's dataflow plan from which this optimized plan was created.  *  * @return The original program's dataflow plan.  */ ;/**  * Gets the original program's dataflow plan from which this optimized plan was created.  *  * @return The original program's dataflow plan.  */ public Plan getOriginalPlan() {     return this.originalProgram. }
true;public;1;6;/**  * Applies the given visitor top down to all nodes, starting at the sinks.  *  * @param visitor  *        The visitor to apply to the nodes in this plan.  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ ;// ------------------------------------------------------------------------ /**  * Applies the given visitor top down to all nodes, starting at the sinks.  *  * @param visitor  *        The visitor to apply to the nodes in this plan.  * @see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor)  */ @Override public void accept(Visitor<PlanNode> visitor) {     for (SinkPlanNode node : this.dataSinks) {         node.accept(visitor).     } }
