commented;modifiers;parameterAmount;loc;comment;code
false;public;3;3;;// -------------------------------------------------------------------------------------------- public void setCandidateProperties(GlobalProperties gProps, LocalProperties lProps, Channel initialInput) {     this.cachedPlans = Collections.<PlanNode>singletonList(new SolutionSetPlanNode(this, "SolutionSet (" + this.getOperator().getName() + ")", gProps, lProps, initialInput)). }
false;public;0;7;;public SolutionSetPlanNode getCurrentSolutionSetPlanNode() {     if (this.cachedPlans != null) {         return (SolutionSetPlanNode) this.cachedPlans.get(0).     } else {         throw new IllegalStateException().     } }
false;public;0;3;;public WorksetIterationNode getIterationNode() {     return this.iterationNode. }
false;public;1;4;;@Override public void computeOutputEstimates(DataStatistics statistics) {     copyEstimates(this.iterationNode.getInitialSolutionSetPredecessorNode()). }
true;public;0;4;/**  * Gets the contract object for this data source node.  *  * @return The contract.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the contract object for this data source node.  *  * @return The contract.  */ @Override public SolutionSetPlaceHolder<?> getOperator() {     return (SolutionSetPlaceHolder<?>) super.getOperator(). }
false;public;0;4;;@Override public String getOperatorName() {     return "Solution Set". }
false;public;0;13;;@Override public void computeUnclosedBranchStack() {     if (this.openBranches != null) {         return.     }     DagConnection solutionSetInput = this.iterationNode.getFirstIncomingConnection().     OptimizerNode solutionSetSource = solutionSetInput.getSource().     addClosedBranches(solutionSetSource.closedBranchingNodes).     List<UnclosedBranchDescriptor> fromInput = solutionSetSource.getBranchesForParent(solutionSetInput).     this.openBranches = (fromInput == null || fromInput.isEmpty()) ? Collections.<UnclosedBranchDescriptor>emptyList() : fromInput. }
