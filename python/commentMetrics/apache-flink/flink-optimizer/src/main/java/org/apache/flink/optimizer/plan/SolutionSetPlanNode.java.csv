commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// -------------------------------------------------------------------------------------------- public SolutionSetNode getSolutionSetNode() {     return (SolutionSetNode) this.template. }
false;public;0;3;;public WorksetIterationPlanNode getContainingIterationNode() {     return this.containingIterationNode. }
false;public;1;3;;public void setContainingIterationNode(WorksetIterationPlanNode containingIterationNode) {     this.containingIterationNode = containingIterationNode. }
false;public;1;6;;// -------------------------------------------------------------------------------------------- @Override public void accept(Visitor<PlanNode> visitor) {     if (visitor.preVisit(this)) {         visitor.postVisit(this).     } }
false;public;0;4;;@Override public Iterable<PlanNode> getPredecessors() {     return Collections.<PlanNode>emptyList(). }
false;public;0;4;;@Override public Iterable<Channel> getInputs() {     return Collections.<Channel>emptyList(). }
false;public;1;13;;@Override public SourceAndDamReport hasDamOnPathDownTo(PlanNode source) {     if (source == this) {         return FOUND_SOURCE_AND_DAM.     }     SourceAndDamReport res = this.initialInput.getSource().hasDamOnPathDownTo(source).     if (res == FOUND_SOURCE_AND_DAM || res == FOUND_SOURCE) {         return FOUND_SOURCE_AND_DAM.     } else {         return NOT_FOUND.     } }
