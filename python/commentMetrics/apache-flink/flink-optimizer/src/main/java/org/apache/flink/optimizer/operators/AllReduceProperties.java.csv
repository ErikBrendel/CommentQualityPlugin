commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DriverStrategy getStrategy() {     return DriverStrategy.ALL_REDUCE. }
false;public;2;30;;@Override public SingleInputPlanNode instantiate(Channel in, SingleInputNode node) {     if (in.getShipStrategy() == ShipStrategyType.FORWARD) {         // locally connected, directly instantiate         return new SingleInputPlanNode(node, "Reduce (" + node.getOperator().getName() + ")", in, DriverStrategy.ALL_REDUCE).     } else {         // non forward case.plug in a combiner         Channel toCombiner = new Channel(in.getSource()).         toCombiner.setShipStrategy(ShipStrategyType.FORWARD, DataExchangeMode.PIPELINED).         // create an input node for combine with same parallelism as input node         ReduceNode combinerNode = ((ReduceNode) node).getCombinerUtilityNode().         combinerNode.setParallelism(in.getSource().getParallelism()).         SingleInputPlanNode combiner = new SingleInputPlanNode(combinerNode, "Combine (" + node.getOperator().getName() + ")", toCombiner, DriverStrategy.ALL_REDUCE).         combiner.setCosts(new Costs(0, 0)).         combiner.initProperties(toCombiner.getGlobalProperties(), toCombiner.getLocalProperties()).         Channel toReducer = new Channel(combiner).         toReducer.setShipStrategy(in.getShipStrategy(), in.getShipStrategyKeys(), in.getShipStrategySortOrder(), in.getDataExchangeMode()).         toReducer.setLocalStrategy(in.getLocalStrategy(), in.getLocalStrategyKeys(), in.getLocalStrategySortOrder()).         return new SingleInputPlanNode(node, "Reduce (" + node.getOperator().getName() + ")", toReducer, DriverStrategy.ALL_REDUCE).     } }
false;protected;0;4;;@Override protected List<RequestedGlobalProperties> createPossibleGlobalProperties() {     return Collections.singletonList(new RequestedGlobalProperties()). }
false;protected;0;4;;@Override protected List<RequestedLocalProperties> createPossibleLocalProperties() {     return Collections.singletonList(new RequestedLocalProperties()). }
false;public;1;4;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties gProps) {     return new GlobalProperties(). }
false;public;1;4;;@Override public LocalProperties computeLocalProperties(LocalProperties lProps) {     return new LocalProperties(). }
