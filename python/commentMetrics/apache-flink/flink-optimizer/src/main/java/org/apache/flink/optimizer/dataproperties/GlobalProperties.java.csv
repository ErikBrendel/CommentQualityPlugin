# id;timestamp;commentText;codeText;commentWords;codeWords
GlobalProperties -> public void setRangePartitioned(Ordering ordering);1458743533;Set the parameters for range partition.__@param ordering Order of the partitioned fields;public void setRangePartitioned(Ordering ordering) {_		if (ordering == null) {_			throw new NullPointerException()__		}__		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields;public,void,set,range,partitioned,ordering,ordering,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes
GlobalProperties -> public void setRangePartitioned(Ordering ordering);1461185749;Set the parameters for range partition.__@param ordering Order of the partitioned fields;public void setRangePartitioned(Ordering ordering) {_		if (ordering == null) {_			throw new NullPointerException()__		}__		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields;public,void,set,range,partitioned,ordering,ordering,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes
GlobalProperties -> public void setRangePartitioned(Ordering ordering);1475688973;Set the parameters for range partition.__@param ordering Order of the partitioned fields;public void setRangePartitioned(Ordering ordering) {_		if (ordering == null) {_			throw new NullPointerException()__		}__		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields;public,void,set,range,partitioned,ordering,ordering,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes
GlobalProperties -> public void setRangePartitioned(Ordering ordering);1511814440;Set the parameters for range partition.__@param ordering Order of the partitioned fields;public void setRangePartitioned(Ordering ordering) {_		if (ordering == null) {_			throw new NullPointerException()__		}__		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields;public,void,set,range,partitioned,ordering,ordering,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes
GlobalProperties -> public boolean isTrivial();1426843274;Checks, if the properties in this object are trivial, i.e. only standard values.;public boolean isTrivial() {_		return partitioning == PartitioningProperty.RANDOM_PARTITIONED__	};checks,if,the,properties,in,this,object,are,trivial,i,e,only,standard,values;public,boolean,is,trivial,return,partitioning,partitioning,property
GlobalProperties -> public boolean isTrivial();1458743533;Checks, if the properties in this object are trivial, i.e. only standard values.;public boolean isTrivial() {_		return partitioning == PartitioningProperty.RANDOM_PARTITIONED__	};checks,if,the,properties,in,this,object,are,trivial,i,e,only,standard,values;public,boolean,is,trivial,return,partitioning,partitioning,property
GlobalProperties -> public boolean isTrivial();1461185749;Checks, if the properties in this object are trivial, i.e. only standard values.;public boolean isTrivial() {_		return partitioning == PartitioningProperty.RANDOM_PARTITIONED__	};checks,if,the,properties,in,this,object,are,trivial,i,e,only,standard,values;public,boolean,is,trivial,return,partitioning,partitioning,property
GlobalProperties -> public boolean isTrivial();1475688973;Checks, if the properties in this object are trivial, i.e. only standard values.;public boolean isTrivial() {_		return partitioning == PartitioningProperty.RANDOM_PARTITIONED__	};checks,if,the,properties,in,this,object,are,trivial,i,e,only,standard,values;public,boolean,is,trivial,return,partitioning,partitioning,property
GlobalProperties -> public boolean isTrivial();1511814440;Checks, if the properties in this object are trivial, i.e. only standard values.;public boolean isTrivial() {_		return partitioning == PartitioningProperty.RANDOM_PARTITIONED__	};checks,if,the,properties,in,this,object,are,trivial,i,e,only,standard,values;public,boolean,is,trivial,return,partitioning,partitioning,property
GlobalProperties -> public GlobalProperties();1426843274;Initializes the global properties with no partitioning.;public GlobalProperties() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__	};initializes,the,global,properties,with,no,partitioning;public,global,properties,this,partitioning,partitioning,property
GlobalProperties -> public GlobalProperties();1458743533;Initializes the global properties with no partitioning.;public GlobalProperties() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__	};initializes,the,global,properties,with,no,partitioning;public,global,properties,this,partitioning,partitioning,property
GlobalProperties -> public GlobalProperties();1461185749;Initializes the global properties with no partitioning.;public GlobalProperties() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__	};initializes,the,global,properties,with,no,partitioning;public,global,properties,this,partitioning,partitioning,property
GlobalProperties -> public GlobalProperties();1475688973;Initializes the global properties with no partitioning.;public GlobalProperties() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__	};initializes,the,global,properties,with,no,partitioning;public,global,properties,this,partitioning,partitioning,property
GlobalProperties -> public GlobalProperties();1511814440;Initializes the global properties with no partitioning.;public GlobalProperties() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__	};initializes,the,global,properties,with,no,partitioning;public,global,properties,this,partitioning,partitioning,property
GlobalProperties -> public void reset();1426843274;This method resets the properties to a state where no properties are given.;public void reset() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__		this.ordering = null__		this.partitioningFields = null__	};this,method,resets,the,properties,to,a,state,where,no,properties,are,given;public,void,reset,this,partitioning,partitioning,property,this,ordering,null,this,partitioning,fields,null
GlobalProperties -> public void reset();1458743533;This method resets the properties to a state where no properties are given.;public void reset() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__		this.ordering = null__		this.partitioningFields = null__	};this,method,resets,the,properties,to,a,state,where,no,properties,are,given;public,void,reset,this,partitioning,partitioning,property,this,ordering,null,this,partitioning,fields,null
GlobalProperties -> public void reset();1461185749;This method resets the properties to a state where no properties are given.;public void reset() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__		this.ordering = null__		this.partitioningFields = null__	};this,method,resets,the,properties,to,a,state,where,no,properties,are,given;public,void,reset,this,partitioning,partitioning,property,this,ordering,null,this,partitioning,fields,null
GlobalProperties -> public void reset();1475688973;This method resets the properties to a state where no properties are given.;public void reset() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__		this.ordering = null__		this.partitioningFields = null__	};this,method,resets,the,properties,to,a,state,where,no,properties,are,given;public,void,reset,this,partitioning,partitioning,property,this,ordering,null,this,partitioning,fields,null
GlobalProperties -> public void reset();1511814440;This method resets the properties to a state where no properties are given.;public void reset() {_		this.partitioning = PartitioningProperty.RANDOM_PARTITIONED__		this.ordering = null__		this.partitioningFields = null__	};this,method,resets,the,properties,to,a,state,where,no,properties,are,given;public,void,reset,this,partitioning,partitioning,property,this,ordering,null,this,partitioning,fields,null
GlobalProperties -> public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input);1426843274;Filters these GlobalProperties by the fields that are forwarded to the output_as described by the SemanticProperties.__@param props The semantic properties holding information about forwarded fields._@param input The index of the input._@return The filtered GlobalProperties;public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {__		if (props == null) {_			throw new NullPointerException("SemanticProperties may not be null.")__		}__		GlobalProperties gp = new GlobalProperties()___		_		switch(this.partitioning) {_			case RANGE_PARTITIONED:_				_				Ordering newOrdering = new Ordering()__				for (int i = 0_ i < this.ordering.getInvolvedIndexes().size()_ i++) {_					int sourceField = this.ordering.getInvolvedIndexes().get(i)__					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						_						newOrdering = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i))__					}_				}_				if(newOrdering != null) {_					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED__					gp.ordering = newOrdering__					gp.partitioningFields = newOrdering.getInvolvedIndexes()__				}_				break__			case HASH_PARTITIONED:_			case ANY_PARTITIONING:_			case CUSTOM_PARTITIONING:_				FieldList newPartitioningFields = new FieldList()__				for (int sourceField : this.partitioningFields) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newPartitioningFields = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0])__					}_				}_				if(newPartitioningFields != null) {_					gp.partitioning = this.partitioning__					gp.partitioningFields = newPartitioningFields__					gp.customPartitioner = this.customPartitioner__				}_				break__			case FORCED_REBALANCED:_			case FULL_REPLICATION:_			case RANDOM_PARTITIONED:_				gp.partitioning = this.partitioning__				break__			default:_				throw new RuntimeException("Unknown partitioning type.")__		}__		_		if (this.uniqueFieldCombinations != null) {_			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>()__			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {_				FieldSet newFieldCombo = new FieldSet()__				for (Integer sourceField : fieldCombo) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newFieldCombo = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0])__					}_				}_				if (newFieldCombo != null) {_					newUniqueFieldCombinations.add(newFieldCombo)__				}_			}_			if(!newUniqueFieldCombinations.isEmpty()) {_				gp.uniqueFieldCombinations = newUniqueFieldCombinations__			}_		}__		return gp__	};filters,these,global,properties,by,the,fields,that,are,forwarded,to,the,output,as,described,by,the,semantic,properties,param,props,the,semantic,properties,holding,information,about,forwarded,fields,param,input,the,index,of,the,input,return,the,filtered,global,properties;public,global,properties,filter,by,semantic,properties,semantic,properties,props,int,input,if,props,null,throw,new,null,pointer,exception,semantic,properties,may,not,be,null,global,properties,gp,new,global,properties,switch,this,partitioning,case,ordering,new,ordering,new,ordering,for,int,i,0,i,this,ordering,get,involved,indexes,size,i,int,source,field,this,ordering,get,involved,indexes,get,i,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,ordering,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,ordering,append,ordering,target,field,to,array,0,this,ordering,get,type,i,this,ordering,get,order,i,if,new,ordering,null,gp,partitioning,partitioning,property,gp,ordering,new,ordering,gp,partitioning,fields,new,ordering,get,involved,indexes,break,case,case,case,field,list,new,partitioning,fields,new,field,list,for,int,source,field,this,partitioning,fields,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,partitioning,fields,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,partitioning,fields,new,partitioning,fields,add,field,target,field,to,array,0,if,new,partitioning,fields,null,gp,partitioning,this,partitioning,gp,partitioning,fields,new,partitioning,fields,gp,custom,partitioner,this,custom,partitioner,break,case,case,case,gp,partitioning,this,partitioning,break,default,throw,new,runtime,exception,unknown,partitioning,type,if,this,unique,field,combinations,null,set,field,set,new,unique,field,combinations,new,hash,set,field,set,for,field,set,field,combo,this,unique,field,combinations,field,set,new,field,combo,new,field,set,for,integer,source,field,field,combo,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,field,combo,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,field,combo,new,field,combo,add,field,target,field,to,array,0,if,new,field,combo,null,new,unique,field,combinations,add,new,field,combo,if,new,unique,field,combinations,is,empty,gp,unique,field,combinations,new,unique,field,combinations,return,gp
GlobalProperties -> public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input);1458743533;Filters these GlobalProperties by the fields that are forwarded to the output_as described by the SemanticProperties.__@param props The semantic properties holding information about forwarded fields._@param input The index of the input._@return The filtered GlobalProperties;public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {__		if (props == null) {_			throw new NullPointerException("SemanticProperties may not be null.")__		}__		GlobalProperties gp = new GlobalProperties()___		_		switch(this.partitioning) {_			case RANGE_PARTITIONED:_				_				Ordering newOrdering = new Ordering()__				for (int i = 0_ i < this.ordering.getInvolvedIndexes().size()_ i++) {_					int sourceField = this.ordering.getInvolvedIndexes().get(i)__					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						_						newOrdering = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i))__					}_				}_				if(newOrdering != null) {_					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED__					gp.ordering = newOrdering__					gp.partitioningFields = newOrdering.getInvolvedIndexes()__				}_				break__			case HASH_PARTITIONED:_			case ANY_PARTITIONING:_			case CUSTOM_PARTITIONING:_				FieldList newPartitioningFields = new FieldList()__				for (int sourceField : this.partitioningFields) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newPartitioningFields = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0])__					}_				}_				if(newPartitioningFields != null) {_					gp.partitioning = this.partitioning__					gp.partitioningFields = newPartitioningFields__					gp.customPartitioner = this.customPartitioner__				}_				break__			case FORCED_REBALANCED:_			case FULL_REPLICATION:_			case RANDOM_PARTITIONED:_				gp.partitioning = this.partitioning__				break__			default:_				throw new RuntimeException("Unknown partitioning type.")__		}__		_		if (this.uniqueFieldCombinations != null) {_			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>()__			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {_				FieldSet newFieldCombo = new FieldSet()__				for (Integer sourceField : fieldCombo) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newFieldCombo = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0])__					}_				}_				if (newFieldCombo != null) {_					newUniqueFieldCombinations.add(newFieldCombo)__				}_			}_			if(!newUniqueFieldCombinations.isEmpty()) {_				gp.uniqueFieldCombinations = newUniqueFieldCombinations__			}_		}__		return gp__	};filters,these,global,properties,by,the,fields,that,are,forwarded,to,the,output,as,described,by,the,semantic,properties,param,props,the,semantic,properties,holding,information,about,forwarded,fields,param,input,the,index,of,the,input,return,the,filtered,global,properties;public,global,properties,filter,by,semantic,properties,semantic,properties,props,int,input,if,props,null,throw,new,null,pointer,exception,semantic,properties,may,not,be,null,global,properties,gp,new,global,properties,switch,this,partitioning,case,ordering,new,ordering,new,ordering,for,int,i,0,i,this,ordering,get,involved,indexes,size,i,int,source,field,this,ordering,get,involved,indexes,get,i,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,ordering,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,ordering,append,ordering,target,field,to,array,0,this,ordering,get,type,i,this,ordering,get,order,i,if,new,ordering,null,gp,partitioning,partitioning,property,gp,ordering,new,ordering,gp,partitioning,fields,new,ordering,get,involved,indexes,break,case,case,case,field,list,new,partitioning,fields,new,field,list,for,int,source,field,this,partitioning,fields,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,partitioning,fields,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,partitioning,fields,new,partitioning,fields,add,field,target,field,to,array,0,if,new,partitioning,fields,null,gp,partitioning,this,partitioning,gp,partitioning,fields,new,partitioning,fields,gp,custom,partitioner,this,custom,partitioner,break,case,case,case,gp,partitioning,this,partitioning,break,default,throw,new,runtime,exception,unknown,partitioning,type,if,this,unique,field,combinations,null,set,field,set,new,unique,field,combinations,new,hash,set,field,set,for,field,set,field,combo,this,unique,field,combinations,field,set,new,field,combo,new,field,set,for,integer,source,field,field,combo,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,field,combo,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,field,combo,new,field,combo,add,field,target,field,to,array,0,if,new,field,combo,null,new,unique,field,combinations,add,new,field,combo,if,new,unique,field,combinations,is,empty,gp,unique,field,combinations,new,unique,field,combinations,return,gp
GlobalProperties -> public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input);1461185749;Filters these GlobalProperties by the fields that are forwarded to the output_as described by the SemanticProperties.__@param props The semantic properties holding information about forwarded fields._@param input The index of the input._@return The filtered GlobalProperties;public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {__		if (props == null) {_			throw new NullPointerException("SemanticProperties may not be null.")__		}__		GlobalProperties gp = new GlobalProperties()___		_		switch(this.partitioning) {_			case RANGE_PARTITIONED:_				_				Ordering newOrdering = new Ordering()__				for (int i = 0_ i < this.ordering.getInvolvedIndexes().size()_ i++) {_					int sourceField = this.ordering.getInvolvedIndexes().get(i)__					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						_						newOrdering = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i))__					}_				}_				if(newOrdering != null) {_					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED__					gp.ordering = newOrdering__					gp.partitioningFields = newOrdering.getInvolvedIndexes()__					gp.distribution = this.distribution__				}_				break__			case HASH_PARTITIONED:_			case ANY_PARTITIONING:_			case CUSTOM_PARTITIONING:_				FieldList newPartitioningFields = new FieldList()__				for (int sourceField : this.partitioningFields) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newPartitioningFields = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0])__					}_				}_				if(newPartitioningFields != null) {_					gp.partitioning = this.partitioning__					gp.partitioningFields = newPartitioningFields__					gp.customPartitioner = this.customPartitioner__				}_				break__			case FORCED_REBALANCED:_			case FULL_REPLICATION:_			case RANDOM_PARTITIONED:_				gp.partitioning = this.partitioning__				break__			default:_				throw new RuntimeException("Unknown partitioning type.")__		}__		_		if (this.uniqueFieldCombinations != null) {_			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>()__			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {_				FieldSet newFieldCombo = new FieldSet()__				for (Integer sourceField : fieldCombo) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newFieldCombo = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0])__					}_				}_				if (newFieldCombo != null) {_					newUniqueFieldCombinations.add(newFieldCombo)__				}_			}_			if(!newUniqueFieldCombinations.isEmpty()) {_				gp.uniqueFieldCombinations = newUniqueFieldCombinations__			}_		}__		return gp__	};filters,these,global,properties,by,the,fields,that,are,forwarded,to,the,output,as,described,by,the,semantic,properties,param,props,the,semantic,properties,holding,information,about,forwarded,fields,param,input,the,index,of,the,input,return,the,filtered,global,properties;public,global,properties,filter,by,semantic,properties,semantic,properties,props,int,input,if,props,null,throw,new,null,pointer,exception,semantic,properties,may,not,be,null,global,properties,gp,new,global,properties,switch,this,partitioning,case,ordering,new,ordering,new,ordering,for,int,i,0,i,this,ordering,get,involved,indexes,size,i,int,source,field,this,ordering,get,involved,indexes,get,i,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,ordering,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,ordering,append,ordering,target,field,to,array,0,this,ordering,get,type,i,this,ordering,get,order,i,if,new,ordering,null,gp,partitioning,partitioning,property,gp,ordering,new,ordering,gp,partitioning,fields,new,ordering,get,involved,indexes,gp,distribution,this,distribution,break,case,case,case,field,list,new,partitioning,fields,new,field,list,for,int,source,field,this,partitioning,fields,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,partitioning,fields,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,partitioning,fields,new,partitioning,fields,add,field,target,field,to,array,0,if,new,partitioning,fields,null,gp,partitioning,this,partitioning,gp,partitioning,fields,new,partitioning,fields,gp,custom,partitioner,this,custom,partitioner,break,case,case,case,gp,partitioning,this,partitioning,break,default,throw,new,runtime,exception,unknown,partitioning,type,if,this,unique,field,combinations,null,set,field,set,new,unique,field,combinations,new,hash,set,field,set,for,field,set,field,combo,this,unique,field,combinations,field,set,new,field,combo,new,field,set,for,integer,source,field,field,combo,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,field,combo,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,field,combo,new,field,combo,add,field,target,field,to,array,0,if,new,field,combo,null,new,unique,field,combinations,add,new,field,combo,if,new,unique,field,combinations,is,empty,gp,unique,field,combinations,new,unique,field,combinations,return,gp
GlobalProperties -> public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input);1475688973;Filters these GlobalProperties by the fields that are forwarded to the output_as described by the SemanticProperties.__@param props The semantic properties holding information about forwarded fields._@param input The index of the input._@return The filtered GlobalProperties;public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {__		if (props == null) {_			throw new NullPointerException("SemanticProperties may not be null.")__		}__		GlobalProperties gp = new GlobalProperties()___		_		switch(this.partitioning) {_			case RANGE_PARTITIONED:_				_				Ordering newOrdering = new Ordering()__				for (int i = 0_ i < this.ordering.getInvolvedIndexes().size()_ i++) {_					int sourceField = this.ordering.getInvolvedIndexes().get(i)__					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						_						newOrdering = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i))__					}_				}_				if(newOrdering != null) {_					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED__					gp.ordering = newOrdering__					gp.partitioningFields = newOrdering.getInvolvedIndexes()__					gp.distribution = this.distribution__				}_				break__			case HASH_PARTITIONED:_			case ANY_PARTITIONING:_			case CUSTOM_PARTITIONING:_				FieldList newPartitioningFields = new FieldList()__				for (int sourceField : this.partitioningFields) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newPartitioningFields = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0])__					}_				}_				if(newPartitioningFields != null) {_					gp.partitioning = this.partitioning__					gp.partitioningFields = newPartitioningFields__					gp.customPartitioner = this.customPartitioner__				}_				break__			case FORCED_REBALANCED:_			case FULL_REPLICATION:_			case RANDOM_PARTITIONED:_				gp.partitioning = this.partitioning__				break__			default:_				throw new RuntimeException("Unknown partitioning type.")__		}__		_		if (this.uniqueFieldCombinations != null) {_			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>()__			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {_				FieldSet newFieldCombo = new FieldSet()__				for (Integer sourceField : fieldCombo) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newFieldCombo = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0])__					}_				}_				if (newFieldCombo != null) {_					newUniqueFieldCombinations.add(newFieldCombo)__				}_			}_			if(!newUniqueFieldCombinations.isEmpty()) {_				gp.uniqueFieldCombinations = newUniqueFieldCombinations__			}_		}__		return gp__	};filters,these,global,properties,by,the,fields,that,are,forwarded,to,the,output,as,described,by,the,semantic,properties,param,props,the,semantic,properties,holding,information,about,forwarded,fields,param,input,the,index,of,the,input,return,the,filtered,global,properties;public,global,properties,filter,by,semantic,properties,semantic,properties,props,int,input,if,props,null,throw,new,null,pointer,exception,semantic,properties,may,not,be,null,global,properties,gp,new,global,properties,switch,this,partitioning,case,ordering,new,ordering,new,ordering,for,int,i,0,i,this,ordering,get,involved,indexes,size,i,int,source,field,this,ordering,get,involved,indexes,get,i,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,ordering,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,ordering,append,ordering,target,field,to,array,0,this,ordering,get,type,i,this,ordering,get,order,i,if,new,ordering,null,gp,partitioning,partitioning,property,gp,ordering,new,ordering,gp,partitioning,fields,new,ordering,get,involved,indexes,gp,distribution,this,distribution,break,case,case,case,field,list,new,partitioning,fields,new,field,list,for,int,source,field,this,partitioning,fields,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,partitioning,fields,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,partitioning,fields,new,partitioning,fields,add,field,target,field,to,array,0,if,new,partitioning,fields,null,gp,partitioning,this,partitioning,gp,partitioning,fields,new,partitioning,fields,gp,custom,partitioner,this,custom,partitioner,break,case,case,case,gp,partitioning,this,partitioning,break,default,throw,new,runtime,exception,unknown,partitioning,type,if,this,unique,field,combinations,null,set,field,set,new,unique,field,combinations,new,hash,set,field,set,for,field,set,field,combo,this,unique,field,combinations,field,set,new,field,combo,new,field,set,for,integer,source,field,field,combo,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,field,combo,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,field,combo,new,field,combo,add,field,target,field,to,array,0,if,new,field,combo,null,new,unique,field,combinations,add,new,field,combo,if,new,unique,field,combinations,is,empty,gp,unique,field,combinations,new,unique,field,combinations,return,gp
GlobalProperties -> public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input);1511814440;Filters these GlobalProperties by the fields that are forwarded to the output_as described by the SemanticProperties.__@param props The semantic properties holding information about forwarded fields._@param input The index of the input._@return The filtered GlobalProperties;public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {__		if (props == null) {_			throw new NullPointerException("SemanticProperties may not be null.")__		}__		GlobalProperties gp = new GlobalProperties()___		_		switch(this.partitioning) {_			case RANGE_PARTITIONED:_				_				Ordering newOrdering = new Ordering()__				for (int i = 0_ i < this.ordering.getInvolvedIndexes().size()_ i++) {_					int sourceField = this.ordering.getInvolvedIndexes().get(i)__					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						_						newOrdering = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i))__					}_				}_				if(newOrdering != null) {_					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED__					gp.ordering = newOrdering__					gp.partitioningFields = newOrdering.getInvolvedIndexes()__					gp.distribution = this.distribution__				}_				break__			case HASH_PARTITIONED:_			case ANY_PARTITIONING:_			case CUSTOM_PARTITIONING:_				FieldList newPartitioningFields = new FieldList()__				for (int sourceField : this.partitioningFields) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newPartitioningFields = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0])__					}_				}_				if(newPartitioningFields != null) {_					gp.partitioning = this.partitioning__					gp.partitioningFields = newPartitioningFields__					gp.customPartitioner = this.customPartitioner__				}_				break__			case FORCED_REBALANCED:_			case FULL_REPLICATION:_			case RANDOM_PARTITIONED:_				gp.partitioning = this.partitioning__				break__			default:_				throw new RuntimeException("Unknown partitioning type.")__		}__		_		if (this.uniqueFieldCombinations != null) {_			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>()__			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {_				FieldSet newFieldCombo = new FieldSet()__				for (Integer sourceField : fieldCombo) {_					FieldSet targetField = props.getForwardingTargetFields(input, sourceField)___					if (targetField == null || targetField.size() == 0) {_						newFieldCombo = null__						break__					} else {_						_						if(targetField.size() > 1) {_							LOG.warn("Found that a field is forwarded to more than one target field in " +_									"semantic forwarded field information. Will only use the field with the lowest index.")__						}_						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0])__					}_				}_				if (newFieldCombo != null) {_					newUniqueFieldCombinations.add(newFieldCombo)__				}_			}_			if(!newUniqueFieldCombinations.isEmpty()) {_				gp.uniqueFieldCombinations = newUniqueFieldCombinations__			}_		}__		return gp__	};filters,these,global,properties,by,the,fields,that,are,forwarded,to,the,output,as,described,by,the,semantic,properties,param,props,the,semantic,properties,holding,information,about,forwarded,fields,param,input,the,index,of,the,input,return,the,filtered,global,properties;public,global,properties,filter,by,semantic,properties,semantic,properties,props,int,input,if,props,null,throw,new,null,pointer,exception,semantic,properties,may,not,be,null,global,properties,gp,new,global,properties,switch,this,partitioning,case,ordering,new,ordering,new,ordering,for,int,i,0,i,this,ordering,get,involved,indexes,size,i,int,source,field,this,ordering,get,involved,indexes,get,i,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,ordering,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,ordering,append,ordering,target,field,to,array,0,this,ordering,get,type,i,this,ordering,get,order,i,if,new,ordering,null,gp,partitioning,partitioning,property,gp,ordering,new,ordering,gp,partitioning,fields,new,ordering,get,involved,indexes,gp,distribution,this,distribution,break,case,case,case,field,list,new,partitioning,fields,new,field,list,for,int,source,field,this,partitioning,fields,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,partitioning,fields,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,partitioning,fields,new,partitioning,fields,add,field,target,field,to,array,0,if,new,partitioning,fields,null,gp,partitioning,this,partitioning,gp,partitioning,fields,new,partitioning,fields,gp,custom,partitioner,this,custom,partitioner,break,case,case,case,gp,partitioning,this,partitioning,break,default,throw,new,runtime,exception,unknown,partitioning,type,if,this,unique,field,combinations,null,set,field,set,new,unique,field,combinations,new,hash,set,field,set,for,field,set,field,combo,this,unique,field,combinations,field,set,new,field,combo,new,field,set,for,integer,source,field,field,combo,field,set,target,field,props,get,forwarding,target,fields,input,source,field,if,target,field,null,target,field,size,0,new,field,combo,null,break,else,if,target,field,size,1,log,warn,found,that,a,field,is,forwarded,to,more,than,one,target,field,in,semantic,forwarded,field,information,will,only,use,the,field,with,the,lowest,index,new,field,combo,new,field,combo,add,field,target,field,to,array,0,if,new,field,combo,null,new,unique,field,combinations,add,new,field,combo,if,new,unique,field,combinations,is,empty,gp,unique,field,combinations,new,unique,field,combinations,return,gp
GlobalProperties -> public void setRangePartitioned(Ordering ordering, DataDistribution distribution);1458743533;Set the parameters for range partition.__@param ordering Order of the partitioned fields_@param distribution The data distribution for range partition. User can supply a customized data distribution,_also the data distribution can be null.;public void setRangePartitioned(Ordering ordering, DataDistribution distribution) {_		if (ordering == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__		this.distribution = distribution__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields,param,distribution,the,data,distribution,for,range,partition,user,can,supply,a,customized,data,distribution,also,the,data,distribution,can,be,null;public,void,set,range,partitioned,ordering,ordering,data,distribution,distribution,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes,this,distribution,distribution
GlobalProperties -> public void setRangePartitioned(Ordering ordering, DataDistribution distribution);1461185749;Set the parameters for range partition.__@param ordering Order of the partitioned fields_@param distribution The data distribution for range partition. User can supply a customized data distribution,_also the data distribution can be null.;public void setRangePartitioned(Ordering ordering, DataDistribution distribution) {_		if (ordering == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__		this.distribution = distribution__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields,param,distribution,the,data,distribution,for,range,partition,user,can,supply,a,customized,data,distribution,also,the,data,distribution,can,be,null;public,void,set,range,partitioned,ordering,ordering,data,distribution,distribution,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes,this,distribution,distribution
GlobalProperties -> public void setRangePartitioned(Ordering ordering, DataDistribution distribution);1475688973;Set the parameters for range partition.__@param ordering Order of the partitioned fields_@param distribution The data distribution for range partition. User can supply a customized data distribution,_also the data distribution can be null.;public void setRangePartitioned(Ordering ordering, DataDistribution distribution) {_		if (ordering == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__		this.distribution = distribution__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields,param,distribution,the,data,distribution,for,range,partition,user,can,supply,a,customized,data,distribution,also,the,data,distribution,can,be,null;public,void,set,range,partitioned,ordering,ordering,data,distribution,distribution,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes,this,distribution,distribution
GlobalProperties -> public void setRangePartitioned(Ordering ordering, DataDistribution distribution);1511814440;Set the parameters for range partition.__@param ordering Order of the partitioned fields_@param distribution The data distribution for range partition. User can supply a customized data distribution,_also the data distribution can be null.;public void setRangePartitioned(Ordering ordering, DataDistribution distribution) {_		if (ordering == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.RANGE_PARTITIONED__		this.ordering = ordering__		this.partitioningFields = ordering.getInvolvedIndexes()__		this.distribution = distribution__	};set,the,parameters,for,range,partition,param,ordering,order,of,the,partitioned,fields,param,distribution,the,data,distribution,for,range,partition,user,can,supply,a,customized,data,distribution,also,the,data,distribution,can,be,null;public,void,set,range,partitioned,ordering,ordering,data,distribution,distribution,if,ordering,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,ordering,ordering,this,partitioning,fields,ordering,get,involved,indexes,this,distribution,distribution
GlobalProperties -> public void setHashPartitioned(FieldList partitionedFields);1426843274;Sets this global properties to represent a hash partitioning.__@param partitionedFields The key fields on which the data is hash partitioned.;public void setHashPartitioned(FieldList partitionedFields) {_		if (partitionedFields == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.HASH_PARTITIONED__		this.partitioningFields = partitionedFields__		this.ordering = null__	};sets,this,global,properties,to,represent,a,hash,partitioning,param,partitioned,fields,the,key,fields,on,which,the,data,is,hash,partitioned;public,void,set,hash,partitioned,field,list,partitioned,fields,if,partitioned,fields,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,partitioning,fields,partitioned,fields,this,ordering,null
GlobalProperties -> public void setHashPartitioned(FieldList partitionedFields);1458743533;Sets this global properties to represent a hash partitioning.__@param partitionedFields The key fields on which the data is hash partitioned.;public void setHashPartitioned(FieldList partitionedFields) {_		if (partitionedFields == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.HASH_PARTITIONED__		this.partitioningFields = partitionedFields__		this.ordering = null__	};sets,this,global,properties,to,represent,a,hash,partitioning,param,partitioned,fields,the,key,fields,on,which,the,data,is,hash,partitioned;public,void,set,hash,partitioned,field,list,partitioned,fields,if,partitioned,fields,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,partitioning,fields,partitioned,fields,this,ordering,null
GlobalProperties -> public void setHashPartitioned(FieldList partitionedFields);1461185749;Sets this global properties to represent a hash partitioning.__@param partitionedFields The key fields on which the data is hash partitioned.;public void setHashPartitioned(FieldList partitionedFields) {_		if (partitionedFields == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.HASH_PARTITIONED__		this.partitioningFields = partitionedFields__		this.ordering = null__	};sets,this,global,properties,to,represent,a,hash,partitioning,param,partitioned,fields,the,key,fields,on,which,the,data,is,hash,partitioned;public,void,set,hash,partitioned,field,list,partitioned,fields,if,partitioned,fields,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,partitioning,fields,partitioned,fields,this,ordering,null
GlobalProperties -> public void setHashPartitioned(FieldList partitionedFields);1475688973;Sets this global properties to represent a hash partitioning.__@param partitionedFields The key fields on which the data is hash partitioned.;public void setHashPartitioned(FieldList partitionedFields) {_		if (partitionedFields == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.HASH_PARTITIONED__		this.partitioningFields = partitionedFields__		this.ordering = null__	};sets,this,global,properties,to,represent,a,hash,partitioning,param,partitioned,fields,the,key,fields,on,which,the,data,is,hash,partitioned;public,void,set,hash,partitioned,field,list,partitioned,fields,if,partitioned,fields,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,partitioning,fields,partitioned,fields,this,ordering,null
GlobalProperties -> public void setHashPartitioned(FieldList partitionedFields);1511814440;Sets this global properties to represent a hash partitioning.__@param partitionedFields The key fields on which the data is hash partitioned.;public void setHashPartitioned(FieldList partitionedFields) {_		if (partitionedFields == null) {_			throw new NullPointerException()__		}_		_		this.partitioning = PartitioningProperty.HASH_PARTITIONED__		this.partitioningFields = partitionedFields__		this.ordering = null__	};sets,this,global,properties,to,represent,a,hash,partitioning,param,partitioned,fields,the,key,fields,on,which,the,data,is,hash,partitioned;public,void,set,hash,partitioned,field,list,partitioned,fields,if,partitioned,fields,null,throw,new,null,pointer,exception,this,partitioning,partitioning,property,this,partitioning,fields,partitioned,fields,this,ordering,null
