commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean preVisit(OptimizerNode visitable) {     return visitable.getId() == -1. }
false;public;1;21;;@Override public void postVisit(OptimizerNode visitable) {     // the node ids     visitable.initId(this.id++).     // connections need to figure out their maximum path depths     for (DagConnection conn : visitable.getIncomingConnections()) {         conn.initMaxDepth().     }     for (DagConnection conn : visitable.getBroadcastConnections()) {         conn.initMaxDepth().     }     // the estimates     visitable.computeOutputEstimates(this.statistics).     // if required, recurse into the step function     if (visitable instanceof IterationNode) {         ((IterationNode) visitable).acceptForStepFunction(this).     } }
