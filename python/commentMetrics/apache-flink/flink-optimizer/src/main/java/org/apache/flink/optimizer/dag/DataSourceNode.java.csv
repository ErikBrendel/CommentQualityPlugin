# id;timestamp;commentText;codeText;commentWords;codeWords
DataSourceNode -> @Override 	public GenericDataSourceBase<?, ?> getOperator();1426843274;Gets the contract object for this data source node.__@return The contract.;@Override_	public GenericDataSourceBase<?, ?> getOperator() {_		return (GenericDataSourceBase<?, ?>) super.getOperator()__	};gets,the,contract,object,for,this,data,source,node,return,the,contract;override,public,generic,data,source,base,get,operator,return,generic,data,source,base,super,get,operator
DataSourceNode -> @Override 	public GenericDataSourceBase<?, ?> getOperator();1427097830;Gets the contract object for this data source node.__@return The contract.;@Override_	public GenericDataSourceBase<?, ?> getOperator() {_		return (GenericDataSourceBase<?, ?>) super.getOperator()__	};gets,the,contract,object,for,this,data,source,node,return,the,contract;override,public,generic,data,source,base,get,operator,return,generic,data,source,base,super,get,operator
DataSourceNode -> @Override 	public GenericDataSourceBase<?, ?> getOperator();1442492509;Gets the contract object for this data source node.__@return The contract.;@Override_	public GenericDataSourceBase<?, ?> getOperator() {_		return (GenericDataSourceBase<?, ?>) super.getOperator()__	};gets,the,contract,object,for,this,data,source,node,return,the,contract;override,public,generic,data,source,base,get,operator,return,generic,data,source,base,super,get,operator
DataSourceNode -> public DataSourceNode(GenericDataSourceBase<?, ?> pactContract);1426843274;Creates a new DataSourceNode for the given contract.__@param pactContract_The data source contract object.;public DataSourceNode(GenericDataSourceBase<?, ?> pactContract) {_		super(pactContract)__		_		if (pactContract.getUserCodeWrapper().getUserCodeClass() == null) {_			throw new IllegalArgumentException("Input format has not been set.")__		}_		_		if (NonParallelInput.class.isAssignableFrom(pactContract.getUserCodeWrapper().getUserCodeClass())) {_			setDegreeOfParallelism(1)__			this.sequentialInput = true__		} else {_			this.sequentialInput = false__		}__		this.replicatedInput = ReplicatingInputFormat.class.isAssignableFrom(_														pactContract.getUserCodeWrapper().getUserCodeClass())___		this.gprops = new GlobalProperties()__		this.lprops = new LocalProperties()___		SplitDataProperties<?> splitProps = pactContract.getSplitDataProperties()___		if(replicatedInput) {_			this.gprops.setFullyReplicated()__			this.lprops = new LocalProperties()__		} else if (splitProps != null) {_			_			setDataPropertiesFromSplitProperties(splitProps)__		}__	};creates,a,new,data,source,node,for,the,given,contract,param,pact,contract,the,data,source,contract,object;public,data,source,node,generic,data,source,base,pact,contract,super,pact,contract,if,pact,contract,get,user,code,wrapper,get,user,code,class,null,throw,new,illegal,argument,exception,input,format,has,not,been,set,if,non,parallel,input,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,set,degree,of,parallelism,1,this,sequential,input,true,else,this,sequential,input,false,this,replicated,input,replicating,input,format,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,this,gprops,new,global,properties,this,lprops,new,local,properties,split,data,properties,split,props,pact,contract,get,split,data,properties,if,replicated,input,this,gprops,set,fully,replicated,this,lprops,new,local,properties,else,if,split,props,null,set,data,properties,from,split,properties,split,props
DataSourceNode -> public DataSourceNode(GenericDataSourceBase<?, ?> pactContract);1427097830;Creates a new DataSourceNode for the given contract.__@param pactContract_The data source contract object.;public DataSourceNode(GenericDataSourceBase<?, ?> pactContract) {_		super(pactContract)__		_		if (pactContract.getUserCodeWrapper().getUserCodeClass() == null) {_			throw new IllegalArgumentException("Input format has not been set.")__		}_		_		if (NonParallelInput.class.isAssignableFrom(pactContract.getUserCodeWrapper().getUserCodeClass())) {_			setParallelism(1)__			this.sequentialInput = true__		} else {_			this.sequentialInput = false__		}__		this.replicatedInput = ReplicatingInputFormat.class.isAssignableFrom(_														pactContract.getUserCodeWrapper().getUserCodeClass())___		this.gprops = new GlobalProperties()__		this.lprops = new LocalProperties()___		SplitDataProperties<?> splitProps = pactContract.getSplitDataProperties()___		if(replicatedInput) {_			this.gprops.setFullyReplicated()__			this.lprops = new LocalProperties()__		} else if (splitProps != null) {_			_			setDataPropertiesFromSplitProperties(splitProps)__		}__	};creates,a,new,data,source,node,for,the,given,contract,param,pact,contract,the,data,source,contract,object;public,data,source,node,generic,data,source,base,pact,contract,super,pact,contract,if,pact,contract,get,user,code,wrapper,get,user,code,class,null,throw,new,illegal,argument,exception,input,format,has,not,been,set,if,non,parallel,input,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,set,parallelism,1,this,sequential,input,true,else,this,sequential,input,false,this,replicated,input,replicating,input,format,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,this,gprops,new,global,properties,this,lprops,new,local,properties,split,data,properties,split,props,pact,contract,get,split,data,properties,if,replicated,input,this,gprops,set,fully,replicated,this,lprops,new,local,properties,else,if,split,props,null,set,data,properties,from,split,properties,split,props
DataSourceNode -> public DataSourceNode(GenericDataSourceBase<?, ?> pactContract);1442492509;Creates a new DataSourceNode for the given contract.__@param pactContract_The data source contract object.;public DataSourceNode(GenericDataSourceBase<?, ?> pactContract) {_		super(pactContract)__		_		if (pactContract.getUserCodeWrapper().getUserCodeClass() == null) {_			throw new IllegalArgumentException("Input format has not been set.")__		}_		_		if (NonParallelInput.class.isAssignableFrom(pactContract.getUserCodeWrapper().getUserCodeClass())) {_			setParallelism(1)__			this.sequentialInput = true__		} else {_			this.sequentialInput = false__		}__		this.replicatedInput = ReplicatingInputFormat.class.isAssignableFrom(_														pactContract.getUserCodeWrapper().getUserCodeClass())___		this.gprops = new GlobalProperties()__		this.lprops = new LocalProperties()___		SplitDataProperties<?> splitProps = pactContract.getSplitDataProperties()___		if(replicatedInput) {_			this.gprops.setFullyReplicated()__			this.lprops = new LocalProperties()__		} else if (splitProps != null) {_			_			setDataPropertiesFromSplitProperties(splitProps)__		}__	};creates,a,new,data,source,node,for,the,given,contract,param,pact,contract,the,data,source,contract,object;public,data,source,node,generic,data,source,base,pact,contract,super,pact,contract,if,pact,contract,get,user,code,wrapper,get,user,code,class,null,throw,new,illegal,argument,exception,input,format,has,not,been,set,if,non,parallel,input,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,set,parallelism,1,this,sequential,input,true,else,this,sequential,input,false,this,replicated,input,replicating,input,format,class,is,assignable,from,pact,contract,get,user,code,wrapper,get,user,code,class,this,gprops,new,global,properties,this,lprops,new,local,properties,split,data,properties,split,props,pact,contract,get,split,data,properties,if,replicated,input,this,gprops,set,fully,replicated,this,lprops,new,local,properties,else,if,split,props,null,set,data,properties,from,split,properties,split,props
