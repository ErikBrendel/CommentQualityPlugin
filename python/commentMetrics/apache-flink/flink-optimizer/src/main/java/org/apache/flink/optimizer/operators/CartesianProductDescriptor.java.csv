commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;22;;@Override protected List<GlobalPropertiesPair> createPossibleGlobalProperties() {     ArrayList<GlobalPropertiesPair> pairs = new ArrayList<GlobalPropertiesPair>().     if (this.allowBroadcastFirst) {         // replicate first         RequestedGlobalProperties replicated1 = new RequestedGlobalProperties().         replicated1.setFullyReplicated().         RequestedGlobalProperties any2 = new RequestedGlobalProperties().         pairs.add(new GlobalPropertiesPair(replicated1, any2)).     }     if (this.allowBroadcastSecond) {         // replicate second         RequestedGlobalProperties any1 = new RequestedGlobalProperties().         RequestedGlobalProperties replicated2 = new RequestedGlobalProperties().         replicated2.setFullyReplicated().         pairs.add(new GlobalPropertiesPair(any1, replicated2)).     }     return pairs. }
false;protected;0;6;;@Override protected List<LocalPropertiesPair> createPossibleLocalProperties() {     // all properties are possible     return Collections.singletonList(new LocalPropertiesPair(new RequestedLocalProperties(), new RequestedLocalProperties())). }
false;public;4;5;;@Override public boolean areCompatible(RequestedGlobalProperties requested1, RequestedGlobalProperties requested2, GlobalProperties produced1, GlobalProperties produced2) {     return true. }
false;public;4;5;;@Override public boolean areCoFulfilled(RequestedLocalProperties requested1, RequestedLocalProperties requested2, LocalProperties produced1, LocalProperties produced2) {     return true. }
false;public;3;4;;@Override public DualInputPlanNode instantiate(Channel in1, Channel in2, TwoInputNode node) {     return new DualInputPlanNode(node, "Cross (" + node.getOperator().getName() + ")", in1, in2, getStrategy()). }
false;public;2;11;;@Override public GlobalProperties computeGlobalProperties(GlobalProperties in1, GlobalProperties in2) {     GlobalProperties gp = GlobalProperties.combine(in1, in2).     if (gp.getUniqueFieldCombination() != null && gp.getUniqueFieldCombination().size() > 0 && gp.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED) {         gp.setAnyPartitioning(gp.getUniqueFieldCombination().iterator().next().toFieldList()).     }     gp.clearUniqueFieldCombinations().     return gp. }
