commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;// ------------------------------------------------------------------------ @Before public void setup() {     Configuration flinkConf = new Configuration().     this.dataStats = new DataStatistics().     this.withStatsCompiler = new Optimizer(this.dataStats, new DefaultCostEstimator(), flinkConf).     this.withStatsCompiler.setDefaultParallelism(DEFAULT_PARALLELISM).     this.noStatsCompiler = new Optimizer(null, new DefaultCostEstimator(), flinkConf).     this.noStatsCompiler.setDefaultParallelism(DEFAULT_PARALLELISM). }
false;public;1;3;;// ------------------------------------------------------------------------ public OptimizedPlan compileWithStats(Plan p) {     return this.withStatsCompiler.compile(p). }
false;public;1;3;;public OptimizedPlan compileNoStats(Plan p) {     return this.noStatsCompiler.compile(p). }
false;public,static;1;3;;public static OperatorResolver getContractResolver(Plan plan) {     return new OperatorResolver(plan). }
false;public;3;3;;public void setSourceStatistics(GenericDataSourceBase<?, ?> source, long size, float recordWidth) {     setSourceStatistics(source, new FileBaseStatistics(Long.MAX_VALUE, size, recordWidth)). }
false;public;2;5;;public void setSourceStatistics(GenericDataSourceBase<?, ?> source, FileBaseStatistics stats) {     final String key = CACHE_KEY + this.statCounter++.     this.dataStats.cacheBaseStatistics(stats, key).     source.setStatisticsKey(key). }
false;public,static;1;3;;public static OptimizerPlanNodeResolver getOptimizerPlanNodeResolver(OptimizedPlan plan) {     return new OptimizerPlanNodeResolver(plan). }
false;public;1;11;;@SuppressWarnings("unchecked") public <T extends PlanNode> T getNode(String name) {     List<PlanNode> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No node found with the given name.").     } else if (nodes.size() != 1) {         throw new RuntimeException("Multiple nodes found with the given name.").     } else {         return (T) nodes.get(0).     } }
false;public;2;23;;@SuppressWarnings("unchecked") public <T extends PlanNode> T getNode(String name, Class<? extends Function> stubClass) {     List<PlanNode> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No node found with the given name and stub class.").     } else {         PlanNode found = null.         for (PlanNode node : nodes) {             if (node.getClass() == stubClass) {                 if (found == null) {                     found = node.                 } else {                     throw new RuntimeException("Multiple nodes found with the given name and stub class.").                 }             }         }         if (found == null) {             throw new RuntimeException("No node found with the given name and stub class.").         } else {             return (T) found.         }     } }
false;public;1;8;;public List<PlanNode> getNodes(String name) {     List<PlanNode> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No node found with the given name.").     } else {         return new ArrayList<PlanNode>(nodes).     } }
false;public;1;12;;@Override public boolean preVisit(Operator<?> visitable) {     if (visitable instanceof GenericDataSourceBase) {         sources.add((GenericDataSourceBase<?, ?>) visitable).     } else if (visitable instanceof BulkIterationBase) {         ((BulkIterationBase<?>) visitable).getNextPartialSolution().accept(this).     }     return true. }
false;public;1;2;;@Override public void postVisit(Operator<?> visitable) { }
false;public;0;3;;public List<GenericDataSourceBase<?, ?>> getSources() {     return this.sources. }
