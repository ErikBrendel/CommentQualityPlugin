commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testCustomPartitioningTupleReduce() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo2> data = env.fromElements(new Pojo2()).rebalance().setParallelism(4).         data.groupBy("a").withPartitioner(new TestPartitionerInt()).reduce(new SelectOneReducer<Pojo2>()).output(new DiscardingOutputFormat<Pojo2>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;28;;@Test public void testCustomPartitioningTupleGroupReduce() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo2> data = env.fromElements(new Pojo2()).rebalance().setParallelism(4).         data.groupBy("a").withPartitioner(new TestPartitionerInt()).reduceGroup(new IdentityGroupReducerCombinable<Pojo2>()).output(new DiscardingOutputFormat<Pojo2>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;29;;@Test public void testCustomPartitioningTupleGroupReduceSorted() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo3> data = env.fromElements(new Pojo3()).rebalance().setParallelism(4).         data.groupBy("a").withPartitioner(new TestPartitionerInt()).sortGroup("b", Order.ASCENDING).reduceGroup(new IdentityGroupReducerCombinable<Pojo3>()).output(new DiscardingOutputFormat<Pojo3>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;30;;@Test public void testCustomPartitioningTupleGroupReduceSorted2() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo4> data = env.fromElements(new Pojo4()).rebalance().setParallelism(4).         data.groupBy("a").withPartitioner(new TestPartitionerInt()).sortGroup("b", Order.ASCENDING).sortGroup("c", Order.DESCENDING).reduceGroup(new IdentityGroupReducerCombinable<Pojo4>()).output(new DiscardingOutputFormat<Pojo4>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;19;;@Test public void testCustomPartitioningTupleInvalidType() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo2> data = env.fromElements(new Pojo2()).rebalance().setParallelism(4).         try {             data.groupBy("a").withPartitioner(new TestPartitionerLong()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;21;;@Test public void testCustomPartitioningTupleInvalidTypeSorted() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo3> data = env.fromElements(new Pojo3()).rebalance().setParallelism(4).         try {             data.groupBy("a").sortGroup("b", Order.ASCENDING).withPartitioner(new TestPartitionerLong()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;20;;@Test public void testCustomPartitioningTupleRejectCompositeKey() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Pojo2> data = env.fromElements(new Pojo2()).rebalance().setParallelism(4).         try {             data.groupBy("a", "b").withPartitioner(new TestPartitionerInt()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 0. }
false;public;2;4;;@Override public int partition(Long key, int numPartitions) {     return 0. }
