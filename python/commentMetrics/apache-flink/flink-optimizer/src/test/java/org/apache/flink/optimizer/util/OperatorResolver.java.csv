commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@SuppressWarnings("unchecked") public <T extends Operator<?>> T getNode(String name) {     List<Operator<?>> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No nodes found with the given name.").     } else if (nodes.size() != 1) {         throw new RuntimeException("Multiple nodes found with the given name.").     } else {         return (T) nodes.get(0).     } }
false;public;2;23;;@SuppressWarnings("unchecked") public <T extends Operator<?>> T getNode(String name, Class<? extends RichFunction> stubClass) {     List<Operator<?>> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No node found with the given name and stub class.").     } else {         Operator<?> found = null.         for (Operator<?> node : nodes) {             if (node.getClass() == stubClass) {                 if (found == null) {                     found = node.                 } else {                     throw new RuntimeException("Multiple nodes found with the given name and stub class.").                 }             }         }         if (found == null) {             throw new RuntimeException("No node found with the given name and stub class.").         } else {             return (T) found.         }     } }
false;public;1;8;;public List<Operator<?>> getNodes(String name) {     List<Operator<?>> nodes = this.map.get(name).     if (nodes == null || nodes.isEmpty()) {         throw new RuntimeException("No node found with the given name.").     } else {         return new ArrayList<Operator<?>>(nodes).     } }
false;public;1;25;;@Override public boolean preVisit(Operator<?> visitable) {     if (this.seen.add(visitable)) {         // add to  the map         final String name = visitable.getName().         List<Operator<?>> list = this.map.get(name).         if (list == null) {             list = new ArrayList<Operator<?>>(2).             this.map.put(name, list).         }         list.add(visitable).         // recurse into bulk iterations         if (visitable instanceof BulkIterationBase) {             ((BulkIterationBase) visitable).getNextPartialSolution().accept(this).         } else if (visitable instanceof DeltaIterationBase) {             ((DeltaIterationBase) visitable).getSolutionSetDelta().accept(this).             ((DeltaIterationBase) visitable).getNextWorkset().accept(this).         }         return true.     } else {         return false.     } }
false;public;1;2;;@Override public void postVisit(Operator<?> visitable) { }
