commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testGetEstimatesNoReplicationFactor() {     final long NUM_RECORD = 1001.     final long SIZE = 467131.     DataSourceNode source = getSourceNode().     SourcePlanNode planNode = new SourcePlanNode(source, "test node").     Channel channel = new Channel(planNode).     // no estimates here     Assert.assertEquals(-1, channel.getEstimatedOutputSize()).     Assert.assertEquals(-1, channel.getEstimatedNumRecords()).     // set estimates     source.setEstimatedNumRecords(NUM_RECORD).     source.setEstimatedOutputSize(SIZE).     Assert.assertEquals(SIZE, channel.getEstimatedOutputSize()).     Assert.assertEquals(NUM_RECORD, channel.getEstimatedNumRecords()). }
false;public;0;22;;@Test public void testGetEstimatesWithReplicationFactor() {     final long NUM_RECORD = 1001.     final long SIZE = 467131.     final int REPLICATION = 23.     DataSourceNode source = getSourceNode().     SourcePlanNode planNode = new SourcePlanNode(source, "test node").     Channel channel = new Channel(planNode).     channel.setReplicationFactor(REPLICATION).     // no estimates here     Assert.assertEquals(-1, channel.getEstimatedOutputSize()).     Assert.assertEquals(-1, channel.getEstimatedNumRecords()).     // set estimates     source.setEstimatedNumRecords(NUM_RECORD).     source.setEstimatedOutputSize(SIZE).     Assert.assertEquals(SIZE * REPLICATION, channel.getEstimatedOutputSize()).     Assert.assertEquals(NUM_RECORD * REPLICATION, channel.getEstimatedNumRecords()). }
false;private,static,final;0;6;;// private static final OptimizerNode getSingleInputNode() { // return new MapNode(new MapOperatorBase<String, String, GenericMap<String,String>>( // new IdentityMapper<String>(), // new UnaryOperatorInformation<String, String>(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO), // "map")). // } private static final DataSourceNode getSourceNode() {     return new DataSourceNode(new GenericDataSourceBase<String, TextInputFormat>(new TextInputFormat(new Path("/ignored")), new OperatorInformation<String>(BasicTypeInfo.STRING_TYPE_INFO), "source")). }
