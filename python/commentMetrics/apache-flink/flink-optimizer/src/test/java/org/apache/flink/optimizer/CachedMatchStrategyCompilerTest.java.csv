# id;timestamp;commentText;codeText;commentWords;codeWords
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSide();1426843274;This tests whether a HYBRIDHASH_BUILD_SECOND is correctly transformed to a HYBRIDHASH_BUILD_SECOND_CACHED_when inside of an iteration an on the static path;@Test_	public void testRightSide() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,right,side,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSide();1427097830;This tests whether a HYBRIDHASH_BUILD_SECOND is correctly transformed to a HYBRIDHASH_BUILD_SECOND_CACHED_when inside of an iteration an on the static path;@Test_	public void testRightSide() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,right,side,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSide();1427784999;This tests whether a HYBRIDHASH_BUILD_SECOND is correctly transformed to a HYBRIDHASH_BUILD_SECOND_CACHED_when inside of an iteration an on the static path;@Test_	public void testRightSide() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,right,side,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSide();1430859707;This tests whether a HYBRIDHASH_BUILD_SECOND is correctly transformed to a HYBRIDHASH_BUILD_SECOND_CACHED_when inside of an iteration an on the static path;@Test_	public void testRightSide() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,right,side,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSideCountercheck();1426843274;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testLeftSideCountercheck() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND, innerJoin.getDriverStrategy())__			assertEquals(TempMode.CACHED, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,left,side,countercheck,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,cached,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSideCountercheck();1427097830;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testLeftSideCountercheck() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND, innerJoin.getDriverStrategy())__			assertEquals(TempMode.CACHED, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,left,side,countercheck,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,cached,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSideCountercheck();1427784999;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testLeftSideCountercheck() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND, innerJoin.getDriverStrategy())__			assertEquals(TempMode.CACHED, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,left,side,countercheck,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,cached,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSideCountercheck();1430859707;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testLeftSideCountercheck() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND, innerJoin.getDriverStrategy())__			assertEquals(TempMode.CACHED, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,left,side,countercheck,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,cached,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSide();1426843274;This tests whether a HYBRIDHASH_BUILD_FIRST is correctly transformed to a HYBRIDHASH_BUILD_FIRST_CACHED_when inside of an iteration an on the static path;@Test_	public void testLeftSide() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,left,side,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSide();1427097830;This tests whether a HYBRIDHASH_BUILD_FIRST is correctly transformed to a HYBRIDHASH_BUILD_FIRST_CACHED_when inside of an iteration an on the static path;@Test_	public void testLeftSide() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,left,side,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSide();1427784999;This tests whether a HYBRIDHASH_BUILD_FIRST is correctly transformed to a HYBRIDHASH_BUILD_FIRST_CACHED_when inside of an iteration an on the static path;@Test_	public void testLeftSide() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,left,side,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testLeftSide();1430859707;This tests whether a HYBRIDHASH_BUILD_FIRST is correctly transformed to a HYBRIDHASH_BUILD_FIRST_CACHED_when inside of an iteration an on the static path;@Test_	public void testLeftSide() {_		try {_			_			Plan plan = getTestPlanLeftStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,tests,whether,a,is,correctly,transformed,to,a,when,inside,of,an,iteration,an,on,the,static,path;test,public,void,test,left,side,try,plan,plan,get,test,plan,left,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSideCountercheck();1426843274;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testRightSideCountercheck() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.CACHED, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,right,side,countercheck,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,cached,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSideCountercheck();1427097830;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testRightSideCountercheck() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.CACHED, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,right,side,countercheck,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,cached,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSideCountercheck();1427784999;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testRightSideCountercheck() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.CACHED, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,right,side,countercheck,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,cached,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testRightSideCountercheck();1430859707;This test makes sure that only a HYBRIDHASH on the static path is transformed to the cached variant;@Test_	public void testRightSideCountercheck() {_		try {_			_			Plan plan = getTestPlanRightStatic(Optimizer.HINT_LOCAL_STRATEGY_HASH_BUILD_FIRST)__			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST, innerJoin.getDriverStrategy())_ _			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.CACHED, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,makes,sure,that,only,a,hybridhash,on,the,static,path,is,transformed,to,the,cached,variant;test,public,void,test,right,side,countercheck,try,plan,plan,get,test,plan,right,static,optimizer,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,cached,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testCorrectChoosing();1426843274;This test simulates a join of a big left side with a small right side inside of an iteration, where the small side is on a static path._Currently the best execution plan is a HYBRIDHASH_BUILD_SECOND_CACHED, where the small side is hashed and cached._This test also makes sure that all relevant plans are correctly enumerated by the optimizer.;@Test_	public void testCorrectChoosing() {_		try {_			_			Plan plan = getTestPlanRightStatic("")__			_			SourceCollectorVisitor sourceCollector = new SourceCollectorVisitor()__			plan.accept(sourceCollector)__			_			for(GenericDataSourceBase<?, ?> s : sourceCollector.getSources()) {_				if(s.getName().equals("bigFile")) {_					this.setSourceStatistics(s, 10000000, 1000)__				}_				else if(s.getName().equals("smallFile")) {_					this.setSourceStatistics(s, 100, 100)__				}_			}_			_			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,simulates,a,join,of,a,big,left,side,with,a,small,right,side,inside,of,an,iteration,where,the,small,side,is,on,a,static,path,currently,the,best,execution,plan,is,a,where,the,small,side,is,hashed,and,cached,this,test,also,makes,sure,that,all,relevant,plans,are,correctly,enumerated,by,the,optimizer;test,public,void,test,correct,choosing,try,plan,plan,get,test,plan,right,static,source,collector,visitor,source,collector,new,source,collector,visitor,plan,accept,source,collector,for,generic,data,source,base,s,source,collector,get,sources,if,s,get,name,equals,big,file,this,set,source,statistics,s,10000000,1000,else,if,s,get,name,equals,small,file,this,set,source,statistics,s,100,100,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testCorrectChoosing();1427097830;This test simulates a join of a big left side with a small right side inside of an iteration, where the small side is on a static path._Currently the best execution plan is a HYBRIDHASH_BUILD_SECOND_CACHED, where the small side is hashed and cached._This test also makes sure that all relevant plans are correctly enumerated by the optimizer.;@Test_	public void testCorrectChoosing() {_		try {_			_			Plan plan = getTestPlanRightStatic("")__			_			SourceCollectorVisitor sourceCollector = new SourceCollectorVisitor()__			plan.accept(sourceCollector)__			_			for(GenericDataSourceBase<?, ?> s : sourceCollector.getSources()) {_				if(s.getName().equals("bigFile")) {_					this.setSourceStatistics(s, 10000000, 1000)__				}_				else if(s.getName().equals("smallFile")) {_					this.setSourceStatistics(s, 100, 100)__				}_			}_			_			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,simulates,a,join,of,a,big,left,side,with,a,small,right,side,inside,of,an,iteration,where,the,small,side,is,on,a,static,path,currently,the,best,execution,plan,is,a,where,the,small,side,is,hashed,and,cached,this,test,also,makes,sure,that,all,relevant,plans,are,correctly,enumerated,by,the,optimizer;test,public,void,test,correct,choosing,try,plan,plan,get,test,plan,right,static,source,collector,visitor,source,collector,new,source,collector,visitor,plan,accept,source,collector,for,generic,data,source,base,s,source,collector,get,sources,if,s,get,name,equals,big,file,this,set,source,statistics,s,10000000,1000,else,if,s,get,name,equals,small,file,this,set,source,statistics,s,100,100,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testCorrectChoosing();1427784999;This test simulates a join of a big left side with a small right side inside of an iteration, where the small side is on a static path._Currently the best execution plan is a HYBRIDHASH_BUILD_SECOND_CACHED, where the small side is hashed and cached._This test also makes sure that all relevant plans are correctly enumerated by the optimizer.;@Test_	public void testCorrectChoosing() {_		try {_			_			Plan plan = getTestPlanRightStatic("")__			_			SourceCollectorVisitor sourceCollector = new SourceCollectorVisitor()__			plan.accept(sourceCollector)__			_			for(GenericDataSourceBase<?, ?> s : sourceCollector.getSources()) {_				if(s.getName().equals("bigFile")) {_					this.setSourceStatistics(s, 10000000, 1000)__				}_				else if(s.getName().equals("smallFile")) {_					this.setSourceStatistics(s, 100, 100)__				}_			}_			_			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,simulates,a,join,of,a,big,left,side,with,a,small,right,side,inside,of,an,iteration,where,the,small,side,is,on,a,static,path,currently,the,best,execution,plan,is,a,where,the,small,side,is,hashed,and,cached,this,test,also,makes,sure,that,all,relevant,plans,are,correctly,enumerated,by,the,optimizer;test,public,void,test,correct,choosing,try,plan,plan,get,test,plan,right,static,source,collector,visitor,source,collector,new,source,collector,visitor,plan,accept,source,collector,for,generic,data,source,base,s,source,collector,get,sources,if,s,get,name,equals,big,file,this,set,source,statistics,s,10000000,1000,else,if,s,get,name,equals,small,file,this,set,source,statistics,s,100,100,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
CachedMatchStrategyCompilerTest -> @Test 	public void testCorrectChoosing();1430859707;This test simulates a join of a big left side with a small right side inside of an iteration, where the small side is on a static path._Currently the best execution plan is a HYBRIDHASH_BUILD_SECOND_CACHED, where the small side is hashed and cached._This test also makes sure that all relevant plans are correctly enumerated by the optimizer.;@Test_	public void testCorrectChoosing() {_		try {_			_			Plan plan = getTestPlanRightStatic("")__			_			SourceCollectorVisitor sourceCollector = new SourceCollectorVisitor()__			plan.accept(sourceCollector)__			_			for(GenericDataSourceBase<?, ?> s : sourceCollector.getSources()) {_				if(s.getName().equals("bigFile")) {_					this.setSourceStatistics(s, 10000000, 1000)__				}_				else if(s.getName().equals("smallFile")) {_					this.setSourceStatistics(s, 100, 100)__				}_			}_			_			_			OptimizedPlan oPlan = compileNoStats(plan)__	_			OptimizerPlanNodeResolver resolver = getOptimizerPlanNodeResolver(oPlan)__			DualInputPlanNode innerJoin = resolver.getNode("DummyJoiner")__			_			_			assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED, innerJoin.getDriverStrategy())__			assertEquals(TempMode.NONE, innerJoin.getInput1().getTempMode())__			assertEquals(TempMode.NONE, innerJoin.getInput2().getTempMode())__		_			new JobGraphGenerator().compileJobGraph(oPlan)__		}_		catch (Exception e) {_			System.err.println(e.getMessage())__			e.printStackTrace()__			fail("Test errored: " + e.getMessage())__		}_	};this,test,simulates,a,join,of,a,big,left,side,with,a,small,right,side,inside,of,an,iteration,where,the,small,side,is,on,a,static,path,currently,the,best,execution,plan,is,a,where,the,small,side,is,hashed,and,cached,this,test,also,makes,sure,that,all,relevant,plans,are,correctly,enumerated,by,the,optimizer;test,public,void,test,correct,choosing,try,plan,plan,get,test,plan,right,static,source,collector,visitor,source,collector,new,source,collector,visitor,plan,accept,source,collector,for,generic,data,source,base,s,source,collector,get,sources,if,s,get,name,equals,big,file,this,set,source,statistics,s,10000000,1000,else,if,s,get,name,equals,small,file,this,set,source,statistics,s,100,100,optimized,plan,o,plan,compile,no,stats,plan,optimizer,plan,node,resolver,resolver,get,optimizer,plan,node,resolver,o,plan,dual,input,plan,node,inner,join,resolver,get,node,dummy,joiner,assert,equals,driver,strategy,inner,join,get,driver,strategy,assert,equals,temp,mode,none,inner,join,get,input1,get,temp,mode,assert,equals,temp,mode,none,inner,join,get,input2,get,temp,mode,new,job,graph,generator,compile,job,graph,o,plan,catch,exception,e,system,err,println,e,get,message,e,print,stack,trace,fail,test,errored,e,get,message
