# id;timestamp;commentText;codeText;commentWords;codeWords
HardPlansCompilationTest -> @Test 	public void testTicket158();1426843274;Source -> Map -> Reduce -> Cross -> Reduce -> Cross -> Reduce ->_|--------------------------/                  /_|--------------------------------------------/__First cross has SameKeyFirst output contract;@Test_	public void testTicket158() {_		_		FileDataSource source = new FileDataSource(new DummyInputFormat(), IN_FILE, "Source")__		_		MapOperator map = MapOperator.builder(new IdentityMap()).name("Map1").input(source).build()__		_		ReduceOperator reduce1 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce1").input(map).build()__		_		CrossOperator cross1 = CrossOperator.builder(new DummyCrossStub()).name("Cross1").input1(reduce1).input2(source).build()__		_		ReduceOperator reduce2 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce2").input(cross1).build()__		_		CrossOperator cross2 = CrossOperator.builder(new DummyCrossStub()).name("Cross2").input1(reduce2).input2(source).build()__		_		ReduceOperator reduce3 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce3").input(cross2).build()__		_		FileDataSink sink = new FileDataSink(new DummyOutputFormat(), OUT_FILE, "Sink")__		sink.setInput(reduce3)__		_		Plan plan = new Plan(sink, "Test Temp Task")__		plan.setDefaultParallelism(DEFAULT_PARALLELISM)__		_		OptimizedPlan oPlan = compileNoStats(plan)__		JobGraphGenerator jobGen = new JobGraphGenerator()__		jobGen.compileJobGraph(oPlan)__	};source,map,reduce,cross,reduce,cross,reduce,first,cross,has,same,key,first,output,contract;test,public,void,test,ticket158,file,data,source,source,new,file,data,source,new,dummy,input,format,source,map,operator,map,map,operator,builder,new,identity,map,name,map1,input,source,build,reduce,operator,reduce1,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce1,input,map,build,cross,operator,cross1,cross,operator,builder,new,dummy,cross,stub,name,cross1,input1,reduce1,input2,source,build,reduce,operator,reduce2,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce2,input,cross1,build,cross,operator,cross2,cross,operator,builder,new,dummy,cross,stub,name,cross2,input1,reduce2,input2,source,build,reduce,operator,reduce3,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce3,input,cross2,build,file,data,sink,sink,new,file,data,sink,new,dummy,output,format,sink,sink,set,input,reduce3,plan,plan,new,plan,sink,test,temp,task,plan,set,default,parallelism,optimized,plan,o,plan,compile,no,stats,plan,job,graph,generator,job,gen,new,job,graph,generator,job,gen,compile,job,graph,o,plan
HardPlansCompilationTest -> @Test 	public void testTicket158();1427784999;Source -> Map -> Reduce -> Cross -> Reduce -> Cross -> Reduce ->_|--------------------------/                  /_|--------------------------------------------/__First cross has SameKeyFirst output contract;@Test_	public void testTicket158() {_		_		FileDataSource source = new FileDataSource(new DummyInputFormat(), IN_FILE, "Source")__		_		MapOperator map = MapOperator.builder(new IdentityMap()).name("Map1").input(source).build()__		_		ReduceOperator reduce1 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce1").input(map).build()__		_		CrossOperator cross1 = CrossOperator.builder(new DummyCrossStub()).name("Cross1").input1(reduce1).input2(source).build()__		_		ReduceOperator reduce2 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce2").input(cross1).build()__		_		CrossOperator cross2 = CrossOperator.builder(new DummyCrossStub()).name("Cross2").input1(reduce2).input2(source).build()__		_		ReduceOperator reduce3 = ReduceOperator.builder(new IdentityReduce(), IntValue.class, 0).name("Reduce3").input(cross2).build()__		_		FileDataSink sink = new FileDataSink(new DummyOutputFormat(), OUT_FILE, "Sink")__		sink.setInput(reduce3)__		_		Plan plan = new Plan(sink, "Test Temp Task")__		plan.setDefaultParallelism(DEFAULT_PARALLELISM)__		_		OptimizedPlan oPlan = compileNoStats(plan)__		JobGraphGenerator jobGen = new JobGraphGenerator()__		jobGen.compileJobGraph(oPlan)__	};source,map,reduce,cross,reduce,cross,reduce,first,cross,has,same,key,first,output,contract;test,public,void,test,ticket158,file,data,source,source,new,file,data,source,new,dummy,input,format,source,map,operator,map,map,operator,builder,new,identity,map,name,map1,input,source,build,reduce,operator,reduce1,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce1,input,map,build,cross,operator,cross1,cross,operator,builder,new,dummy,cross,stub,name,cross1,input1,reduce1,input2,source,build,reduce,operator,reduce2,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce2,input,cross1,build,cross,operator,cross2,cross,operator,builder,new,dummy,cross,stub,name,cross2,input1,reduce2,input2,source,build,reduce,operator,reduce3,reduce,operator,builder,new,identity,reduce,int,value,class,0,name,reduce3,input,cross2,build,file,data,sink,sink,new,file,data,sink,new,dummy,output,format,sink,sink,set,input,reduce3,plan,plan,new,plan,sink,test,temp,task,plan,set,default,parallelism,optimized,plan,o,plan,compile,no,stats,plan,job,graph,generator,job,gen,new,job,graph,generator,job,gen,compile,job,graph,o,plan
HardPlansCompilationTest -> @Test 	public void testTicket158();1430859707;Source -> Map -> Reduce -> Cross -> Reduce -> Cross -> Reduce ->_|--------------------------/                  /_|--------------------------------------------/__First cross has SameKeyFirst output contract;@Test_	public void testTicket158() {_		_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(DEFAULT_PARALLELISM)__		DataSet<Long> set1 = env.generateSequence(0,1)___		set1.map(new IdentityMapper<Long>()).name("Map1")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce1")_				.cross(set1).with(new IdentityCrosser<Long>()).withForwardedFieldsFirst("*").name("Cross1")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce2")_				.cross(set1).with(new IdentityCrosser<Long>()).name("Cross2")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce3")_				.output(new DiscardingOutputFormat<Long>()).name("Sink")___		JavaPlan plan = env.createProgramPlan()__		OptimizedPlan oPlan = compileNoStats(plan)___		JobGraphGenerator jobGen = new JobGraphGenerator()__		jobGen.compileJobGraph(oPlan)__	};source,map,reduce,cross,reduce,cross,reduce,first,cross,has,same,key,first,output,contract;test,public,void,test,ticket158,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,data,set,long,set1,env,generate,sequence,0,1,set1,map,new,identity,mapper,long,name,map1,group,by,reduce,group,new,identity,group,reducer,long,name,reduce1,cross,set1,with,new,identity,crosser,long,with,forwarded,fields,first,name,cross1,group,by,reduce,group,new,identity,group,reducer,long,name,reduce2,cross,set1,with,new,identity,crosser,long,name,cross2,group,by,reduce,group,new,identity,group,reducer,long,name,reduce3,output,new,discarding,output,format,long,name,sink,java,plan,plan,env,create,program,plan,optimized,plan,o,plan,compile,no,stats,plan,job,graph,generator,job,gen,new,job,graph,generator,job,gen,compile,job,graph,o,plan
HardPlansCompilationTest -> @Test 	public void testTicket158();1449526184;Source -> Map -> Reduce -> Cross -> Reduce -> Cross -> Reduce ->_|--------------------------/                  /_|--------------------------------------------/__First cross has SameKeyFirst output contract;@Test_	public void testTicket158() {_		_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(DEFAULT_PARALLELISM)__		DataSet<Long> set1 = env.generateSequence(0,1)___		set1.map(new IdentityMapper<Long>()).name("Map1")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce1")_				.cross(set1).with(new IdentityCrosser<Long>()).withForwardedFieldsFirst("*").name("Cross1")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce2")_				.cross(set1).with(new IdentityCrosser<Long>()).name("Cross2")_				.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).name("Reduce3")_				.output(new DiscardingOutputFormat<Long>()).name("Sink")___		Plan plan = env.createProgramPlan()__		OptimizedPlan oPlan = compileNoStats(plan)___		JobGraphGenerator jobGen = new JobGraphGenerator()__		jobGen.compileJobGraph(oPlan)__	};source,map,reduce,cross,reduce,cross,reduce,first,cross,has,same,key,first,output,contract;test,public,void,test,ticket158,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,data,set,long,set1,env,generate,sequence,0,1,set1,map,new,identity,mapper,long,name,map1,group,by,reduce,group,new,identity,group,reducer,long,name,reduce1,cross,set1,with,new,identity,crosser,long,with,forwarded,fields,first,name,cross1,group,by,reduce,group,new,identity,group,reducer,long,name,reduce2,cross,set1,with,new,identity,crosser,long,name,cross2,group,by,reduce,group,new,identity,group,reducer,long,name,reduce3,output,new,discarding,output,format,long,name,sink,plan,plan,env,create,program,plan,optimized,plan,o,plan,compile,no,stats,plan,job,graph,generator,job,gen,new,job,graph,generator,job,gen,compile,job,graph,o,plan
