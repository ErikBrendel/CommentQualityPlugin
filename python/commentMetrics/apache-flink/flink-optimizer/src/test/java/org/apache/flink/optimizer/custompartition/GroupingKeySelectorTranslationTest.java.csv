commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testCustomPartitioningKeySelectorReduce() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple2<Integer, Integer>> data = env.fromElements(new Tuple2<Integer, Integer>(0, 0)).rebalance().setParallelism(4).         data.groupBy(new TestKeySelector<Tuple2<Integer, Integer>>()).withPartitioner(new TestPartitionerInt()).reduce(new SelectOneReducer<Tuple2<Integer, Integer>>()).output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode keyRemovingMapper = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode reducer = (SingleInputPlanNode) keyRemovingMapper.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, keyRemovingMapper.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;29;;@Test public void testCustomPartitioningKeySelectorGroupReduce() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple2<Integer, Integer>> data = env.fromElements(new Tuple2<Integer, Integer>(0, 0)).rebalance().setParallelism(4).         data.groupBy(new TestKeySelector<Tuple2<Integer, Integer>>()).withPartitioner(new TestPartitionerInt()).reduceGroup(new IdentityGroupReducerCombinable<Tuple2<Integer, Integer>>()).output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;30;;@Test public void testCustomPartitioningKeySelectorGroupReduceSorted() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple3<Integer, Integer, Integer>> data = env.fromElements(new Tuple3<Integer, Integer, Integer>(0, 0, 0)).rebalance().setParallelism(4).         data.groupBy(new TestKeySelector<Tuple3<Integer, Integer, Integer>>()).withPartitioner(new TestPartitionerInt()).sortGroup(new TestKeySelector<Tuple3<Integer, Integer, Integer>>(), Order.ASCENDING).reduceGroup(new IdentityGroupReducerCombinable<Tuple3<Integer, Integer, Integer>>()).output(new DiscardingOutputFormat<Tuple3<Integer, Integer, Integer>>()).         Plan p = env.createProgramPlan().         OptimizedPlan op = compileNoStats(p).         SinkPlanNode sink = op.getDataSinks().iterator().next().         SingleInputPlanNode reducer = (SingleInputPlanNode) sink.getInput().getSource().         SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getInput().getSource().         assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.PARTITION_CUSTOM, reducer.getInput().getShipStrategy()).         assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;21;;@Test public void testCustomPartitioningKeySelectorInvalidType() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple2<Integer, Integer>> data = env.fromElements(new Tuple2<Integer, Integer>(0, 0)).rebalance().setParallelism(4).         try {             data.groupBy(new TestKeySelector<Tuple2<Integer, Integer>>()).withPartitioner(new TestPartitionerLong()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;22;;@Test public void testCustomPartitioningKeySelectorInvalidTypeSorted() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple3<Integer, Integer, Integer>> data = env.fromElements(new Tuple3<Integer, Integer, Integer>(0, 0, 0)).rebalance().setParallelism(4).         try {             data.groupBy(new TestKeySelector<Tuple3<Integer, Integer, Integer>>()).sortGroup(1, Order.ASCENDING).withPartitioner(new TestPartitionerLong()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;21;;@Test public void testCustomPartitioningTupleRejectCompositeKey() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         DataSet<Tuple3<Integer, Integer, Integer>> data = env.fromElements(new Tuple3<Integer, Integer, Integer>(0, 0, 0)).rebalance().setParallelism(4).         try {             data.groupBy(new TestBinaryKeySelector<Tuple3<Integer, Integer, Integer>>()).withPartitioner(new TestPartitionerInt()).             fail("Should throw an exception").         } catch (InvalidProgramException e) {         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;2;4;;@Override public int partition(Integer key, int numPartitions) {     return 0. }
false;public;2;4;;@Override public int partition(Long key, int numPartitions) {     return 0. }
false;public;1;4;;@Override public Integer getKey(T value) {     return value.getField(0). }
false;public;1;4;;@Override public Tuple2<Integer, Integer> getKey(T value) {     return new Tuple2<Integer, Integer>(value.<Integer>getField(0), value.<Integer>getField(1)). }
