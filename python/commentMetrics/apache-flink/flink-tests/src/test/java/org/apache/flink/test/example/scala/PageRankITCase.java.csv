commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void before() throws Exception {     File resultFile = tempFolder.newFile().     // Delete file because the Scala API does not respect WriteMode set by the configuration     resultFile.delete().     resultPath = resultFile.toURI().toString().     File verticesFile = tempFolder.newFile().     FileUtils.writeFileUtf8(verticesFile, PageRankData.VERTICES).     File edgesFile = tempFolder.newFile().     FileUtils.writeFileUtf8(edgesFile, PageRankData.EDGES).     verticesPath = verticesFile.toURI().toString().     edgesPath = edgesFile.toURI().toString(). }
false;public;0;4;;@After public void after() throws Exception {     compareKeyValuePairsWithDelta(expected, resultPath, " ", 0.01). }
false;public;0;10;;@Test public void testPageRankWithSmallNumberOfIterations() throws Exception {     PageRankBasic.main(new String[] { "--pages", verticesPath, "--links", edgesPath, "--output", resultPath, "--numPages", PageRankData.NUM_VERTICES + "", "--iterations", "3" }).     expected = PageRankData.RANKS_AFTER_3_ITERATIONS. }
false;public;0;11;;@Test public void testPageRankWithConvergence() throws Exception {     // start with a very high number of iteration such that the dynamic convergence criterion must handle termination     PageRankBasic.main(new String[] { "--pages", verticesPath, "--links", edgesPath, "--output", resultPath, "--numPages", PageRankData.NUM_VERTICES + "", "--iterations", "1000" }).     expected = PageRankData.RANKS_AFTER_EPSILON_0_0001_CONVERGENCE. }
