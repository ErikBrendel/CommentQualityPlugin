commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void initiate() {     ExecutionEnvironment.getExecutionEnvironment().setParallelism(5). }
false;public;0;6;;@Test public void testSamplerWithFractionWithoutReplacement() throws Exception {     verifySamplerWithFractionWithoutReplacement(0d).     verifySamplerWithFractionWithoutReplacement(0.2d).     verifySamplerWithFractionWithoutReplacement(1.0d). }
false;public;0;7;;@Test public void testSamplerWithFractionWithReplacement() throws Exception {     verifySamplerWithFractionWithReplacement(0d).     verifySamplerWithFractionWithReplacement(0.2d).     verifySamplerWithFractionWithReplacement(1.0d).     verifySamplerWithFractionWithReplacement(2.0d). }
false;public;0;6;;@Test public void testSamplerWithSizeWithoutReplacement() throws Exception {     verifySamplerWithFixedSizeWithoutReplacement(0).     verifySamplerWithFixedSizeWithoutReplacement(2).     verifySamplerWithFixedSizeWithoutReplacement(21). }
false;public;0;6;;@Test public void testSamplerWithSizeWithReplacement() throws Exception {     verifySamplerWithFixedSizeWithReplacement(0).     verifySamplerWithFixedSizeWithReplacement(2).     verifySamplerWithFixedSizeWithReplacement(21). }
false;private;1;3;;private void verifySamplerWithFractionWithoutReplacement(double fraction) throws Exception {     verifySamplerWithFractionWithoutReplacement(fraction, RNG.nextLong()). }
false;private;2;3;;private void verifySamplerWithFractionWithoutReplacement(double fraction, long seed) throws Exception {     verifySamplerWithFraction(false, fraction, seed). }
false;private;1;3;;private void verifySamplerWithFractionWithReplacement(double fraction) throws Exception {     verifySamplerWithFractionWithReplacement(fraction, RNG.nextLong()). }
false;private;2;3;;private void verifySamplerWithFractionWithReplacement(double fraction, long seed) throws Exception {     verifySamplerWithFraction(true, fraction, seed). }
false;private;3;7;;private void verifySamplerWithFraction(boolean withReplacement, double fraction, long seed) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     FlatMapOperator<Tuple3<Integer, Long, String>, String> ds = getSourceDataSet(env).     MapPartitionOperator<String, String> sampled = DataSetUtils.sample(ds, withReplacement, fraction, seed).     List<String> result = sampled.collect().     containsResultAsText(result, getSourceStrings()). }
false;private;1;3;;private void verifySamplerWithFixedSizeWithoutReplacement(int numSamples) throws Exception {     verifySamplerWithFixedSizeWithoutReplacement(numSamples, RNG.nextLong()). }
false;private;2;3;;private void verifySamplerWithFixedSizeWithoutReplacement(int numSamples, long seed) throws Exception {     verifySamplerWithFixedSize(false, numSamples, seed). }
false;private;1;3;;private void verifySamplerWithFixedSizeWithReplacement(int numSamples) throws Exception {     verifySamplerWithFixedSizeWithReplacement(numSamples, RNG.nextLong()). }
false;private;2;3;;private void verifySamplerWithFixedSizeWithReplacement(int numSamples, long seed) throws Exception {     verifySamplerWithFixedSize(true, numSamples, seed). }
false;private;3;8;;private void verifySamplerWithFixedSize(boolean withReplacement, int numSamples, long seed) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     FlatMapOperator<Tuple3<Integer, Long, String>, String> ds = getSourceDataSet(env).     DataSet<String> sampled = DataSetUtils.sampleWithSize(ds, withReplacement, numSamples, seed).     List<String> result = sampled.collect().     assertEquals(numSamples, result.size()).     containsResultAsText(result, getSourceStrings()). }
false;public;2;4;;@Override public void flatMap(Tuple3<Integer, Long, String> value, Collector<String> out) throws Exception {     out.collect(value.f2). }
false;private;1;9;;private FlatMapOperator<Tuple3<Integer, Long, String>, String> getSourceDataSet(ExecutionEnvironment env) {     return CollectionDataSets.get3TupleDataSet(env).flatMap(new FlatMapFunction<Tuple3<Integer, Long, String>, String>() {          @Override         public void flatMap(Tuple3<Integer, Long, String> value, Collector<String> out) throws Exception {             out.collect(value.f2).         }     }). }
false;private;0;23;;private String getSourceStrings() {     return "Hi\n" + "Hello\n" + "Hello world\n" + "Hello world, how are you?\n" + "I am fine.\n" + "Luke Skywalker\n" + "Comment#1\n" + "Comment#2\n" + "Comment#3\n" + "Comment#4\n" + "Comment#5\n" + "Comment#6\n" + "Comment#7\n" + "Comment#8\n" + "Comment#9\n" + "Comment#10\n" + "Comment#11\n" + "Comment#12\n" + "Comment#13\n" + "Comment#14\n" + "Comment#15\n". }
