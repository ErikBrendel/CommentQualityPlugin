commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;16;;@Override protected void preSubmit() throws Exception {     // create input     for (String s : IN.split("\n")) {         String[] fields = s.split(" ").         input.add(new Tuple2<String, String>(fields[0], fields[1])).     }     // create expected     for (String s : RESULT.split("\n")) {         String[] fields = s.split(" ").         expected.add(new Tuple2<String, Integer>(fields[0], Integer.parseInt(fields[1]))).     } }
false;protected;0;4;;@Override protected void postSubmit() {     compareResultCollections(expected, result, new TestBaseUtils.TupleComparator<Tuple2<String, Integer>>()). }
false;protected;0;10;;@Override protected void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<String, String>> data = env.fromCollection(input).     data.mapPartition(new TestMapPartition()).output(new LocalCollectionOutputFormat<Tuple2<String, Integer>>(result)).     env.execute(). }
false;public;2;14;;@Override public void mapPartition(Iterable<Tuple2<String, String>> values, Collector<Tuple2<String, Integer>> out) {     for (Tuple2<String, String> value : values) {         String keyString = value.f0.         String valueString = value.f1.         int keyInt = Integer.parseInt(keyString).         int valueInt = Integer.parseInt(valueString).         if (keyInt + valueInt < 10) {             out.collect(new Tuple2<String, Integer>(valueString, keyInt + 10)).         }     } }
