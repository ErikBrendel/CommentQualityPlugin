commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;28;;public static void main(String[] args) throws Exception {     ParameterTool pt = ParameterTool.fromArgs(args).     String savepointsPath = pt.getRequired("savepoint-path").     Configuration config = new Configuration().     config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointsPath).     StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(config).     env.enableCheckpointing(500, CheckpointingMode.EXACTLY_ONCE).     env.setRestartStrategy(RestartStrategies.noRestart()).     env.setStateBackend(new MemoryStateBackend()).     /**      * Source -> keyBy -> C(Window -> StatefulMap1 -> StatefulMap2)      */     SingleOutputStreamOperator<Tuple2<Integer, Integer>> source = createIntegerTupleSource(env, ExecutionMode.GENERATE).     SingleOutputStreamOperator<Integer> window = createWindowFunction(ExecutionMode.GENERATE, source).     SingleOutputStreamOperator<Integer> first = createFirstStatefulMap(ExecutionMode.GENERATE, window).     SingleOutputStreamOperator<Integer> second = createSecondStatefulMap(ExecutionMode.GENERATE, first).     env.execute("job"). }
false;public,static;2;3;;public static SingleOutputStreamOperator<Tuple2<Integer, Integer>> createIntegerTupleSource(StreamExecutionEnvironment env, ExecutionMode mode) {     return env.addSource(new IntegerTupleSource(mode)). }
false;public,static;2;8;;public static SingleOutputStreamOperator<Integer> createWindowFunction(ExecutionMode mode, DataStream<Tuple2<Integer, Integer>> input) {     return input.keyBy(0).countWindow(1).apply(new StatefulWindowFunction(mode)).setParallelism(4).uid("window"). }
false;public,static;2;8;;public static SingleOutputStreamOperator<Integer> createFirstStatefulMap(ExecutionMode mode, DataStream<Integer> input) {     SingleOutputStreamOperator<Integer> map = input.map(new StatefulStringStoringMap(mode, "first")).setParallelism(4).uid("first").     return map. }
false;public,static;2;8;;public static SingleOutputStreamOperator<Integer> createSecondStatefulMap(ExecutionMode mode, DataStream<Integer> input) {     SingleOutputStreamOperator<Integer> map = input.map(new StatefulStringStoringMap(mode, "second")).setParallelism(4).uid("second").     return map. }
false;public;1;16;;@Override public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {     for (int x = 0. x < 10. x++) {         ctx.collect(new Tuple2<>(x, x)).     }     switch(mode) {         case GENERATE:         case MIGRATE:             synchronized (this) {                 while (running) {                     this.wait().                 }             }     } }
false;public;0;7;;@Override public void cancel() {     synchronized (this) {         running = false.         this.notifyAll().     } }
false;public;1;4;;@Override public void open(Configuration config) {     this.state = getRuntimeContext().getListState(new ListStateDescriptor<>("values", Integer.class)). }
false;public;4;22;;@Override public void apply(Tuple key, GlobalWindow window, Iterable<Tuple2<Integer, Integer>> values, Collector<Integer> out) throws Exception {     // fail-safe to make sure apply is actually called     applyCalled = true.     switch(mode) {         case GENERATE:             for (Tuple2<Integer, Integer> value : values) {                 state.add(value.f1).             }             break.         case MIGRATE:         case RESTORE:             Iterator<Tuple2<Integer, Integer>> input = values.iterator().             Iterator<Integer> restored = state.get().iterator().             while (input.hasNext() && restored.hasNext()) {                 Tuple2<Integer, Integer> value = input.next().                 Integer rValue = restored.next().                 Assert.assertEquals(rValue, value.f1).             }             Assert.assertEquals(restored.hasNext(), input.hasNext()).     } }
false;public;0;4;;@Override public void close() {     Assert.assertTrue("Apply was never called.", applyCalled). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;2;4;;@Override public List<String> snapshotState(long checkpointId, long timestamp) throws Exception {     return Arrays.asList(valueToStore + getRuntimeContext().getIndexOfThisSubtask()). }
false;public;1;12;;@Override public void restoreState(List<String> state) throws Exception {     switch(mode) {         case GENERATE:             break.         case MIGRATE:         case RESTORE:             Assert.assertEquals("Failed for " + valueToStore + getRuntimeContext().getIndexOfThisSubtask(), 1, state.size()).             String value = state.get(0).             Assert.assertEquals(valueToStore + getRuntimeContext().getIndexOfThisSubtask(), value).     } }
