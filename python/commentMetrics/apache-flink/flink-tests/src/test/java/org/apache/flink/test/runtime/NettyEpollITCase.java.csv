commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Integer getKey(Integer value) throws Exception {     return value. }
false;public;0;24;;@Test public void testNettyEpoll() throws Exception {     MiniClusterWithClientResource cluster = trySetUpCluster().     try {         StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(NUM_TASK_MANAGERS).         env.getConfig().disableSysoutLogging().         DataStream<Integer> input = env.fromElements(1, 2, 3, 4, 1, 2, 3, 42).         input.keyBy(new KeySelector<Integer, Integer>() {              @Override             public Integer getKey(Integer value) throws Exception {                 return value.             }         }).sum(0).print().         env.execute().     } finally {         cluster.after().     } }
false;private;0;21;;private MiniClusterWithClientResource trySetUpCluster() throws Exception {     try {         Configuration config = new Configuration().         config.setString(TRANSPORT_TYPE, "epoll").         MiniClusterWithClientResource cluster = new MiniClusterWithClientResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(config).setNumberTaskManagers(NUM_TASK_MANAGERS).setNumberSlotsPerTaskManager(1).build()).         cluster.before().         return cluster.     } catch (UnsatisfiedLinkError ex) {         // If we failed to init netty because we are not on Linux platform, abort the test.         if (findThrowableWithMessage(ex, "Only supported on Linux").isPresent()) {             throw new AssumptionViolatedException("This test is only supported on linux").         }         throw ex.     } }
