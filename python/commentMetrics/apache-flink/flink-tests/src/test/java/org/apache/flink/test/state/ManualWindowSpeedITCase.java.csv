commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean filter(Tuple2<String, Integer> value) throws Exception {     return value.f0.startsWith("Tuple 0"). }
false;public;2;5;;@Override public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {     return Tuple2.of(value1.f0, value1.f1 + value2.f1). }
false;public;0;34;;@Test public void testTumblingIngestionTimeWindowsWithFsBackend() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.setParallelism(1).     String checkpoints = tempFolder.newFolder().toURI().toString().     env.setStateBackend(new FsStateBackend(checkpoints)).     env.addSource(new InfiniteTupleSource(1_000)).keyBy(0).timeWindow(Time.seconds(3)).reduce(new ReduceFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {             return Tuple2.of(value1.f0, value1.f1 + value2.f1).         }     }).filter(new FilterFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(Tuple2<String, Integer> value) throws Exception {             return value.f0.startsWith("Tuple 0").         }     }).print().     env.execute(). }
false;public;1;4;;@Override public boolean filter(Tuple2<String, Integer> value) throws Exception {     return value.f0.startsWith("Tuple 0"). }
false;public;2;5;;@Override public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {     return Tuple2.of(value1.f0, value1.f1 + value2.f1). }
false;public;0;35;;@Test public void testTumblingIngestionTimeWindowsWithFsBackendWithLateness() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.setParallelism(1).     String checkpoints = tempFolder.newFolder().toURI().toString().     env.setStateBackend(new FsStateBackend(checkpoints)).     env.addSource(new InfiniteTupleSource(10_000)).keyBy(0).timeWindow(Time.seconds(3)).allowedLateness(Time.seconds(1)).reduce(new ReduceFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {             return Tuple2.of(value1.f0, value1.f1 + value2.f1).         }     }).filter(new FilterFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(Tuple2<String, Integer> value) throws Exception {             return value.f0.startsWith("Tuple 0").         }     }).print().     env.execute(). }
false;public;1;4;;@Override public boolean filter(Tuple2<String, Integer> value) throws Exception {     return value.f0.startsWith("Tuple 0"). }
false;public;2;5;;@Override public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {     return Tuple2.of(value1.f0, value1.f1 + value2.f1). }
false;public;0;33;;@Test public void testTumblingIngestionTimeWindowsWithRocksDBBackend() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.setParallelism(1).     env.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend())).     env.addSource(new InfiniteTupleSource(10_000)).keyBy(0).timeWindow(Time.seconds(3)).reduce(new ReduceFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {             return Tuple2.of(value1.f0, value1.f1 + value2.f1).         }     }).filter(new FilterFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(Tuple2<String, Integer> value) throws Exception {             return value.f0.startsWith("Tuple 0").         }     }).print().     env.execute(). }
false;public;1;4;;@Override public boolean filter(Tuple2<String, Integer> value) throws Exception {     return value.f0.startsWith("Tuple 0"). }
false;public;2;5;;@Override public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {     return Tuple2.of(value1.f0, value1.f1 + value2.f1). }
false;public;0;34;;@Test public void testTumblingIngestionTimeWindowsWithRocksDBBackendWithLateness() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.setParallelism(1).     env.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend())).     env.addSource(new InfiniteTupleSource(10_000)).keyBy(0).timeWindow(Time.seconds(3)).allowedLateness(Time.seconds(1)).reduce(new ReduceFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {             return Tuple2.of(value1.f0, value1.f1 + value2.f1).         }     }).filter(new FilterFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(Tuple2<String, Integer> value) throws Exception {             return value.f0.startsWith("Tuple 0").         }     }).print().     env.execute(). }
false;public;1;4;;@Override public boolean filter(Tuple2<String, Integer> value) throws Exception {     return value.f0.startsWith("Tuple 0"). }
false;public;2;5;;@Override public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {     return Tuple2.of(value1.f0, value1.f1 + value2.f1). }
false;public;0;33;;@Test public void testAlignedProcessingTimeWindows() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime).     env.setParallelism(1).     env.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend())).     env.addSource(new InfiniteTupleSource(10_000)).keyBy(0).timeWindow(Time.seconds(3)).reduce(new ReduceFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {             return Tuple2.of(value1.f0, value1.f1 + value2.f1).         }     }).filter(new FilterFunction<Tuple2<String, Integer>>() {          private static final long serialVersionUID = 1L.          @Override         public boolean filter(Tuple2<String, Integer> value) throws Exception {             return value.f0.startsWith("Tuple 0").         }     }).print().     env.execute(). }
false;public;1;8;;@Override public void run(SourceContext<Tuple2<String, Integer>> out) throws Exception {     Random random = new Random(42).     while (running) {         Tuple2<String, Integer> tuple = new Tuple2<String, Integer>("Tuple " + (random.nextInt(numKeys)), 1).         out.collect(tuple).     } }
false;public;0;4;;@Override public void cancel() {     this.running = false. }
