commented;modifiers;parameterAmount;loc;comment;code
true;public;2;21;/**  * @param key the key for the new session generator to instantiate  * @param globalWatermark the current global watermark  * @return a new event generator instance that generates events for the provided session key  */ ;/**  * @param key the key for the new session generator to instantiate  * @param globalWatermark the current global watermark  * @return a new event generator instance that generates events for the provided session key  */ public EventGenerator<K, E> newSessionGeneratorForKey(K key, long globalWatermark) {     EventGenerator<K, E> eventGenerator = latestGeneratorsByKey.get(key).     if (eventGenerator == null) {         SessionConfiguration<K, E> sessionConfiguration = SessionConfiguration.of(key, 0, maxSessionEventGap, globalWatermark, timelyEventsPerSession, eventFactory).         SessionGeneratorConfiguration<K, E> sessionGeneratorConfiguration = new SessionGeneratorConfiguration<>(sessionConfiguration, generatorConfiguration).         eventGenerator = new SessionEventGeneratorImpl<>(sessionGeneratorConfiguration, randomGenerator).     } else {         eventGenerator = eventGenerator.getNextGenerator(globalWatermark).     }     latestGeneratorsByKey.put(key, eventGenerator).     ++producedGeneratorsCount.     return eventGenerator. }
false;public;0;3;;public int getProducedGeneratorsCount() {     return producedGeneratorsCount. }
