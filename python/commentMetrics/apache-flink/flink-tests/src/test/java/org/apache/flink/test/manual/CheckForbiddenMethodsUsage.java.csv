commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Method getMethod() {     return method. }
false;public;0;3;;public List<Member> getExclusions() {     return exclusions. }
false;public;1;7;;public Set<Member> getUsages(Reflections reflections) {     if (method == null) {         return reflections.getConstructorUsage(constructor).     }     return reflections.getMethodUsage(method). }
false;public,static;1;3;;public static ForbiddenCall of(Method method) {     return new ForbiddenCall(method, null, Collections.<Member>emptyList()). }
false;public,static;2;3;;public static ForbiddenCall of(Method method, List<Member> exclusions) {     return new ForbiddenCall(method, null, exclusions). }
false;public,static;1;3;;public static ForbiddenCall of(Constructor<?> ctor) {     return new ForbiddenCall(null, ctor, Collections.<Member>emptyList()). }
false;public,static;2;3;;public static ForbiddenCall of(Constructor<?> ctor, List<Member> exclusions) {     return new ForbiddenCall(null, ctor, exclusions). }
false;public,static;0;12;;@BeforeClass public static void init() throws Exception {     forbiddenCalls.add(ForbiddenCall.of(String.class.getMethod("getBytes"), Arrays.<Member>asList(FieldParserTest.class.getMethod("testEndsWithDelimiter"), FieldParserTest.class.getMethod("testDelimiterNext")))).     forbiddenCalls.add(ForbiddenCall.of(String.class.getConstructor(byte[].class))).     forbiddenCalls.add(ForbiddenCall.of(String.class.getConstructor(byte[].class, int.class))).     forbiddenCalls.add(ForbiddenCall.of(String.class.getConstructor(byte[].class, int.class, int.class))).     forbiddenCalls.add(ForbiddenCall.of(String.class.getConstructor(byte[].class, int.class, int.class, int.class))). }
false;public;0;13;;@Test public void testNoDefaultEncoding() throws Exception {     final Reflections reflections = new Reflections(new ConfigurationBuilder().useParallelExecutor(Runtime.getRuntime().availableProcessors()).addUrls(ClasspathHelper.forPackage("org.apache.flink")).addScanners(new MemberUsageScanner())).     for (ForbiddenCall forbiddenCall : forbiddenCalls) {         final Set<Member> methodUsages = forbiddenCall.getUsages(reflections).         methodUsages.removeAll(forbiddenCall.getExclusions()).         assertEquals("Unexpected calls: " + methodUsages, 0, methodUsages.size()).     } }
