# id;timestamp;commentText;codeText;commentWords;codeWords
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1468854249;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20.")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())__			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath, Option.apply(blobKeys)), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint")__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,option,apply,blob,keys,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1469101812;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath, Option.apply(blobKeys)), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint")__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,option,apply,blob,keys,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1469525443;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath, Option.apply(blobKeys)), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint")__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,option,apply,blob,keys,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1472663401;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint")__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1472663401;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1473347848;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1474548132;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1476432306;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1476696544;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull(savepointPath, "Failed to trigger savepoint")___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), testCluster.userConfiguration(),_				Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,savepoint,path,failed,to,trigger,savepoint,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,test,cluster,user,configuration,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1478788457;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), testCluster.userConfiguration(),_				Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,test,cluster,user,configuration,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1487622556;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		int port = testCluster.getLeaderRPCPort()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						CUSTOM_KV_STATE_JAR_PATH,_						"localhost",_						String.valueOf(port),_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), testCluster.userConfiguration(),_				Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,int,port,test,cluster,get,leader,rpcport,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,localhost,string,value,of,port,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,test,cluster,user,configuration,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1493975167;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Uploading JAR " + CUSTOM_KV_STATE_JAR_PATH + " for savepoint disposal.")__		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(jm, deadline.timeLeft(), testCluster.userConfiguration(),_				Collections.singletonList(new Path(CUSTOM_KV_STATE_JAR_PATH)))___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,uploading,jar,for,savepoint,disposal,list,blob,key,blob,keys,blob,client,upload,jar,files,jm,deadline,time,left,test,cluster,user,configuration,collections,singleton,list,new,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1499085016;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1499314317;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i+1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1499899067;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					ignored.printStackTrace()__				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}_	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1500456815;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}__		_		Future<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())__		Object response = Await.result(cancelFuture, deadline.timeLeft())__		assertTrue("Unexpected response: " + response, response instanceof JobManagerMessages.CancellationSuccess)__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint,future,cancel,future,jm,ask,new,job,manager,messages,cancel,job,job,id,deadline,time,left,object,response,await,result,cancel,future,deadline,time,left,assert,true,unexpected,response,response,response,instanceof,job,manager,messages,cancellation,success
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1506583876;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}__		_		Future<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())__		Object response = Await.result(cancelFuture, deadline.timeLeft())__		assertTrue("Unexpected response: " + response, response instanceof JobManagerMessages.CancellationSuccess)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint,future,cancel,future,jm,ask,new,job,manager,messages,cancel,job,job,id,deadline,time,left,object,response,await,result,cancel,future,deadline,time,left,assert,true,unexpected,response,response,response,instanceof,job,manager,messages,cancellation,success,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1509404699;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}__		_		Future<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())__		Object response = Await.result(cancelFuture, deadline.timeLeft())__		assertTrue("Unexpected response: " + response, response instanceof JobManagerMessages.CancellationSuccess)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint,future,cancel,future,jm,ask,new,job,manager,messages,cancel,job,job,id,deadline,time,left,object,response,await,result,cancel,future,deadline,time,left,assert,true,unexpected,response,response,response,instanceof,job,manager,messages,cancellation,success,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1516295283;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		ActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft())___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {_			Future<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft())__			RunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft())___			for (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {_				jobId = runningJob.getJobId()__				LOG.info("Job running. ID: " + jobId)__				break__			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		LOG.info("Wait for all tasks to be running.")__		Future<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft())__		Await.ready(allRunning, deadline.timeLeft())__		LOG.info("All tasks are running.")___		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			Future<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft())___			Object savepointResponse = Await.result(savepointFuture, deadline.timeLeft())___			if (savepointResponse.getClass() == TriggerSavepointSuccess.class) {_				savepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath()__				LOG.info("Triggered savepoint. Path: " + savepointPath)__			} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {_				Throwable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause()__				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			} else {_				throw new IllegalStateException("Unexpected response to TriggerSavepoint")__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		_		LOG.info("Disposing savepoint at " + savepointPath)__		Future<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft())__		Object disposeResponse = Await.result(disposeFuture, deadline.timeLeft())___		if (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {_			_			LOG.info("Disposed savepoint at " + savepointPath)__		} else if (disposeResponse instanceof DisposeSavepointFailure) {_			throw new IllegalStateException("Failed to dispose savepoint " + disposeResponse)__		} else {_			throw new IllegalStateException("Unexpected response to DisposeSavepoint")__		}__		_		Future<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())__		Object response = Await.result(cancelFuture, deadline.timeLeft())__		assertTrue("Unexpected response: " + response, response instanceof JobManagerMessages.CancellationSuccess)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,actor,gateway,jm,test,cluster,get,leader,gateway,deadline,time,left,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,future,object,jobs,future,jm,ask,job,manager,messages,get,request,running,jobs,status,deadline,time,left,running,jobs,status,running,jobs,running,jobs,status,await,result,jobs,future,deadline,time,left,for,job,status,message,running,job,running,jobs,get,status,messages,job,id,running,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,log,info,wait,for,all,tasks,to,be,running,future,object,all,running,jm,ask,new,wait,for,all,vertices,to,be,running,job,id,deadline,time,left,await,ready,all,running,deadline,time,left,log,info,all,tasks,are,running,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,future,object,savepoint,future,jm,ask,new,trigger,savepoint,job,id,option,string,empty,deadline,time,left,object,savepoint,response,await,result,savepoint,future,deadline,time,left,if,savepoint,response,get,class,trigger,savepoint,success,class,savepoint,path,trigger,savepoint,success,savepoint,response,savepoint,path,log,info,triggered,savepoint,path,savepoint,path,else,if,savepoint,response,get,class,job,manager,messages,trigger,savepoint,failure,class,throwable,cause,job,manager,messages,trigger,savepoint,failure,savepoint,response,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,else,throw,new,illegal,state,exception,unexpected,response,to,trigger,savepoint,assert,not,null,failed,to,trigger,savepoint,savepoint,path,log,info,disposing,savepoint,at,savepoint,path,future,object,dispose,future,jm,ask,new,dispose,savepoint,savepoint,path,deadline,time,left,object,dispose,response,await,result,dispose,future,deadline,time,left,if,dispose,response,get,class,job,manager,messages,get,dispose,savepoint,success,get,class,log,info,disposed,savepoint,at,savepoint,path,else,if,dispose,response,instanceof,dispose,savepoint,failure,throw,new,illegal,state,exception,failed,to,dispose,savepoint,dispose,response,else,throw,new,illegal,state,exception,unexpected,response,to,dispose,savepoint,future,cancel,future,jm,ask,new,job,manager,messages,cancel,job,job,id,deadline,time,left,object,response,await,result,cancel,future,deadline,time,left,assert,true,unexpected,response,response,response,instanceof,job,manager,messages,cancellation,success,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1524124695;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), testCluster)___		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {__			Collection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			for (JobStatusMessage job : jobs) {_				if (job.getJobState() == JobStatus.RUNNING) {_					jobId = job.getJobId()__					LOG.info("Job running. ID: " + jobId)__					break__				}_			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			try {_				savepointPath = clusterClient.triggerSavepoint(jobId, null)_					.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			} catch (Exception cause) {_				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		clusterClient.disposeSavepoint(savepointPath).get()___		clusterClient.cancel(jobId)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,test,cluster,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,collection,job,status,message,jobs,cluster,client,list,jobs,get,deadline,time,left,to,millis,time,unit,milliseconds,for,job,status,message,job,jobs,if,job,get,job,state,job,status,running,job,id,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,try,savepoint,path,cluster,client,trigger,savepoint,job,id,null,get,deadline,time,left,to,millis,time,unit,milliseconds,catch,exception,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,assert,not,null,failed,to,trigger,savepoint,savepoint,path,cluster,client,dispose,savepoint,savepoint,path,get,cluster,client,cancel,job,id,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1526494919;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), testCluster)___		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {__			Collection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			for (JobStatusMessage job : jobs) {_				if (job.getJobState() == JobStatus.RUNNING) {_					jobId = job.getJobId()__					LOG.info("Job running. ID: " + jobId)__					break__				}_			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			try {_				savepointPath = clusterClient.triggerSavepoint(jobId, null)_					.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			} catch (Exception cause) {_				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		clusterClient.disposeSavepoint(savepointPath).get()___		clusterClient.cancel(jobId)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,test,cluster,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,collection,job,status,message,jobs,cluster,client,list,jobs,get,deadline,time,left,to,millis,time,unit,milliseconds,for,job,status,message,job,jobs,if,job,get,job,state,job,status,running,job,id,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,try,savepoint,path,cluster,client,trigger,savepoint,job,id,null,get,deadline,time,left,to,millis,time,unit,milliseconds,catch,exception,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,assert,not,null,failed,to,trigger,savepoint,savepoint,path,cluster,client,dispose,savepoint,savepoint,path,get,cluster,client,cancel,job,id,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1530798894;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), testCluster)___		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			testCluster,_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {__			Collection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			for (JobStatusMessage job : jobs) {_				if (job.getJobState() == JobStatus.RUNNING) {_					jobId = job.getJobId()__					LOG.info("Job running. ID: " + jobId)__					break__				}_			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			try {_				savepointPath = clusterClient.triggerSavepoint(jobId, null)_					.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			} catch (Exception cause) {_				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		clusterClient.disposeSavepoint(savepointPath).get()___		clusterClient.cancel(jobId)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,test,cluster,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,test,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,collection,job,status,message,jobs,cluster,client,list,jobs,get,deadline,time,left,to,millis,time,unit,milliseconds,for,job,status,message,job,jobs,if,job,get,job,state,job,status,running,job,id,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,try,savepoint,path,cluster,client,trigger,savepoint,job,id,null,get,deadline,time,left,to,millis,time,unit,milliseconds,catch,exception,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,assert,not,null,failed,to,trigger,savepoint,savepoint,path,cluster,client,dispose,savepoint,savepoint,path,get,cluster,client,cancel,job,id,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
ClassLoaderITCase -> @Test 	public void testDisposeSavepointWithCustomKvState() throws Exception;1540389860;Tests disposal of a savepoint, which contains custom user code KvState.;@Test_	public void testDisposeSavepointWithCustomKvState() throws Exception {_		ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster())___		Deadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow()___		File checkpointDir = FOLDER.newFolder()__		File outputDir = FOLDER.newFolder()___		final PackagedProgram program = new PackagedProgram(_				new File(CUSTOM_KV_STATE_JAR_PATH),_				new String[] {_						String.valueOf(parallelism),_						checkpointDir.toURI().toString(),_						"5000",_						outputDir.toURI().toString()_				})___		TestStreamEnvironment.setAsContext(_			miniClusterResource.getMiniCluster(),_			parallelism,_			Collections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),_			Collections.<URL>emptyList()_		)___		_		Thread invokeThread = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					program.invokeInteractiveModeForExecution()__				} catch (ProgramInvocationException ignored) {_					if (ignored.getCause() == null ||_						!(ignored.getCause() instanceof JobCancellationException)) {_						ignored.printStackTrace()__					}_				}_			}_		})___		LOG.info("Starting program invoke thread")__		invokeThread.start()___		_		JobID jobId = null___		LOG.info("Waiting for job status running.")___		_		while (jobId == null && deadline.hasTimeLeft()) {__			Collection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			for (JobStatusMessage job : jobs) {_				if (job.getJobState() == JobStatus.RUNNING) {_					jobId = job.getJobId()__					LOG.info("Job running. ID: " + jobId)__					break__				}_			}__			_			if (jobId == null) {_				Thread.sleep(100L)__			}_		}__		_		String savepointPath = null__		for (int i = 0_ i < 20_ i++) {_			LOG.info("Triggering savepoint (" + (i + 1) + "/20).")__			try {_				savepointPath = clusterClient.triggerSavepoint(jobId, null)_					.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)__			} catch (Exception cause) {_				LOG.info("Failed to trigger savepoint. Retrying...", cause)__				_				Thread.sleep(500)__			}_		}__		assertNotNull("Failed to trigger savepoint", savepointPath)___		clusterClient.disposeSavepoint(savepointPath).get()___		clusterClient.cancel(jobId)___		_		invokeThread.join(deadline.timeLeft().toMillis())__		assertFalse("Program invoke thread still running", invokeThread.isAlive())__	};tests,disposal,of,a,savepoint,which,contains,custom,user,code,kv,state;test,public,void,test,dispose,savepoint,with,custom,kv,state,throws,exception,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,mini,cluster,resource,get,mini,cluster,deadline,deadline,new,finite,duration,100,time,unit,seconds,from,now,file,checkpoint,dir,folder,new,folder,file,output,dir,folder,new,folder,final,packaged,program,program,new,packaged,program,new,file,new,string,string,value,of,parallelism,checkpoint,dir,to,uri,to,string,5000,output,dir,to,uri,to,string,test,stream,environment,set,as,context,mini,cluster,resource,get,mini,cluster,parallelism,collections,singleton,new,path,collections,url,empty,list,thread,invoke,thread,new,thread,new,runnable,override,public,void,run,try,program,invoke,interactive,mode,for,execution,catch,program,invocation,exception,ignored,if,ignored,get,cause,null,ignored,get,cause,instanceof,job,cancellation,exception,ignored,print,stack,trace,log,info,starting,program,invoke,thread,invoke,thread,start,job,id,job,id,null,log,info,waiting,for,job,status,running,while,job,id,null,deadline,has,time,left,collection,job,status,message,jobs,cluster,client,list,jobs,get,deadline,time,left,to,millis,time,unit,milliseconds,for,job,status,message,job,jobs,if,job,get,job,state,job,status,running,job,id,job,get,job,id,log,info,job,running,id,job,id,break,if,job,id,null,thread,sleep,100l,string,savepoint,path,null,for,int,i,0,i,20,i,log,info,triggering,savepoint,i,1,20,try,savepoint,path,cluster,client,trigger,savepoint,job,id,null,get,deadline,time,left,to,millis,time,unit,milliseconds,catch,exception,cause,log,info,failed,to,trigger,savepoint,retrying,cause,thread,sleep,500,assert,not,null,failed,to,trigger,savepoint,savepoint,path,cluster,client,dispose,savepoint,savepoint,path,get,cluster,client,cancel,job,id,invoke,thread,join,deadline,time,left,to,millis,assert,false,program,invoke,thread,still,running,invoke,thread,is,alive
