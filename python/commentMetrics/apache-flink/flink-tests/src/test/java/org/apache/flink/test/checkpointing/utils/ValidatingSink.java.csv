commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;boolean checkResult(Map<Long, Integer> windowCounts).
false;;2;1;;void updateCount(T update, Map<Long, Integer> windowCounts).
false;public;1;8;;@Override public void open(Configuration parameters) throws Exception {     // this sink can only work with DOP 1     assertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks()).     if (usingProcessingTime && resultChecker.checkResult(windowCounts)) {         throw new SuccessException().     } }
false;public;0;10;;@Override public void close() {     if (resultChecker.checkResult(windowCounts)) {         if (usingProcessingTime) {             throw new SuccessException().         }     } else {         throw new AssertionError("Test failed check.").     } }
false;public;2;7;;@Override public void invoke(T value, Context context) throws Exception {     countUpdater.updateCount(value, windowCounts).     if (usingProcessingTime && resultChecker.checkResult(windowCounts)) {         throw new SuccessException().     } }
false;public;2;4;;@Override public List<HashMap<Long, Integer>> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(this.windowCounts). }
false;public;1;7;;@Override public void restoreState(List<HashMap<Long, Integer>> state) throws Exception {     if (state.isEmpty() || state.size() > 1) {         throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size()).     }     windowCounts.putAll(state.get(0)). }
