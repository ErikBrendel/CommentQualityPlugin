commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return global watermark at the time this event was generated  */ ;/**  * @return global watermark at the time this event was generated  */ public long getWatermark() {     return watermark. }
false;public;1;3;;public void setWatermark(long watermark) {     this.watermark = watermark. }
true;public;0;3;/**  * @return id of the session to identify a sessions in the sequence of all sessions for the same key  */ ;/**  * @return id of the session to identify a sessions in the sequence of all sessions for the same key  */ public int getSessionId() {     return sessionId. }
false;public;1;3;;public void setSessionId(int sessionId) {     this.sessionId = sessionId. }
true;public;0;3;/**  * @return a sequence number that acts as an id for the even inside the session  */ ;/**  * @return a sequence number that acts as an id for the even inside the session  */ public int getEventId() {     return eventId. }
false;public;1;3;;public void setEventId(int eventId) {     this.eventId = eventId. }
true;public;0;3;/**  * @return indicates whether the event is on time, late within the timing, or late after the timing  */ ;/**  * @return indicates whether the event is on time, late within the timing, or late after the timing  */ public SessionEventGeneratorImpl.Timing getTiming() {     return timing. }
false;public;1;4;;public void setTiming(SessionEventGeneratorImpl.Timing timing) {     Preconditions.checkNotNull(timing).     this.timing = timing. }
false;public;0;9;;@Override public String toString() {     return "TestEventPayload{" + "sessionId=" + sessionId + ", eventId=" + eventId + ", watermark=" + watermark + ", timing=" + timing + '}'. }
false;public,static;4;3;;public static TestEventPayload of(long watermark, int sessionId, int eventId, SessionEventGeneratorImpl.Timing timing) {     return new TestEventPayload(watermark, sessionId, eventId, timing). }
