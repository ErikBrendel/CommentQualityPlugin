commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;41;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     if (args.length < 3) {         throw new IllegalArgumentException("Missing parameters").     }     final String pointsData = args[0].     final String centersData = args[1].     final int numIterations = Integer.parseInt(args[2]).     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     // get input data     DataSet<Point> points = env.fromElements(pointsData.split("\n")).map(new TuplePointConverter()).     DataSet<Centroid> centroids = env.fromElements(centersData.split("\n")).map(new TupleCentroidConverter()).     // set number of bulk iterations for KMeans algorithm     IterativeDataSet<Centroid> loop = centroids.iterate(numIterations).     DataSet<Centroid> newCentroids = points.map(new SelectNearestCenter()).withBroadcastSet(loop, "centroids").map(new CountAppender()).groupBy("field0").reduce(new CentroidAccumulator()).map(new CentroidAverager()).     // feed new centroids back into next iteration     DataSet<Centroid> finalCentroids = loop.closeWith(newCentroids).     // test that custom data type collects are working     finalCentroids.collect(). }
false;public;1;5;;public Point add(Point other) {     x += other.x.     y += other.y.     return this. }
false;public;1;5;;public Point div(long val) {     x /= val.     y /= val.     return this. }
false;public;1;3;;public double euclideanDistance(Point other) {     return Math.sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y)). }
false;public;0;3;;public void clear() {     x = y = 0.0. }
false;public;0;4;;@Override public String toString() {     return x + " " + y. }
false;public;0;4;;@Override public String toString() {     return id + " " + super.toString(). }
false;public;1;5;;@Override public Point map(String str) {     String[] fields = str.split("\\|").     return new Point(Double.parseDouble(fields[1]), Double.parseDouble(fields[2])). }
false;public;1;5;;@Override public Centroid map(String str) {     String[] fields = str.split("\\|").     return new Centroid(Integer.parseInt(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])). }
true;public;1;6;/**  * Reads the centroid values from a broadcast variable into a collection.  */ ;/**  * Reads the centroid values from a broadcast variable into a collection.  */ @Override public void open(Configuration parameters) throws Exception {     this.centroids = getRuntimeContext().getBroadcastVariable("centroids").     this.acc = new CustomAccumulator().     getRuntimeContext().addAccumulator("myAcc", this.acc). }
false;public;1;22;;@Override public Tuple2<Integer, Point> map(Point p) throws Exception {     double minDistance = Double.MAX_VALUE.     int closestCentroidId = -1.     // check all cluster centers     for (Centroid centroid : centroids) {         // compute distance         double distance = p.euclideanDistance(centroid).         // update nearest cluster if necessary         if (distance < minDistance) {             minDistance = distance.             closestCentroidId = centroid.id.         }     }     // emit a new record with the center id and the data point.     acc.add(1L).     return new Tuple2<Integer, Point>(closestCentroidId, p). }
false;public;1;4;;@Override public DummyTuple3IntPointLong map(Tuple2<Integer, Point> t) {     return new DummyTuple3IntPointLong(t.f0, t.f1, 1L). }
false;public;2;4;;@Override public DummyTuple3IntPointLong reduce(DummyTuple3IntPointLong val1, DummyTuple3IntPointLong val2) {     return new DummyTuple3IntPointLong(val1.field0, val1.field1.add(val2.field1), val1.field2 + val2.field2). }
false;public;1;4;;@Override public Centroid map(DummyTuple3IntPointLong value) {     return new Centroid(value.field0, value.field1.div(value.field2)). }
false;public;1;4;;@Override public void add(Long value) {     this.value += value. }
false;public;0;4;;@Override public Long getLocalValue() {     return this.value. }
false;public;0;4;;@Override public void resetLocal() {     this.value = 0L. }
false;public;1;4;;@Override public void merge(Accumulator<Long, Long> other) {     this.value += other.getLocalValue(). }
false;public;0;6;;@Override public Accumulator<Long, Long> clone() {     CustomAccumulator acc = new CustomAccumulator().     acc.value = this.value.     return acc. }
