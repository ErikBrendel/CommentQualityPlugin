commented;modifiers;parameterAmount;loc;comment;code
false;public;1;2;;@Override public void write(int b) { }
false;public;0;13;;@Before public void redirectStreams() {     this.out = System.out.     this.err = System.err.     OutputStream discards = new OutputStream() {          @Override         public void write(int b) {         }     }.     System.setOut(new PrintStream(discards)).     System.setErr(new PrintStream(discards)). }
false;public;0;9;;@After public void restoreStreams() {     if (out != null) {         System.setOut(out).     }     if (err != null) {         System.setOut(err).     } }
false;public;0;32;;@Test public void testWordCountPlan() {     try {         // without arguments         try {             // some ops have DOP 1 forced             final int parallelism = 1.             JsonValidator validator = new GenericValidator(parallelism, 3).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             WordCount.main(new String[0]).         } catch (AbortError ignored) {         }         // with arguments         try {             final int parallelism = 17.             JsonValidator validator = new GenericValidator(parallelism, 3).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             String tmpDir = tempFolder.newFolder().getAbsolutePath().             WordCount.main(new String[] { "--input", tmpDir, "--output", tmpDir }).         } catch (AbortError ignored) {         }     } catch (Exception e) {         restoreStreams().         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;34;;@Test public void testWebLogAnalysis() {     try {         // without arguments         try {             // some ops have DOP 1 forced             final int parallelism = 1.             JsonValidator validator = new GenericValidator(parallelism, 6).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             WebLogAnalysis.main(new String[0]).         } catch (AbortError ignored) {         }         // with arguments         try {             final int parallelism = 17.             JsonValidator validator = new GenericValidator(parallelism, 6).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             String tmpDir = tempFolder.newFolder().getAbsolutePath().             WebLogAnalysis.main(new String[] { "--documents", tmpDir, "--ranks", tmpDir, "--visits", tmpDir, "--output", tmpDir }).         } catch (AbortError ignored) {         }     } catch (Exception e) {         restoreStreams().         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;35;;@Test public void testKMeans() {     try {         // without arguments         try {             // some ops have DOP 1 forced             final int parallelism = 1.             JsonValidator validator = new GenericValidator(parallelism, 9).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             KMeans.main(new String[0]).         } catch (AbortError ignored) {         }         // with arguments         try {             final int parallelism = 42.             JsonValidator validator = new GenericValidator(parallelism, 9).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             String tmpDir = tempFolder.newFolder().getAbsolutePath().             KMeans.main(new String[] { "--points", tmpDir, "--centroids", tmpDir, "--output", tmpDir, "--iterations", "100" }).         } catch (AbortError ignored) {         }     } catch (Exception e) {         restoreStreams().         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;35;;@Test public void testConnectedComponents() {     try {         // without arguments         try {             // some ops have DOP 1 forced             final int parallelism = 1.             JsonValidator validator = new GenericValidator(parallelism, 9).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             ConnectedComponents.main().         } catch (AbortError ignored) {         }         // with arguments         try {             final int parallelism = 23.             JsonValidator validator = new GenericValidator(parallelism, 9).             TestingExecutionEnvironment.setAsNext(validator, parallelism).             String tmpDir = tempFolder.newFolder().getAbsolutePath().             ConnectedComponents.main("--vertices", tmpDir, "--edges", tmpDir, "--output", tmpDir, "--iterations", "100").         } catch (AbortError ignored) {         }     } catch (Exception e) {         restoreStreams().         e.printStackTrace().         fail(e.getMessage()).     } }
false;;1;1;;void validateJson(String json) throws Exception.
false;public;1;68;;@Override public void validateJson(String json) throws Exception {     final Map<String, JsonNode> idToNode = new HashMap<>().     // validate the produced JSON     ObjectMapper m = new ObjectMapper().     JsonNode rootNode = m.readTree(json).     JsonNode idField = rootNode.get("jid").     JsonNode nameField = rootNode.get("name").     JsonNode arrayField = rootNode.get("nodes").     assertNotNull(idField).     assertNotNull(nameField).     assertNotNull(arrayField).     assertTrue(idField.isTextual()).     assertTrue(nameField.isTextual()).     assertTrue(arrayField.isArray()).     ArrayNode array = (ArrayNode) arrayField.     Iterator<JsonNode> iter = array.elements().     while (iter.hasNext()) {         JsonNode vertex = iter.next().         JsonNode vertexIdField = vertex.get("id").         JsonNode parallelismField = vertex.get("parallelism").         JsonNode contentsFields = vertex.get("description").         JsonNode operatorField = vertex.get("operator").         assertNotNull(vertexIdField).         assertTrue(vertexIdField.isTextual()).         assertNotNull(parallelismField).         assertTrue(parallelismField.isNumber()).         assertNotNull(contentsFields).         assertTrue(contentsFields.isTextual()).         assertNotNull(operatorField).         assertTrue(operatorField.isTextual()).         if (contentsFields.asText().startsWith("Sync")) {             assertEquals(1, parallelismField.asInt()).         } else {             assertEquals(expectedParallelism, parallelismField.asInt()).         }         idToNode.put(vertexIdField.asText(), vertex).     }     assertEquals(numNodes, idToNode.size()).     // check that all inputs are contained     for (JsonNode node : idToNode.values()) {         JsonNode inputsField = node.get("inputs").         if (inputsField != null) {             Iterator<JsonNode> inputsIter = inputsField.elements().             while (inputsIter.hasNext()) {                 JsonNode inputNode = inputsIter.next().                 JsonNode inputIdField = inputNode.get("id").                 assertNotNull(inputIdField).                 assertTrue(inputIdField.isTextual()).                 String inputIdString = inputIdField.asText().                 assertTrue(idToNode.containsKey(inputIdString)).             }         }     } }
false;public;0;3;;@Override public void startNewSession() throws Exception { }
false;public;1;20;;@Override public JobExecutionResult execute(String jobName) throws Exception {     Plan plan = createProgramPlan(jobName).     Optimizer pc = new Optimizer(new Configuration()).     OptimizedPlan op = pc.compile(plan).     JobGraphGenerator jgg = new JobGraphGenerator().     JobGraph jobGraph = jgg.compileJobGraph(op).     String jsonPlan = JsonPlanGenerator.generatePlan(jobGraph).     // first check that the JSON is valid     JsonParser parser = new JsonFactory().createJsonParser(jsonPlan).     while (parser.nextToken() != null) {     }     validator.validateJson(jsonPlan).     throw new AbortError(). }
false;public;0;4;;@Override public String getExecutionPlan() throws Exception {     throw new UnsupportedOperationException(). }
false;public;0;6;;@Override public ExecutionEnvironment createExecutionEnvironment() {     ExecutionEnvironment env = new TestingExecutionEnvironment(validator).     env.setParallelism(defaultParallelism).     return env. }
false;public,static;2;10;;public static void setAsNext(final JsonValidator validator, final int defaultParallelism) {     initializeContextEnvironment(new ExecutionEnvironmentFactory() {          @Override         public ExecutionEnvironment createExecutionEnvironment() {             ExecutionEnvironment env = new TestingExecutionEnvironment(validator).             env.setParallelism(defaultParallelism).             return env.         }     }). }
