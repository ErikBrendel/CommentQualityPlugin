commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testMapCancelling() throws Exception {     executeTask(new IdentityMapper<Integer>()). }
false;public;0;4;;@Test public void testSlowMapCancelling() throws Exception {     executeTask(new DelayingIdentityMapper<Integer>()). }
false;public;0;4;;@Test public void testMapWithLongCancellingResponse() throws Exception {     executeTask(new LongCancelTimeIdentityMapper<Integer>()). }
false;public;0;4;;@Test public void testMapPriorToFirstRecordReading() throws Exception {     executeTask(new StuckInOpenIdentityMapper<Integer>()). }
false;public;1;12;;public void executeTask(MapFunction<Integer, Integer> mapper) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.createInput(new InfiniteIntegerInputFormat(false)).map(mapper).output(new DiscardingOutputFormat<Integer>()).     env.setParallelism(PARALLELISM).     runAndCancelJob(env.createProgramPlan(), 5 * 1000, 10 * 1000). }
false;public;1;4;;@Override public IN map(IN value) throws Exception {     return value. }
false;public;1;5;;@Override public IN map(IN value) throws Exception {     Thread.sleep(WAIT_TIME_PER_VALUE).     return value. }
false;public;1;13;;@Override public IN map(IN value) throws Exception {     final long start = System.currentTimeMillis().     long remaining = WAIT_TIME_PER_VALUE.     do {         try {             Thread.sleep(remaining).         } catch (InterruptedException iex) {         }     } while ((remaining = WAIT_TIME_PER_VALUE - System.currentTimeMillis() + start) > 0).     return value. }
false;public;1;6;;@Override public void open(Configuration parameters) throws Exception {     synchronized (this) {         wait().     } }
false;public;1;4;;@Override public IN map(IN value) throws Exception {     return value. }
