commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {     out.collect(getRuntimeContext().getIndexOfThisSubtask()). }
true;public;0;28;/**  * Ensure that the program parallelism can be set even if the configuration is supplied.  */ ;/**  * Ensure that the program parallelism can be set even if the configuration is supplied.  */ @Test public void testUserSpecificParallelism() throws Exception {     Configuration config = new Configuration().     config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT).     final URI restAddress = MINI_CLUSTER_RESOURCE.getRestAddres().     final String hostname = restAddress.getHost().     final int port = restAddress.getPort().     final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(hostname, port, config).     env.setParallelism(USER_DOP).     env.getConfig().disableSysoutLogging().     DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat()).rebalance().mapPartition(new RichMapPartitionFunction<Integer, Integer>() {          @Override         public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {             out.collect(getRuntimeContext().getIndexOfThisSubtask()).         }     }).     List<Integer> resultCollection = result.collect().     assertEquals(USER_DOP, resultCollection.size()). }
false;public;1;5;;@Override public GenericInputSplit[] createInputSplits(int numSplits) throws IOException {     assertEquals(USER_DOP, numSplits).     return super.createInputSplits(numSplits). }
false;public;0;4;;@Override public boolean reachedEnd() {     return emitted. }
false;public;1;8;;@Override public Integer nextRecord(Integer reuse) {     if (emitted) {         return null.     }     emitted = true.     return 1. }
