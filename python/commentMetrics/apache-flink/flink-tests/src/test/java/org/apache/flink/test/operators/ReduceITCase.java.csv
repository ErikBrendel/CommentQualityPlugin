commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testReduceOnTuplesWithKeyFieldSelector() throws Exception {     /* 		 * Reduce on tuples with key field selector 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> reduceDs = ds.groupBy(1).reduce(new Tuple3Reduce("B-)")).     List<Tuple3<Integer, Long, String>> result = reduceDs.collect().     String expected = "1,1,Hi\n" + "5,2,B-)\n" + "15,3,B-)\n" + "34,4,B-)\n" + "65,5,B-)\n" + "111,6,B-)\n".     compareResultAsTuples(result, expected). }
false;public;0;32;;@Test public void testReduceOnTupleWithMultipleKeyFieldSelectors() throws Exception {     /* 		 * Reduce on tuples with multiple key field selectors 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> reduceDs = ds.groupBy(4, 0).reduce((in1, in2) -> {         Tuple5<Integer, Long, Integer, String, Long> out = new Tuple5<>().         out.setFields(in1.f0, in1.f1 + in2.f1, 0, "P-)", in1.f4).         return out.     }).     List<Tuple5<Integer, Long, Integer, String, Long>> result = reduceDs.collect().     String expected = "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n" + "3,9,0,P-),2\n" + "3,6,5,BCD,3\n" + "4,17,0,P-),1\n" + "4,17,0,P-),2\n" + "5,11,10,GHI,1\n" + "5,29,0,P-),2\n" + "5,25,0,P-),3\n".     compareResultAsTuples(result, expected). }
false;public;0;23;;@Test public void testReduceOnTuplesWithKeyExtractor() throws Exception {     /* 		 * Reduce on tuples with key extractor 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> reduceDs = ds.groupBy(new KeySelector1()).reduce(new Tuple3Reduce("B-)")).     List<Tuple3<Integer, Long, String>> result = reduceDs.collect().     String expected = "1,1,Hi\n" + "5,2,B-)\n" + "15,3,B-)\n" + "34,4,B-)\n" + "65,5,B-)\n" + "111,6,B-)\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public Long getKey(Tuple3<Integer, Long, String> in) {     return in.f1. }
false;public;0;23;;@Test public void testReduceOnCustomTypeWithKeyExtractor() throws Exception {     /* 		 * Reduce on custom type with key extractor 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds = CollectionDataSets.getCustomTypeDataSet(env).     DataSet<CustomType> reduceDs = ds.groupBy(new KeySelector2()).reduce(new CustomTypeReduce()).     List<CustomType> result = reduceDs.collect().     String expected = "1,0,Hi\n" + "2,3,Hello!\n" + "3,12,Hello!\n" + "4,30,Hello!\n" + "5,60,Hello!\n" + "6,105,Hello!\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public Integer getKey(CustomType in) {     return in.myInt. }
false;public;0;18;;@Test public void testAllReduceForTuple() throws Exception {     /* 		 * All-reduce for tuple 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> reduceDs = ds.reduce(new AllAddingTuple3Reduce()).     List<Tuple3<Integer, Long, String>> result = reduceDs.collect().     String expected = "231,91,Hello World\n".     compareResultAsTuples(result, expected). }
false;public;0;18;;@Test public void testAllReduceForCustomTypes() throws Exception {     /* 		 * All-reduce for custom types 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds = CollectionDataSets.getCustomTypeDataSet(env).     DataSet<CustomType> reduceDs = ds.reduce(new AllAddingCustomTypeReduce()).     List<CustomType> result = reduceDs.collect().     String expected = "91,210,Hello!".     compareResultAsText(result, expected). }
false;public;0;25;;@Test public void testReduceWithBroadcastSet() throws Exception {     /* 		 * Reduce with broadcast set 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> intDs = CollectionDataSets.getIntegerDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> reduceDs = ds.groupBy(1).reduce(new BCTuple3Reduce()).withBroadcastSet(intDs, "ints").     List<Tuple3<Integer, Long, String>> result = reduceDs.collect().     String expected = "1,1,Hi\n" + "5,2,55\n" + "15,3,55\n" + "34,4,55\n" + "65,5,55\n" + "111,6,55\n".     compareResultAsTuples(result, expected). }
false;public;0;28;;@Test public void testReduceATupleReturningKeySelector() throws Exception {     /* 		 * Reduce with a Tuple-returning KeySelector 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> reduceDs = ds.groupBy(new KeySelector3()).reduce(new Tuple5Reduce()).     List<Tuple5<Integer, Long, Integer, String, Long>> result = reduceDs.collect().     String expected = "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n" + "3,9,0,P-),2\n" + "3,6,5,BCD,3\n" + "4,17,0,P-),1\n" + "4,17,0,P-),2\n" + "5,11,10,GHI,1\n" + "5,29,0,P-),2\n" + "5,25,0,P-),3\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public Tuple2<Integer, Long> getKey(Tuple5<Integer, Long, Integer, String, Long> t) {     return new Tuple2<Integer, Long>(t.f0, t.f4). }
false;public;0;28;;@Test public void testReduceOnTupleWithMultipleKeyExpressions() throws Exception {     /* 		 * Case 2 with String-based field expression 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> reduceDs = ds.groupBy("f4", "f0").reduce(new Tuple5Reduce()).     List<Tuple5<Integer, Long, Integer, String, Long>> result = reduceDs.collect().     String expected = "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n" + "3,9,0,P-),2\n" + "3,6,5,BCD,3\n" + "4,17,0,P-),1\n" + "4,17,0,P-),2\n" + "5,11,10,GHI,1\n" + "5,29,0,P-),2\n" + "5,25,0,P-),3\n".     compareResultAsTuples(result, expected). }
false;public;0;28;;@Test public void testReduceOnTupleWithMultipleKeyExpressionsWithHashHint() throws Exception {     /* 		 * Case 2 with String-based field expression 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> reduceDs = ds.groupBy("f4", "f0").reduce(new Tuple5Reduce()).setCombineHint(CombineHint.HASH).     List<Tuple5<Integer, Long, Integer, String, Long>> result = reduceDs.collect().     String expected = "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n" + "3,9,0,P-),2\n" + "3,6,5,BCD,3\n" + "4,17,0,P-),1\n" + "4,17,0,P-),2\n" + "5,11,10,GHI,1\n" + "5,29,0,P-),2\n" + "5,25,0,P-),3\n".     compareResultAsTuples(result, expected). }
false;public;0;17;;@Test public void testSupportForDataAndEnumSerialization() throws Exception {     /**      * Test support for Date and enum serialization      */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<PojoWithDateAndEnum> ds = env.generateSequence(0, 2).map(new Mapper1()).     ds = ds.union(CollectionDataSets.getPojoWithDateAndEnum(env)).     DataSet<String> res = ds.groupBy("group").reduceGroup(new GroupReducer1()).     List<String> result = res.collect().     String expected = "ok\nok".     compareResultAsText(result, expected). }
false;public;1;25;;@Override public PojoWithDateAndEnum map(Long value) throws Exception {     int l = value.intValue().     switch(l) {         case 0:             PojoWithDateAndEnum one = new PojoWithDateAndEnum().             one.group = "a".             one.date = new Date(666).             one.cat = CollectionDataSets.Category.CAT_A.             return one.         case 1:             PojoWithDateAndEnum two = new PojoWithDateAndEnum().             two.group = "a".             two.date = new Date(666).             two.cat = CollectionDataSets.Category.CAT_A.             return two.         case 2:             PojoWithDateAndEnum three = new PojoWithDateAndEnum().             three.group = "b".             three.date = new Date(666).             three.cat = CollectionDataSets.Category.CAT_B.             return three.     }     throw new RuntimeException("Unexpected value for l=" + l). }
false;public;2;15;;@Override public void reduce(Iterable<PojoWithDateAndEnum> values, Collector<String> out) throws Exception {     for (PojoWithDateAndEnum val : values) {         if (val.cat == CollectionDataSets.Category.CAT_A) {             Assert.assertEquals("a", val.group).         } else if (val.cat == CollectionDataSets.Category.CAT_B) {             Assert.assertEquals("b", val.group).         } else {             Assert.fail("error. Cat = " + val.cat).         }         Assert.assertEquals(666, val.date.getTime()).     }     out.collect("ok"). }
false;public;2;12;;@Override public Tuple3<Integer, Long, String> reduce(Tuple3<Integer, Long, String> in1, Tuple3<Integer, Long, String> in2) throws Exception {     if (f2Replace == null) {         out.setFields(in1.f0 + in2.f0, in1.f1, in1.f2).     } else {         out.setFields(in1.f0 + in2.f0, in1.f1, this.f2Replace).     }     return out. }
false;public;2;9;;@Override public Tuple5<Integer, Long, Integer, String, Long> reduce(Tuple5<Integer, Long, Integer, String, Long> in1, Tuple5<Integer, Long, Integer, String, Long> in2) throws Exception {     out.setFields(in1.f0, in1.f1 + in2.f1, 0, "P-)", in1.f4).     return out. }
false;public;2;9;;@Override public CustomType reduce(CustomType in1, CustomType in2) throws Exception {     out.myInt = in1.myInt.     out.myLong = in1.myLong + in2.myLong.     out.myString = "Hello!".     return out. }
false;public;2;8;;@Override public Tuple3<Integer, Long, String> reduce(Tuple3<Integer, Long, String> in1, Tuple3<Integer, Long, String> in2) throws Exception {     out.setFields(in1.f0 + in2.f0, in1.f1 + in2.f1, "Hello World").     return out. }
false;public;2;9;;@Override public CustomType reduce(CustomType in1, CustomType in2) throws Exception {     out.myInt = in1.myInt + in2.myInt.     out.myLong = in1.myLong + in2.myLong.     out.myString = "Hello!".     return out. }
false;public;1;11;;@Override public void open(Configuration config) {     Collection<Integer> ints = this.getRuntimeContext().getBroadcastVariable("ints").     int sum = 0.     for (Integer i : ints) {         sum += i.     }     f2Replace = sum + "". }
false;public;2;8;;@Override public Tuple3<Integer, Long, String> reduce(Tuple3<Integer, Long, String> in1, Tuple3<Integer, Long, String> in2) throws Exception {     out.setFields(in1.f0 + in2.f0, in1.f1, this.f2Replace).     return out. }
