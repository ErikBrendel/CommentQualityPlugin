commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> identityMapDs = ds.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>()).returns(new TypeHint<Tuple3<Integer, Long, String>>() {     }).     List<Tuple3<Integer, Long, String>> result = identityMapDs.collect().     String expectedResult = "(2,2,Hello)\n" + "(3,2,Hello world)\n" + "(1,1,Hi)\n".     compareResultAsText(result, expectedResult). }
false;public;0;19;;@Test public void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> identityMapDs = ds.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>()).returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)).     List<Tuple3<Integer, Long, String>> result = identityMapDs.collect().     String expectedResult = "(2,2,Hello)\n" + "(3,2,Hello world)\n" + "(1,1,Hi)\n".     compareResultAsText(result, expectedResult). }
false;public;0;17;;@Test public void testFlatMapWithClassTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> identityMapDs = ds.flatMap(new FlatMapper<Tuple3<Integer, Long, String>, Integer>()).returns(Integer.class).     List<Integer> result = identityMapDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;21;;@Test public void testJoinWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds2 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds1.join(ds2).where(0).equalTo(0).with(new Joiner<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;21;;@Test public void testFlatJoinWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds2 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds1.join(ds2).where(0).equalTo(0).with(new FlatJoiner<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;18;;@Test public void testUnsortedGroupReduceWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds.groupBy(0).reduceGroup(new GroupReducer<Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;19;;@Test public void testSortedGroupReduceWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds.groupBy(0).sortGroup(0, Order.ASCENDING).reduceGroup(new GroupReducer<Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;18;;@Test public void testCombineGroupWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds.groupBy(0).combineGroup(new GroupCombiner<Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;0;21;;@Test public void testCoGroupWithTypeInformationTypeHint() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds2 = CollectionDataSets.getSmall3TupleDataSet(env).     DataSet<Integer> resultDs = ds1.coGroup(ds2).where(0).equalTo(0).with(new CoGrouper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>, Integer>()).returns(BasicTypeInfo.INT_TYPE_INFO).     List<Integer> result = resultDs.collect().     String expectedResult = "2\n" + "3\n" + "1\n".     compareResultAsText(result, expectedResult). }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public V map(T value) throws Exception {     return (V) value. }
false;public;2;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) @Override public void flatMap(T value, Collector<V> out) throws Exception {     out.collect((V) ((Tuple3) value).f0). }
false;public;2;4;;@Override public OUT join(IN1 first, IN2 second) throws Exception {     return (OUT) ((Tuple3) first).f0. }
false;public;3;4;;@Override public void join(IN1 first, IN2 second, Collector<OUT> out) throws Exception {     out.collect((OUT) ((Tuple3) first).f0). }
false;public;2;4;;@Override public void reduce(Iterable<IN> values, Collector<OUT> out) throws Exception {     out.collect((OUT) ((Tuple3) values.iterator().next()).f0). }
false;public;2;4;;@Override public void combine(Iterable<IN> values, Collector<OUT> out) throws Exception {     out.collect((OUT) ((Tuple3) values.iterator().next()).f0). }
false;public;3;4;;@Override public void coGroup(Iterable<IN1> first, Iterable<IN2> second, Collector<OUT> out) throws Exception {     out.collect((OUT) ((Tuple3) first.iterator().next()).f0). }
