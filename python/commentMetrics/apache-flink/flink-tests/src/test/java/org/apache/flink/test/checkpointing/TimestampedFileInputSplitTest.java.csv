commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testSplitEquality() {     TimestampedFileInputSplit richFirstSplit = new TimestampedFileInputSplit(10, 2, new Path("test"), 0, 100, null).     TimestampedFileInputSplit richSecondSplit = new TimestampedFileInputSplit(10, 2, new Path("test"), 0, 100, null).     Assert.assertEquals(richFirstSplit, richSecondSplit).     TimestampedFileInputSplit richModSecondSplit = new TimestampedFileInputSplit(11, 2, new Path("test"), 0, 100, null).     Assert.assertNotEquals(richSecondSplit, richModSecondSplit).     TimestampedFileInputSplit richThirdSplit = new TimestampedFileInputSplit(10, 2, new Path("test/test1"), 0, 100, null).     Assert.assertEquals(richThirdSplit.getModificationTime(), 10).     Assert.assertNotEquals(richFirstSplit, richThirdSplit).     TimestampedFileInputSplit richThirdSplitCopy = new TimestampedFileInputSplit(10, 2, new Path("test/test1"), 0, 100, null).     Assert.assertEquals(richThirdSplitCopy, richThirdSplit). }
false;public;0;29;;@Test public void testSplitComparison() {     TimestampedFileInputSplit richFirstSplit = new TimestampedFileInputSplit(0, 3, new Path("test/test1"), 0, 100, null).     TimestampedFileInputSplit richSecondSplit = new TimestampedFileInputSplit(10, 2, new Path("test/test2"), 0, 100, null).     TimestampedFileInputSplit richThirdSplit = new TimestampedFileInputSplit(10, 1, new Path("test/test2"), 0, 100, null).     TimestampedFileInputSplit richForthSplit = new TimestampedFileInputSplit(11, 0, new Path("test/test3"), 0, 100, null).     TimestampedFileInputSplit richFifthSplit = new TimestampedFileInputSplit(11, 1, new Path("test/test3"), 0, 100, null).     // smaller mod time     Assert.assertTrue(richFirstSplit.compareTo(richSecondSplit) < 0).     // lexicographically on the path     Assert.assertTrue(richThirdSplit.compareTo(richFifthSplit) < 0).     // same mod time, same file so smaller split number first     Assert.assertTrue(richThirdSplit.compareTo(richSecondSplit) < 0).     // smaller modification time first     Assert.assertTrue(richThirdSplit.compareTo(richForthSplit) < 0). }
false;public;0;10;;@Test public void testIllegalArgument() {     try {         // invalid modification time         new TimestampedFileInputSplit(-10, 2, new Path("test"), 0, 100, null).     } catch (Exception e) {         if (!(e instanceof IllegalArgumentException)) {             Assert.fail(e.getMessage()).         }     } }
false;public;0;44;;@Test public void testPriorityQ() {     TimestampedFileInputSplit richFirstSplit = new TimestampedFileInputSplit(0, 3, new Path("test/test1"), 0, 100, null).     TimestampedFileInputSplit richSecondSplit = new TimestampedFileInputSplit(10, 2, new Path("test/test2"), 0, 100, null).     TimestampedFileInputSplit richThirdSplit = new TimestampedFileInputSplit(10, 1, new Path("test/test2"), 0, 100, null).     TimestampedFileInputSplit richForthSplit = new TimestampedFileInputSplit(11, 0, new Path("test/test3"), 0, 100, null).     TimestampedFileInputSplit richFifthSplit = new TimestampedFileInputSplit(11, 1, new Path("test/test3"), 0, 100, null).     Queue<TimestampedFileInputSplit> pendingSplits = new PriorityQueue<>().     pendingSplits.add(richSecondSplit).     pendingSplits.add(richForthSplit).     pendingSplits.add(richFirstSplit).     pendingSplits.add(richFifthSplit).     pendingSplits.add(richFifthSplit).     pendingSplits.add(richThirdSplit).     List<TimestampedFileInputSplit> actualSortedSplits = new ArrayList<>().     while (true) {         actualSortedSplits.add(pendingSplits.poll()).         if (pendingSplits.isEmpty()) {             break.         }     }     List<TimestampedFileInputSplit> expectedSortedSplits = new ArrayList<>().     expectedSortedSplits.add(richFirstSplit).     expectedSortedSplits.add(richThirdSplit).     expectedSortedSplits.add(richSecondSplit).     expectedSortedSplits.add(richForthSplit).     expectedSortedSplits.add(richFifthSplit).     expectedSortedSplits.add(richFifthSplit).     Assert.assertArrayEquals(expectedSortedSplits.toArray(), actualSortedSplits.toArray()). }
