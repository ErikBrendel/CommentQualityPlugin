commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Tuple2<Integer, Double> map(Integer value) throws Exception {     return new Tuple2<Integer, Double>(value, value * 0.5). }
false;public,static;1;20;;public static void main(String[] args) throws Exception {     Configuration config = new Configuration().     config.setString(AkkaOptions.ASK_TIMEOUT, "5 s").     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataStream<Integer> data = env.createInput(new CustomInputFormat()).     data.map(new MapFunction<Integer, Tuple2<Integer, Double>>() {          @Override         public Tuple2<Integer, Double> map(Integer value) throws Exception {             return new Tuple2<Integer, Double>(value, value * 0.5).         }     }).addSink(new NoOpSink()).     env.execute(). }
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;1;4;;@Override public BaseStatistics getStatistics(BaseStatistics cachedStatistics) {     return null. }
false;public;1;8;;@Override public CustomInputSplit[] createInputSplits(int minNumSplits) {     CustomInputSplit[] splits = new CustomInputSplit[minNumSplits].     for (int i = 0. i < minNumSplits. i++) {         splits[i] = new CustomInputSplit(i).     }     return splits. }
false;public;1;4;;@Override public InputSplitAssigner getInputSplitAssigner(CustomInputSplit[] inputSplits) {     return new CustomSplitAssigner(inputSplits). }
false;public;1;4;;@Override public void open(CustomInputSplit split) {     this.value = split.getSplitNumber(). }
false;public;0;4;;@Override public boolean reachedEnd() {     return this.value == null. }
false;public;1;6;;@Override public Integer nextRecord(Integer reuse) {     Integer val = this.value.     this.value = null.     return val. }
false;public;0;2;;@Override public void close() { }
false;public;0;4;;@Override public TypeInformation<Integer> getProducedType() {     return BasicTypeInfo.INT_TYPE_INFO. }
false;public;0;4;;@Override public int getSplitNumber() {     return this.splitNumber. }
false;public;2;11;;@Override public InputSplit getNextInputSplit(String host, int taskId) {     synchronized (this) {         int size = remainingSplits.size().         if (size > 0) {             return remainingSplits.remove(size - 1).         } else {             return null.         }     } }
false;public;1;3;;@Override public void invoke(Tuple2<Integer, Double> value) throws Exception { }
