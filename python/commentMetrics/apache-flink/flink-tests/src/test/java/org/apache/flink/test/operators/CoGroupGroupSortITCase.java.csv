commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;39;;@Override protected void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<Long, Long>> input1 = env.fromElements(new Tuple2<Long, Long>(0L, 5L), new Tuple2<Long, Long>(0L, 4L), new Tuple2<Long, Long>(0L, 3L), new Tuple2<Long, Long>(0L, 2L), new Tuple2<Long, Long>(0L, 1L), new Tuple2<Long, Long>(1L, 10L), new Tuple2<Long, Long>(1L, 8L), new Tuple2<Long, Long>(1L, 9L), new Tuple2<Long, Long>(1L, 7L)).     DataSet<TestPojo> input2 = env.fromElements(new TestPojo(0L, 10L, 3L), new TestPojo(0L, 8L, 3L), new TestPojo(0L, 10L, 1L), new TestPojo(0L, 9L, 0L), new TestPojo(0L, 8L, 2L), new TestPojo(0L, 8L, 4L), new TestPojo(1L, 10L, 3L), new TestPojo(1L, 8L, 3L), new TestPojo(1L, 10L, 1L), new TestPojo(1L, 9L, 0L), new TestPojo(1L, 8L, 2L), new TestPojo(1L, 8L, 4L)).     input1.coGroup(input2).where(1).equalTo("b").sortFirstGroup(0, Order.DESCENDING).sortSecondGroup("c", Order.ASCENDING).sortSecondGroup("a", Order.DESCENDING).with(new ValidatingCoGroup()).output(new DiscardingOutputFormat<NullValue>()).     env.execute(). }
false;public;3;26;;@Override public void coGroup(Iterable<Tuple2<Long, Long>> first, Iterable<TestPojo> second, Collector<NullValue> out) throws Exception {     // validate the tuple input, field 1, descending     {         long lastValue = Long.MAX_VALUE.         for (Tuple2<Long, Long> t : first) {             long current = t.f1.             Assert.assertTrue(current <= lastValue).             lastValue = current.         }     }     // validate the pojo input     {         TestPojo lastValue = new TestPojo(Long.MAX_VALUE, 0, Long.MIN_VALUE).         for (TestPojo current : second) {             Assert.assertTrue(current.c >= lastValue.c).             Assert.assertTrue(current.c != lastValue.c || current.a <= lastValue.a).             lastValue = current.         }     } }
