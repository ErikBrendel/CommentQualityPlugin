commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void main(String[] args) throws Exception {     new OverwriteObjects().run(). }
false;public;0;17;;public void run() throws Exception {     LOG.info("Random seed = {}", RANDOM_SEED).     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     for (int parallelism = MAX_PARALLELISM. parallelism > 0. parallelism--) {         LOG.info("Parallelism = {}", parallelism).         env.setParallelism(parallelism).         testReduce(env).         testGroupedReduce(env).         testJoin(env).         testCross(env).     } }
false;public;1;26;;// -------------------------------------------------------------------------------------------- public void testReduce(ExecutionEnvironment env) throws Exception {     /* 		 * Test ChainedAllReduceDriver 		 */     LOG.info("Testing reduce").     env.getConfig().enableObjectReuse().     Tuple2<IntValue, IntValue> enabledResult = getDataSet(env).reduce(new OverwriteObjectsReduce(false)).collect().get(0).     env.getConfig().disableObjectReuse().     Tuple2<IntValue, IntValue> disabledResult = getDataSet(env).reduce(new OverwriteObjectsReduce(false)).collect().get(0).     Assert.assertEquals(NUMBER_OF_ELEMENTS, enabledResult.f1.getValue()).     Assert.assertEquals(NUMBER_OF_ELEMENTS, disabledResult.f1.getValue()).     Assert.assertEquals(disabledResult, enabledResult). }
false;public;1;27;;public void testGroupedReduce(ExecutionEnvironment env) throws Exception {     /* 		 * Test ReduceCombineDriver and ReduceDriver 		 */     LOG.info("Testing grouped reduce").     env.getConfig().enableObjectReuse().     List<Tuple2<IntValue, IntValue>> enabledResult = getDataSet(env).groupBy(0).reduce(new OverwriteObjectsReduce(true)).collect().     Collections.sort(enabledResult, comparator).     env.getConfig().disableObjectReuse().     List<Tuple2<IntValue, IntValue>> disabledResult = getDataSet(env).groupBy(0).reduce(new OverwriteObjectsReduce(true)).collect().     Collections.sort(disabledResult, comparator).     Assert.assertThat(disabledResult, is(enabledResult)). }
false;public;2;4;;@Override public Tuple2<IntValue, IntValue> reduce(Tuple2<IntValue, IntValue> a, Tuple2<IntValue, IntValue> b) throws Exception {     return scrambler.scramble(a, b). }
false;public;1;133;;// -------------------------------------------------------------------------------------------- public void testJoin(ExecutionEnvironment env) throws Exception {     for (JoinHint joinHint : JoinHint.values()) {         if (joinHint == JoinHint.OPTIMIZER_CHOOSES) {             continue.         }         List<Tuple2<IntValue, IntValue>> enabledResult.         List<Tuple2<IntValue, IntValue>> disabledResult.         // Inner join         LOG.info("Testing inner join with JoinHint = {}", joinHint).         env.getConfig().enableObjectReuse().         enabledResult = getDataSet(env).join(getDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().         Collections.sort(enabledResult, comparator).         env.getConfig().disableObjectReuse().         disabledResult = getDataSet(env).join(getDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().         Collections.sort(disabledResult, comparator).         Assert.assertEquals("JoinHint=" + joinHint, disabledResult, enabledResult).         if (joinHint != JoinHint.BROADCAST_HASH_FIRST) {             LOG.info("Testing left outer join with JoinHint = {}", joinHint).             env.getConfig().enableObjectReuse().             enabledResult = getDataSet(env).leftOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(enabledResult, comparator).             env.getConfig().disableObjectReuse().             disabledResult = getDataSet(env).leftOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(disabledResult, comparator).             Assert.assertThat("JoinHint=" + joinHint, disabledResult, is(enabledResult)).         }         if (joinHint != JoinHint.BROADCAST_HASH_SECOND) {             LOG.info("Testing right outer join with JoinHint = {}", joinHint).             env.getConfig().enableObjectReuse().             enabledResult = getDataSet(env).rightOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(enabledResult, comparator).             env.getConfig().disableObjectReuse().             disabledResult = getDataSet(env).rightOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(disabledResult, comparator).             Assert.assertThat("JoinHint=" + joinHint, disabledResult, is(enabledResult)).         }         if (joinHint != JoinHint.BROADCAST_HASH_FIRST && joinHint != JoinHint.BROADCAST_HASH_SECOND) {             LOG.info("Testing full outer join with JoinHint = {}", joinHint).             env.getConfig().enableObjectReuse().             enabledResult = getDataSet(env).fullOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(enabledResult, comparator).             env.getConfig().disableObjectReuse().             disabledResult = getDataSet(env).fullOuterJoin(getFilteredDataSet(env), joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()).collect().             Collections.sort(disabledResult, comparator).             Assert.assertThat("JoinHint=" + joinHint, disabledResult, is(enabledResult)).         }     } }
false;public;2;4;;@Override public Tuple2<IntValue, IntValue> join(Tuple2<IntValue, IntValue> a, Tuple2<IntValue, IntValue> b) throws Exception {     return scrambler.scramble(a, b). }
false;public;1;46;;// -------------------------------------------------------------------------------------------- public void testCross(ExecutionEnvironment env) throws Exception {     /* 		 * Test CrossDriver 		 */     LOG.info("Testing cross").     DataSet<Tuple2<IntValue, IntValue>> small = getDataSet(env, 100, 20).     DataSet<Tuple2<IntValue, IntValue>> large = getDataSet(env, 10000, 2000).     // test NESTEDLOOP_BLOCKED_OUTER_FIRST and NESTEDLOOP_BLOCKED_OUTER_SECOND with object reuse enabled     env.getConfig().enableObjectReuse().     List<Tuple2<IntValue, IntValue>> enabledResultWithHuge = small.crossWithHuge(large).with(new OverwriteObjectsCross()).collect().     List<Tuple2<IntValue, IntValue>> enabledResultWithTiny = small.crossWithTiny(large).with(new OverwriteObjectsCross()).collect().     Assert.assertThat(enabledResultWithHuge, is(enabledResultWithTiny)).     // test NESTEDLOOP_BLOCKED_OUTER_FIRST and NESTEDLOOP_BLOCKED_OUTER_SECOND with object reuse disabled     env.getConfig().disableObjectReuse().     List<Tuple2<IntValue, IntValue>> disabledResultWithHuge = small.crossWithHuge(large).with(new OverwriteObjectsCross()).collect().     List<Tuple2<IntValue, IntValue>> disabledResultWithTiny = small.crossWithTiny(large).with(new OverwriteObjectsCross()).collect().     Assert.assertThat(disabledResultWithHuge, is(disabledResultWithTiny)).     // verify match between object reuse enabled and disabled     Assert.assertThat(disabledResultWithHuge, is(enabledResultWithHuge)).     Assert.assertThat(disabledResultWithTiny, is(enabledResultWithTiny)). }
false;public;2;4;;@Override public Tuple2<IntValue, IntValue> cross(Tuple2<IntValue, IntValue> a, Tuple2<IntValue, IntValue> b) throws Exception {     return scrambler.scramble(a, b). }
false;private;3;5;;// -------------------------------------------------------------------------------------------- private DataSet<Tuple2<IntValue, IntValue>> getDataSet(ExecutionEnvironment env, int numberOfElements, int keyRange) {     return env.fromCollection(new TupleIntValueIntValueIterator(numberOfElements, keyRange), TupleTypeInfo.<Tuple2<IntValue, IntValue>>getBasicAndBasicValueTupleTypeInfo(IntValue.class, IntValue.class)). }
false;private;1;3;;private DataSet<Tuple2<IntValue, IntValue>> getDataSet(ExecutionEnvironment env) {     return getDataSet(env, NUMBER_OF_ELEMENTS, KEY_RANGE). }
false;public;1;4;;@Override public boolean filter(Tuple2<IntValue, IntValue> value) throws Exception {     return (value.f0.getValue() % 2) == 0. }
false;private;1;9;;private DataSet<Tuple2<IntValue, IntValue>> getFilteredDataSet(ExecutionEnvironment env) {     return getDataSet(env).filter(new FilterFunction<Tuple2<IntValue, IntValue>>() {          @Override         public boolean filter(Tuple2<IntValue, IntValue> value) throws Exception {             return (value.f0.getValue() % 2) == 0.         }     }). }
false;public;0;4;;@Override public boolean hasNext() {     return numElements > 0. }
false;public;0;7;;@Override public Tuple2<IntValue, IntValue> next() {     numElements--.     ret.f0.setValue(rnd.nextInt(keyRange)).     ret.f1.setValue(1).     return ret. }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;public;2;10;;@Override public int compare(Tuple2<T0, T1> o1, Tuple2<T0, T1> o2) {     int cmp = o1.f0.compareTo(o2.f0).     if (cmp != 0) {         return cmp.     }     return o1.f1.compareTo(o2.f1). }
false;public;2;72;;public Tuple2<IntValue, IntValue> scramble(Tuple2<IntValue, IntValue> a, Tuple2<IntValue, IntValue> b) {     /* 			 * Scramble all fields except returned object's key 			 * 			 * Randomly select among four return values: 			 * 			 *   0) return first object (a) 			 *   1) return second object (b) 			 *   2) return new object 			 *   3) return reused local object (d) 			 */     Random random = new Random(RANDOM_SEED).     if (a != null && b != null) {         random.setSeed((((long) a.f0.getValue()) << 32) + b.f0.getValue()).     } else if (a != null) {         random.setSeed(a.f0.getValue()).     } else if (b != null) {         random.setSeed(b.f0.getValue()).     } else {         throw new RuntimeException("One of a or b should be not null").     }     Tuple2<IntValue, IntValue> result.     switch(random.nextInt(4)) {         case 0:             result = a.             break.         case 1:             result = b.             break.         case 2:             result = d.             break.         case 3:             result = new Tuple2<>(new IntValue(), new IntValue()).             break.         default:             throw new RuntimeException("Unexpected value in switch statement").     }     if (a == null || b == null) {         // null values are seen when processing outer joins         if (result == null) {             result = d.         }         if (a == null) {             b.f0.copyTo(result.f0).             b.f1.copyTo(result.f1).         } else {             a.f0.copyTo(result.f0).             a.f1.copyTo(result.f1).         }     } else {         if (keyed) {             result.f0.setValue(a.f0.getValue()).         } else {             result.f0.setValue(a.f0.getValue() + b.f0.getValue()).         }         result.f1.setValue(a.f1.getValue() + b.f1.getValue()).     }     scrambleIfNot(a, result).     scrambleIfNot(b, result).     scrambleIfNot(d, result).     return result. }
false;private;2;8;;private void scrambleIfNot(Tuple2<IntValue, IntValue> t, Object o) {     // comparison object, then scramble the fields     if (t != null && t != o) {         t.f0.setValue(random.nextInt()).         t.f1.setValue(random.nextInt()).     } }
