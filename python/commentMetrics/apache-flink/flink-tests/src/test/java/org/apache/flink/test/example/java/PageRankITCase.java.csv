commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void before() throws Exception {     final File folder = tempFolder.newFolder().     final File resultFile = new File(folder, UUID.randomUUID().toString()).     resultPath = resultFile.toURI().toString().     File verticesFile = tempFolder.newFile().     FileUtils.writeFileUtf8(verticesFile, PageRankData.VERTICES).     File edgesFile = tempFolder.newFile().     FileUtils.writeFileUtf8(edgesFile, PageRankData.EDGES).     verticesPath = verticesFile.toURI().toString().     edgesPath = edgesFile.toURI().toString(). }
false;public;0;4;;@After public void after() throws Exception {     compareKeyValuePairsWithDelta(expected, resultPath, " ", 0.01). }
false;public;0;10;;@Test public void testPageRankSmallNumberOfIterations() throws Exception {     PageRank.main(new String[] { "--pages", verticesPath, "--links", edgesPath, "--output", resultPath, "--numPages", PageRankData.NUM_VERTICES + "", "--iterations", "3" }).     expected = PageRankData.RANKS_AFTER_3_ITERATIONS. }
false;public;0;10;;@Test public void testPageRankWithConvergenceCriterion() throws Exception {     PageRank.main(new String[] { "--pages", verticesPath, "--links", edgesPath, "--output", resultPath, "--numPages", PageRankData.NUM_VERTICES + "", "--vertices", "1000" }).     expected = PageRankData.RANKS_AFTER_EPSILON_0_0001_CONVERGENCE. }
