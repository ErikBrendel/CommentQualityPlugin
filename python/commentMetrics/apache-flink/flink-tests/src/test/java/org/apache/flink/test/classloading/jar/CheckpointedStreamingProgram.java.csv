commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;13;;public static void main(String[] args) throws Exception {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     env.enableCheckpointing(CHECKPOINT_INTERVALL).     env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 100L)).     env.disableOperatorChaining().     DataStream<String> text = env.addSource(new SimpleStringGenerator()).     text.map(new StatefulMapper()).addSink(new NoOpSink()).     env.setParallelism(1).     env.execute("Checkpointed Streaming Program"). }
false;public;1;7;;@Override public void run(SourceContext<String> ctx) throws Exception {     while (running) {         Thread.sleep(1).         ctx.collect("someString").     } }
false;public;0;4;;@Override public void cancel() {     running = false. }
false;public;2;4;;@Override public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.emptyList(). }
false;public;1;4;;@Override public void restoreState(List<Integer> state) throws Exception { }
false;public;2;4;;@Override public List<StatefulMapper> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(this). }
false;public;1;10;;@Override public void restoreState(List<StatefulMapper> state) throws Exception {     if (state.isEmpty() || state.size() > 1) {         throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size()).     }     restored = true.     StatefulMapper s = state.get(0).     this.someState = s.someState.     this.atLeastOneSnapshotComplete = s.atLeastOneSnapshotComplete. }
false;public;1;16;;@Override public String map(String value) throws Exception {     if (!atLeastOneSnapshotComplete) {         // throttle consumption by the checkpoint interval until we have one snapshot.         Thread.sleep(CHECKPOINT_INTERVALL).     }     if (atLeastOneSnapshotComplete && !restored) {         throw new RuntimeException("Intended failure, to trigger restore").     }     if (restored) {         throw new SuccessException().     // throw new RuntimeException("All good").     }     // update our state     someState = value.     return value. }
false;public;1;4;;@Override public void notifyCheckpointComplete(long checkpointId) throws Exception {     atLeastOneSnapshotComplete = true. }
false;public;1;3;;@Override public void invoke(String value) throws Exception { }
