# id;timestamp;commentText;codeText;commentWords;codeWords
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1467726666;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(DEFAULT_PARALLELISM - 1)___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(NoOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(NoOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,1,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1472663402;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(DEFAULT_PARALLELISM - 1)__				env.getConfig().setMaxParallelism(env.getParallelism())___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(NoOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(NoOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,1,env,get,config,set,max,parallelism,env,get,parallelism,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1499899067;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__<p>For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(DEFAULT_PARALLELISM - 1)__				env.getConfig().setMaxParallelism(env.getParallelism())___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(noOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(noOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,p,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,1,env,get,config,set,max,parallelism,env,get,parallelism,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1515481551;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__<p>For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(parallelism - 1)__				env.getConfig().setMaxParallelism(env.getParallelism())___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(noOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(noOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,p,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,1,env,get,config,set,max,parallelism,env,get,parallelism,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1525452496;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__<p>For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(parallelism - 1)__				env.getConfig().setMaxParallelism(env.getParallelism())___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(noOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(noOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,p,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,1,env,get,config,set,max,parallelism,env,get,parallelism,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
IterateITCase -> @Test 	public void testGroupByFeedback() throws Exception;1547905886;This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.__<p>For the test to pass all FlatMappers must see at least two records in the iteration,_which can only be achieved if the hashed values of the input keys map to a complete_congruence system. Given that the test is designed for 3 parallel FlatMapper instances_keys chosen from the [1,3] range are a suitable choice.;@Test_	public void testGroupByFeedback() throws Exception {_		int numRetries = 5__		int timeoutScale = 1___		for (int numRetry = 0_ numRetry < numRetries_ numRetry++) {_			try {_				StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__				env.setParallelism(parallelism - 1)__				env.getConfig().setMaxParallelism(env.getParallelism())___				KeySelector<Integer, Integer> key = new KeySelector<Integer, Integer>() {__					@Override_					public Integer getKey(Integer value) throws Exception {_						return value % 3__					}_				}___				DataStream<Integer> source = env.fromElements(1, 2, 3)_						.map(noOpIntMap).name("ParallelizeMap")___				IterativeStream<Integer> it = source.keyBy(key).iterate(3000 * timeoutScale)___				DataStream<Integer> head = it.flatMap(new RichFlatMapFunction<Integer, Integer>() {__					int received = 0__					int key = -1___					@Override_					public void flatMap(Integer value, Collector<Integer> out) throws Exception {_						received++__						if (key == -1) {_							key = MathUtils.murmurHash(value % 3) % 3__						} else {_							assertEquals(key, MathUtils.murmurHash(value % 3) % 3)__						}_						if (value > 0) {_							out.collect(value - 1)__						}_					}__					@Override_					public void close() {_						assertTrue(received > 1)__					}_				})___				it.closeWith(head.keyBy(key).union(head.map(noOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>())___				env.execute()___				break_ _			} catch (Throwable t) {_				LOG.info("Run " + (numRetry + 1) + "/" + numRetries + " failed", t)___				if (numRetry >= numRetries - 1) {_					throw t__				} else {_					timeoutScale *= 2__				}_			}_		}_	};this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash,p,for,the,test,to,pass,all,flat,mappers,must,see,at,least,two,records,in,the,iteration,which,can,only,be,achieved,if,the,hashed,values,of,the,input,keys,map,to,a,complete,congruence,system,given,that,the,test,is,designed,for,3,parallel,flat,mapper,instances,keys,chosen,from,the,1,3,range,are,a,suitable,choice;test,public,void,test,group,by,feedback,throws,exception,int,num,retries,5,int,timeout,scale,1,for,int,num,retry,0,num,retry,num,retries,num,retry,try,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,1,env,get,config,set,max,parallelism,env,get,parallelism,key,selector,integer,integer,key,new,key,selector,integer,integer,override,public,integer,get,key,integer,value,throws,exception,return,value,3,data,stream,integer,source,env,from,elements,1,2,3,map,no,op,int,map,name,parallelize,map,iterative,stream,integer,it,source,key,by,key,iterate,3000,timeout,scale,data,stream,integer,head,it,flat,map,new,rich,flat,map,function,integer,integer,int,received,0,int,key,1,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,received,if,key,1,key,math,utils,murmur,hash,value,3,3,else,assert,equals,key,math,utils,murmur,hash,value,3,3,if,value,0,out,collect,value,1,override,public,void,close,assert,true,received,1,it,close,with,head,key,by,key,union,head,map,no,op,int,map,key,by,key,add,sink,new,receive,check,no,op,sink,integer,env,execute,break,catch,throwable,t,log,info,run,num,retry,1,num,retries,failed,t,if,num,retry,num,retries,1,throw,t,else,timeout,scale,2
