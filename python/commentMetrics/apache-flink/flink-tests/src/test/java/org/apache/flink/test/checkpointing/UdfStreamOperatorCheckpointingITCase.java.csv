# id;timestamp;commentText;codeText;commentWords;codeWords
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1444135566;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		GroupedDataStream<Tuple2<Integer, Long>> stream = env.addSource(new StatefulMultipleSequence())_				.groupBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.groupBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.groupBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.groupBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,grouped,data,stream,tuple2,integer,long,stream,env,add,source,new,stateful,multiple,sequence,group,by,0,stream,min,1,map,new,once,failing,identity,map,function,group,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,group,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,group,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1444135566;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1445001970;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1475231926;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1484866642;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1499282562;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)____		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1499899067;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)___		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
UdfStreamOperatorCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1502726910;Assembles a stream of a grouping field and some long data. Applies reduce functions_on this stream.;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		_		KeyedStream<Tuple2<Integer, Long>, Tuple> stream = env.addSource(new StatefulMultipleSequence())_				.keyBy(0)___		stream_				_				.min(1)_				_				.map(new OnceFailingIdentityMapFunction(NUM_INPUT))_				.keyBy(0)_				.addSink(new MinEvictingQueueSink())___		stream_				_				.reduce(new ReduceFunction<Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> reduce(_							Tuple2<Integer, Long> value1, Tuple2<Integer, Long> value2) throws Exception {_						return Tuple2.of(value1.f0, value1.f1 + value2.f1)__					}_				})_				.keyBy(0)_				.addSink(new SumEvictingQueueSink())___		stream_				_				.fold(Tuple2.of(0, 0L), new FoldFunction<Tuple2<Integer, Long>, Tuple2<Integer, Long>>() {_					@Override_					public Tuple2<Integer, Long> fold(_							Tuple2<Integer, Long> accumulator, Tuple2<Integer, Long> value) throws Exception {_						return Tuple2.of(value.f0, accumulator.f1 + value.f1)__					}_				})_				.keyBy(0)_				.addSink(new FoldEvictingQueueSink())__	};assembles,a,stream,of,a,grouping,field,and,some,long,data,applies,reduce,functions,on,this,stream;override,public,void,test,program,stream,execution,environment,env,keyed,stream,tuple2,integer,long,tuple,stream,env,add,source,new,stateful,multiple,sequence,key,by,0,stream,min,1,map,new,once,failing,identity,map,function,key,by,0,add,sink,new,min,evicting,queue,sink,stream,reduce,new,reduce,function,tuple2,integer,long,override,public,tuple2,integer,long,reduce,tuple2,integer,long,value1,tuple2,integer,long,value2,throws,exception,return,tuple2,of,value1,f0,value1,f1,value2,f1,key,by,0,add,sink,new,sum,evicting,queue,sink,stream,fold,tuple2,of,0,0l,new,fold,function,tuple2,integer,long,tuple2,integer,long,override,public,tuple2,integer,long,fold,tuple2,integer,long,accumulator,tuple2,integer,long,value,throws,exception,return,tuple2,of,value,f0,accumulator,f1,value,f1,key,by,0,add,sink,new,fold,evicting,queue,sink
