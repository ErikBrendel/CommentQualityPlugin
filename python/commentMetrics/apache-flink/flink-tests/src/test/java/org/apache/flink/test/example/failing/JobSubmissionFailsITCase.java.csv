commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;5;;private static Configuration getConfiguration() {     Configuration config = new Configuration().     config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "4m").     return config. }
false;private,static;0;5;;private static JobGraph getWorkingJobGraph() {     final JobVertex jobVertex = new JobVertex("Working job vertex.").     jobVertex.setInvokableClass(NoOpInvokable.class).     return new JobGraph("Working testing job", jobVertex). }
false;public,static;0;5;;@Parameterized.Parameters(name = "Detached mode = {0}") public static Collection<Boolean[]> executionModes() {     return Arrays.asList(new Boolean[] { false }, new Boolean[] { true }). }
false;public;0;12;;// -------------------------------------------------------------------------------------------- @Test public void testExceptionInInitializeOnMaster() throws Exception {     final JobVertex failingJobVertex = new FailingJobVertex("Failing job vertex").     failingJobVertex.setInvokableClass(NoOpInvokable.class).     final JobGraph failingJobGraph = new JobGraph("Failing testing job", failingJobVertex).     runJobSubmissionTest(failingJobGraph, e -> ExceptionUtils.findThrowable(e, candidate -> "Test exception.".equals(candidate.getMessage())).isPresent()). }
false;public;0;11;;@Test public void testSubmitEmptyJobGraph() throws Exception {     final JobGraph jobGraph = new JobGraph("Testing job").     runJobSubmissionTest(jobGraph, e -> ExceptionUtils.findThrowable(e, throwable -> throwable.getMessage() != null && throwable.getMessage().contains("empty")).isPresent()). }
false;public;0;5;;@Test public void testMissingJarBlob() throws Exception {     final JobGraph jobGraph = getJobGraphWithMissingBlobKey().     runJobSubmissionTest(jobGraph, e -> ExceptionUtils.findThrowable(e, IOException.class).isPresent()). }
false;private;2;16;;private void runJobSubmissionTest(JobGraph jobGraph, Predicate<Exception> failurePredicate) throws org.apache.flink.client.program.ProgramInvocationException {     ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient().     client.setDetached(detached).     try {         client.submitJob(jobGraph, JobSubmissionFailsITCase.class.getClassLoader()).         fail("Job submission should have thrown an exception.").     } catch (Exception e) {         if (!failurePredicate.test(e)) {             throw e.         }     }     client.setDetached(false).     client.submitJob(getWorkingJobGraph(), JobSubmissionFailsITCase.class.getClassLoader()). }
false;private,static;0;6;;@Nonnull private static JobGraph getJobGraphWithMissingBlobKey() {     final JobGraph jobGraph = getWorkingJobGraph().     jobGraph.addUserJarBlobKey(new PermanentBlobKey()).     return jobGraph. }
false;public;1;4;;@Override public void initializeOnMaster(ClassLoader loader) throws Exception {     throw new Exception("Test exception."). }
