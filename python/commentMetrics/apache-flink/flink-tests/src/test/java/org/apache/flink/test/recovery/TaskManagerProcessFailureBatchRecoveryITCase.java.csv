commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@Parameterized.Parameters public static Collection<Object[]> executionMode() {     return Arrays.asList(new Object[][] { { ExecutionMode.PIPELINED }, { ExecutionMode.BATCH } }). }
false;public;2;4;;@Override public Long reduce(Long value1, Long value2) {     return value1 + value2. }
false;public;1;19;;@Override public Long map(Long value) throws Exception {     if (!markerCreated) {         int taskIndex = getRuntimeContext().getIndexOfThisSubtask().         touchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex)).         markerCreated = true.     }     // check if the proceed file exists     if (checkForProceedFile) {         if (proceedFile.exists()) {             checkForProceedFile = false.         } else {             // otherwise wait so that we make slow progress             Thread.sleep(100).         }     }     return value. }
false;public;2;52;;// -------------------------------------------------------------------------------------------- // Test the program // -------------------------------------------------------------------------------------------- @Override public void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment("localhost", 1337, configuration).     env.setParallelism(PARALLELISM).     env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L)).     env.getConfig().setExecutionMode(executionMode).     env.getConfig().disableSysoutLogging().     final long numElements = 100000L.     final DataSet<Long> result = env.generateSequence(1, numElements).rebalance().map(new RichMapFunction<Long, Long>() {          private final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE).          private boolean markerCreated = false.          private boolean checkForProceedFile = true.          @Override         public Long map(Long value) throws Exception {             if (!markerCreated) {                 int taskIndex = getRuntimeContext().getIndexOfThisSubtask().                 touchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex)).                 markerCreated = true.             }             // check if the proceed file exists             if (checkForProceedFile) {                 if (proceedFile.exists()) {                     checkForProceedFile = false.                 } else {                     // otherwise wait so that we make slow progress                     Thread.sleep(100).                 }             }             return value.         }     }).reduce(new ReduceFunction<Long>() {          @Override         public Long reduce(Long value1, Long value2) {             return value1 + value2.         }     }).     long sum = result.collect().get(0).     assertEquals(numElements * (numElements + 1L) / 2L, sum). }
