commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() throws Exception {     final Configuration clientConfig = new Configuration().     clientConfig.setInteger(RestOptions.RETRY_MAX_ATTEMPTS, 0).     clientConfig.setLong(RestOptions.RETRY_DELAY, 0).     clientConfig.addAll(CLUSTER.getClientConfiguration()).     client = new RestClusterClient<>(clientConfig, StandaloneClusterId.getInstance()). }
false;public;0;6;;@After public void tearDown() {     if (client != null) {         client.shutdown().     } }
false;public;0;4;;@Override public void go() throws Exception {     assertNotNull(client.requestJobResult(jobID).get()). }
false;public;0;41;;@Test public void testJobRetrieval() throws Exception {     final JobID jobID = new JobID().     final JobVertex imalock = new JobVertex("imalock").     imalock.setInvokableClass(SemaphoreInvokable.class).     final JobGraph jobGraph = new JobGraph(jobID, "testjob", imalock).     // acquire the lock to make sure that the job cannot complete until the job client     // has been attached in resumingThread     lock.acquire().     client.setDetached(true).     client.submitJob(jobGraph, JobRetrievalITCase.class.getClassLoader()).     final CheckedThread resumingThread = new CheckedThread("Flink-Job-Retriever") {          @Override         public void go() throws Exception {             assertNotNull(client.requestJobResult(jobID).get()).         }     }.     // wait until the job is running     while (client.listJobs().get().isEmpty()) {         Thread.sleep(50).     }     // kick off resuming     resumingThread.start().     // wait for client to connect     while (resumingThread.getState() != Thread.State.WAITING) {         Thread.sleep(10).     }     // client has connected, we can release the lock     lock.release().     resumingThread.sync(). }
false;public;0;15;;@Test public void testNonExistingJobRetrieval() throws Exception {     final JobID jobID = new JobID().     try {         client.requestJobResult(jobID).get().         fail().     } catch (Exception exception) {         Optional<Throwable> expectedCause = ExceptionUtils.findThrowable(exception, candidate -> candidate.getMessage() != null && candidate.getMessage().contains("Could not find Flink job")).         if (!expectedCause.isPresent()) {             throw exception.         }     } }
false;public;0;5;;@Override public void invoke() throws Exception {     lock.acquire().     lock.release(). }
