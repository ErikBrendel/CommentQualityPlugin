commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void preSubmit() throws Exception {     verticesPath = createTempFile("vertices.txt", ConnectedComponentsData.getEnumeratingVertices(NUM_VERTICES)).     edgesPath = createTempFile("edges.txt", ConnectedComponentsData.getRandomOddEvenEdges(NUM_EDGES, NUM_VERTICES, SEED)).     resultPath = getTempFilePath("results"). }
false;protected;0;6;;@Override protected void postSubmit() throws Exception {     for (BufferedReader reader : getResultReader(resultPath)) {         ConnectedComponentsData.checkOddEvenResult(reader).     } }
false;protected;0;33;;@Override protected void testProgram() throws Exception {     // set up execution environment     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // read vertex and edge data     DataSet<Tuple1<Long>> vertices = env.readCsvFile(verticesPath).types(Long.class).     DataSet<Tuple2<Long, Long>> edges = env.readCsvFile(edgesPath).fieldDelimiter(" ").types(Long.class, Long.class).flatMap(new UndirectEdge()).     // assign the initial components (equal to the vertex id)     DataSet<Tuple2<Long, Long>> verticesWithInitialId = vertices.map(new ConnectedComponentsITCase.DuplicateValue<Long>()).     // open a delta iteration     DeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration = verticesWithInitialId.iterateDelta(verticesWithInitialId, 100, 0).     iteration.setSolutionSetUnManaged(true).     // apply the step logic: join with the edges, select the minimum neighbor, update if the component of the candidate is smaller     DataSet<Tuple2<Long, Long>> changes = iteration.getWorkset().join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).aggregate(Aggregations.MIN, 1).join(iteration.getSolutionSet()).where(0).equalTo(0).with(new ComponentIdFilter()).     // close the delta iteration (delta and new workset are identical)     DataSet<Tuple2<Long, Long>> result = iteration.closeWith(changes, changes).     result.writeAsCsv(resultPath, "\n", " ").     // execute program     env.execute("Connected Components Example"). }
