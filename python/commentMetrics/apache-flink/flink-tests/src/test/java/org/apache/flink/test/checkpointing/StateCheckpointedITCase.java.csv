# id;timestamp;commentText;codeText;commentWords;codeWords
StateCheckpointedITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1445293011;Runs the following program:__<pre>_[ (source)->(filter)] -> [ (map) -> (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final long failurePosMin = (long) (0.4 * NUM_STRINGS / PARALLELISM)__		final long failurePosMax = (long) (0.7 * NUM_STRINGS / PARALLELISM)___		final long failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin___		env.enableCheckpointing(200)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				_				_				.filter(new StringRichFilterFunction())__						_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.partitionByHash("prefix")_				.flatMap(new OnceFailingAggregator(failurePos))_				.addSink(new ValidatingSink())__	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,final,long,failure,pos,min,long,0,4,parallelism,final,long,failure,pos,max,long,0,7,parallelism,final,long,failure,pos,new,random,next,long,failure,pos,max,failure,pos,min,failure,pos,min,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,partition,by,hash,prefix,flat,map,new,once,failing,aggregator,failure,pos,add,sink,new,validating,sink
StateCheckpointedITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1454527671;Runs the following program:__<pre>_[ (source)->(filter)] -> [ (map) -> (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final long failurePosMin = (long) (0.4 * NUM_STRINGS / PARALLELISM)__		final long failurePosMax = (long) (0.7 * NUM_STRINGS / PARALLELISM)___		final long failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin___		env.enableCheckpointing(200)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				_				_				.filter(new StringRichFilterFunction())__						_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.partitionByHash("prefix")_				.flatMap(new OnceFailingAggregator(failurePos))_				.addSink(new ValidatingSink())__	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,final,long,failure,pos,min,long,0,4,parallelism,final,long,failure,pos,max,long,0,7,parallelism,final,long,failure,pos,new,random,next,long,failure,pos,max,failure,pos,min,failure,pos,min,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,partition,by,hash,prefix,flat,map,new,once,failing,aggregator,failure,pos,add,sink,new,validating,sink
StateCheckpointedITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1455718153;Runs the following program:__<pre>_[ (source)->(filter)] -> [ (map) -> (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final long failurePosMin = (long) (0.4 * NUM_STRINGS / PARALLELISM)__		final long failurePosMax = (long) (0.7 * NUM_STRINGS / PARALLELISM)___		final long failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin___		env.enableCheckpointing(200)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				_				_				.filter(new StringRichFilterFunction())__						_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.keyBy("prefix")_				.flatMap(new OnceFailingAggregator(failurePos))_				.addSink(new ValidatingSink())__	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,final,long,failure,pos,min,long,0,4,parallelism,final,long,failure,pos,max,long,0,7,parallelism,final,long,failure,pos,new,random,next,long,failure,pos,max,failure,pos,min,failure,pos,min,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,flat,map,new,once,failing,aggregator,failure,pos,add,sink,new,validating,sink
StateCheckpointedITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1484866642;Runs the following program:__<pre>_[ (source)->(filter)] -> [ (map) -> (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final long failurePosMin = (long) (0.4 * NUM_STRINGS / PARALLELISM)__		final long failurePosMax = (long) (0.7 * NUM_STRINGS / PARALLELISM)___		final long failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin___		env.enableCheckpointing(200)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				_				_				.filter(new StringRichFilterFunction())__						_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.keyBy("prefix")_				.flatMap(new OnceFailingAggregator(failurePos))_				.addSink(new ValidatingSink())__	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,final,long,failure,pos,min,long,0,4,parallelism,final,long,failure,pos,max,long,0,7,parallelism,final,long,failure,pos,new,random,next,long,failure,pos,max,failure,pos,min,failure,pos,min,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,flat,map,new,once,failing,aggregator,failure,pos,add,sink,new,validating,sink
StateCheckpointedITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1499899067;Runs the following program._<pre>_[ (source)->(filter)] -> [ (map) -> (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final long failurePosMin = (long) (0.4 * NUM_STRINGS / PARALLELISM)__		final long failurePosMax = (long) (0.7 * NUM_STRINGS / PARALLELISM)___		final long failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin___		env.enableCheckpointing(200)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				_				_				.filter(new StringRichFilterFunction())__						_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.keyBy("prefix")_				.flatMap(new OnceFailingAggregator(failurePos))_				.addSink(new ValidatingSink())__	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,final,long,failure,pos,min,long,0,4,parallelism,final,long,failure,pos,max,long,0,7,parallelism,final,long,failure,pos,new,random,next,long,failure,pos,max,failure,pos,min,failure,pos,min,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,flat,map,new,once,failing,aggregator,failure,pos,add,sink,new,validating,sink
