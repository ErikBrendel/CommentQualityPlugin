commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;7;;private static Configuration getConfiguration() {     Configuration configuration = new Configuration().     configuration.setBoolean(SYSTEM_RESOURCE_METRICS, true).     configuration.setString(REPORTERS_LIST, "test_reporter").     configuration.setString("metrics.reporter.test_reporter.class", TestReporter.class.getName()).     return configuration. }
false;public;0;21;;@Test public void startTaskManagerAndCheckForRegisteredSystemMetrics() throws Exception {     assertEquals(1, TestReporter.OPENED_REPORTERS.size()).     TestReporter reporter = TestReporter.OPENED_REPORTERS.iterator().next().     List<String> expectedPatterns = getExpectedPatterns().     Collection<String> gaugeNames = reporter.getGauges().values().     for (String expectedPattern : expectedPatterns) {         boolean found = false.         for (String gaugeName : gaugeNames) {             if (gaugeName.matches(expectedPattern)) {                 found = true.             }         }         if (!found) {             fail(String.format("Failed to find gauge [%s] in registered gauges [%s]", expectedPattern, gaugeNames)).         }     } }
false;private,static;0;30;;private static List<String> getExpectedPatterns() {     String[] expectedGauges = new String[] { "System.CPU.Idle", "System.CPU.Sys", "System.CPU.User", "System.CPU.IOWait", "System.CPU.Irq", "System.CPU.SoftIrq", "System.CPU.Nice", "System.Memory.Available", "System.Memory.Total", "System.Swap.Used", "System.Swap.Total", "System.Network.*ReceiveRate", "System.Network.*SendRate" }.     String[] expectedHosts = new String[] { "localhost.taskmanager.([a-f0-9\\\\-])*.", "localhost.jobmanager." }.     List<String> patterns = new ArrayList<>().     for (String expectedHost : expectedHosts) {         for (String expectedGauge : expectedGauges) {             patterns.add(expectedHost + expectedGauge).         }     }     return patterns. }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input. }
false;public;1;4;;@Override public void open(MetricConfig config) {     OPENED_REPORTERS.add(this). }
false;public;0;4;;@Override public void close() {     OPENED_REPORTERS.remove(this). }
false;public;0;3;;public Map<Gauge<?>, String> getGauges() {     return gauges. }
