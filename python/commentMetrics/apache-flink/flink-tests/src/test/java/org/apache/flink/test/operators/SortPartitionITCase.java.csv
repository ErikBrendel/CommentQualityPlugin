commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testSortPartitionByKeyField() throws Exception {     /* 		 * Test sort partition on key field 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(4).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple3<Integer, Long, String>>()).setParallelism(// parallelize input     4).sortPartition(1, Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple3Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;21;;@Test public void testSortPartitionByTwoKeyFields() throws Exception {     /* 		 * Test sort partition on two key fields 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(2).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple5<Integer, Long, Integer, String, Long>>()).setParallelism(// parallelize input     2).sortPartition(4, Order.ASCENDING).sortPartition(2, Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple5Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;21;;@SuppressWarnings({ "rawtypes", "unchecked" }) @Test public void testSortPartitionByFieldExpression() throws Exception {     /* 		 * Test sort partition on field expression 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(4).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper()).setParallelism(// parallelize input     4).sortPartition("f1", Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple3Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;21;;@Test public void testSortPartitionByTwoFieldExpressions() throws Exception {     /* 		 * Test sort partition on two field expressions 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(2).     DataSet<Tuple5<Integer, Long, Integer, String, Long>> ds = CollectionDataSets.get5TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple5<Integer, Long, Integer, String, Long>>()).setParallelism(// parallelize input     2).sortPartition("f4", Order.ASCENDING).sortPartition("f2", Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple5Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;21;;@Test public void testSortPartitionByNestedFieldExpression() throws Exception {     /* 		 * Test sort partition on nested field expressions 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(3).     DataSet<Tuple2<Tuple2<Integer, Integer>, String>> ds = CollectionDataSets.getGroupSortedNestedTupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple2<Tuple2<Integer, Integer>, String>>()).setParallelism(// parallelize input     3).sortPartition("f0.f1", Order.ASCENDING).sortPartition("f1", Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new NestedTupleChecker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;21;;@Test public void testSortPartitionPojoByNestedFieldExpression() throws Exception {     /* 		 * Test sort partition on field expression 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(3).     DataSet<POJO> ds = CollectionDataSets.getMixedPojoDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<POJO>()).setParallelism(// parallelize input     1).sortPartition("nestedTupleWithCustom.f1.myString", Order.ASCENDING).sortPartition("number", Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new PojoChecker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;0;19;;@Test public void testSortPartitionParallelismChange() throws Exception {     /* 		 * Test sort partition with parallelism change 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(3).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.sortPartition(1, Order.DESCENDING).setParallelism(// change parallelism     3).mapPartition(new OrderCheckMapper<>(new Tuple3Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public Long getKey(Tuple3<Integer, Long, String> value) throws Exception {     return value.f1. }
false;public;0;25;;@Test public void testSortPartitionWithKeySelector1() throws Exception {     /* 		 * Test sort partition on an extracted key 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(4).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple3<Integer, Long, String>>()).setParallelism(// parallelize input     4).sortPartition(new KeySelector<Tuple3<Integer, Long, String>, Long>() {          @Override         public Long getKey(Tuple3<Integer, Long, String> value) throws Exception {             return value.f1.         }     }, Order.ASCENDING).mapPartition(new OrderCheckMapper<>(new Tuple3AscendingChecker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public Tuple2<Integer, Long> getKey(Tuple3<Integer, Long, String> value) throws Exception {     return new Tuple2<>(value.f0, value.f1). }
false;public;0;25;;@Test public void testSortPartitionWithKeySelector2() throws Exception {     /* 		 * Test sort partition on an extracted key 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(4).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     List<Tuple1<Boolean>> result = ds.map(new IdMapper<Tuple3<Integer, Long, String>>()).setParallelism(// parallelize input     4).sortPartition(new KeySelector<Tuple3<Integer, Long, String>, Tuple2<Integer, Long>>() {          @Override         public Tuple2<Integer, Long> getKey(Tuple3<Integer, Long, String> value) throws Exception {             return new Tuple2<>(value.f0, value.f1).         }     }, Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple3Checker())).distinct().collect().     String expected = "(true)\n".     compareResultAsText(result, expected). }
false;;2;1;;boolean inOrder(T t1, T t2).
false;public;2;4;;@Override public boolean inOrder(Tuple3<Integer, Long, String> t1, Tuple3<Integer, Long, String> t2) {     return t1.f1 >= t2.f1. }
false;public;2;4;;@Override public boolean inOrder(Tuple3<Integer, Long, String> t1, Tuple3<Integer, Long, String> t2) {     return t1.f1 <= t2.f1. }
false;public;2;5;;@Override public boolean inOrder(Tuple5<Integer, Long, Integer, String, Long> t1, Tuple5<Integer, Long, Integer, String, Long> t2) {     return t1.f4 < t2.f4 || t1.f4.equals(t2.f4) && t1.f2 >= t2.f2. }
false;public;2;6;;@Override public boolean inOrder(Tuple2<Tuple2<Integer, Integer>, String> t1, Tuple2<Tuple2<Integer, Integer>, String> t2) {     return t1.f0.f1 < t2.f0.f1 || t1.f0.f1.equals(t2.f0.f1) && t1.f1.compareTo(t2.f1) >= 0. }
false;public;2;6;;@Override public boolean inOrder(POJO t1, POJO t2) {     return t1.nestedTupleWithCustom.f1.myString.compareTo(t2.nestedTupleWithCustom.f1.myString) < 0 || t1.nestedTupleWithCustom.f1.myString.compareTo(t2.nestedTupleWithCustom.f1.myString) == 0 && t1.number >= t2.number. }
false;public;2;20;;@Override public void mapPartition(Iterable<T> values, Collector<Tuple1<Boolean>> out) throws Exception {     Iterator<T> it = values.iterator().     if (!it.hasNext()) {         out.collect(new Tuple1<>(true)).     } else {         T last = it.next().         while (it.hasNext()) {             T next = it.next().             if (!checker.inOrder(last, next)) {                 out.collect(new Tuple1<>(false)).                 return.             }             last = next.         }         out.collect(new Tuple1<>(true)).     } }
false;public;1;4;;@Override public T map(T value) throws Exception {     return value. }
