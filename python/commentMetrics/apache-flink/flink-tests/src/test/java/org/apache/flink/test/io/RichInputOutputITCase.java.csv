commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void preSubmit() throws Exception {     inputPath = createTempFile("input", "ab\n" + "cd\n" + "ef\n"). }
false;protected;0;17;;@Override protected void testProgram() throws Exception {     // test verifying the number of records read and written vs the accumulator counts     readCalls = new ConcurrentLinkedQueue<Integer>().     writeCalls = new ConcurrentLinkedQueue<Integer>().     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.createInput(new TestInputFormat(new Path(inputPath))).output(new TestOutputFormat()).     JobExecutionResult result = env.execute().     Object a = result.getAllAccumulatorResults().get("DATA_SOURCE_ACCUMULATOR").     Object b = result.getAllAccumulatorResults().get("DATA_SINK_ACCUMULATOR").     long recordsRead = (Long) a.     long recordsWritten = (Long) b.     assertEquals(recordsRead, readCalls.size()).     assertEquals(recordsWritten, writeCalls.size()). }
false;public;1;9;;@Override public void open(FileInputSplit split) throws IOException {     try {         getRuntimeContext().addAccumulator("DATA_SOURCE_ACCUMULATOR", counter).     } catch (UnsupportedOperationException e) {     // the accumulator is already added     }     super.open(split). }
false;public;1;6;;@Override public String nextRecord(String reuse) throws IOException {     readCalls.add(1).     counter.add(1).     return super.nextRecord(reuse). }
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;2;8;;@Override public void open(int a, int b) {     try {         getRuntimeContext().addAccumulator("DATA_SINK_ACCUMULATOR", counter).     } catch (UnsupportedOperationException e) {     // the accumulator is already added     } }
false;public;0;2;;@Override public void close() throws IOException { }
false;public;1;5;;@Override public void writeRecord(String record) {     writeCalls.add(1).     counter.add(1). }
