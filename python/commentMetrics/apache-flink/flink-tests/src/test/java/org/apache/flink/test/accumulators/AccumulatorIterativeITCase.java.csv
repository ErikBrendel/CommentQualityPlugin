commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean skipCollectionExecution() {     return true. }
false;protected;0;11;;@Override protected void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(NUM_SUBTASKS).     IterativeDataSet<Integer> iteration = env.fromElements(1, 2, 3).iterate(NUM_ITERATIONS).     iteration.closeWith(iteration.reduceGroup(new SumReducer())).output(new DiscardingOutputFormat<Integer>()).     Assert.assertEquals(NUM_ITERATIONS * 6, (int) env.execute().getAccumulatorResult(ACC_NAME)). }
false;public;1;4;;@Override public void open(Configuration config) throws Exception {     getRuntimeContext().addAccumulator(ACC_NAME, this.testCounter). }
false;public;2;11;;@Override public void reduce(Iterable<Integer> values, Collector<Integer> out) {     // Compute the sum     int sum = 0.     for (Integer value : values) {         sum += value.         testCounter.add(value).     }     out.collect(sum). }
