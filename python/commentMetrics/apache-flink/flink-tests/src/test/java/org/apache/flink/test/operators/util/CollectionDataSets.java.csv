commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;29;;public static DataSet<Tuple3<Integer, Long, String>> get3TupleDataSet(ExecutionEnvironment env) {     List<Tuple3<Integer, Long, String>> data = new ArrayList<>().     data.add(new Tuple3<>(1, 1L, "Hi")).     data.add(new Tuple3<>(2, 2L, "Hello")).     data.add(new Tuple3<>(3, 2L, "Hello world")).     data.add(new Tuple3<>(4, 3L, "Hello world, how are you?")).     data.add(new Tuple3<>(5, 3L, "I am fine.")).     data.add(new Tuple3<>(6, 3L, "Luke Skywalker")).     data.add(new Tuple3<>(7, 4L, "Comment#1")).     data.add(new Tuple3<>(8, 4L, "Comment#2")).     data.add(new Tuple3<>(9, 4L, "Comment#3")).     data.add(new Tuple3<>(10, 4L, "Comment#4")).     data.add(new Tuple3<>(11, 5L, "Comment#5")).     data.add(new Tuple3<>(12, 5L, "Comment#6")).     data.add(new Tuple3<>(13, 5L, "Comment#7")).     data.add(new Tuple3<>(14, 5L, "Comment#8")).     data.add(new Tuple3<>(15, 5L, "Comment#9")).     data.add(new Tuple3<>(16, 6L, "Comment#10")).     data.add(new Tuple3<>(17, 6L, "Comment#11")).     data.add(new Tuple3<>(18, 6L, "Comment#12")).     data.add(new Tuple3<>(19, 6L, "Comment#13")).     data.add(new Tuple3<>(20, 6L, "Comment#14")).     data.add(new Tuple3<>(21, 6L, "Comment#15")).     Collections.shuffle(data).     return env.fromCollection(data). }
false;public,static;1;11;;public static DataSet<Tuple3<Integer, Long, String>> getSmall3TupleDataSet(ExecutionEnvironment env) {     List<Tuple3<Integer, Long, String>> data = new ArrayList<>().     data.add(new Tuple3<>(1, 1L, "Hi")).     data.add(new Tuple3<>(2, 2L, "Hello")).     data.add(new Tuple3<>(3, 2L, "Hello world")).     Collections.shuffle(data).     return env.fromCollection(data). }
false;public,static;1;31;;public static DataSet<Tuple5<Integer, Long, Integer, String, Long>> get5TupleDataSet(ExecutionEnvironment env) {     List<Tuple5<Integer, Long, Integer, String, Long>> data = new ArrayList<>().     data.add(new Tuple5<>(1, 1L, 0, "Hallo", 1L)).     data.add(new Tuple5<>(2, 2L, 1, "Hallo Welt", 2L)).     data.add(new Tuple5<>(2, 3L, 2, "Hallo Welt wie", 1L)).     data.add(new Tuple5<>(3, 4L, 3, "Hallo Welt wie gehts?", 2L)).     data.add(new Tuple5<>(3, 5L, 4, "ABC", 2L)).     data.add(new Tuple5<>(3, 6L, 5, "BCD", 3L)).     data.add(new Tuple5<>(4, 7L, 6, "CDE", 2L)).     data.add(new Tuple5<>(4, 8L, 7, "DEF", 1L)).     data.add(new Tuple5<>(4, 9L, 8, "EFG", 1L)).     data.add(new Tuple5<>(4, 10L, 9, "FGH", 2L)).     data.add(new Tuple5<>(5, 11L, 10, "GHI", 1L)).     data.add(new Tuple5<>(5, 12L, 11, "HIJ", 3L)).     data.add(new Tuple5<>(5, 13L, 12, "IJK", 3L)).     data.add(new Tuple5<>(5, 14L, 13, "JKL", 2L)).     data.add(new Tuple5<>(5, 15L, 14, "KLM", 2L)).     Collections.shuffle(data).     TupleTypeInfo<Tuple5<Integer, Long, Integer, String, Long>> type = new TupleTypeInfo<>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;19;;public static DataSet<Tuple5<Integer, Long, Integer, String, Long>> getSmall5TupleDataSet(ExecutionEnvironment env) {     List<Tuple5<Integer, Long, Integer, String, Long>> data = new ArrayList<>().     data.add(new Tuple5<>(1, 1L, 0, "Hallo", 1L)).     data.add(new Tuple5<>(2, 2L, 1, "Hallo Welt", 2L)).     data.add(new Tuple5<>(2, 3L, 2, "Hallo Welt wie", 1L)).     Collections.shuffle(data).     TupleTypeInfo<Tuple5<Integer, Long, Integer, String, Long>> type = new TupleTypeInfo<>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;14;;public static DataSet<Tuple2<Tuple2<Integer, Integer>, String>> getSmallNestedTupleDataSet(ExecutionEnvironment env) {     List<Tuple2<Tuple2<Integer, Integer>, String>> data = new ArrayList<>().     data.add(new Tuple2<>(new Tuple2<>(1, 1), "one")).     data.add(new Tuple2<>(new Tuple2<>(2, 2), "two")).     data.add(new Tuple2<>(new Tuple2<>(3, 3), "three")).     TupleTypeInfo<Tuple2<Tuple2<Integer, Integer>, String>> type = new TupleTypeInfo<>(new TupleTypeInfo<Tuple2<Integer, Integer>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO), BasicTypeInfo.STRING_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;18;;public static DataSet<Tuple2<Tuple2<Integer, Integer>, String>> getGroupSortedNestedTupleDataSet(ExecutionEnvironment env) {     List<Tuple2<Tuple2<Integer, Integer>, String>> data = new ArrayList<>().     data.add(new Tuple2<>(new Tuple2<>(1, 3), "a")).     data.add(new Tuple2<>(new Tuple2<>(1, 2), "a")).     data.add(new Tuple2<>(new Tuple2<>(2, 1), "a")).     data.add(new Tuple2<>(new Tuple2<>(2, 2), "b")).     data.add(new Tuple2<>(new Tuple2<>(3, 3), "c")).     data.add(new Tuple2<>(new Tuple2<>(3, 6), "c")).     data.add(new Tuple2<>(new Tuple2<>(4, 9), "c")).     TupleTypeInfo<Tuple2<Tuple2<Integer, Integer>, String>> type = new TupleTypeInfo<>(new TupleTypeInfo<Tuple2<Integer, Integer>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO), BasicTypeInfo.STRING_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;19;;public static DataSet<Tuple3<Tuple2<Integer, Integer>, String, Integer>> getGroupSortedNestedTupleDataSet2(ExecutionEnvironment env) {     List<Tuple3<Tuple2<Integer, Integer>, String, Integer>> data = new ArrayList<>().     data.add(new Tuple3<>(new Tuple2<>(1, 3), "a", 2)).     data.add(new Tuple3<>(new Tuple2<>(1, 2), "a", 1)).     data.add(new Tuple3<>(new Tuple2<>(2, 1), "a", 3)).     data.add(new Tuple3<>(new Tuple2<>(2, 2), "b", 4)).     data.add(new Tuple3<>(new Tuple2<>(3, 3), "c", 5)).     data.add(new Tuple3<>(new Tuple2<>(3, 6), "c", 6)).     data.add(new Tuple3<>(new Tuple2<>(4, 9), "c", 7)).     TupleTypeInfo<Tuple3<Tuple2<Integer, Integer>, String, Integer>> type = new TupleTypeInfo<>(new TupleTypeInfo<Tuple2<Integer, Integer>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO), BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;16;;public static DataSet<Tuple2<byte[], Integer>> getTuple2WithByteArrayDataSet(ExecutionEnvironment env) {     List<Tuple2<byte[], Integer>> data = new ArrayList<>().     data.add(new Tuple2<>(new byte[] { 0, 4 }, 1)).     data.add(new Tuple2<>(new byte[] { 2, 0 }, 1)).     data.add(new Tuple2<>(new byte[] { 2, 0, 4 }, 4)).     data.add(new Tuple2<>(new byte[] { 2, 1 }, 3)).     data.add(new Tuple2<>(new byte[] { 0 }, 0)).     data.add(new Tuple2<>(new byte[] { 2, 0 }, 1)).     TupleTypeInfo<Tuple2<byte[], Integer>> type = new TupleTypeInfo<>(PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO).     return env.fromCollection(data, type). }
false;public,static;1;16;;public static DataSet<String> getStringDataSet(ExecutionEnvironment env) {     List<String> data = new ArrayList<>().     data.add("Hi").     data.add("Hello").     data.add("Hello world").     data.add("Hello world, how are you?").     data.add("I am fine.").     data.add("Luke Skywalker").     data.add("Random comment").     data.add("LOL").     Collections.shuffle(data).     return env.fromCollection(data). }
false;public,static;1;23;;public static DataSet<Integer> getIntegerDataSet(ExecutionEnvironment env) {     List<Integer> data = new ArrayList<>().     data.add(1).     data.add(2).     data.add(2).     data.add(3).     data.add(3).     data.add(3).     data.add(4).     data.add(4).     data.add(4).     data.add(4).     data.add(5).     data.add(5).     data.add(5).     data.add(5).     data.add(5).     Collections.shuffle(data).     return env.fromCollection(data). }
false;public,static;1;30;;public static DataSet<CustomType> getCustomTypeDataSet(ExecutionEnvironment env) {     List<CustomType> data = new ArrayList<>().     data.add(new CustomType(1, 0L, "Hi")).     data.add(new CustomType(2, 1L, "Hello")).     data.add(new CustomType(2, 2L, "Hello world")).     data.add(new CustomType(3, 3L, "Hello world, how are you?")).     data.add(new CustomType(3, 4L, "I am fine.")).     data.add(new CustomType(3, 5L, "Luke Skywalker")).     data.add(new CustomType(4, 6L, "Comment#1")).     data.add(new CustomType(4, 7L, "Comment#2")).     data.add(new CustomType(4, 8L, "Comment#3")).     data.add(new CustomType(4, 9L, "Comment#4")).     data.add(new CustomType(5, 10L, "Comment#5")).     data.add(new CustomType(5, 11L, "Comment#6")).     data.add(new CustomType(5, 12L, "Comment#7")).     data.add(new CustomType(5, 13L, "Comment#8")).     data.add(new CustomType(5, 14L, "Comment#9")).     data.add(new CustomType(6, 15L, "Comment#10")).     data.add(new CustomType(6, 16L, "Comment#11")).     data.add(new CustomType(6, 17L, "Comment#12")).     data.add(new CustomType(6, 18L, "Comment#13")).     data.add(new CustomType(6, 19L, "Comment#14")).     data.add(new CustomType(6, 20L, "Comment#15")).     Collections.shuffle(data).     return env.fromCollection(data). }
false;public,static;1;12;;public static DataSet<CustomType> getSmallCustomTypeDataSet(ExecutionEnvironment env) {     List<CustomType> data = new ArrayList<>().     data.add(new CustomType(1, 0L, "Hi")).     data.add(new CustomType(2, 1L, "Hello")).     data.add(new CustomType(2, 2L, "Hello world")).     Collections.shuffle(data).     return env.fromCollection(data). }
false;public;0;4;;@Override public String toString() {     return myInt + "," + myLong + "," + myString. }
false;public;2;9;;@Override public int compare(CustomType o1, CustomType o2) {     int diff = o1.myInt - o2.myInt.     if (diff != 0) {         return diff.     }     diff = (int) (o1.myLong - o2.myLong).     return diff != 0 ? diff : o1.myString.compareTo(o2.myString). }
false;public,static;1;7;;public static DataSet<Tuple7<Integer, String, Integer, Integer, Long, String, Long>> getSmallTuplebasedDataSet(ExecutionEnvironment env) {     List<Tuple7<Integer, String, Integer, Integer, Long, String, Long>> data = new ArrayList<>().     data.add(new Tuple7<>(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new Tuple7<>(2, "Second", 20, 200, 2000L, "Two", 20000L)).     data.add(new Tuple7<>(3, "Third", 30, 300, 3000L, "Three", 30000L)).     return env.fromCollection(data). }
false;public,static;1;8;;public static DataSet<Tuple7<Long, Integer, Integer, Long, String, Integer, String>> getSmallTuplebasedDataSetMatchingPojo(ExecutionEnvironment env) {     List<Tuple7<Long, Integer, Integer, Long, String, Integer, String>> data = new ArrayList<>().     data.add(new Tuple7<>(10000L, 10, 100, 1000L, "One", 1, "First")).     data.add(new Tuple7<>(20000L, 20, 200, 2000L, "Two", 2, "Second")).     data.add(new Tuple7<>(30000L, 30, 300, 3000L, "Three", 3, "Third")).     return env.fromCollection(data). }
false;public,static;1;7;;public static DataSet<POJO> getSmallPojoDataSet(ExecutionEnvironment env) {     List<POJO> data = new ArrayList<>().     data.add(new POJO(1, /*number*/     "First", /*str*/     10, /*f0*/     100, /*f1.myInt*/     1000L, /*f1.myLong*/     "One", /*f1.myString*/     10000L)).     data.add(new POJO(2, "Second", 20, 200, 2000L, "Two", 20000L)).     data.add(new POJO(3, "Third", 30, 300, 3000L, "Three", 30000L)).     return env.fromCollection(data). }
false;public,static;1;12;;public static DataSet<POJO> getDuplicatePojoDataSet(ExecutionEnvironment env) {     List<POJO> data = new ArrayList<>().     // 5x     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10000L)).     data.add(new POJO(2, "Second", 20, 200, 2000L, "Two", 20000L)).     // 2x     data.add(new POJO(3, "Third", 30, 300, 3000L, "Three", 30000L)).     data.add(new POJO(3, "Third", 30, 300, 3000L, "Three", 30000L)).     return env.fromCollection(data). }
false;public,static;1;12;;public static DataSet<POJO> getMixedPojoDataSet(ExecutionEnvironment env) {     List<POJO> data = new ArrayList<>().     // 5x     data.add(new POJO(1, "First", 10, 100, 1000L, "One", 10100L)).     data.add(new POJO(2, "First_", 10, 105, 1000L, "One", 10200L)).     data.add(new POJO(3, "First", 11, 102, 3000L, "One", 10200L)).     data.add(new POJO(4, "First_", 11, 106, 1000L, "One", 10300L)).     data.add(new POJO(5, "First", 11, 102, 2000L, "One", 10100L)).     data.add(new POJO(6, "Second_", 20, 200, 2000L, "Two", 10100L)).     // 2x     data.add(new POJO(7, "Third", 31, 301, 2000L, "Three", 10200L)).     data.add(new POJO(8, "Third_", 30, 300, 1000L, "Three", 10100L)).     return env.fromCollection(data). }
false;public;0;4;;@Override public String toString() {     return number + " " + str + " " + nestedTupleWithCustom + " " + nestedPojo.longNumber. }
false;public,static;1;10;;public static DataSet<CrazyNested> getCrazyNestedDataSet(ExecutionEnvironment env) {     List<CrazyNested> data = new ArrayList<>().     data.add(new CrazyNested("aa")).     data.add(new CrazyNested("bb")).     data.add(new CrazyNested("bb")).     data.add(new CrazyNested("cc")).     data.add(new CrazyNested("cc")).     data.add(new CrazyNested("cc")).     return env.fromCollection(data). }
false;public,static;1;9;;public static DataSet<FromTupleWithCTor> getPojoExtendingFromTuple(ExecutionEnvironment env) {     List<FromTupleWithCTor> data = new ArrayList<>().     // 3x     data.add(new FromTupleWithCTor(1, 10L)).     data.add(new FromTupleWithCTor(1, 10L)).     data.add(new FromTupleWithCTor(1, 10L)).     // 2x     data.add(new FromTupleWithCTor(2, 20L)).     data.add(new FromTupleWithCTor(2, 20L)).     return env.fromCollection(data). }
false;public,static;1;10;;public static DataSet<PojoContainingTupleAndWritable> getPojoContainingTupleAndWritable(ExecutionEnvironment env) {     List<PojoContainingTupleAndWritable> data = new ArrayList<>().     // 1x     data.add(new PojoContainingTupleAndWritable(1, 10L, 100L)).     // 5x     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     return env.fromCollection(data). }
false;public,static;1;10;;public static DataSet<PojoContainingTupleAndWritable> getGroupSortedPojoContainingTupleAndWritable(ExecutionEnvironment env) {     List<PojoContainingTupleAndWritable> data = new ArrayList<>().     // 1x     data.add(new PojoContainingTupleAndWritable(1, 10L, 100L)).     // 5x     data.add(new PojoContainingTupleAndWritable(2, 20L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 20L, 201L)).     data.add(new PojoContainingTupleAndWritable(2, 30L, 200L)).     data.add(new PojoContainingTupleAndWritable(2, 30L, 600L)).     data.add(new PojoContainingTupleAndWritable(2, 30L, 400L)).     return env.fromCollection(data). }
false;public,static;1;9;;public static DataSet<Tuple3<Integer, CrazyNested, POJO>> getTupleContainingPojos(ExecutionEnvironment env) {     List<Tuple3<Integer, CrazyNested, POJO>> data = new ArrayList<>().     // 3x     data.add(new Tuple3<>(1, new CrazyNested("one", "uno", 1L), new POJO(1, "First", 10, 100, 1000L, "One", 10000L))).     data.add(new Tuple3<>(1, new CrazyNested("one", "uno", 1L), new POJO(1, "First", 10, 100, 1000L, "One", 10000L))).     data.add(new Tuple3<>(1, new CrazyNested("one", "uno", 1L), new POJO(1, "First", 10, 100, 1000L, "One", 10000L))).     // POJO is not initialized according to the first two fields.     // 1x     data.add(new Tuple3<>(2, new CrazyNested("two", "duo", 2L), new POJO(1, "First", 10, 100, 1000L, "One", 10000L))).     return env.fromCollection(data). }
false;public,static;1;10;;public static DataSet<PojoWithMultiplePojos> getPojoWithMultiplePojos(ExecutionEnvironment env) {     List<PojoWithMultiplePojos> data = new ArrayList<>().     data.add(new PojoWithMultiplePojos("a", "aa", "b", "bb", 1)).     data.add(new PojoWithMultiplePojos("b", "bb", "c", "cc", 2)).     data.add(new PojoWithMultiplePojos("b", "bb", "c", "cc", 2)).     data.add(new PojoWithMultiplePojos("b", "bb", "c", "cc", 2)).     data.add(new PojoWithMultiplePojos("d", "dd", "e", "ee", 3)).     data.add(new PojoWithMultiplePojos("d", "dd", "e", "ee", 3)).     return env.fromCollection(data). }
false;public,static;1;17;;public static DataSet<PojoWithDateAndEnum> getPojoWithDateAndEnum(ExecutionEnvironment env) {     List<PojoWithDateAndEnum> data = new ArrayList<>().     PojoWithDateAndEnum one = new PojoWithDateAndEnum().     one.group = "a".     one.date = new Date(666).     one.cat = Category.CAT_A.     data.add(one).     PojoWithDateAndEnum two = new PojoWithDateAndEnum().     two.group = "a".     two.date = new Date(666).     two.cat = Category.CAT_A.     data.add(two).     PojoWithDateAndEnum three = new PojoWithDateAndEnum().     three.group = "b".     three.date = new Date(666).     three.cat = Category.CAT_B.     data.add(three).     return env.fromCollection(data). }
false;public;0;12;;@Override public String toString() {     return "PojoWithCollection{" + "pojos.size()=" + pojos.size() + ", key=" + key + ", sqlDate=" + sqlDate + ", bigInt=" + bigInt + ", bigDecimalKeepItNull=" + bigDecimalKeepItNull + ", scalaBigInt=" + scalaBigInt + ", mixed=" + mixed + '}'. }
false;public;0;12;;@Override public String toString() {     return "PojoWithCollection{" + "pojos.size()=" + pojos.size() + ", key=" + key + ", sqlDate=" + sqlDate + ", bigInt=" + bigInt + ", bigDecimalKeepItNull=" + bigDecimalKeepItNull + ", scalaBigInt=" + scalaBigInt + ", mixed=" + mixed + '}'. }
false;public,static;1;43;;public static DataSet<PojoWithCollection> getPojoWithCollection(ExecutionEnvironment env) {     List<PojoWithCollection> data = new ArrayList<>().     List<Pojo1> pojosList1 = new ArrayList<>().     pojosList1.add(new Pojo1("a", "aa")).     pojosList1.add(new Pojo1("b", "bb")).     List<Pojo1> pojosList2 = new ArrayList<>().     pojosList2.add(new Pojo1("a2", "aa2")).     pojosList2.add(new Pojo1("b2", "bb2")).     PojoWithCollection pwc1 = new PojoWithCollection().     pwc1.pojos = pojosList1.     pwc1.key = 0.     pwc1.bigInt = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.TEN).     pwc1.scalaBigInt = BigInt.int2bigInt(10).     pwc1.bigDecimalKeepItNull = null.     // use calendar to make it stable across time zones     GregorianCalendar gcl1 = new GregorianCalendar(2033, 4, 18).     pwc1.sqlDate = new java.sql.Date(gcl1.getTimeInMillis()).     pwc1.mixed = new ArrayList<>().     Map<String, Integer> map = new HashMap<>().     // map.put("anotherKey", 2). map.put("third", 3).     map.put("someKey", 1).     pwc1.mixed.add(map).     pwc1.mixed.add(new File("/this/is/wrong")).     pwc1.mixed.add("uhlala").     PojoWithCollection pwc2 = new PojoWithCollection().     pwc2.pojos = pojosList2.     pwc2.key = 0.     pwc2.bigInt = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.TEN).     pwc2.scalaBigInt = BigInt.int2bigInt(31104000).     pwc2.bigDecimalKeepItNull = null.     GregorianCalendar gcl2 = new GregorianCalendar(1976, 4, 3).     // 1976     pwc2.sqlDate = new java.sql.Date(gcl2.getTimeInMillis()).     data.add(pwc1).     data.add(pwc2).     return env.fromCollection(data). }
