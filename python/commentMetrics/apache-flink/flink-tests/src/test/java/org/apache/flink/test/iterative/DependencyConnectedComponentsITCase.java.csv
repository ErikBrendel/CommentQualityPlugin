commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;41;;@Override protected void preSubmit() throws Exception {     verticesInput.clear().     edgesInput.clear().     // vertices input     verticesInput.add(new Tuple2<>(1L, 1L)).     verticesInput.add(new Tuple2<>(2L, 2L)).     verticesInput.add(new Tuple2<>(3L, 3L)).     verticesInput.add(new Tuple2<>(4L, 4L)).     verticesInput.add(new Tuple2<>(5L, 5L)).     verticesInput.add(new Tuple2<>(6L, 6L)).     verticesInput.add(new Tuple2<>(7L, 7L)).     verticesInput.add(new Tuple2<>(8L, 8L)).     verticesInput.add(new Tuple2<>(9L, 9L)).     // vertices input     edgesInput.add(new Tuple2<>(1L, 2L)).     edgesInput.add(new Tuple2<>(1L, 3L)).     edgesInput.add(new Tuple2<>(2L, 3L)).     edgesInput.add(new Tuple2<>(2L, 4L)).     edgesInput.add(new Tuple2<>(2L, 1L)).     edgesInput.add(new Tuple2<>(3L, 1L)).     edgesInput.add(new Tuple2<>(3L, 2L)).     edgesInput.add(new Tuple2<>(4L, 2L)).     edgesInput.add(new Tuple2<>(4L, 6L)).     edgesInput.add(new Tuple2<>(5L, 6L)).     edgesInput.add(new Tuple2<>(6L, 4L)).     edgesInput.add(new Tuple2<>(6L, 5L)).     edgesInput.add(new Tuple2<>(7L, 8L)).     edgesInput.add(new Tuple2<>(7L, 9L)).     edgesInput.add(new Tuple2<>(8L, 7L)).     edgesInput.add(new Tuple2<>(8L, 9L)).     edgesInput.add(new Tuple2<>(9L, 7L)).     edgesInput.add(new Tuple2<>(9L, 8L)).     resultPath = getTempDirPath("result").     expectedResult = "(1,1)\n" + "(2,1)\n" + "(3,1)\n" + "(4,1)\n" + "(5,1)\n" + "(6,1)\n" + "(7,7)\n" + "(8,7)\n" + "(9,7)\n". }
false;protected;0;4;;@Override protected void testProgram() throws Exception {     DependencyConnectedComponentsProgram.runProgram(resultPath). }
false;protected;0;4;;@Override protected void postSubmit() throws Exception {     compareResultsByLinesInMemory(expectedResult, resultPath). }
false;public;1;3;;public Long getKey(Long id) {     return id. }
false;public;1;3;;public Long getKey(Tuple2<Long, Long> vertexWithId) {     return vertexWithId.f1. }
false;public;1;3;;public Long getKey(Long id) {     return id. }
false;public,static;1;47;;public static String runProgram(String resultPath) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(parallelism).     DataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput).     DataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput).     int keyPosition = 0.     DeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration = initialSolutionSet.iterateDelta(initialSolutionSet, MAX_ITERATIONS, keyPosition).     DataSet<Long> candidates = iteration.getWorkset().join(edges).where(0).equalTo(0).with(new FindCandidatesJoin()).groupBy(new KeySelector<Long, Long>() {          public Long getKey(Long id) {             return id.         }     }).reduceGroup(new RemoveDuplicatesReduce()).     DataSet<Tuple2<Long, Long>> candidatesDependencies = candidates.join(edges).where(new KeySelector<Long, Long>() {          public Long getKey(Long id) {             return id.         }     }).equalTo(new KeySelector<Tuple2<Long, Long>, Long>() {          public Long getKey(Tuple2<Long, Long> vertexWithId) {             return vertexWithId.f1.         }     }).with(new FindCandidatesDependenciesJoin()).     DataSet<Tuple2<Long, Long>> verticesWithNewComponents = candidatesDependencies.join(iteration.getSolutionSet()).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).reduceGroup(new MinimumReduce()).     DataSet<Tuple2<Long, Long>> updatedComponentId = verticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0).flatMap(new MinimumIdFilter()).     iteration.closeWith(updatedComponentId, updatedComponentId).writeAsText(resultPath).     env.execute().     return resultPath. }
false;public;2;6;;@Override public Long join(Tuple2<Long, Long> vertexWithCompId, Tuple2<Long, Long> edge) throws Exception {     // emit target vertex     return edge.f1. }
false;public;2;4;;@Override public void reduce(Iterable<Long> values, Collector<Long> out) {     out.collect(values.iterator().next()). }
false;public;2;4;;@Override public Tuple2<Long, Long> join(Long candidateId, Tuple2<Long, Long> edge) throws Exception {     return edge. }
false;public;2;7;;@Override public Tuple2<Long, Long> join(Tuple2<Long, Long> edge, Tuple2<Long, Long> vertexWithCompId) throws Exception {     vertexWithCompId.setField(edge.f1, 0).     return vertexWithCompId. }
false;public;2;17;;@Override public void reduce(Iterable<Tuple2<Long, Long>> values, Collector<Tuple2<Long, Long>> out) {     Long vertexId = 0L.     Long minimumCompId = Long.MAX_VALUE.     for (Tuple2<Long, Long> value : values) {         vertexId = value.f0.         Long candidateCompId = value.f1.         if (candidateCompId < minimumCompId) {             minimumCompId = candidateCompId.         }     }     resultVertex.f0 = vertexId.     resultVertex.f1 = minimumCompId.     out.collect(resultVertex). }
false;public;2;8;;@Override public void flatMap(Tuple2<Tuple2<Long, Long>, Tuple2<Long, Long>> vertexWithNewAndOldId, Collector<Tuple2<Long, Long>> out) {     if (vertexWithNewAndOldId.f0.f1 < vertexWithNewAndOldId.f1.f1) {         out.collect(vertexWithNewAndOldId.f0).     } }
