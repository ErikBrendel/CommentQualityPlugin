commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;21;;@Override protected void testProgram() throws Exception {     // test failing version     try {         executeTask(new FailingTestMapper(), 1).     } catch (RuntimeException e) {         // expected for collection execution         if (!isCollectionExecution()) {             Assert.fail().         }         // for collection execution, no restarts. So, exception should be appended with 0.         Assert.assertEquals(EXCEPTION_STRING + ":0", e.getMessage()).     } catch (JobExecutionException e) {         // expected for cluster execution         if (isCollectionExecution()) {             Assert.fail().         }         // for cluster execution, one restart. So, exception should be appended with 1.         Assert.assertEquals(EXCEPTION_STRING + ":1", e.getCause().getMessage()).     }     // test correct version     executeTask(new TestMapper(), 0). }
false;private;2;8;;private void executeTask(MapFunction<Long, Long> mapper, int retries) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setRestartStrategy(RestartStrategies.fixedDelayRestart(retries, 0)).     List<Long> result = env.generateSequence(1, 9).map(mapper).collect().     MultipleProgramsTestBase.compareResultAsText(result, "1\n2\n3\n4\n5\n6\n7\n8\n9"). }
false;public;1;4;;@Override public Long map(Long value) throws Exception {     return value. }
false;public;1;4;;@Override public Long map(Long value) throws Exception {     throw new RuntimeException(EXCEPTION_STRING + ":" + getRuntimeContext().getAttemptNumber()). }
