commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;31;;public static void main(String[] args) throws Exception {     ParameterTool pt = ParameterTool.fromArgs(args).     String savepointsPath = pt.getRequired("savepoint-path").     Configuration config = new Configuration().     config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointsPath).     StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(config).     env.enableCheckpointing(500, CheckpointingMode.EXACTLY_ONCE).     env.setRestartStrategy(RestartStrategies.noRestart()).     env.setStateBackend(new MemoryStateBackend()).     /**      * Source -> StatefulMap1 -> CHAIN(StatefulMap2 -> Map -> StatefulMap3)      */     DataStream<Integer> source = createSource(env, ExecutionMode.GENERATE).     SingleOutputStreamOperator<Integer> first = createFirstStatefulMap(ExecutionMode.GENERATE, source).     first.startNewChain().     SingleOutputStreamOperator<Integer> second = createSecondStatefulMap(ExecutionMode.GENERATE, first).     second.startNewChain().     SingleOutputStreamOperator<Integer> stateless = createStatelessMap(second).     SingleOutputStreamOperator<Integer> third = createThirdStatefulMap(ExecutionMode.GENERATE, stateless).     env.execute("job"). }
false;public,static;2;4;;public static SingleOutputStreamOperator<Integer> createSource(StreamExecutionEnvironment env, ExecutionMode mode) {     return env.addSource(new IntegerSource(mode)).setParallelism(4). }
false;public,static;2;6;;public static SingleOutputStreamOperator<Integer> createFirstStatefulMap(ExecutionMode mode, DataStream<Integer> input) {     return input.map(new StatefulStringStoringMap(mode, "first")).setParallelism(4).uid("first"). }
false;public,static;2;6;;public static SingleOutputStreamOperator<Integer> createSecondStatefulMap(ExecutionMode mode, DataStream<Integer> input) {     return input.map(new StatefulStringStoringMap(mode, "second")).setParallelism(4).uid("second"). }
false;public,static;2;8;;public static SingleOutputStreamOperator<Integer> createThirdStatefulMap(ExecutionMode mode, DataStream<Integer> input) {     SingleOutputStreamOperator<Integer> map = input.map(new StatefulStringStoringMap(mode, "third")).setParallelism(4).uid("third").     return map. }
false;public,static;1;4;;public static SingleOutputStreamOperator<Integer> createStatelessMap(DataStream<Integer> input) {     return input.map(new NoOpMapFunction()).setParallelism(4). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;2;4;;@Override public List<String> snapshotState(long checkpointId, long timestamp) throws Exception {     return Arrays.asList(valueToStore + getRuntimeContext().getIndexOfThisSubtask()). }
false;public;1;12;;@Override public void restoreState(List<String> state) throws Exception {     switch(mode) {         case GENERATE:             break.         case MIGRATE:         case RESTORE:             Assert.assertEquals("Failed for " + valueToStore + getRuntimeContext().getIndexOfThisSubtask(), 1, state.size()).             String value = state.get(0).             Assert.assertEquals(valueToStore + getRuntimeContext().getIndexOfThisSubtask(), value).     } }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;1;15;;@Override public void run(SourceContext<Integer> ctx) throws Exception {     ctx.collect(1).     switch(mode) {         case GENERATE:         case MIGRATE:             // keep the job running until cancel-with-savepoint was done             synchronized (this) {                 while (running) {                     this.wait().                 }             }     } }
false;public;0;7;;@Override public void cancel() {     synchronized (this) {         running = false.         this.notifyAll().     } }
