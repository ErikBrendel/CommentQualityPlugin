commented;modifiers;parameterAmount;loc;comment;code
true;private;2;3;// --------------- Test Sort Matches that are canceled while still reading / sorting ----------------- ;// --------------- Test Sort Matches that are canceled while still reading / sorting ----------------- private void executeTask(JoinFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> joiner, boolean slow) throws Exception {     executeTask(joiner, slow, PARALLELISM). }
false;private;3;15;;private void executeTask(JoinFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> joiner, boolean slow, int parallelism) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<Integer, Integer>> input1 = env.createInput(new InfiniteIntegerTupleInputFormat(slow)).     DataSet<Tuple2<Integer, Integer>> input2 = env.createInput(new InfiniteIntegerTupleInputFormat(slow)).     input1.join(input2, JoinOperatorBase.JoinHint.REPARTITION_SORT_MERGE).where(0).equalTo(0).with(joiner).output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>()).     env.setParallelism(parallelism).     runAndCancelJob(env.createProgramPlan(), 5 * 1000, 10 * 1000). }
false;public;0;4;;@Test public void testCancelSortMatchWhileReadingSlowInputs() throws Exception {     executeTask(new SimpleMatcher<Integer>(), true). }
false;public;0;4;;@Test public void testCancelSortMatchWhileReadingFastInputs() throws Exception {     executeTask(new SimpleMatcher<Integer>(), false). }
false;public;0;4;;@Test public void testCancelSortMatchPriorToFirstRecordReading() throws Exception {     executeTask(new StuckInOpenMatcher<Integer>(), false). }
false;private;5;17;;private void executeTaskWithGenerator(JoinFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> joiner, int keys, int vals, int msecsTillCanceling, int maxTimeTillCanceled) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<Integer, Integer>> input1 = env.createInput(new UniformIntTupleGeneratorInputFormat(keys, vals)).     DataSet<Tuple2<Integer, Integer>> input2 = env.createInput(new UniformIntTupleGeneratorInputFormat(keys, vals)).     input1.join(input2, JoinOperatorBase.JoinHint.REPARTITION_SORT_MERGE).where(0).equalTo(0).with(joiner).output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>()).     env.setParallelism(PARALLELISM).     runAndCancelJob(env.createProgramPlan(), msecsTillCanceling, maxTimeTillCanceled). }
false;public;2;6;;@Override public Tuple2<HeavyCompare, Integer> join(Tuple2<HeavyCompare, Integer> first, Tuple2<HeavyCompare, Integer> second) throws Exception {     throw new Exception("Job should be canceled in sort-merge phase, never run here ..."). }
false;public;0;22;;@Test public void testCancelSortMatchWhileDoingHeavySorting() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     HeavyCompareGeneratorInputFormat input = new HeavyCompareGeneratorInputFormat(100).     DataSet<Tuple2<HeavyCompare, Integer>> input1 = env.createInput(input).     DataSet<Tuple2<HeavyCompare, Integer>> input2 = env.createInput(input).     input1.join(input2, JoinOperatorBase.JoinHint.REPARTITION_SORT_MERGE).where(0).equalTo(0).with(new JoinFunction<Tuple2<HeavyCompare, Integer>, Tuple2<HeavyCompare, Integer>, Tuple2<HeavyCompare, Integer>>() {          @Override         public Tuple2<HeavyCompare, Integer> join(Tuple2<HeavyCompare, Integer> first, Tuple2<HeavyCompare, Integer> second) throws Exception {             throw new Exception("Job should be canceled in sort-merge phase, never run here ...").         }     }).output(new DiscardingOutputFormat<Tuple2<HeavyCompare, Integer>>()).     runAndCancelJob(env.createProgramPlan(), 30 * 1000, 60 * 1000). }
false;public;0;4;;// --------------- Test Sort Matches that are canceled while in the Matching Phase ----------------- @Test public void testCancelSortMatchWhileJoining() throws Exception {     executeTaskWithGenerator(new DelayingMatcher<Integer>(), 500, 3, 10 * 1000, 20 * 1000). }
false;public;0;4;;@Test public void testCancelSortMatchWithLongCancellingResponse() throws Exception {     executeTaskWithGenerator(new LongCancelTimeMatcher<Integer>(), 500, 3, 10 * 1000, 10 * 1000). }
false;public;0;4;;// -------------------------------------- Test System corner cases --------------------------------- @Test public void testCancelSortMatchWithHighparallelism() throws Exception {     executeTask(new SimpleMatcher<Integer>(), false, 64). }
false;public;2;4;;@Override public Tuple2<IN, IN> join(Tuple2<IN, IN> first, Tuple2<IN, IN> second) throws Exception {     return new Tuple2<>(first.f0, second.f0). }
false;public;2;5;;@Override public Tuple2<IN, IN> join(Tuple2<IN, IN> first, Tuple2<IN, IN> second) throws Exception {     Thread.sleep(WAIT_TIME_PER_RECORD).     return new Tuple2<>(first.f0, second.f0). }
false;public;2;11;;@Override public Tuple2<IN, IN> join(Tuple2<IN, IN> first, Tuple2<IN, IN> second) throws Exception {     final long start = System.currentTimeMillis().     long remaining = WAIT_TIME_PER_RECORD.     do {         try {             Thread.sleep(remaining).         } catch (InterruptedException iex) {         }     } while ((remaining = WAIT_TIME_PER_RECORD - System.currentTimeMillis() + start) > 0).     return new Tuple2<>(first.f0, second.f0). }
false;public;1;6;;@Override public void open(Configuration parameters) throws Exception {     synchronized (this) {         wait().     } }
false;public;2;4;;@Override public Tuple2<IN, IN> join(Tuple2<IN, IN> first, Tuple2<IN, IN> second) throws Exception {     return new Tuple2<>(first.f0, second.f0). }
false;public;1;7;;@Override public int compareTo(org.apache.flink.test.cancelling.HeavyCompare o) {     try {         Thread.sleep(1000).     } catch (InterruptedException iex) {     }     return 0. }
false;public;0;4;;@Override public boolean reachedEnd() throws IOException {     return valueTotal <= 0. }
false;public;1;5;;@Override public Tuple2<HeavyCompare, Integer> nextRecord(Tuple2<HeavyCompare, Integer> reuse) throws IOException {     valueTotal -= 1.     return new Tuple2<>(new HeavyCompare(), 20110701). }
