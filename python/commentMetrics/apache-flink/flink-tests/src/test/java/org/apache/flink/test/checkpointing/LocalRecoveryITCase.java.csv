commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Parameterized.Parameters(name = "statebackend type ={0}") public static Collection<StateBackendEnum> parameter() {     return Arrays.asList(ROCKSDB_FULLY_ASYNC, ROCKSDB_INCREMENTAL_ZK, FILE_ASYNC). }
false;protected;0;4;;@Override protected StateBackendEnum getStateBackend() {     return backendEnum. }
false;protected;0;10;;@Override protected Configuration createClusterConfig() throws IOException {     Configuration config = super.createClusterConfig().     config.setBoolean(CheckpointingOptions.LOCAL_RECOVERY, localRecoveryEnabled).     return config. }
false;public,final;0;25;;@Test public final void executeTest() throws Exception {     EventTimeWindowCheckpointingITCase.tempFolder.create().     EventTimeWindowCheckpointingITCase windowChkITCase = new EventTimeWindowCheckpointingITCase() {          @Override         protected StateBackendEnum getStateBackend() {             return backendEnum.         }          @Override         protected Configuration createClusterConfig() throws IOException {             Configuration config = super.createClusterConfig().             config.setBoolean(CheckpointingOptions.LOCAL_RECOVERY, localRecoveryEnabled).             return config.         }     }.     executeTest(windowChkITCase). }
false;private;1;25;;private void executeTest(EventTimeWindowCheckpointingITCase delegate) throws Exception {     delegate.name = testName.     delegate.stateBackendEnum = backendEnum.     try {         delegate.setupTestCluster().         try {             delegate.testTumblingTimeWindow().             delegate.stopTestCluster().         } catch (Exception e) {             delegate.stopTestCluster().             throw new RuntimeException(e).         }         delegate.setupTestCluster().         try {             delegate.testSlidingTimeWindow().             delegate.stopTestCluster().         } catch (Exception e) {             delegate.stopTestCluster().             throw new RuntimeException(e).         }     } finally {         EventTimeWindowCheckpointingITCase.tempFolder.delete().     } }
