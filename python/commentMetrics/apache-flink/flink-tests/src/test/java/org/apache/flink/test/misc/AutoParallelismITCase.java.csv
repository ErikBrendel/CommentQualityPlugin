commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testProgramWithAutoParallelism() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(ExecutionConfig.PARALLELISM_AUTO_MAX).     env.getConfig().disableSysoutLogging().     DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat()).rebalance().mapPartition(new ParallelismDependentMapPartition()).     List<Integer> resultCollection = new ArrayList<>().     result.output(new LocalCollectionOutputFormat<>(resultCollection)).     try {         env.execute().         assertEquals(PARALLELISM, resultCollection.size()).     } catch (Exception ex) {         assertTrue(ExceptionUtils.findThrowableWithMessage(ex, ExecutionGraphBuilder.PARALLELISM_AUTO_MAX_ERROR_MESSAGE).isPresent()).     } }
false;public;1;5;;@Override public GenericInputSplit[] createInputSplits(int numSplits) throws IOException {     assertEquals(PARALLELISM, numSplits).     return super.createInputSplits(numSplits). }
false;public;0;4;;@Override public boolean reachedEnd() {     return emitted. }
false;public;1;8;;@Override public Integer nextRecord(Integer reuse) {     if (emitted) {         return null.     }     emitted = true.     return 1. }
false;public;2;4;;@Override public void mapPartition(Iterable<Integer> values, Collector<Integer> out) {     out.collect(getRuntimeContext().getIndexOfThisSubtask()). }
