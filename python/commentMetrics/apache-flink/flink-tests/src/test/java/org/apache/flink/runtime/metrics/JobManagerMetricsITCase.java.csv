commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void run(SourceContext<String> ctx) throws Exception {     sync.block(). }
false;public;0;4;;@Override public void cancel() {     sync.releaseBlocker(). }
false;public;0;19;;@Override public void go() throws Exception {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.addSource(new SourceFunction<String>() {          @Override         public void run(SourceContext<String> ctx) throws Exception {             sync.block().         }          @Override         public void cancel() {             sync.releaseBlocker().         }     }).addSink(new PrintSinkFunction()).     env.execute(). }
false;public;0;29;;@Before public void setUp() throws Exception {     jobExecuteThread = new CheckedThread() {          @Override         public void go() throws Exception {             StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().             env.addSource(new SourceFunction<String>() {                  @Override                 public void run(SourceContext<String> ctx) throws Exception {                     sync.block().                 }                  @Override                 public void cancel() {                     sync.releaseBlocker().                 }             }).addSink(new PrintSinkFunction()).             env.execute().         }     }.     jobExecuteThread.start().     sync.awaitBlocker(). }
false;public;0;37;;@Test public void testJobManagerMetrics() throws Exception {     assertEquals(1, TestReporter.OPENED_REPORTERS.size()).     TestReporter reporter = TestReporter.OPENED_REPORTERS.iterator().next().     List<String> expectedPatterns = getExpectedPatterns().     Collection<String> gaugeNames = reporter.getGauges().values().     for (String expectedPattern : expectedPatterns) {         boolean found = false.         for (String gaugeName : gaugeNames) {             if (gaugeName.matches(expectedPattern)) {                 found = true.             }         }         if (!found) {             fail(String.format("Failed to find gauge [%s] in registered gauges [%s]", expectedPattern, gaugeNames)).         }     }     for (Map.Entry<Gauge<?>, String> entry : reporter.getGauges().entrySet()) {         if (entry.getValue().contains(MetricNames.TASK_SLOTS_AVAILABLE)) {             assertEquals(0L, entry.getKey().getValue()).         } else if (entry.getValue().contains(MetricNames.TASK_SLOTS_TOTAL)) {             assertEquals(1L, entry.getKey().getValue()).         } else if (entry.getValue().contains(MetricNames.NUM_REGISTERED_TASK_MANAGERS)) {             assertEquals(1L, entry.getKey().getValue()).         } else if (entry.getValue().contains(MetricNames.NUM_RUNNING_JOBS)) {             assertEquals(1L, entry.getKey().getValue()).         }     }     sync.releaseBlocker().     jobExecuteThread.sync(). }
false;private,static;0;5;;private static Configuration getConfiguration() {     Configuration configuration = new Configuration().     configuration.setString("metrics.reporter.test_reporter.class", TestReporter.class.getName()).     return configuration. }
false;private,static;0;15;;private static List<String> getExpectedPatterns() {     String[] expectedGauges = new String[] { MetricNames.TASK_SLOTS_AVAILABLE, MetricNames.TASK_SLOTS_TOTAL, MetricNames.NUM_REGISTERED_TASK_MANAGERS, MetricNames.NUM_RUNNING_JOBS }.     List<String> patterns = new ArrayList<>().     for (String expectedGauge : expectedGauges) {         patterns.add(JOB_MANAGER_METRICS_PREFIX + expectedGauge).     }     return patterns. }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input. }
false;public;1;4;;@Override public void open(MetricConfig config) {     OPENED_REPORTERS.add(this). }
false;public;0;4;;@Override public void close() {     OPENED_REPORTERS.remove(this). }
false;public;0;3;;public Map<Gauge<?>, String> getGauges() {     return gauges. }
