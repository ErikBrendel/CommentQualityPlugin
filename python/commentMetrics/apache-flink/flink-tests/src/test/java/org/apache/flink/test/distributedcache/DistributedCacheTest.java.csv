commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;// ------------------------------------------------------------------------ @Test public void testStreamingDistributedCache() throws Exception {     String textPath = createTempFile("count.txt", DATA).     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.registerCachedFile(textPath, "cache_test").     env.readTextFile(textPath).flatMap(new WordChecker()).     env.execute(). }
false;public;0;7;;@Test public void testBatchDistributedCache() throws Exception {     String textPath = createTempFile("count.txt", DATA).     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.registerCachedFile(textPath, "cache_test").     env.readTextFile(textPath).flatMap(new WordChecker()).count(). }
false;public;1;10;;@Override public void open(Configuration conf) throws IOException {     File file = getRuntimeContext().getDistributedCache().getFile("cache_test").     try (BufferedReader reader = new BufferedReader(new FileReader(file))) {         String tempString.         while ((tempString = reader.readLine()) != null) {             wordList.add(tempString).         }     } }
false;public;2;7;;@Override public void flatMap(String word, Collector<Tuple1<String>> out) throws Exception {     assertTrue("Unexpected word in stream! wordFromStream: " + word + ", shouldBeOneOf: " + wordList.toString(), wordList.contains(word)).     out.collect(new Tuple1<>(word)). }
