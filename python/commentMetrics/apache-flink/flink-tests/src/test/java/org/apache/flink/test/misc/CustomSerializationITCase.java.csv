commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;public static Configuration getConfiguration() {     Configuration config = new Configuration().     config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "30m").     return config. }
false;public;1;4;;@Override public ConsumesTooMuch map(Long value) throws Exception {     return new ConsumesTooMuch(). }
false;public;0;30;;@Test public void testIncorrectSerializer1() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(PARLLELISM).         env.getConfig().disableSysoutLogging().         env.generateSequence(1, 10 * PARLLELISM).map(new MapFunction<Long, ConsumesTooMuch>() {              @Override             public ConsumesTooMuch map(Long value) throws Exception {                 return new ConsumesTooMuch().             }         }).rebalance().output(new DiscardingOutputFormat<ConsumesTooMuch>()).         env.execute().     } catch (JobExecutionException e) {         Throwable rootCause = e.getCause().         assertTrue(rootCause instanceof IOException).         assertTrue(rootCause.getMessage().contains("broken serialization")).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;4;;@Override public ConsumesTooMuchSpanning map(Long value) throws Exception {     return new ConsumesTooMuchSpanning(). }
false;public;0;30;;@Test public void testIncorrectSerializer2() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(PARLLELISM).         env.getConfig().disableSysoutLogging().         env.generateSequence(1, 10 * PARLLELISM).map(new MapFunction<Long, ConsumesTooMuchSpanning>() {              @Override             public ConsumesTooMuchSpanning map(Long value) throws Exception {                 return new ConsumesTooMuchSpanning().             }         }).rebalance().output(new DiscardingOutputFormat<ConsumesTooMuchSpanning>()).         env.execute().     } catch (JobExecutionException e) {         Throwable rootCause = e.getCause().         assertTrue(rootCause instanceof IOException).         assertTrue(rootCause.getMessage().contains("broken serialization")).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;4;;@Override public ConsumesTooLittle map(Long value) throws Exception {     return new ConsumesTooLittle(). }
false;public;0;30;;@Test public void testIncorrectSerializer3() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(PARLLELISM).         env.getConfig().disableSysoutLogging().         env.generateSequence(1, 10 * PARLLELISM).map(new MapFunction<Long, ConsumesTooLittle>() {              @Override             public ConsumesTooLittle map(Long value) throws Exception {                 return new ConsumesTooLittle().             }         }).rebalance().output(new DiscardingOutputFormat<ConsumesTooLittle>()).         env.execute().     } catch (JobExecutionException e) {         Throwable rootCause = e.getCause().         assertTrue(rootCause instanceof IOException).         assertTrue(rootCause.getMessage().contains("broken serialization")).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;4;;@Override public ConsumesTooLittleSpanning map(Long value) throws Exception {     return new ConsumesTooLittleSpanning(). }
false;public;0;30;;@Test public void testIncorrectSerializer4() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(PARLLELISM).         env.getConfig().disableSysoutLogging().         env.generateSequence(1, 10 * PARLLELISM).map(new MapFunction<Long, ConsumesTooLittleSpanning>() {              @Override             public ConsumesTooLittleSpanning map(Long value) throws Exception {                 return new ConsumesTooLittleSpanning().             }         }).rebalance().output(new DiscardingOutputFormat<ConsumesTooLittleSpanning>()).         env.execute().     } catch (ProgramInvocationException e) {         Throwable rootCause = e.getCause().getCause().         assertTrue(rootCause instanceof IOException).         assertTrue(rootCause.getMessage().contains("broken serialization")).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     // write 4 bytes     out.writeInt(42). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     // read 8 bytes     in.readLong(). }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     byte[] bytes = new byte[22541].     out.write(bytes). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     byte[] bytes = new byte[32941].     in.readFully(bytes). }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     // write 8 bytes     out.writeLong(42L). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     // read 4 bytes     in.readInt(). }
false;public;1;5;;@Override public void write(DataOutputView out) throws IOException {     byte[] bytes = new byte[32941].     out.write(bytes). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     byte[] bytes = new byte[22541].     in.readFully(bytes). }
