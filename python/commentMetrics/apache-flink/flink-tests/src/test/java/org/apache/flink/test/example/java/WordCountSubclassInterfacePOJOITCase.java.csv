commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void preSubmit() throws Exception {     textPath = createTempFile("text.txt", WordCountData.TEXT).     resultPath = getTempDirPath("result"). }
false;protected;0;4;;@Override protected void postSubmit() throws Exception {     compareResultsByLinesInMemory(WordCountData.COUNTS, resultPath). }
false;public;1;6;;@Override public WCBase map(WCBase value) throws Exception {     WC wc = (WC) value.     wc.count = wc.secretCount.getCount().     return wc. }
false;public;2;7;;public WCBase reduce(WCBase value1, WCBase value2) {     WC wc1 = (WC) value1.     WC wc2 = (WC) value2.     int c = wc1.secretCount.getCount() + wc2.secretCount.getCount().     wc1.secretCount.setCount(c).     return wc1. }
false;protected;0;31;;@Override protected void testProgram() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<String> text = env.readTextFile(textPath).     DataSet<WCBase> counts = text.flatMap(new Tokenizer()).groupBy("word").reduce(new ReduceFunction<WCBase>() {          private static final long serialVersionUID = 1L.          public WCBase reduce(WCBase value1, WCBase value2) {             WC wc1 = (WC) value1.             WC wc2 = (WC) value2.             int c = wc1.secretCount.getCount() + wc2.secretCount.getCount().             wc1.secretCount.setCount(c).             return wc1.         }     }).map(new MapFunction<WCBase, WCBase>() {          @Override         public WCBase map(WCBase value) throws Exception {             WC wc = (WC) value.             wc.count = wc.secretCount.getCount().             return wc.         }     }).     counts.writeAsText(resultPath).     env.execute("WordCount with custom data types example"). }
false;public;2;11;;@Override public void flatMap(String value, Collector<WCBase> out) {     // normalize and split the line     String[] tokens = value.toLowerCase().split("\\W+").     // emit the pairs     for (String token : tokens) {         if (token.length() > 0) {             out.collect(new WC(token, 1)).         }     } }
false;public;0;4;;@Override public String toString() {     return word + " " + count. }
false;;0;1;;int getCount().
false;;1;1;;void setCount(int c).
false;public;0;4;;@Override public int getCount() {     return countz. }
false;public;1;4;;@Override public void setCount(int c) {     this.countz = c. }
