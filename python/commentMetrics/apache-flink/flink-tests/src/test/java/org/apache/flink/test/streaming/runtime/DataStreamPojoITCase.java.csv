commented;modifiers;parameterAmount;loc;comment;code
false;public;2;22;;@Override public void flatMap(Data value, Collector<Data> out) throws Exception {     if (first[value.aaa] == null) {         first[value.aaa] = value.         if (value.sum != 1) {             throw new RuntimeException("Expected the sum to be one").         }     } else {         if (value.sum != 2) {             throw new RuntimeException("Expected the sum to be two").         }         if (first[value.aaa].aaa != value.aaa) {             throw new RuntimeException("aaa key wrong").         }         if (first[value.aaa].abc != value.abc) {             throw new RuntimeException("abc key wrong").         }         if (first[value.aaa].wxyz != value.wxyz) {             throw new RuntimeException("wxyz key wrong").         }     } }
true;public;0;43;/**  * Test composite key on the Data POJO (with nested fields).  */ ;/**  * Test composite key on the Data POJO (with nested fields).  */ @Test public void testCompositeKeyOnNestedPojo() throws Exception {     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.getConfig().disableObjectReuse().     see.setParallelism(3).     DataStream<Data> dataStream = see.fromCollection(elements).     DataStream<Data> summedStream = dataStream.keyBy("aaa", "abc", "wxyz").sum("sum").keyBy("aaa", "abc", "wxyz").flatMap(new FlatMapFunction<Data, Data>() {          private static final long serialVersionUID = 788865239171396315L.          Data[] first = new Data[3].          @Override         public void flatMap(Data value, Collector<Data> out) throws Exception {             if (first[value.aaa] == null) {                 first[value.aaa] = value.                 if (value.sum != 1) {                     throw new RuntimeException("Expected the sum to be one").                 }             } else {                 if (value.sum != 2) {                     throw new RuntimeException("Expected the sum to be two").                 }                 if (first[value.aaa].aaa != value.aaa) {                     throw new RuntimeException("aaa key wrong").                 }                 if (first[value.aaa].abc != value.abc) {                     throw new RuntimeException("abc key wrong").                 }                 if (first[value.aaa].wxyz != value.wxyz) {                     throw new RuntimeException("wxyz key wrong").                 }             }         }     }).     summedStream.print().     see.execute(). }
false;public;2;25;;@Override public void flatMap(Data value, Collector<Data> out) throws Exception {     if (value.stats.count != 123) {         throw new RuntimeException("Wrong value for value.stats.count").     }     if (first[value.aaa] == null) {         first[value.aaa] = value.         if (value.sum != 1) {             throw new RuntimeException("Expected the sum to be one").         }     } else {         if (value.sum != 2) {             throw new RuntimeException("Expected the sum to be two").         }         if (first[value.aaa].aaa != value.aaa) {             throw new RuntimeException("aaa key wrong").         }         if (first[value.aaa].abc != value.abc) {             throw new RuntimeException("abc key wrong").         }         if (first[value.aaa].wxyz != value.wxyz) {             throw new RuntimeException("wxyz key wrong").         }     } }
true;public;0;46;/**  * Test composite & nested key on the Data POJO.  */ ;/**  * Test composite & nested key on the Data POJO.  */ @Test public void testNestedKeyOnNestedPojo() throws Exception {     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.getConfig().disableObjectReuse().     see.setParallelism(4).     DataStream<Data> dataStream = see.fromCollection(elements).     DataStream<Data> summedStream = dataStream.keyBy("aaa", "stats.count").sum("sum").keyBy("aaa", "stats.count").flatMap(new FlatMapFunction<Data, Data>() {          private static final long serialVersionUID = -3678267280397950258L.          Data[] first = new Data[3].          @Override         public void flatMap(Data value, Collector<Data> out) throws Exception {             if (value.stats.count != 123) {                 throw new RuntimeException("Wrong value for value.stats.count").             }             if (first[value.aaa] == null) {                 first[value.aaa] = value.                 if (value.sum != 1) {                     throw new RuntimeException("Expected the sum to be one").                 }             } else {                 if (value.sum != 2) {                     throw new RuntimeException("Expected the sum to be two").                 }                 if (first[value.aaa].aaa != value.aaa) {                     throw new RuntimeException("aaa key wrong").                 }                 if (first[value.aaa].abc != value.abc) {                     throw new RuntimeException("abc key wrong").                 }                 if (first[value.aaa].wxyz != value.wxyz) {                     throw new RuntimeException("wxyz key wrong").                 }             }         }     }).     summedStream.print().     see.execute(). }
false;public;2;13;;@Override public void flatMap(Data value, Collector<Data> out) throws Exception {     if (first[value.aaa] == null) {         first[value.aaa] = value.         if (value.stats.count != 123) {             throw new RuntimeException("Expected stats.count to be 123").         }     } else {         if (value.stats.count != 2 * 123) {             throw new RuntimeException("Expected stats.count to be 2 * 123").         }     } }
false;public;0;33;;@Test public void testNestedPojoFieldAccessor() throws Exception {     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.getConfig().disableObjectReuse().     see.setParallelism(4).     DataStream<Data> dataStream = see.fromCollection(elements).     DataStream<Data> summedStream = dataStream.keyBy("aaa").sum("stats.count").keyBy("aaa").flatMap(new FlatMapFunction<Data, Data>() {          Data[] first = new Data[3].          @Override         public void flatMap(Data value, Collector<Data> out) throws Exception {             if (first[value.aaa] == null) {                 first[value.aaa] = value.                 if (value.stats.count != 123) {                     throw new RuntimeException("Expected stats.count to be 123").                 }             } else {                 if (value.stats.count != 2 * 123) {                     throw new RuntimeException("Expected stats.count to be 2 * 123").                 }             }         }     }).     summedStream.print().     see.execute(). }
false;public;0;7;;@Test(expected = CompositeType.InvalidFieldReferenceException.class) public void testFailOnNestedPojoFieldAccessor() throws Exception {     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     DataStream<Data> dataStream = see.fromCollection(elements).     dataStream.keyBy("aaa", "stats.count").sum("stats.nonExistingField"). }
false;public;0;9;;@Override public String toString() {     return "Data{" + "sum=" + sum + ", aaa=" + aaa + ", abc=" + abc + ", wxyz=" + wxyz + '}'. }
