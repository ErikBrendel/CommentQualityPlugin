commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testUnion2IdenticalDataSets() throws Exception {     /* 		 * Union of 2 Same Data Sets 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> unionDs = ds.union(CollectionDataSets.get3TupleDataSet(env)).     List<Tuple3<Integer, Long, String>> result = unionDs.collect().     String expected = FULL_TUPLE_3_STRING + FULL_TUPLE_3_STRING.     compareResultAsTuples(result, expected). }
false;public;0;22;;@Test public void testUnion5IdenticalDataSets() throws Exception {     /* 		 * Union of 5 same Data Sets, with multiple unions 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> unionDs = ds.union(CollectionDataSets.get3TupleDataSet(env)).union(CollectionDataSets.get3TupleDataSet(env)).union(CollectionDataSets.get3TupleDataSet(env)).union(CollectionDataSets.get3TupleDataSet(env)).     List<Tuple3<Integer, Long, String>> result = unionDs.collect().     String expected = FULL_TUPLE_3_STRING + FULL_TUPLE_3_STRING + FULL_TUPLE_3_STRING + FULL_TUPLE_3_STRING + FULL_TUPLE_3_STRING.     compareResultAsTuples(result, expected). }
false;public;0;20;;@Test public void testUnionWithEmptyDataSet() throws Exception {     /* 		 * Test on union with empty dataset 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // Don't know how to make an empty result in an other way than filtering it     DataSet<Tuple3<Integer, Long, String>> empty = CollectionDataSets.get3TupleDataSet(env).filter(new RichFilter1()).     DataSet<Tuple3<Integer, Long, String>> unionDs = CollectionDataSets.get3TupleDataSet(env).union(empty).     List<Tuple3<Integer, Long, String>> result = unionDs.collect().     String expected = FULL_TUPLE_3_STRING.     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return false. }
