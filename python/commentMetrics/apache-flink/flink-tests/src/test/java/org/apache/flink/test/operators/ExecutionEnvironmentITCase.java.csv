commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {     out.collect(getRuntimeContext().getIndexOfThisSubtask()). }
true;public;0;20;/**  * Ensure that the user can pass a custom configuration object to the LocalEnvironment.  */ ;/**  * Ensure that the user can pass a custom configuration object to the LocalEnvironment.  */ @Test public void testLocalEnvironmentWithConfig() throws Exception {     Configuration conf = new Configuration().     conf.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, PARALLELISM).     final ExecutionEnvironment env = ExecutionEnvironment.createLocalEnvironment(conf).     env.setParallelism(ExecutionConfig.PARALLELISM_AUTO_MAX).     env.getConfig().disableSysoutLogging().     DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat()).rebalance().mapPartition(new RichMapPartitionFunction<Integer, Integer>() {          @Override         public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {             out.collect(getRuntimeContext().getIndexOfThisSubtask()).         }     }).     List<Integer> resultCollection = result.collect().     assertEquals(PARALLELISM, resultCollection.size()). }
false;public;1;5;;@Override public GenericInputSplit[] createInputSplits(int numSplits) throws IOException {     assertEquals(PARALLELISM, numSplits).     return super.createInputSplits(numSplits). }
false;public;0;4;;@Override public boolean reachedEnd() {     return emitted. }
false;public;1;8;;@Override public Integer nextRecord(Integer reuse) {     if (emitted) {         return null.     }     emitted = true.     return 1. }
