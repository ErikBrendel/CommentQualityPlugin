commented;modifiers;parameterAmount;loc;comment;code
false;private;0;14;;private Configuration getConfiguration() {     final Inet6Address ipv6address = getLocalIPv6Address().     if (ipv6address == null) {         throw new AssumptionViolatedException("--- Cannot find a non-loopback local IPv6 address that Akka/Netty can bind to. skipping IPv6HostnamesITCase").     }     final String addressString = ipv6address.getHostAddress().     log.info("Test will use IPv6 address " + addressString + " for connection tests").     Configuration config = new Configuration().     config.setString(JobManagerOptions.ADDRESS, addressString).     config.setString(TaskManagerOptions.HOST, addressString).     config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "16m").     return config. }
false;public;2;8;;@Override public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {     for (String token : value.toLowerCase().split("\\W+")) {         if (token.length() > 0) {             out.collect(new Tuple2<String, Integer>(token, 1)).         }     } }
false;public;0;33;;@Test public void testClusterWithIPv6host() {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(4).         env.getConfig().disableSysoutLogging().         // get input data         DataSet<String> text = env.fromElements(WordCountData.TEXT.split("\n")).         DataSet<Tuple2<String, Integer>> counts = text.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {              @Override             public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {                 for (String token : value.toLowerCase().split("\\W+")) {                     if (token.length() > 0) {                         out.collect(new Tuple2<String, Integer>(token, 1)).                     }                 }             }         }).groupBy(0).sum(1).         List<Tuple2<String, Integer>> result = counts.collect().         TestBaseUtils.compareResultAsText(result, WordCountData.COUNTS_AS_TUPLES).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;private;0;48;;private Inet6Address getLocalIPv6Address() {     try {         Enumeration<NetworkInterface> e = NetworkInterface.getNetworkInterfaces().         while (e.hasMoreElements()) {             NetworkInterface netInterface = e.nextElement().             // for each address of the network interface             Enumeration<InetAddress> ee = netInterface.getInetAddresses().             while (ee.hasMoreElements()) {                 InetAddress addr = ee.nextElement().                 if (addr instanceof Inet6Address && (!addr.isLoopbackAddress()) && (!addr.isAnyLocalAddress())) {                     // see if it is possible to bind to the address                     InetSocketAddress socketAddress = new InetSocketAddress(addr, 0).                     try {                         log.info("Considering address " + addr).                         // test whether we can bind a socket to that address                         log.info("Testing whether sockets can bind to " + addr).                         ServerSocket sock = new ServerSocket().                         sock.bind(socketAddress).                         sock.close().                         // test whether Akka's netty can bind to the address                         log.info("Testing whether Akka can use " + addr).                         int port = NetUtils.getAvailablePort().                         ActorSystem as = AkkaUtils.createActorSystem(new Configuration(), new Some<scala.Tuple2<String, Object>>(new scala.Tuple2<String, Object>(addr.getHostAddress(), port))).                         as.shutdown().                         log.info("Using address " + addr).                         return (Inet6Address) addr.                     } catch (IOException ignored) {                     // fall through the loop                     }                 }             }         }         return null.     } catch (Exception e) {         return null.     } }
