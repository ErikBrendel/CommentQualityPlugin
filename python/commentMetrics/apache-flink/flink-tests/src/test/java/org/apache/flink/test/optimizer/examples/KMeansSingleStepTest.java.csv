commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testCompileKMeansSingleStepWithStats() {     Plan p = getKMeansPlan().     p.setExecutionConfig(new ExecutionConfig()).     // set the statistics     OperatorResolver cr = getContractResolver(p).     GenericDataSourceBase<?, ?> pointsSource = cr.getNode(DATAPOINTS).     GenericDataSourceBase<?, ?> centersSource = cr.getNode(CENTERS).     setSourceStatistics(pointsSource, 100L * 1024 * 1024 * 1024, 32f).     setSourceStatistics(centersSource, 1024 * 1024, 32f).     OptimizedPlan plan = compileWithStats(p).     checkPlan(plan). }
false;public;0;8;;@Test public void testCompileKMeansSingleStepWithOutStats() {     Plan p = getKMeansPlan().     p.setExecutionConfig(new ExecutionConfig()).     OptimizedPlan plan = compileNoStats(p).     checkPlan(plan). }
false;private;1;46;;private void checkPlan(OptimizedPlan plan) {     OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan).     final SinkPlanNode sink = or.getNode(SINK).     final SingleInputPlanNode reducer = or.getNode(REDUCER_NAME).     final SingleInputPlanNode combiner = (SingleInputPlanNode) reducer.getPredecessor().     final SingleInputPlanNode mapper = or.getNode(MAPPER_NAME).     // check the mapper     assertEquals(1, mapper.getBroadcastInputs().size()).     assertEquals(ShipStrategyType.FORWARD, mapper.getInput().getShipStrategy()).     assertEquals(ShipStrategyType.BROADCAST, mapper.getBroadcastInputs().get(0).getShipStrategy()).     assertEquals(LocalStrategy.NONE, mapper.getInput().getLocalStrategy()).     assertEquals(LocalStrategy.NONE, mapper.getBroadcastInputs().get(0).getLocalStrategy()).     assertEquals(DriverStrategy.MAP, mapper.getDriverStrategy()).     assertNull(mapper.getInput().getLocalStrategyKeys()).     assertNull(mapper.getInput().getLocalStrategySortOrder()).     assertNull(mapper.getBroadcastInputs().get(0).getLocalStrategyKeys()).     assertNull(mapper.getBroadcastInputs().get(0).getLocalStrategySortOrder()).     // check the combiner     Assert.assertNotNull(combiner).     assertEquals(ShipStrategyType.FORWARD, combiner.getInput().getShipStrategy()).     assertEquals(LocalStrategy.NONE, combiner.getInput().getLocalStrategy()).     assertEquals(DriverStrategy.SORTED_GROUP_COMBINE, combiner.getDriverStrategy()).     assertNull(combiner.getInput().getLocalStrategyKeys()).     assertNull(combiner.getInput().getLocalStrategySortOrder()).     assertEquals(set0, combiner.getKeys(0)).     assertEquals(set0, combiner.getKeys(1)).     // check the reducer     assertEquals(ShipStrategyType.PARTITION_HASH, reducer.getInput().getShipStrategy()).     assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy()).     assertEquals(DriverStrategy.SORTED_GROUP_REDUCE, reducer.getDriverStrategy()).     assertEquals(set0, reducer.getKeys(0)).     assertEquals(set0, reducer.getInput().getLocalStrategyKeys()).     assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0))).     // check the sink     assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).     assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy()). }
false;public,static;0;14;;public static Plan getKMeansPlan() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         kmeans(new String[] { IN_FILE, IN_FILE, OUT_FILE, "20" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("KMeans failed with an exception").     }     return env.getPlan(). }
false;public;1;4;;@Override public Point map(Tuple2<Double, Double> value) throws Exception {     return new Point(value.f0, value.f1). }
false;public;1;4;;@Override public Centroid map(Tuple3<Integer, Double, Double> value) throws Exception {     return new Centroid(value.f0, value.f1, value.f2). }
false;public,static;1;37;;public static void kmeans(String[] args) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Point> points = env.readCsvFile(args[0]).fieldDelimiter(" ").includeFields(true, true).types(Double.class, Double.class).name(DATAPOINTS).map(new MapFunction<Tuple2<Double, Double>, Point>() {          @Override         public Point map(Tuple2<Double, Double> value) throws Exception {             return new Point(value.f0, value.f1).         }     }).     DataSet<Centroid> centroids = env.readCsvFile(args[1]).fieldDelimiter(" ").includeFields(true, true, true).types(Integer.class, Double.class, Double.class).name(CENTERS).map(new MapFunction<Tuple3<Integer, Double, Double>, Centroid>() {          @Override         public Centroid map(Tuple3<Integer, Double, Double> value) throws Exception {             return new Centroid(value.f0, value.f1, value.f2).         }     }).     DataSet<Tuple3<Integer, Point, Integer>> newCentroids = points.map(new SelectNearestCenter()).name(MAPPER_NAME).withBroadcastSet(centroids, "centroids").     DataSet<Tuple3<Integer, Point, Integer>> recomputeClusterCenter = newCentroids.groupBy(0).reduceGroup(new RecomputeClusterCenter()).name(REDUCER_NAME).     recomputeClusterCenter.project(0, 1).writeAsCsv(args[2], "\n", " ").name(SINK).     env.execute("KMeans Example"). }
false;public;1;5;;public Point add(Point other) {     f0 += other.f0.     f1 += other.f1.     return this. }
false;public;1;5;;public Point div(long val) {     f0 /= val.     f1 /= val.     return this. }
false;public;1;3;;public double euclideanDistance(Point other) {     return Math.sqrt((f0 - other.f0) * (f0 - other.f0) + (f1 - other.f1) * (f1 - other.f1)). }
false;public;1;3;;public double euclideanDistance(Centroid other) {     return Math.sqrt((f0 - other.f1.f0) * (f0 - other.f1.f0) + (f1 - other.f1.f1) * (f1 - other.f1.f1)). }
false;public;1;4;;@Override public void open(Configuration parameters) throws Exception {     this.centroids = getRuntimeContext().getBroadcastVariable("centroids"). }
false;public;1;13;;@Override public Tuple3<Integer, Point, Integer> map(Point p) throws Exception {     double minDistance = Double.MAX_VALUE.     int closestCentroidId = -1.     for (Centroid centroid : centroids) {         double distance = p.euclideanDistance(centroid).         if (distance < minDistance) {             minDistance = distance.             closestCentroidId = centroid.f0.         }     }     return new Tuple3<>(closestCentroidId, p, 1). }
false;public;2;14;;@Override public void reduce(Iterable<Tuple3<Integer, Point, Integer>> values, Collector<Tuple3<Integer, Point, Integer>> out) throws Exception {     int id = -1.     double x = 0.     double y = 0.     int count = 0.     for (Tuple3<Integer, Point, Integer> value : values) {         id = value.f0.         x += value.f1.f0.         y += value.f1.f1.         count += value.f2.     }     out.collect(new Tuple3<>(id, new Point(x, y), count)). }
false;public;2;4;;@Override public void combine(Iterable<Tuple3<Integer, Point, Integer>> values, Collector<Tuple3<Integer, Point, Integer>> out) throws Exception {     reduce(values, out). }
