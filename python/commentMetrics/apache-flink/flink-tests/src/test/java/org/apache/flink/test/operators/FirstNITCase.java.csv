commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testFirstNOnUngroupedDS() throws Exception {     /* 		 * First-n on ungrouped data set 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple1<Integer>> seven = ds.first(7).map(new OneMapper()).sum(0).     List<Tuple1<Integer>> result = seven.collect().     String expected = "(7)\n".     compareResultAsText(result, expected). }
false;public;0;18;;@Test public void testFirstNOnGroupedDS() throws Exception {     /* 		 * First-n on grouped data set 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple2<Long, Integer>> first = ds.groupBy(1).first(4).map(new OneMapper2()).groupBy(0).sum(1).     List<Tuple2<Long, Integer>> result = first.collect().     String expected = "(1,1)\n(2,2)\n(3,3)\n(4,4)\n(5,4)\n(6,4)\n".     compareResultAsText(result, expected). }
false;public;0;23;;@Test public void testFirstNOnGroupedAndSortedDS() throws Exception {     /* 		 * First-n on grouped and sorted data set 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple2<Long, Integer>> first = ds.groupBy(1).sortGroup(0, Order.DESCENDING).first(3).project(1, 0).     List<Tuple2<Long, Integer>> result = first.collect().     String expected = "(1,1)\n" + "(2,3)\n(2,2)\n" + "(3,6)\n(3,5)\n(3,4)\n" + "(4,10)\n(4,9)\n(4,8)\n" + "(5,15)\n(5,14)\n(5,13)\n" + "(6,21)\n(6,20)\n(6,19)\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public Double getKey(String value) throws Exception {     return 1.0. }
false;public;1;4;;@Override public Long getKey(String value) throws Exception {     return 1L. }
true;public;0;23;/**  * Test for FLINK-2135.  */ ;/**  * Test for FLINK-2135.  */ @Test public void testFaultyCast() throws Exception {     ExecutionEnvironment ee = ExecutionEnvironment.getExecutionEnvironment().     DataSet<String> b = ee.fromElements("a", "b").     GroupReduceOperator<String, String> a = b.groupBy(new KeySelector<String, Long>() {          @Override         public Long getKey(String value) throws Exception {             return 1L.         }     }).sortGroup(new KeySelector<String, Double>() {          @Override         public Double getKey(String value) throws Exception {             return 1.0.         }     }, Order.DESCENDING).first(1).     List<String> result = b.collect().     String expected = "a\nb".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public Tuple1<Integer> map(Tuple3<Integer, Long, String> value) {     return one. }
false;public;1;5;;@Override public Tuple2<Long, Integer> map(Tuple3<Integer, Long, String> value) {     one.f0 = value.f1.     return one. }
