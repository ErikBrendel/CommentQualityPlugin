commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@Test public void testSerializerTree() {     @SuppressWarnings("unchecked")     TypeInformation<CollectionDataSets.PojoWithCollectionGeneric> ti = (TypeInformation<CollectionDataSets.PojoWithCollectionGeneric>) TypeExtractor.createTypeInfo(CollectionDataSets.PojoWithCollectionGeneric.class).     String serTree = Utils.getSerializerTree(ti).     // We can not test against the entire output because the fields of 'String' differ     // between java versions     Assert.assertTrue(serTree.startsWith("GenericTypeInfo (PojoWithCollectionGeneric)\n" + "    pojos:java.util.List\n" + "    key:int\n" + "    sqlDate:java.sql.Date\n" + "    bigInt:java.math.BigInteger\n" + "        signum:int\n" + "        mag:[I\n" + "        bitCount:int\n" + "        bitLength:int\n" + "        lowestSetBit:int\n" + "        firstNonzeroIntNum:int\n" + "    bigDecimalKeepItNull:java.math.BigDecimal\n" + "        intVal:java.math.BigInteger\n" + "            signum:int\n" + "            mag:[I\n" + "            bitCount:int\n" + "            bitLength:int\n" + "            lowestSetBit:int\n" + "            firstNonzeroIntNum:int\n" + "        scale:int\n" + "    scalaBigInt:scala.math.BigInt\n" + "        bigInteger:java.math.BigInteger\n" + "            signum:int\n" + "            mag:[I\n" + "            bitCount:int\n" + "            bitLength:int\n" + "            lowestSetBit:int\n" + "            firstNonzeroIntNum:int\n" + "    mixed:java.util.List\n" + "    makeMeGeneric:org.apache.flink.test.operators.util.CollectionDataSets$PojoWithDateAndEnum\n" + "        group:java.lang.String\n")). }
