commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void run() {     try {         testTaskManagerFailure(config, coordinateDirClosure).     } catch (Throwable t) {         t.printStackTrace().         errorRef.set(t).     } }
false;public;0;135;;@Test public void testTaskManagerProcessFailure() throws Exception {     TestProcess taskManagerProcess1 = null.     TestProcess taskManagerProcess2 = null.     TestProcess taskManagerProcess3 = null.     File coordinateTempDir = null.     Configuration config = new Configuration().     config.setString(AkkaOptions.ASK_TIMEOUT, "100 s").     config.setString(JobManagerOptions.ADDRESS, "localhost").     config.setString(RestOptions.BIND_PORT, "0").     config.setLong(HeartbeatManagerOptions.HEARTBEAT_INTERVAL, 500L).     config.setLong(HeartbeatManagerOptions.HEARTBEAT_TIMEOUT, 10000L).     config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper").     config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString()).     config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getAbsolutePath()).     config.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, 2).     config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "4m").     config.setInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS, 100).     try (final StandaloneSessionClusterEntrypoint clusterEntrypoint = new StandaloneSessionClusterEntrypoint(config)) {         // check that we run this test only if the java command         // is available on this machine         String javaCommand = getJavaCommandPath().         if (javaCommand == null) {             System.out.println("---- Skipping Process Failure test : Could not find java executable ----").             return.         }         clusterEntrypoint.startCluster().         // coordination between the processes goes through a directory         coordinateTempDir = temporaryFolder.newFolder().         TestProcessBuilder taskManagerProcessBuilder = new TestProcessBuilder(TaskExecutorProcessEntryPoint.class.getName()).         taskManagerProcessBuilder.addConfigAsMainClassArgs(config).         // start the first two TaskManager processes         taskManagerProcess1 = taskManagerProcessBuilder.start().         taskManagerProcess2 = taskManagerProcessBuilder.start().         // the program will set a marker file in each of its parallel tasks once they are ready, so that         // this coordinating code is aware of this.         // the program will very slowly consume elements until the marker file (later created by the         // test driver code) is present         final File coordinateDirClosure = coordinateTempDir.         final AtomicReference<Throwable> errorRef = new AtomicReference<>().         // we trigger program execution in a separate thread         Thread programTrigger = new Thread("Program Trigger") {              @Override             public void run() {                 try {                     testTaskManagerFailure(config, coordinateDirClosure).                 } catch (Throwable t) {                     t.printStackTrace().                     errorRef.set(t).                 }             }         }.         // start the test program         programTrigger.start().         // max 20 seconds         if (!waitForMarkerFiles(coordinateTempDir, READY_MARKER_FILE_PREFIX, PARALLELISM, 120000)) {             // check if the program failed for some reason             if (errorRef.get() != null) {                 Throwable error = errorRef.get().                 error.printStackTrace().                 fail("The program encountered a " + error.getClass().getSimpleName() + " : " + error.getMessage()).             } else {                 // no error occurred, simply a timeout                 fail("The tasks were not started within time (" + 120000 + "msecs)").             }         }         // start the third TaskManager         taskManagerProcess3 = taskManagerProcessBuilder.start().         // kill one of the previous TaskManagers, triggering a failure and recovery         taskManagerProcess1.destroy().         taskManagerProcess1 = null.         // we create the marker file which signals the program functions tasks that they can complete         touchFile(new File(coordinateTempDir, PROCEED_MARKER_FILE)).         // wait for at most 5 minutes for the program to complete         programTrigger.join(300000).         // check that the program really finished         assertFalse("The program did not finish in time", programTrigger.isAlive()).         // check whether the program encountered an error         if (errorRef.get() != null) {             Throwable error = errorRef.get().             error.printStackTrace().             fail("The program encountered a " + error.getClass().getSimpleName() + " : " + error.getMessage()).         }     // all seems well :-)     } catch (Exception e) {         e.printStackTrace().         printProcessLog("TaskManager 1", taskManagerProcess1.getOutput().toString()).         printProcessLog("TaskManager 2", taskManagerProcess1.getOutput().toString()).         printProcessLog("TaskManager 3", taskManagerProcess1.getOutput().toString()).         fail(e.getMessage()).     } catch (Error e) {         e.printStackTrace().         printProcessLog("TaskManager 1", taskManagerProcess1.getOutput().toString()).         printProcessLog("TaskManager 2", taskManagerProcess1.getOutput().toString()).         printProcessLog("TaskManager 3", taskManagerProcess1.getOutput().toString()).         throw e.     } finally {         if (taskManagerProcess1 != null) {             taskManagerProcess1.destroy().         }         if (taskManagerProcess2 != null) {             taskManagerProcess2.destroy().         }         if (taskManagerProcess3 != null) {             taskManagerProcess3.destroy().         }     } }
true;public,abstract;2;1;/**  * The test program should be implemented here in a form of a separate thread.  * This provides a solution for checking that it has been terminated.  *  * @param configuration the config to use  * @param coordinateDir TaskManager failure will be triggered only after processes  *                             have successfully created file under this directory  */ ;/**  * The test program should be implemented here in a form of a separate thread.  * This provides a solution for checking that it has been terminated.  *  * @param configuration the config to use  * @param coordinateDir TaskManager failure will be triggered only after processes  *                             have successfully created file under this directory  */ public abstract void testTaskManagerFailure(Configuration configuration, File coordinateDir) throws Exception.
false;protected,static;2;13;;protected static void printProcessLog(String processName, String log) {     if (log == null || log.length() == 0) {         return.     }     System.out.println("-----------------------------------------").     System.out.println(" BEGIN SPAWNED PROCESS LOG FOR " + processName).     System.out.println("-----------------------------------------").     System.out.println(log).     System.out.println("-----------------------------------------").     System.out.println("		END SPAWNED PROCESS LOG").     System.out.println("-----------------------------------------"). }
false;protected,static;1;8;;protected static void touchFile(File file) throws IOException {     if (!file.exists()) {         new FileOutputStream(file).close().     }     if (!file.setLastModified(System.currentTimeMillis())) {         throw new IOException("Could not touch the file.").     } }
false;protected,static;4;33;;protected static boolean waitForMarkerFiles(File basedir, String prefix, int num, long timeout) {     long now = System.currentTimeMillis().     final long deadline = now + timeout.     while (now < deadline) {         boolean allFound = true.         for (int i = 0. i < num. i++) {             File nextToCheck = new File(basedir, prefix + i).             if (!nextToCheck.exists()) {                 allFound = false.                 break.             }         }         if (allFound) {             return true.         } else {             // not all found, wait for a bit             try {                 Thread.sleep(10).             } catch (InterruptedException e) {                 throw new RuntimeException(e).             }             now = System.currentTimeMillis().         }     }     return false. }
false;public,static;1;12;;public static void main(String[] args) {     try {         final ParameterTool parameterTool = ParameterTool.fromArgs(args).         Configuration cfg = parameterTool.getConfiguration().         TaskManagerRunner.runTaskManager(cfg, ResourceID.generate()).     } catch (Throwable t) {         LOG.error("Failed to start TaskManager process", t).         System.exit(1).     } }
