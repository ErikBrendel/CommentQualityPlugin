commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Implementations are expected to assemble the test topology in this function  * using the provided {@link StreamExecutionEnvironment}.  */ ;/**  * Implementations are expected to assemble the test topology in this function  * using the provided {@link StreamExecutionEnvironment}.  */ public abstract void testProgram(StreamExecutionEnvironment env).
true;public,abstract;0;1;/**  * Implementations are expected to provide test here to verify the correct behavior.  */ ;/**  * Implementations are expected to provide test here to verify the correct behavior.  */ public abstract void postSubmit() throws Exception.
true;public;0;20;/**  * Runs the following program the test program defined in {@link #testProgram(StreamExecutionEnvironment)}  * followed by the checks in {@link #postSubmit}.  */ ;/**  * Runs the following program the test program defined in {@link #testProgram(StreamExecutionEnvironment)}  * followed by the checks in {@link #postSubmit}.  */ @Test public void runCheckpointedProgram() throws Exception {     try {         StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(PARALLELISM).         env.enableCheckpointing(500).         env.getConfig().disableSysoutLogging().         env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L)).         testProgram(env).         TestUtils.tryExecute(env, "Fault Tolerance Test").         postSubmit().     } catch (Exception e) {         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;0;4;;@Override public String toString() {     return prefix + " / " + value. }
