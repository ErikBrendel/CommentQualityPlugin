commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the coordinate vector of a multi-dimensional point.  *  * @return The coordinate vector of a multi-dimensional point.  */ ;/**  * Returns the coordinate vector of a multi-dimensional point.  *  * @return The coordinate vector of a multi-dimensional point.  */ public double[] getCoordinates() {     return this.coordinates. }
true;public;1;3;/**  * Sets the coordinate vector of a multi-dimensional point.  *  * @param coordinates The dimension values of the point.  */ ;/**  * Sets the coordinate vector of a multi-dimensional point.  *  * @param coordinates The dimension values of the point.  */ public void setCoordinates(double[] coordinates) {     this.coordinates = coordinates. }
true;public;1;13;/**  * Computes the Euclidean distance between this coordinate vector and a  * second coordinate vector.  *  * @param cv The coordinate vector to which the distance is computed.  * @return The Euclidean distance to coordinate vector cv. If cv has a  *         different length than this coordinate vector, -1 is returned.  */ ;/**  * Computes the Euclidean distance between this coordinate vector and a  * second coordinate vector.  *  * @param cv The coordinate vector to which the distance is computed.  * @return The Euclidean distance to coordinate vector cv. If cv has a  *         different length than this coordinate vector, -1 is returned.  */ public double computeEuclideanDistance(CoordVector cv) {     // check coordinate vector lengths     if (cv.coordinates.length != this.coordinates.length) {         return -1.0.     }     double quadSum = 0.0.     for (int i = 0. i < this.coordinates.length. i++) {         double diff = this.coordinates[i] - cv.coordinates[i].         quadSum += diff * diff.     }     return Math.sqrt(quadSum). }
false;public;1;8;;@Override public void read(DataInputView in) throws IOException {     int length = in.readInt().     this.coordinates = new double[length].     for (int i = 0. i < length. i++) {         this.coordinates[i] = in.readDouble().     } }
false;public;1;7;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(this.coordinates.length).     for (int i = 0. i < this.coordinates.length. i++) {         out.writeDouble(this.coordinates[i]).     } }
true;public;1;20;/**  * Compares this coordinate vector to another key.  *  * @return -1 if the other key is not of type CoordVector. If the other  *         key is also a CoordVector but its length differs from this  *         coordinates vector, -1 is return if this coordinate vector is  *         smaller and 1 if it is larger. If both coordinate vectors  *         have the same length, the coordinates of both are compared.  *         If a coordinate of this coordinate vector is smaller than the  *         corresponding coordinate of the other vector -1 is returned  *         and 1 otherwise. If all coordinates are identical 0 is  *         returned.  */ ;/**  * Compares this coordinate vector to another key.  *  * @return -1 if the other key is not of type CoordVector. If the other  *         key is also a CoordVector but its length differs from this  *         coordinates vector, -1 is return if this coordinate vector is  *         smaller and 1 if it is larger. If both coordinate vectors  *         have the same length, the coordinates of both are compared.  *         If a coordinate of this coordinate vector is smaller than the  *         corresponding coordinate of the other vector -1 is returned  *         and 1 otherwise. If all coordinates are identical 0 is  *         returned.  */ @Override public int compareTo(CoordVector o) {     // check if both coordinate vectors have identical lengths     if (o.coordinates.length > this.coordinates.length) {         return -1.     } else if (o.coordinates.length < this.coordinates.length) {         return 1.     }     // compare all coordinates     for (int i = 0. i < this.coordinates.length. i++) {         if (o.coordinates[i] > this.coordinates[i]) {             return -1.         } else if (o.coordinates[i] < this.coordinates[i]) {             return 1.         }     }     return 0. }
