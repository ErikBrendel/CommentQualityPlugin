commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testAllRejectingFilter() throws Exception {     /* 		 * Test all-rejecting filter. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new Filter1()).     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return false. }
false;public;0;37;;@Test public void testAllPassingFilter() throws Exception {     /* 		 * Test all-passing filter. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new Filter2()).     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "1,1,Hi\n" + "2,2,Hello\n" + "3,2,Hello world\n" + "4,3,Hello world, how are you?\n" + "5,3,I am fine.\n" + "6,3,Luke Skywalker\n" + "7,4,Comment#1\n" + "8,4,Comment#2\n" + "9,4,Comment#3\n" + "10,4,Comment#4\n" + "11,5,Comment#5\n" + "12,5,Comment#6\n" + "13,5,Comment#7\n" + "14,5,Comment#8\n" + "15,5,Comment#9\n" + "16,6,Comment#10\n" + "17,6,Comment#11\n" + "18,6,Comment#12\n" + "19,6,Comment#13\n" + "20,6,Comment#14\n" + "21,6,Comment#15\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return true. }
false;public;0;20;;@Test public void testFilterOnStringTupleField() throws Exception {     /* 		 * Test filter on String tuple field. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new Filter3()).     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "3,2,Hello world\n" + "4,3,Hello world, how are you?\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return value.f2.contains("world"). }
false;public;0;26;;@Test public void testFilterOnIntegerTupleField() throws Exception {     /* 		 * Test filter on Integer tuple field. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new Filter4()).     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "2,2,Hello\n" + "4,3,Hello world, how are you?\n" + "6,3,Luke Skywalker\n" + "8,4,Comment#2\n" + "10,4,Comment#4\n" + "12,5,Comment#6\n" + "14,5,Comment#8\n" + "16,6,Comment#10\n" + "18,6,Comment#12\n" + "20,6,Comment#14\n".     compareResultAsTuples(result, expected). }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return (value.f0 % 2) == 0. }
false;public;0;20;;@Test public void testFilterBasicType() throws Exception {     /* 		 * Test filter on basic type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<String> ds = CollectionDataSets.getStringDataSet(env).     DataSet<String> filterDs = ds.filter(new Filter5()).     List<String> result = filterDs.collect().     String expected = "Hi\n" + "Hello\n" + "Hello world\n" + "Hello world, how are you?\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public boolean filter(String value) throws Exception {     return value.startsWith("H"). }
false;public;0;20;;@Test public void testFilterOnCustomType() throws Exception {     /* 		 * Test filter on custom type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<CustomType> ds = CollectionDataSets.getCustomTypeDataSet(env).     DataSet<CustomType> filterDs = ds.filter(new Filter6()).     List<CustomType> result = filterDs.collect().     String expected = "3,3,Hello world, how are you?\n" + "3,4,I am fine.\n" + "3,5,Luke Skywalker\n".     compareResultAsText(result, expected). }
false;public;1;4;;@Override public boolean filter(CustomType value) throws Exception {     return value.myString.contains("a"). }
false;public;0;22;;@Test public void testRichFilterOnStringTupleField() throws Exception {     /* 		 * Test filter on String tuple field. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> ints = CollectionDataSets.getIntegerDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new RichFilter1()).withBroadcastSet(ints, "ints").     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "1,1,Hi\n" + "2,2,Hello\n" + "3,2,Hello world\n" + "4,3,Hello world, how are you?\n".     compareResultAsTuples(result, expected). }
false;public;1;7;;@Override public void open(Configuration config) {     Collection<Integer> ints = this.getRuntimeContext().getBroadcastVariable("ints").     for (int i : ints) {         literal = literal < i ? i : literal.     } }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return value.f0 < literal. }
false;public;0;23;;@Test public void testFilterWithBroadcastVariables() throws Exception {     /* 		 * Test filter with broadcast variables 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Integer> intDs = CollectionDataSets.getIntegerDataSet(env).     DataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.get3TupleDataSet(env).     DataSet<Tuple3<Integer, Long, String>> filterDs = ds.filter(new RichFilter2()).withBroadcastSet(intDs, "ints").     List<Tuple3<Integer, Long, String>> result = filterDs.collect().     String expected = "11,5,Comment#5\n" + "12,5,Comment#6\n" + "13,5,Comment#7\n" + "14,5,Comment#8\n" + "15,5,Comment#9\n".     compareResultAsTuples(result, expected). }
false;public;1;7;;@Override public void open(Configuration config) {     Collection<Integer> ints = this.getRuntimeContext().getBroadcastVariable("ints").     for (Integer i : ints) {         broadcastSum += i.     } }
false;public;1;4;;@Override public boolean filter(Tuple3<Integer, Long, String> value) throws Exception {     return (value.f1 == (broadcastSum / 11)). }
