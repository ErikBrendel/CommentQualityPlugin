commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void ensureStateHandlesHaveSerialVersionUID() {     try {         Reflections reflections = new Reflections("org.apache.flink").         // check all state handles         @SuppressWarnings("unchecked")         Set<Class<?>> stateHandleImplementations = (Set<Class<?>>) (Set<?>) reflections.getSubTypesOf(StateObject.class).         for (Class<?> clazz : stateHandleImplementations) {             validataSerialVersionUID(clazz).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;private,static;1;21;;private static void validataSerialVersionUID(Class<?> clazz) {     // all non-interface types must have a serial version UID     if (!clazz.isInterface()) {         assertFalse("Anonymous state handle classes have problematic serialization behavior: " + clazz, clazz.isAnonymousClass()).         try {             Field versionUidField = clazz.getDeclaredField("serialVersionUID").             // check conditions first via "if" to prevent always constructing expensive error messages             if (!(Modifier.isPrivate(versionUidField.getModifiers()) && Modifier.isStatic(versionUidField.getModifiers()) && Modifier.isFinal(versionUidField.getModifiers()))) {                 fail(clazz.getName() + " - serialVersionUID is not 'private static final'").             }         } catch (NoSuchFieldException e) {             fail("State handle implementation '" + clazz.getName() + "' is missing the serialVersionUID").         }     } }
