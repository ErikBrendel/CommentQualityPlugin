# id;timestamp;commentText;codeText;commentWords;codeWords
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1467726666;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getKeyValueState("test", String.class, "")__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()__		_		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,key,value,state,test,string,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1472663401;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getKeyValueState("test", String.class, "")__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()__		_		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,key,value,state,test,string,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1472663401;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getKeyValueState("test", String.class, "")__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,key,value,state,test,string,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1472663401;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getKeyValueState("test", String.class, "")__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,key,value,state,test,string,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1475231926;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1476972861;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1484216798;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			if (!(t != null && t.getCause() instanceof SuccessException)) {_				throw e__			}_		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,if,t,null,t,get,cause,instanceof,success,exception,throw,e
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1487167701;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1487871589;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1488304933;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1493229257;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())____		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String,Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1499899067;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1515481551;Verify that the user-specified state backend is used even if checkpointing is disabled.__@throws Exception;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<Integer>("Test", Integer.class, 0))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled,throws,exception;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,integer,test,integer,class,0,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1516295283;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			Throwable t = e.getCause()__			assertTrue("wrong exception", t instanceof SuccessException)__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,throwable,t,e,get,cause,assert,true,wrong,exception,t,instanceof,success,exception
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1516626397;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1517489695;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1517489696;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1531419503;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1539939663;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
StateBackendITCase -> @Test 	public void testStateBackendWithoutCheckpointing() throws Exception;1550863001;Verify that the user-specified state backend is used even if checkpointing is disabled.;@Test_	public void testStateBackendWithoutCheckpointing() throws Exception {__		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)___		see.getConfig().setRestartStrategy(RestartStrategies.noRestart())__		see.setStateBackend(new FailingStateBackend())___		see.fromElements(new Tuple2<>("Hello", 1))_			.keyBy(0)_			.map(new RichMapFunction<Tuple2<String, Integer>, String>() {_				private static final long serialVersionUID = 1L___				@Override_				public void open(Configuration parameters) throws Exception {_					super.open(parameters)__					getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class))__				}__				@Override_				public String map(Tuple2<String, Integer> value) throws Exception {_					return value.f0__				}_			})_			.print()___		try {_			see.execute()__			fail()__		}_		catch (JobExecutionException e) {_			assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent())__		}_	};verify,that,the,user,specified,state,backend,is,used,even,if,checkpointing,is,disabled;test,public,void,test,state,backend,without,checkpointing,throws,exception,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,get,config,set,restart,strategy,restart,strategies,no,restart,see,set,state,backend,new,failing,state,backend,see,from,elements,new,tuple2,hello,1,key,by,0,map,new,rich,map,function,tuple2,string,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,get,runtime,context,get,state,new,value,state,descriptor,test,integer,class,override,public,string,map,tuple2,string,integer,value,throws,exception,return,value,f0,print,try,see,execute,fail,catch,job,execution,exception,e,assert,true,exception,utils,find,throwable,e,success,exception,class,is,present
