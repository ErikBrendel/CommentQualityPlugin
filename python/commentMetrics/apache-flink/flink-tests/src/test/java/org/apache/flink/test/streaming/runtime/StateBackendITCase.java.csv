commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class)). }
false;public;1;4;;@Override public String map(Tuple2<String, Integer> value) throws Exception {     return value.f0. }
true;public;0;35;/**  * Verify that the user-specified state backend is used even if checkpointing is disabled.  */ ;/**  * Verify that the user-specified state backend is used even if checkpointing is disabled.  */ @Test public void testStateBackendWithoutCheckpointing() throws Exception {     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.setParallelism(1).     see.getConfig().setRestartStrategy(RestartStrategies.noRestart()).     see.setStateBackend(new FailingStateBackend()).     see.fromElements(new Tuple2<>("Hello", 1)).keyBy(0).map(new RichMapFunction<Tuple2<String, Integer>, String>() {          private static final long serialVersionUID = 1L.          @Override         public void open(Configuration parameters) throws Exception {             super.open(parameters).             getRuntimeContext().getState(new ValueStateDescriptor<>("Test", Integer.class)).         }          @Override         public String map(Tuple2<String, Integer> value) throws Exception {             return value.f0.         }     }).print().     try {         see.execute().         fail().     } catch (JobExecutionException e) {         assertTrue(ExceptionUtils.findThrowable(e, SuccessException.class).isPresent()).     } }
false;public;1;4;;@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException {     return new MemoryBackendCheckpointStorage(jobId, null, null, 1_000_000). }
false;public;10;14;;@Override public <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, MetricGroup metricGroup, Collection<KeyedStateHandle> stateHandles) throws IOException {     throw new SuccessException(). }
false;public;2;7;;@Override public OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception {     throw new SuccessException(). }
