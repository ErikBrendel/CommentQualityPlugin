commented;modifiers;parameterAmount;loc;comment;code
true;public;2;14;/**  * @param minInclusive lower bound for the returned value (inclusive)  * @param maxExclusive upper bound for the returned value (exclusive)  * @return random long between the provided min (inclusive) and max (exclusive)  */ ;/**  * @param minInclusive lower bound for the returned value (inclusive)  * @param maxExclusive upper bound for the returned value (exclusive)  * @return random long between the provided min (inclusive) and max (exclusive)  */ public long randomLongBetween(long minInclusive, long maxExclusive) {     if (maxExclusive <= minInclusive) {         throw new IllegalArgumentException(String.format("Error: min (found %s) must be < than max (found %s)!", minInclusive, maxExclusive)).     }     long bits.     long generatedValue.     long delta = maxExclusive - minInclusive.     do {         bits = (nextLong() << 1) >>> 1.         generatedValue = bits % delta.     } while (bits - generatedValue + (delta - 1) < 0L).     return minInclusive + generatedValue. }
true;public;1;3;/**  * @param collection collection to chose from  * @return selects a valid random index from the collection's range of indices  */ ;/**  * @param collection collection to chose from  * @return selects a valid random index from the collection's range of indices  */ public int choseRandomIndex(Collection<?> collection) {     return nextInt(collection.size()). }
true;public;1;10;/**  * @return a randomly chosen element from collection  */ ;/**  * @return a randomly chosen element from collection  */ public <T> T chooseRandomElement(Collection<T> collection) {     int choice = choseRandomIndex(collection).     for (T key : collection) {         if (choice == 0) {             return key.         }         --choice.     }     return null. }
