commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void dumpWordCount() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         WordCount.main(new String[] { "--input", IN_FILE, "--output", OUT_FILE }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("WordCount failed with an exception").     }     dump(env.getPlan()). }
false;public;0;19;;@Test public void dumpTPCH3() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         TPCHQuery3.main(new String[] { "--lineitem", IN_FILE, "--customer", IN_FILE, "--orders", OUT_FILE, "--output", "123" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("TPCH3 failed with an exception").     }     dump(env.getPlan()). }
false;public;0;19;;@Test public void dumpIterativeKMeans() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         KMeans.main(new String[] { "--points ", IN_FILE, "--centroids ", IN_FILE, "--output ", OUT_FILE, "--iterations", "123" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("KMeans failed with an exception").     }     dump(env.getPlan()). }
false;public;0;19;;@Test public void dumpWebLogAnalysis() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         org.apache.flink.examples.java.relational.WebLogAnalysis.main(new String[] { "--documents", IN_FILE, "--ranks", IN_FILE, "--visits", OUT_FILE, "--output", "123" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("WebLogAnalysis failed with an exception").     }     dump(env.getPlan()). }
false;public;0;19;;@Test public void dumpBulkIterationKMeans() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         ConnectedComponents.main(new String[] { "--vertices", IN_FILE, "--edges", IN_FILE, "--output", OUT_FILE, "--iterations", "123" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("ConnectedComponents failed with an exception").     }     dump(env.getPlan()). }
false;public;0;21;;@Test public void dumpPageRank() {     // prepare the test environment     PreviewPlanEnvironment env = new PreviewPlanEnvironment().     env.setAsContext().     try {         // --pages <path> --links <path> --output <path> --numPages <n> --iterations <n>         PageRank.main(new String[] { "--pages", IN_FILE, "--links", IN_FILE, "--output", OUT_FILE, "--numPages", "10", "--iterations", "123" }).     } catch (OptimizerPlanEnvironment.ProgramAbortException pae) {     // all good.     } catch (Exception e) {         e.printStackTrace().         Assert.fail("PageRank failed with an exception").     }     dump(env.getPlan()). }
false;private;1;16;;private void dump(Plan p) {     try {         List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(p).         PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator().         String json = dumper.getPactPlanAsJSON(sinks).         try (JsonParser parser = new JsonFactory().createParser(json)) {             while (parser.nextToken() != null) {             }         }     } catch (JsonParseException e) {         e.printStackTrace().         Assert.fail("JSON Generator produced malformatted output: " + e.getMessage()).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("An error occurred in the test: " + e.getMessage()).     } }
