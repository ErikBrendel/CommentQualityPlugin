commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;20;;@Override protected void testProgram() throws Exception {     try {         ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(1).         DataSet<Tuple2<Long, Long>> input = env.generateSequence(0, 9).map(new Duplicator<Long>()).         DeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration = input.iterateDelta(input, 5, 1).         iteration.closeWith(iteration.getWorkset(), iteration.getWorkset().map(new TestMapper())).output(new LocalCollectionOutputFormat<Tuple2<Long, Long>>(result)).         env.execute().     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;protected;0;11;;@Override protected void postSubmit() {     boolean[] present = new boolean[50].     for (Tuple2<Long, Long> t : result) {         present[t.f0.intValue()] = true.     }     for (int i = 0. i < present.length. i++) {         assertTrue(String.format("Missing tuple (%d, %d)", i, i), present[i]).     } }
false;public;1;4;;@Override public Tuple2<T, T> map(T value) {     return new Tuple2<T, T>(value, value). }
false;public;1;4;;@Override public Tuple2<Long, Long> map(Tuple2<Long, Long> value) {     return new Tuple2<>(value.f0 + 10, value.f1 + 10). }
