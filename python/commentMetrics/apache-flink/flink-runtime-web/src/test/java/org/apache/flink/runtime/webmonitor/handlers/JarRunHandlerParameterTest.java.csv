commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;17;;@BeforeClass public static void setup() throws Exception {     init().     final GatewayRetriever<TestingDispatcherGateway> gatewayRetriever = () -> CompletableFuture.completedFuture(restfulGateway).     final Time timeout = Time.seconds(10).     final Map<String, String> responseHeaders = Collections.emptyMap().     final Executor executor = TestingUtils.defaultExecutor().     handler = new JarRunHandler(gatewayRetriever, timeout, responseHeaders, JarRunHeaders.getInstance(), jarDir, new Configuration(), executor). }
false;;0;4;;@Override JarRunMessageParameters getUnresolvedJarMessageParameters() {     return handler.getMessageHeaders().getUnresolvedMessageParameters(). }
false;;1;17;;@Override JarRunMessageParameters getJarMessageParameters(ProgramArgsParType programArgsParType) {     final JarRunMessageParameters parameters = getUnresolvedJarMessageParameters().     parameters.allowNonRestoredStateQueryParameter.resolve(Collections.singletonList(ALLOW_NON_RESTORED_STATE_QUERY)).     parameters.savepointPathQueryParameter.resolve(Collections.singletonList(RESTORE_PATH)).     parameters.entryClassQueryParameter.resolve(Collections.singletonList(ParameterProgram.class.getCanonicalName())).     parameters.parallelismQueryParameter.resolve(Collections.singletonList(PARALLELISM)).     if (programArgsParType == ProgramArgsParType.String || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgsQueryParameter.resolve(Collections.singletonList(String.join(" ", PROG_ARGS))).     }     if (programArgsParType == ProgramArgsParType.List || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgQueryParameter.resolve(Arrays.asList(PROG_ARGS)).     }     return parameters. }
false;;1;19;;@Override JarRunMessageParameters getWrongJarMessageParameters(ProgramArgsParType programArgsParType) {     List<String> wrongArgs = Arrays.stream(PROG_ARGS).map(a -> a + "wrong").collect(Collectors.toList()).     String argsWrongStr = String.join(" ", wrongArgs).     final JarRunMessageParameters parameters = getUnresolvedJarMessageParameters().     parameters.allowNonRestoredStateQueryParameter.resolve(Collections.singletonList(false)).     parameters.savepointPathQueryParameter.resolve(Collections.singletonList("/no/uh")).     parameters.entryClassQueryParameter.resolve(Collections.singletonList("please.dont.run.me")).     parameters.parallelismQueryParameter.resolve(Collections.singletonList(64)).     if (programArgsParType == ProgramArgsParType.String || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgsQueryParameter.resolve(Collections.singletonList(argsWrongStr)).     }     if (programArgsParType == ProgramArgsParType.List || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgQueryParameter.resolve(wrongArgs).     }     return parameters. }
false;;0;4;;@Override JarRunRequestBody getDefaultJarRequestBody() {     return new JarRunRequestBody(). }
false;;1;12;;@Override JarRunRequestBody getJarRequestBody(ProgramArgsParType programArgsParType) {     return new JarRunRequestBody(ParameterProgram.class.getCanonicalName(), getProgramArgsString(programArgsParType), getProgramArgsList(programArgsParType), PARALLELISM, null, ALLOW_NON_RESTORED_STATE_QUERY, RESTORE_PATH). }
false;;1;4;;@Override JarRunRequestBody getJarRequestBodyWithJobId(JobID jobId) {     return new JarRunRequestBody(null, null, null, null, jobId, null, null). }
false;;1;5;;@Override void handleRequest(HandlerRequest<JarRunRequestBody, JarRunMessageParameters> request) throws Exception {     handler.handleRequest(request, restfulGateway).get(). }
false;;0;8;;@Override JobGraph validateDefaultGraph() {     JobGraph jobGraph = super.validateDefaultGraph().     final SavepointRestoreSettings savepointRestoreSettings = jobGraph.getSavepointRestoreSettings().     Assert.assertFalse(savepointRestoreSettings.allowNonRestoredState()).     Assert.assertNull(savepointRestoreSettings.getRestorePath()).     return jobGraph. }
false;;0;8;;@Override JobGraph validateGraph() {     JobGraph jobGraph = super.validateGraph().     final SavepointRestoreSettings savepointRestoreSettings = jobGraph.getSavepointRestoreSettings().     Assert.assertTrue(savepointRestoreSettings.allowNonRestoredState()).     Assert.assertEquals(RESTORE_PATH, savepointRestoreSettings.getRestorePath()).     return jobGraph. }
