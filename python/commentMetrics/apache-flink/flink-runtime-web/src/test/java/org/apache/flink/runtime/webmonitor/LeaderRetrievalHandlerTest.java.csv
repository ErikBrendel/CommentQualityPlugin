commented;modifiers;parameterAmount;loc;comment;code
true;public;0;47;/**  * Tests the behaviour of the LeaderRetrievalHandler under the following conditions.  *  * <p>1. No gateway resolved --> service unavailable  * 2. leader gateway  * @throws Exception  */ ;/**  * Tests the behaviour of the LeaderRetrievalHandler under the following conditions.  *  * <p>1. No gateway resolved --> service unavailable  * 2. leader gateway  * @throws Exception  */ @Test public void testLeaderRetrievalGateway() throws Exception {     final String restPath = "/testing".     final Configuration configuration = new Configuration().     final Router router = new Router().     final Time timeout = Time.seconds(10L).     final CompletableFuture<RestfulGateway> gatewayFuture = new CompletableFuture<>().     final GatewayRetriever<RestfulGateway> gatewayRetriever = () -> gatewayFuture.     final RestfulGateway gateway = TestingRestfulGateway.newBuilder().build().     final TestingHandler testingHandler = new TestingHandler(gatewayRetriever, timeout).     router.addGet(restPath, testingHandler).     WebFrontendBootstrap bootstrap = new WebFrontendBootstrap(router, log, null, null, "localhost", 0, configuration).     try (HttpTestClient httpClient = new HttpTestClient("localhost", bootstrap.getServerPort())) {         // 1. no leader gateway available --> Service unavailable         httpClient.sendGetRequest(restPath, FutureUtils.toFiniteDuration(timeout)).         HttpTestClient.SimpleHttpResponse response = httpClient.getNextResponse(FutureUtils.toFiniteDuration(timeout)).         Assert.assertEquals(HttpResponseStatus.SERVICE_UNAVAILABLE, response.getStatus()).         // 2. with leader         gatewayFuture.complete(gateway).         httpClient.sendGetRequest(restPath, FutureUtils.toFiniteDuration(timeout)).         response = httpClient.getNextResponse(FutureUtils.toFiniteDuration(timeout)).         Assert.assertEquals(HttpResponseStatus.OK, response.getStatus()).         Assert.assertEquals(RESPONSE_MESSAGE, response.getContent()).     } finally {         bootstrap.shutdown().     } }
false;protected;3;6;;@Override protected void respondAsLeader(ChannelHandlerContext channelHandlerContext, RoutedRequest routedRequest, RestfulGateway gateway) throws Exception {     Assert.assertTrue(channelHandlerContext.channel().eventLoop().inEventLoop()).     HttpResponse response = HandlerRedirectUtils.getResponse(HttpResponseStatus.OK, RESPONSE_MESSAGE).     KeepAliveWrite.flush(channelHandlerContext.channel(), routedRequest.getRequest(), response). }
