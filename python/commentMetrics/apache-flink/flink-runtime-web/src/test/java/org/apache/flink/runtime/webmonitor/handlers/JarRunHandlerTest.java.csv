commented;modifiers;parameterAmount;loc;comment;code
false;public;0;55;;@Test public void testRunJar() throws Exception {     Path uploadDir = TMP.newFolder().toPath().     Path actualUploadDir = uploadDir.resolve("flink-web-upload").     Files.createDirectory(actualUploadDir).     Path emptyJar = actualUploadDir.resolve("empty.jar").     Files.createFile(emptyJar).     Configuration config = new Configuration().     config.setString(WebOptions.UPLOAD_DIR, uploadDir.toString()).     MiniClusterResource clusterResource = new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(config).setNumberTaskManagers(1).setNumberSlotsPerTaskManager(1).build()).     clusterResource.before().     try {         Configuration clientConfig = clusterResource.getClientConfiguration().         RestClient client = new RestClient(RestClientConfiguration.fromConfiguration(clientConfig), TestingUtils.defaultExecutor()).         try {             JarRunHeaders headers = JarRunHeaders.getInstance().             JarRunMessageParameters parameters = headers.getUnresolvedMessageParameters().             parameters.jarIdPathParameter.resolve(emptyJar.getFileName().toString()).             String host = clientConfig.getString(RestOptions.ADDRESS).             int port = clientConfig.getInteger(RestOptions.PORT).             try {                 client.sendRequest(host, port, headers, parameters, new JarRunRequestBody()).get().             } catch (Exception e) {                 Optional<RestClientException> expected = ExceptionUtils.findThrowable(e, RestClientException.class).                 if (expected.isPresent()) {                     // implies the job was actually submitted                     assertTrue(expected.get().getMessage().contains("ProgramInvocationException")).                     // implies the jar was registered for the job graph (otherwise the jar name would not occur in the exception)                     // implies the jar was uploaded (otherwise the file would not be found at all)                     assertTrue(expected.get().getMessage().contains("empty.jar'. zip file is empty")).                 } else {                     throw e.                 }             }         } finally {             client.shutdown(Time.milliseconds(10)).         }     } finally {         clusterResource.after().     } }
