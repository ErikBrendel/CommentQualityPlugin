# id;timestamp;commentText;codeText;commentWords;codeWords
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1445293012;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1455549373;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1495650061;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1502111816;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1505740601;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1524124695;Sends a simple GET request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to GET (http://$host:$host/$path);public void sendGetRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.GET, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,get,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,get,http,host,host,path;public,void,send,get,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,get,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1445293012;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1455549373;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1495650061;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1502111816;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1505740601;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException;1524124695;Sends a request to to the server.__<pre>_HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/overview")__request.headers().set(HttpHeaders.Names.HOST, host)__request.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___sendRequest(request)__</pre>__@param request The {@link HttpRequest} to send to the server;public void sendRequest(HttpRequest request, FiniteDuration timeout) throws InterruptedException, TimeoutException {_		LOG.debug("Writing {}.", request)___		_		ChannelFuture connect = bootstrap.connect(host, port)___		Channel channel__		if (connect.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {_			channel = connect.channel()__		}_		else {_			throw new TimeoutException("Connection failed")__		}__		channel.writeAndFlush(request)__	};sends,a,request,to,to,the,server,pre,http,request,request,new,default,full,http,request,http,version,http,method,get,overview,request,headers,set,http,headers,names,host,host,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,request,pre,param,request,the,link,http,request,to,send,to,the,server;public,void,send,request,http,request,request,finite,duration,timeout,throws,interrupted,exception,timeout,exception,log,debug,writing,request,channel,future,connect,bootstrap,connect,host,port,channel,channel,if,connect,await,timeout,to,millis,time,unit,milliseconds,channel,connect,channel,else,throw,new,timeout,exception,connection,failed,channel,write,and,flush,request
HttpTestClient -> @Override 	public void close() throws InterruptedException;1445293012;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> @Override 	public void close() throws InterruptedException;1455549373;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> @Override 	public void close() throws InterruptedException;1495650061;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> @Override 	public void close() throws InterruptedException;1502111816;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> @Override 	public void close() throws InterruptedException;1505740601;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> @Override 	public void close() throws InterruptedException;1524124695;Closes the client.;@Override_	public void close() throws InterruptedException {_		if (group != null) {_			group.shutdownGracefully()__		}__		LOG.debug("Closed")__	};closes,the,client;override,public,void,close,throws,interrupted,exception,if,group,null,group,shutdown,gracefully,log,debug,closed
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1445293012;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1455549373;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1495650061;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1502111816;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1505740601;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public SimpleHttpResponse getNextResponse() throws InterruptedException;1524124695;Returns the next available HTTP response. A call to this method blocks until a response_becomes available.__@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse() throws InterruptedException {_		return responses.take()__	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,throws,interrupted,exception,return,responses,take
HttpTestClient -> public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1455549373;Sends a simple DELETE request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to DELETE (http://$host:$host/$path);public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.DELETE, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,delete,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,delete,http,host,host,path;public,void,send,delete,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,delete,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1495650061;Sends a simple DELETE request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to DELETE (http://$host:$host/$path);public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.DELETE, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,delete,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,delete,http,host,host,path;public,void,send,delete,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,delete,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1502111816;Sends a simple DELETE request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to DELETE (http://$host:$host/$path);public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.DELETE, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,delete,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,delete,http,host,host,path;public,void,send,delete,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,delete,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1505740601;Sends a simple DELETE request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to DELETE (http://$host:$host/$path);public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.DELETE, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,delete,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,delete,http,host,host,path;public,void,send,delete,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,delete,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException;1524124695;Sends a simple DELETE request to the given path. You only specify the $path part of_http://$host:$host/$path.__@param path The $path to DELETE (http://$host:$host/$path);public void sendDeleteRequest(String path, FiniteDuration timeout) throws TimeoutException, InterruptedException {_		if (!path.startsWith("/")) {_			path = "/" + path__		}__		HttpRequest getRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,_				HttpMethod.DELETE, path)__		getRequest.headers().set(HttpHeaders.Names.HOST, host)__		getRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)___		sendRequest(getRequest, timeout)__	};sends,a,simple,delete,request,to,the,given,path,you,only,specify,the,path,part,of,http,host,host,path,param,path,the,path,to,delete,http,host,host,path;public,void,send,delete,request,string,path,finite,duration,timeout,throws,timeout,exception,interrupted,exception,if,path,starts,with,path,path,http,request,get,request,new,default,full,http,request,http,version,http,method,delete,path,get,request,headers,set,http,headers,names,host,host,get,request,headers,set,http,headers,names,connection,http,headers,values,close,send,request,get,request,timeout
HttpTestClient -> public HttpTestClient(String host, int port);1445293012;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public HttpTestClient(String host, int port);1455549373;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public HttpTestClient(String host, int port);1495650061;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public HttpTestClient(String host, int port);1502111816;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public HttpTestClient(String host, int port);1505740601;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public HttpTestClient(String host, int port);1524124695;Creates a client instance for the server at the target host and port.__@param host Host of the HTTP server_@param port Port of the HTTP server;public HttpTestClient(String host, int port) {_		this.host = host__		this.port = port___		this.group = new NioEventLoopGroup()___		this.bootstrap = new Bootstrap()__		this.bootstrap.group(group)_				.channel(NioSocketChannel.class)_				.handler(new ChannelInitializer<SocketChannel>() {__					@Override_					protected void initChannel(SocketChannel ch) throws Exception {_						ChannelPipeline p = ch.pipeline()__						p.addLast(new HttpClientCodec())__						p.addLast(new HttpContentDecompressor())__						p.addLast(new ClientHandler(responses))__					}_				})__	};creates,a,client,instance,for,the,server,at,the,target,host,and,port,param,host,host,of,the,http,server,param,port,port,of,the,http,server;public,http,test,client,string,host,int,port,this,host,host,this,port,port,this,group,new,nio,event,loop,group,this,bootstrap,new,bootstrap,this,bootstrap,group,group,channel,nio,socket,channel,class,handler,new,channel,initializer,socket,channel,override,protected,void,init,channel,socket,channel,ch,throws,exception,channel,pipeline,p,ch,pipeline,p,add,last,new,http,client,codec,p,add,last,new,http,content,decompressor,p,add,last,new,client,handler,responses
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1445293012;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1455549373;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1495650061;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1502111816;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1505740601;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
HttpTestClient -> public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException, 			TimeoutException;1524124695;Returns the next available HTTP response . A call to this method blocks until a response_becomes available or throws an Exception if the timeout fires.__@param timeout Timeout in milliseconds for the next response to become available_@return The next available {@link SimpleHttpResponse};public SimpleHttpResponse getNextResponse(FiniteDuration timeout) throws InterruptedException,_			TimeoutException {__		SimpleHttpResponse response = responses.poll(timeout.toMillis(), TimeUnit.MILLISECONDS)___		if (response == null) {_			throw new TimeoutException("No response within timeout of " + timeout + " ms")__		}_		else {_			return response__		}_	};returns,the,next,available,http,response,a,call,to,this,method,blocks,until,a,response,becomes,available,or,throws,an,exception,if,the,timeout,fires,param,timeout,timeout,in,milliseconds,for,the,next,response,to,become,available,return,the,next,available,link,simple,http,response;public,simple,http,response,get,next,response,finite,duration,timeout,throws,interrupted,exception,timeout,exception,simple,http,response,response,responses,poll,timeout,to,millis,time,unit,milliseconds,if,response,null,throw,new,timeout,exception,no,response,within,timeout,of,timeout,ms,else,return,response
