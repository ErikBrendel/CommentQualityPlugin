commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setUp() throws Exception {     MockitoAnnotations.initMocks(this).     jarDir = temporaryFolder.newFolder().toPath().     jarUploadHandler = new JarUploadHandler(() -> CompletableFuture.completedFuture(mockDispatcherGateway), Time.seconds(10), Collections.emptyMap(), JarUploadHeaders.getInstance(), jarDir, Executors.directExecutor()). }
false;public;0;15;;@Test public void testRejectNonJarFiles() throws Exception {     final Path uploadedFile = Files.createFile(jarDir.resolve("katrin.png")).     final HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request = createRequest(uploadedFile).     try {         jarUploadHandler.handleRequest(request, mockDispatcherGateway).get().         fail("Expected exception not thrown.").     } catch (final ExecutionException e) {         final Throwable throwable = ExceptionUtils.stripCompletionException(e.getCause()).         assertThat(throwable, instanceOf(RestHandlerException.class)).         final RestHandlerException restHandlerException = (RestHandlerException) throwable.         assertThat(restHandlerException.getHttpResponseStatus(), equalTo(HttpResponseStatus.BAD_REQUEST)).     } }
false;public;0;12;;@Test public void testUploadJar() throws Exception {     final Path uploadedFile = Files.createFile(jarDir.resolve("Kafka010Example.jar")).     final HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request = createRequest(uploadedFile).     final JarUploadResponseBody jarUploadResponseBody = jarUploadHandler.handleRequest(request, mockDispatcherGateway).get().     assertThat(jarUploadResponseBody.getStatus(), equalTo(JarUploadResponseBody.UploadStatus.success)).     final String returnedFileNameWithUUID = jarUploadResponseBody.getFilename().     assertThat(returnedFileNameWithUUID, containsString("_")).     final String returnedFileName = returnedFileNameWithUUID.substring(returnedFileNameWithUUID.lastIndexOf("_") + 1).     assertThat(returnedFileName, equalTo(uploadedFile.getFileName().toString())). }
false;public;0;16;;@Test public void testFailedUpload() throws Exception {     final Path uploadedFile = jarDir.resolve("Kafka010Example.jar").     final HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request = createRequest(uploadedFile).     try {         jarUploadHandler.handleRequest(request, mockDispatcherGateway).get().         fail("Expected exception not thrown.").     } catch (final ExecutionException e) {         final Throwable throwable = ExceptionUtils.stripCompletionException(e.getCause()).         assertThat(throwable, instanceOf(RestHandlerException.class)).         final RestHandlerException restHandlerException = (RestHandlerException) throwable.         assertThat(restHandlerException.getMessage(), containsString("Could not move uploaded jar file")).         assertThat(restHandlerException.getHttpResponseStatus(), equalTo(HttpResponseStatus.INTERNAL_SERVER_ERROR)).     } }
false;private,static;1;9;;private static HandlerRequest<EmptyRequestBody, EmptyMessageParameters> createRequest(final Path uploadedFile) throws HandlerRequestException, IOException {     return new HandlerRequest<>(EmptyRequestBody.getInstance(), EmptyMessageParameters.getInstance(), Collections.emptyMap(), Collections.emptyMap(), Collections.singleton(uploadedFile.toFile())). }
