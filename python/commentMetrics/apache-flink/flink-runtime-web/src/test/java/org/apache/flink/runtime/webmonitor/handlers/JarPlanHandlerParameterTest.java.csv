commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@BeforeClass public static void setup() throws Exception {     init().     handler = new JarPlanHandler(gatewayRetriever, timeout, responseHeaders, JarPlanHeaders.getInstance(), jarDir, new Configuration(), executor, jobGraph -> {         LAST_SUBMITTED_JOB_GRAPH_REFERENCE.set(jobGraph).         return new JobPlanInfo(JsonPlanGenerator.generatePlan(jobGraph)).     }). }
false;;0;4;;@Override JarPlanMessageParameters getUnresolvedJarMessageParameters() {     return handler.getMessageHeaders().getUnresolvedMessageParameters(). }
false;;1;15;;@Override JarPlanMessageParameters getJarMessageParameters(ProgramArgsParType programArgsParType) {     final JarPlanMessageParameters parameters = getUnresolvedJarMessageParameters().     parameters.entryClassQueryParameter.resolve(Collections.singletonList(ParameterProgram.class.getCanonicalName())).     parameters.parallelismQueryParameter.resolve(Collections.singletonList(PARALLELISM)).     if (programArgsParType == ProgramArgsParType.String || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgsQueryParameter.resolve(Collections.singletonList(String.join(" ", PROG_ARGS))).     }     if (programArgsParType == ProgramArgsParType.List || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgQueryParameter.resolve(Arrays.asList(PROG_ARGS)).     }     return parameters. }
false;;1;16;;@Override JarPlanMessageParameters getWrongJarMessageParameters(ProgramArgsParType programArgsParType) {     List<String> wrongArgs = Arrays.stream(PROG_ARGS).map(a -> a + "wrong").collect(Collectors.toList()).     String argsWrongStr = String.join(" ", wrongArgs).     final JarPlanMessageParameters parameters = getUnresolvedJarMessageParameters().     parameters.entryClassQueryParameter.resolve(Collections.singletonList("please.dont.run.me")).     parameters.parallelismQueryParameter.resolve(Collections.singletonList(64)).     if (programArgsParType == ProgramArgsParType.String || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgsQueryParameter.resolve(Collections.singletonList(argsWrongStr)).     }     if (programArgsParType == ProgramArgsParType.List || programArgsParType == ProgramArgsParType.Both) {         parameters.programArgQueryParameter.resolve(wrongArgs).     }     return parameters. }
false;;0;4;;@Override JarPlanRequestBody getDefaultJarRequestBody() {     return new JarPlanRequestBody(). }
false;;1;9;;@Override JarPlanRequestBody getJarRequestBody(ProgramArgsParType programArgsParType) {     return new JarPlanRequestBody(ParameterProgram.class.getCanonicalName(), getProgramArgsString(programArgsParType), getProgramArgsList(programArgsParType), PARALLELISM, null). }
false;;1;4;;@Override JarPlanRequestBody getJarRequestBodyWithJobId(JobID jobId) {     return new JarPlanRequestBody(null, null, null, null, jobId). }
false;;1;5;;@Override void handleRequest(HandlerRequest<JarPlanRequestBody, JarPlanMessageParameters> request) throws Exception {     handler.handleRequest(request, restfulGateway).get(). }
