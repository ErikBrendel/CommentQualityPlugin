commented;modifiers;parameterAmount;loc;comment;code
false;static;0;29;;static void init() throws Exception {     jarDir = TMP.newFolder().toPath().     // properties are set property by surefire plugin     final String parameterProgramJarName = System.getProperty("parameterJarName") + ".jar".     final String parameterProgramWithoutManifestJarName = System.getProperty("parameterJarWithoutManifestName") + ".jar".     final Path jarLocation = Paths.get(System.getProperty("targetDir")).     jarWithManifest = Files.copy(jarLocation.resolve(parameterProgramJarName), jarDir.resolve("program-with-manifest.jar")).     jarWithoutManifest = Files.copy(jarLocation.resolve(parameterProgramWithoutManifestJarName), jarDir.resolve("program-without-manifest.jar")).     restfulGateway = new TestingDispatcherGateway.Builder().setBlobServerPort(BLOB_SERVER_RESOURCE.getBlobServerPort()).setSubmitFunction(jobGraph -> {         LAST_SUBMITTED_JOB_GRAPH_REFERENCE.set(jobGraph).         return CompletableFuture.completedFuture(Acknowledge.get()).     }).build().     gatewayRetriever = () -> CompletableFuture.completedFuture(restfulGateway).     localAddressFuture = CompletableFuture.completedFuture("shazam://localhost:12345").     timeout = Time.seconds(10).     responseHeaders = Collections.emptyMap().     executor = TestingUtils.defaultExecutor(). }
false;public;0;4;;@Before public void reset() {     ParameterProgram.actualArguments = null. }
false;public;0;10;;@Test public void testDefaultParameters() throws Exception {     // baseline, ensure that reasonable defaults are chosen     handleRequest(createRequest(getDefaultJarRequestBody(), getUnresolvedJarMessageParameters(), getUnresolvedJarMessageParameters(), jarWithManifest)).     validateDefaultGraph(). }
false;public;0;4;;@Test public void testConfigurationViaQueryParametersWithProgArgsAsString() throws Exception {     testConfigurationViaQueryParameters(ProgramArgsParType.String). }
false;public;0;4;;@Test public void testConfigurationViaQueryParametersWithProgArgsAsList() throws Exception {     testConfigurationViaQueryParameters(ProgramArgsParType.List). }
false;public;0;9;;@Test public void testConfigurationViaQueryParametersFailWithProgArgsAsStringAndList() throws Exception {     try {         testConfigurationViaQueryParameters(ProgramArgsParType.Both).         fail("RestHandlerException is excepted").     } catch (RestHandlerException e) {         assertEquals(HttpResponseStatus.BAD_REQUEST, e.getHttpResponseStatus()).     } }
false;private;1;9;;private void testConfigurationViaQueryParameters(ProgramArgsParType programArgsParType) throws Exception {     // configure submission via query parameters     handleRequest(createRequest(getDefaultJarRequestBody(), getJarMessageParameters(programArgsParType), getUnresolvedJarMessageParameters(), jarWithoutManifest)).     validateGraph(). }
false;public;0;4;;@Test public void testConfigurationViaJsonRequestWithProgArgsAsString() throws Exception {     testConfigurationViaJsonRequest(ProgramArgsParType.String). }
false;public;0;4;;@Test public void testConfigurationViaJsonRequestWithProgArgsAsList() throws Exception {     testConfigurationViaJsonRequest(ProgramArgsParType.List). }
false;public;0;9;;@Test public void testConfigurationViaJsonRequestFailWithProgArgsAsStringAndList() throws Exception {     try {         testConfigurationViaJsonRequest(ProgramArgsParType.Both).         fail("RestHandlerException is excepted").     } catch (RestHandlerException e) {         assertEquals(HttpResponseStatus.BAD_REQUEST, e.getHttpResponseStatus()).     } }
false;public;0;18;;@Test public void testProvideJobId() throws Exception {     JobID jobId = new JobID().     HandlerRequest<REQB, M> request = createRequest(getJarRequestBodyWithJobId(jobId), getUnresolvedJarMessageParameters(), getUnresolvedJarMessageParameters(), jarWithManifest).     handleRequest(request).     Optional<JobGraph> jobGraph = getLastSubmittedJobGraphAndReset().     assertThat(jobGraph.isPresent(), is(true)).     assertThat(jobGraph.get().getJobID(), is(equalTo(jobId))). }
false;private;1;9;;private void testConfigurationViaJsonRequest(ProgramArgsParType programArgsParType) throws Exception {     handleRequest(createRequest(getJarRequestBody(programArgsParType), getUnresolvedJarMessageParameters(), getUnresolvedJarMessageParameters(), jarWithoutManifest)).     validateGraph(). }
false;public;0;4;;@Test public void testParameterPrioritizationWithProgArgsAsString() throws Exception {     testParameterPrioritization(ProgramArgsParType.String). }
false;public;0;4;;@Test public void testParameterPrioritizationWithProgArgsAsList() throws Exception {     testParameterPrioritization(ProgramArgsParType.List). }
false;public;0;9;;@Test public void testFailIfProgArgsAreAsStringAndAsList() throws Exception {     try {         testParameterPrioritization(ProgramArgsParType.Both).         fail("RestHandlerException is excepted").     } catch (RestHandlerException e) {         assertEquals(HttpResponseStatus.BAD_REQUEST, e.getHttpResponseStatus()).     } }
false;private;1;9;;private void testParameterPrioritization(ProgramArgsParType programArgsParType) throws Exception {     // configure submission via query parameters and JSON request, JSON should be prioritized     handleRequest(createRequest(getJarRequestBody(programArgsParType), getWrongJarMessageParameters(programArgsParType), getUnresolvedJarMessageParameters(), jarWithoutManifest)).     validateGraph(). }
false;static;1;4;;static String getProgramArgsString(ProgramArgsParType programArgsParType) {     return programArgsParType == ProgramArgsParType.String || programArgsParType == ProgramArgsParType.Both ? String.join(" ", PROG_ARGS) : null. }
false;static;1;4;;static List<String> getProgramArgsList(ProgramArgsParType programArgsParType) {     return programArgsParType == ProgramArgsParType.List || programArgsParType == ProgramArgsParType.Both ? Arrays.asList(PROG_ARGS) : null. }
false;private,static;4;20;;private static <REQB extends JarRequestBody, M extends JarMessageParameters> HandlerRequest<REQB, M> createRequest(REQB requestBody, M parameters, M unresolvedMessageParameters, Path jar) throws HandlerRequestException {     final Map<String, List<String>> queryParameterAsMap = parameters.getQueryParameters().stream().filter(MessageParameter::isResolved).collect(Collectors.toMap(MessageParameter::getKey, JarHandlerParameterTest::getValuesAsString)).     return new HandlerRequest<>(requestBody, unresolvedMessageParameters, Collections.singletonMap(JarIdPathParameter.KEY, jar.getFileName().toString()), queryParameterAsMap, Collections.emptyList()). }
false;private,static;1;4;;private static <X> List<String> getValuesAsString(MessageQueryParameter<X> parameter) {     final List<X> values = parameter.getValue().     return values.stream().map(parameter::convertValueToString).collect(Collectors.toList()). }
false;abstract;0;1;;abstract M getUnresolvedJarMessageParameters().
false;abstract;1;1;;abstract M getJarMessageParameters(ProgramArgsParType programArgsParType).
false;abstract;1;1;;abstract M getWrongJarMessageParameters(ProgramArgsParType programArgsParType).
false;abstract;0;1;;abstract REQB getDefaultJarRequestBody().
false;abstract;1;1;;abstract REQB getJarRequestBody(ProgramArgsParType programArgsParType).
false;abstract;1;1;;abstract REQB getJarRequestBodyWithJobId(JobID jobId).
false;abstract;1;1;;abstract void handleRequest(HandlerRequest<REQB, M> request) throws Exception.
false;;0;6;;JobGraph validateDefaultGraph() {     JobGraph jobGraph = LAST_SUBMITTED_JOB_GRAPH_REFERENCE.getAndSet(null).     Assert.assertEquals(0, ParameterProgram.actualArguments.length).     Assert.assertEquals(ExecutionConfig.PARALLELISM_DEFAULT, getExecutionConfig(jobGraph).getParallelism()).     return jobGraph. }
false;;0;6;;JobGraph validateGraph() {     JobGraph jobGraph = LAST_SUBMITTED_JOB_GRAPH_REFERENCE.getAndSet(null).     Assert.assertArrayEquals(PROG_ARGS, ParameterProgram.actualArguments).     Assert.assertEquals(PARALLELISM, getExecutionConfig(jobGraph).getParallelism()).     return jobGraph. }
false;private,static;0;3;;private static Optional<JobGraph> getLastSubmittedJobGraphAndReset() {     return Optional.ofNullable(LAST_SUBMITTED_JOB_GRAPH_REFERENCE.getAndSet(null)). }
false;private,static;1;9;;private static ExecutionConfig getExecutionConfig(JobGraph jobGraph) {     ExecutionConfig executionConfig.     try {         executionConfig = jobGraph.getSerializedExecutionConfig().deserializeValue(ParameterProgram.class.getClassLoader()).     } catch (Exception e) {         throw new AssertionError("Exception while deserializing ExecutionConfig.", e).     }     return executionConfig. }
