commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void checkOS() {     Assume.assumeFalse("This test fails on Windows due to unclosed JarFiles, see FLINK-9844.", OperatingSystem.isWindows()). }
false;public;0;37;;@Test public void testJarSubmission() throws Exception {     final TestingDispatcherGateway restfulGateway = new TestingDispatcherGateway.Builder().setBlobServerPort(blobServerResource.getBlobServerPort()).setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get())).build().     final JarHandlers handlers = new JarHandlers(temporaryFolder.newFolder().toPath(), restfulGateway).     final JarUploadHandler uploadHandler = handlers.uploadHandler.     final JarListHandler listHandler = handlers.listHandler.     final JarPlanHandler planHandler = handlers.planHandler.     final JarRunHandler runHandler = handlers.runHandler.     final JarDeleteHandler deleteHandler = handlers.deleteHandler.     // targetDir property is set via surefire configuration     final Path originalJar = Paths.get(System.getProperty("targetDir")).resolve("test-program.jar").     final Path jar = Files.copy(originalJar, temporaryFolder.getRoot().toPath().resolve("test-program.jar")).     final String storedJarPath = uploadJar(uploadHandler, jar, restfulGateway).     final String storedJarName = Paths.get(storedJarPath).getFileName().toString().     final JarListInfo postUploadListResponse = listJars(listHandler, restfulGateway).     Assert.assertEquals(1, postUploadListResponse.jarFileList.size()).     final JarListInfo.JarFileInfo listEntry = postUploadListResponse.jarFileList.iterator().next().     Assert.assertEquals(jar.getFileName().toString(), listEntry.name).     Assert.assertEquals(storedJarName, listEntry.id).     final JobPlanInfo planResponse = showPlan(planHandler, storedJarName, restfulGateway).     // we're only interested in the core functionality so checking for a small detail is sufficient     Assert.assertThat(planResponse.getJsonPlan(), containsString("TestProgram.java:29")).     runJar(runHandler, storedJarName, restfulGateway).     deleteJar(deleteHandler, storedJarName, restfulGateway).     final JarListInfo postDeleteListResponse = listJars(listHandler, restfulGateway).     Assert.assertEquals(0, postDeleteListResponse.jarFileList.size()). }
false;private,static;3;11;;private static String uploadJar(JarUploadHandler handler, Path jar, RestfulGateway restfulGateway) throws Exception {     HandlerRequest<EmptyRequestBody, EmptyMessageParameters> uploadRequest = new HandlerRequest<>(EmptyRequestBody.getInstance(), EmptyMessageParameters.getInstance(), Collections.emptyMap(), Collections.emptyMap(), Collections.singletonList(jar.toFile())).     final JarUploadResponseBody uploadResponse = handler.handleRequest(uploadRequest, restfulGateway).get().     return uploadResponse.getFilename(). }
false;private,static;2;7;;private static JarListInfo listJars(JarListHandler handler, RestfulGateway restfulGateway) throws Exception {     HandlerRequest<EmptyRequestBody, EmptyMessageParameters> listRequest = new HandlerRequest<>(EmptyRequestBody.getInstance(), EmptyMessageParameters.getInstance()).     return handler.handleRequest(listRequest, restfulGateway).get(). }
false;private,static;3;11;;private static JobPlanInfo showPlan(JarPlanHandler handler, String jarName, RestfulGateway restfulGateway) throws Exception {     JarPlanMessageParameters planParameters = JarPlanHeaders.getInstance().getUnresolvedMessageParameters().     HandlerRequest<JarPlanRequestBody, JarPlanMessageParameters> planRequest = new HandlerRequest<>(new JarPlanRequestBody(), planParameters, Collections.singletonMap(planParameters.jarIdPathParameter.getKey(), jarName), Collections.emptyMap(), Collections.emptyList()).     return handler.handleRequest(planRequest, restfulGateway).get(). }
false;private,static;3;11;;private static JarRunResponseBody runJar(JarRunHandler handler, String jarName, DispatcherGateway restfulGateway) throws Exception {     final JarRunMessageParameters runParameters = JarRunHeaders.getInstance().getUnresolvedMessageParameters().     HandlerRequest<JarRunRequestBody, JarRunMessageParameters> runRequest = new HandlerRequest<>(new JarRunRequestBody(), runParameters, Collections.singletonMap(runParameters.jarIdPathParameter.getKey(), jarName), Collections.emptyMap(), Collections.emptyList()).     return handler.handleRequest(runRequest, restfulGateway).get(). }
false;private,static;3;11;;private static void deleteJar(JarDeleteHandler handler, String jarName, RestfulGateway restfulGateway) throws Exception {     JarDeleteMessageParameters deleteParameters = JarDeleteHeaders.getInstance().getUnresolvedMessageParameters().     HandlerRequest<EmptyRequestBody, JarDeleteMessageParameters> deleteRequest = new HandlerRequest<>(EmptyRequestBody.getInstance(), deleteParameters, Collections.singletonMap(deleteParameters.jarIdPathParameter.getKey(), jarName), Collections.emptyMap(), Collections.emptyList()).     handler.handleRequest(deleteRequest, restfulGateway).get(). }
