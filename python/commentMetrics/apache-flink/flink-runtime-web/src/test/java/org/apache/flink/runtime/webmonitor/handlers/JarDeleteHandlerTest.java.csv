commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setUp() throws Exception {     jarDir = temporaryFolder.newFolder().toPath().     restfulGateway = TestingRestfulGateway.newBuilder().build().     jarDeleteHandler = new JarDeleteHandler(() -> CompletableFuture.completedFuture(restfulGateway), Time.seconds(10), Collections.emptyMap(), new JarDeleteHeaders(), jarDir, Executors.directExecutor()).     Files.createFile(jarDir.resolve(TEST_JAR_NAME)). }
false;public;0;9;;@Test public void testDeleteJarById() throws Exception {     assertThat(Files.exists(jarDir.resolve(TEST_JAR_NAME)), equalTo(true)).     final HandlerRequest<EmptyRequestBody, JarDeleteMessageParameters> request = createRequest(TEST_JAR_NAME).     jarDeleteHandler.handleRequest(request, restfulGateway).get().     assertThat(Files.exists(jarDir.resolve(TEST_JAR_NAME)), equalTo(false)). }
false;public;0;14;;@Test public void testDeleteUnknownJar() throws Exception {     final HandlerRequest<EmptyRequestBody, JarDeleteMessageParameters> request = createRequest("doesnotexist.jar").     try {         jarDeleteHandler.handleRequest(request, restfulGateway).get().     } catch (final ExecutionException e) {         final Throwable throwable = ExceptionUtils.stripCompletionException(e.getCause()).         assertThat(throwable, instanceOf(RestHandlerException.class)).         final RestHandlerException restHandlerException = (RestHandlerException) throwable.         assertThat(restHandlerException.getMessage(), containsString("File doesnotexist.jar does not exist in")).         assertThat(restHandlerException.getHttpResponseStatus(), equalTo(HttpResponseStatus.BAD_REQUEST)).     } }
false;public;0;16;;@Test public void testFailedDelete() throws Exception {     makeJarDirReadOnly().     final HandlerRequest<EmptyRequestBody, JarDeleteMessageParameters> request = createRequest(TEST_JAR_NAME).     try {         jarDeleteHandler.handleRequest(request, restfulGateway).get().     } catch (final ExecutionException e) {         final Throwable throwable = ExceptionUtils.stripCompletionException(e.getCause()).         assertThat(throwable, instanceOf(RestHandlerException.class)).         final RestHandlerException restHandlerException = (RestHandlerException) throwable.         assertThat(restHandlerException.getMessage(), containsString("Failed to delete jar")).         assertThat(restHandlerException.getHttpResponseStatus(), equalTo(HttpResponseStatus.INTERNAL_SERVER_ERROR)).     } }
false;private,static;1;8;;private static HandlerRequest<EmptyRequestBody, JarDeleteMessageParameters> createRequest(final String jarFileName) throws HandlerRequestException {     return new HandlerRequest<>(EmptyRequestBody.getInstance(), new JarDeleteMessageParameters(), Collections.singletonMap(JarIdPathParameter.KEY, jarFileName), Collections.emptyMap()). }
false;private;0;13;;private void makeJarDirReadOnly() {     try {         Files.setPosixFilePermissions(jarDir, new HashSet<>(Arrays.asList(PosixFilePermission.OTHERS_READ, PosixFilePermission.GROUP_READ, PosixFilePermission.OWNER_READ, PosixFilePermission.OTHERS_EXECUTE, PosixFilePermission.GROUP_EXECUTE, PosixFilePermission.OWNER_EXECUTE))).     } catch (final Exception e) {         Assume.assumeNoException(e).     } }
