commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Class<JarUploadResponseBody> getResponseClass() {     return JarUploadResponseBody.class. }
false;public;0;4;;@Override public HttpResponseStatus getResponseStatusCode() {     return HttpResponseStatus.OK. }
false;public;0;4;;@Override public Class<EmptyRequestBody> getRequestClass() {     return EmptyRequestBody.class. }
false;public;0;4;;@Override public EmptyMessageParameters getUnresolvedMessageParameters() {     return EmptyMessageParameters.getInstance(). }
false;public;0;4;;@Override public HttpMethodWrapper getHttpMethod() {     return HttpMethodWrapper.POST. }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return URL. }
false;public,static;0;3;;public static JarUploadHeaders getInstance() {     return INSTANCE. }
false;public;0;6;;@Override public String getDescription() {     return "Uploads a jar to the cluster. The jar must be sent as multi-part data. Make sure that the \"Content-Type\"" + " header is set to \"application/x-java-archive\", as some http libraries do not add the header by default.\n" + "Using 'curl' you can upload a jar via 'curl -X POST -H \"Expect:\" -F \"jarfile=@path/to/flink-job.jar\" http://hostname:port" + URL + "'.". }
false;public;0;4;;@Override public boolean acceptsFileUploads() {     return true. }
