commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;72;;@Override protected CompletableFuture<JarListInfo> handleRequest(@Nonnull HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request, @Nonnull RestfulGateway gateway) throws RestHandlerException {     final String localAddress.     Preconditions.checkState(localAddressFuture.isDone()).     try {         localAddress = localAddressFuture.get().     } catch (Exception e) {         return FutureUtils.completedExceptionally(e).     }     return CompletableFuture.supplyAsync(() -> {         try {             final File[] list = getJarFiles().             final List<JarListInfo.JarFileInfo> jarFileList = new ArrayList<>(list.length).             for (File f : list) {                 // separate the uuid and the name parts.                 String id = f.getName().                 int startIndex = id.indexOf("_").                 if (startIndex < 0) {                     continue.                 }                 String name = id.substring(startIndex + 1).                 if (name.length() < 5 || !name.endsWith(".jar")) {                     continue.                 }                 List<JarListInfo.JarEntryInfo> jarEntryList = new ArrayList<>().                 String[] classes = new String[0].                 try (JarFile jar = new JarFile(f)) {                     Manifest manifest = jar.getManifest().                     String assemblerClass = null.                     if (manifest != null) {                         assemblerClass = manifest.getMainAttributes().getValue(PackagedProgram.MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS).                         if (assemblerClass == null) {                             assemblerClass = manifest.getMainAttributes().getValue(PackagedProgram.MANIFEST_ATTRIBUTE_MAIN_CLASS).                         }                     }                     if (assemblerClass != null) {                         classes = assemblerClass.split(",").                     }                 } catch (IOException ignored) {                 // we simply show no entries here                 }                 // show every entry class that can be loaded later on.                 for (String clazz : classes) {                     clazz = clazz.trim().                     PackagedProgram program = null.                     try {                         program = new PackagedProgram(f, clazz, new String[0]).                     } catch (Exception ignored) {                     // ignore jar files which throw an error upon creating a PackagedProgram                     }                     if (program != null) {                         JarListInfo.JarEntryInfo jarEntryInfo = new JarListInfo.JarEntryInfo(clazz, program.getDescription()).                         jarEntryList.add(jarEntryInfo).                     }                 }                 jarFileList.add(new JarListInfo.JarFileInfo(id, name, f.lastModified(), jarEntryList)).             }             return new JarListInfo(localAddress, jarFileList).         } catch (Exception e) {             throw new CompletionException(new FlinkException("Failed to fetch jar list.", e)).         }     }, executor). }
false;private;0;12;;private File[] getJarFiles() {     final File[] list = jarDir.listFiles((dir, name) -> name.endsWith(".jar")).     if (list == null) {         log.warn("Jar upload dir {} does not exist, or had been deleted externally. " + "Previously uploaded jars are no longer available.", jarDir).         return EMPTY_FILES_ARRAY.     } else {         // last modified ascending order         Arrays.sort(list, (f1, f2) -> Long.compare(f2.lastModified(), f1.lastModified())).         return list.     } }
