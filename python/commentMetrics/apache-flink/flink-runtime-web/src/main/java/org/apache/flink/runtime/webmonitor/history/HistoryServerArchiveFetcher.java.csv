# id;timestamp;commentText;codeText;commentWords;codeWords
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1490193900;This method replicates the JSON response that would be given by the {@link CurrentJobsOverviewHandler} when_listing both running and finished jobs.__Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,current,jobs,overview,handler,when,listing,both,running,and,finished,jobs,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1494917613;This method replicates the JSON response that would be given by the {@link CurrentJobsOverviewHandler} when_listing both running and finished jobs.__Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,current,jobs,overview,handler,when,listing,both,running,and,finished,jobs,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1495650061;This method replicates the JSON response that would be given by the {@link CurrentJobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,current,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1505860824;This method replicates the JSON response that would be given by the {@link CurrentJobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,current,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1509447226;This method replicates the JSON response that would be given by the {@link CurrentJobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,current,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1510063664;This method replicates the JSON response that would be given by the {@link JobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webDir);1519568061;This method replicates the JSON response that would be given by the {@link JobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webDir) {_		File webOverviewDir = new File(webDir, "overviews")__		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, "joboverview"))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("running")__			gen.writeEndArray()__			gen.writeArrayFieldStart("finished")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("finished")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,dir,file,web,overview,dir,new,file,web,dir,overviews,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,joboverview,gen,write,start,object,gen,write,array,field,start,running,gen,write,end,array,gen,write,array,field,start,finished,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,finished,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webOverviewDir, File webDir);1526334048;This method replicates the JSON response that would be given by the {@link JobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webOverviewDir, File webDir) {_		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, JobsOverviewHeaders.URL))) {_			gen.writeStartObject()__			gen.writeArrayFieldStart("jobs")___			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				for (File overview : overviews) {_					JsonNode root = mapper.readTree(overview)__					JsonNode finished = root.get("jobs")__					JsonNode job = finished.get(0)__					mapper.writeTree(gen, job)__				}_			}__			gen.writeEndArray()__			gen.writeEndObject()__		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,overview,dir,file,web,dir,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,jobs,overview,headers,url,gen,write,start,object,gen,write,array,field,start,jobs,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,for,file,overview,overviews,json,node,root,mapper,read,tree,overview,json,node,finished,root,get,jobs,json,node,job,finished,get,0,mapper,write,tree,gen,job,gen,write,end,array,gen,write,end,object,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webOverviewDir, File webDir);1526334048;This method replicates the JSON response that would be given by the {@link JobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webOverviewDir, File webDir) {_		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, JobsOverviewHeaders.URL))) {_			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				Collection<JobDetails> allJobs = new ArrayList<>(overviews.length)__				for (File overview : overviews) {_					MultipleJobsDetails subJobs = mapper.readValue(overview, MultipleJobsDetails.class)__					allJobs.addAll(subJobs.getJobs())__				}_				mapper.writeValue(gen, new MultipleJobsDetails(allJobs))__			}_		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,overview,dir,file,web,dir,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,jobs,overview,headers,url,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,collection,job,details,all,jobs,new,array,list,overviews,length,for,file,overview,overviews,multiple,jobs,details,sub,jobs,mapper,read,value,overview,multiple,jobs,details,class,all,jobs,add,all,sub,jobs,get,jobs,mapper,write,value,gen,new,multiple,jobs,details,all,jobs,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webOverviewDir, File webDir);1526334048;This method replicates the JSON response that would be given by the {@link JobsOverviewHandler} when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webOverviewDir, File webDir) {_		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, JobsOverviewHeaders.URL))) {_			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				Collection<JobDetails> allJobs = new ArrayList<>(overviews.length)__				for (File overview : overviews) {_					MultipleJobsDetails subJobs = mapper.readValue(overview, MultipleJobsDetails.class)__					allJobs.addAll(subJobs.getJobs())__				}_				mapper.writeValue(gen, new MultipleJobsDetails(allJobs))__			}_		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,link,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,overview,dir,file,web,dir,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,jobs,overview,headers,url,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,collection,job,details,all,jobs,new,array,list,overviews,length,for,file,overview,overviews,multiple,jobs,details,sub,jobs,mapper,read,value,overview,multiple,jobs,details,class,all,jobs,add,all,sub,jobs,get,jobs,mapper,write,value,gen,new,multiple,jobs,details,all,jobs,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webOverviewDir, File webDir);1539679694;This method replicates the JSON response that would be given by the JobsOverviewHandler when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webOverviewDir, File webDir) {_		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, JobsOverviewHeaders.URL))) {_			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				Collection<JobDetails> allJobs = new ArrayList<>(overviews.length)__				for (File overview : overviews) {_					MultipleJobsDetails subJobs = mapper.readValue(overview, MultipleJobsDetails.class)__					allJobs.addAll(subJobs.getJobs())__				}_				mapper.writeValue(gen, new MultipleJobsDetails(allJobs))__			}_		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,overview,dir,file,web,dir,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,jobs,overview,headers,url,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,collection,job,details,all,jobs,new,array,list,overviews,length,for,file,overview,overviews,multiple,jobs,details,sub,jobs,mapper,read,value,overview,multiple,jobs,details,class,all,jobs,add,all,sub,jobs,get,jobs,mapper,write,value,gen,new,multiple,jobs,details,all,jobs,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
HistoryServerArchiveFetcher -> private static void updateJobOverview(File webOverviewDir, File webDir);1549540918;This method replicates the JSON response that would be given by the JobsOverviewHandler when_listing both running and finished jobs.__<p>Every job archive contains a joboverview.json file containing the same structure. Since jobs are archived on_their own however the list of finished jobs only contains a single job.__<p>For the display in the HistoryServer WebFrontend we have to combine these overviews.;private static void updateJobOverview(File webOverviewDir, File webDir) {_		try (JsonGenerator gen = jacksonFactory.createGenerator(HistoryServer.createOrGetFile(webDir, JobsOverviewHeaders.URL))) {_			File[] overviews = new File(webOverviewDir.getPath()).listFiles()__			if (overviews != null) {_				Collection<JobDetails> allJobs = new ArrayList<>(overviews.length)__				for (File overview : overviews) {_					MultipleJobsDetails subJobs = mapper.readValue(overview, MultipleJobsDetails.class)__					allJobs.addAll(subJobs.getJobs())__				}_				mapper.writeValue(gen, new MultipleJobsDetails(allJobs))__			}_		} catch (IOException ioe) {_			LOG.error("Failed to update job overview.", ioe)__		}_	};this,method,replicates,the,json,response,that,would,be,given,by,the,jobs,overview,handler,when,listing,both,running,and,finished,jobs,p,every,job,archive,contains,a,joboverview,json,file,containing,the,same,structure,since,jobs,are,archived,on,their,own,however,the,list,of,finished,jobs,only,contains,a,single,job,p,for,the,display,in,the,history,server,web,frontend,we,have,to,combine,these,overviews;private,static,void,update,job,overview,file,web,overview,dir,file,web,dir,try,json,generator,gen,jackson,factory,create,generator,history,server,create,or,get,file,web,dir,jobs,overview,headers,url,file,overviews,new,file,web,overview,dir,get,path,list,files,if,overviews,null,collection,job,details,all,jobs,new,array,list,overviews,length,for,file,overview,overviews,multiple,jobs,details,sub,jobs,mapper,read,value,overview,multiple,jobs,details,class,all,jobs,add,all,sub,jobs,get,jobs,mapper,write,value,gen,new,multiple,jobs,details,all,jobs,catch,ioexception,ioe,log,error,failed,to,update,job,overview,ioe
