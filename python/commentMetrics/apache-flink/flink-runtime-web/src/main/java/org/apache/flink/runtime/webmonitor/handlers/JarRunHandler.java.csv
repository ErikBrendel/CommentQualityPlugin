commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;38;;@Override protected CompletableFuture<JarRunResponseBody> handleRequest(@Nonnull final HandlerRequest<JarRunRequestBody, JarRunMessageParameters> request, @Nonnull final DispatcherGateway gateway) throws RestHandlerException {     final JarHandlerContext context = JarHandlerContext.fromRequest(request, jarDir, log).     final SavepointRestoreSettings savepointRestoreSettings = getSavepointRestoreSettings(request).     final CompletableFuture<JobGraph> jobGraphFuture = getJobGraphAsync(context, savepointRestoreSettings).     CompletableFuture<Integer> blobServerPortFuture = gateway.getBlobServerPort(timeout).     CompletableFuture<JobGraph> jarUploadFuture = jobGraphFuture.thenCombine(blobServerPortFuture, (jobGraph, blobServerPort) -> {         final InetSocketAddress address = new InetSocketAddress(gateway.getHostname(), blobServerPort).         try {             ClientUtils.extractAndUploadJobGraphFiles(jobGraph, () -> new BlobClient(address, configuration)).         } catch (FlinkException e) {             throw new CompletionException(e).         }         return jobGraph.     }).     CompletableFuture<Acknowledge> jobSubmissionFuture = jarUploadFuture.thenCompose(jobGraph -> {         // we have to enable queued scheduling because slots will be allocated lazily         jobGraph.setAllowQueuedScheduling(true).         return gateway.submitJob(jobGraph, timeout).     }).     return jobSubmissionFuture.thenCombine(jarUploadFuture, (ack, jobGraph) -> new JarRunResponseBody(jobGraph.getJobID())).exceptionally(throwable -> {         throw new CompletionException(new RestHandlerException(throwable.getMessage(), HttpResponseStatus.INTERNAL_SERVER_ERROR, throwable)).     }). }
false;private;1;26;;private SavepointRestoreSettings getSavepointRestoreSettings(@Nonnull final HandlerRequest<JarRunRequestBody, JarRunMessageParameters> request) throws RestHandlerException {     final JarRunRequestBody requestBody = request.getRequestBody().     final boolean allowNonRestoredState = fromRequestBodyOrQueryParameter(requestBody.getAllowNonRestoredState(), () -> getQueryParameter(request, AllowNonRestoredStateQueryParameter.class), false, log).     final String savepointPath = fromRequestBodyOrQueryParameter(emptyToNull(requestBody.getSavepointPath()), () -> emptyToNull(getQueryParameter(request, SavepointPathQueryParameter.class)), null, log).     final SavepointRestoreSettings savepointRestoreSettings.     if (savepointPath != null) {         savepointRestoreSettings = SavepointRestoreSettings.forPath(savepointPath, allowNonRestoredState).     } else {         savepointRestoreSettings = SavepointRestoreSettings.none().     }     return savepointRestoreSettings. }
false;private;2;9;;private CompletableFuture<JobGraph> getJobGraphAsync(JarHandlerContext context, final SavepointRestoreSettings savepointRestoreSettings) {     return CompletableFuture.supplyAsync(() -> {         final JobGraph jobGraph = context.toJobGraph(configuration).         jobGraph.setSavepointRestoreSettings(savepointRestoreSettings).         return jobGraph.     }, executor). }
