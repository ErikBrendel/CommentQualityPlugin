# id;timestamp;commentText;codeText;commentWords;codeWords
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1490193900;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}_		long fileLength = raf.length()___		HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__		StaticFileServerHandler.setContentTypeHeader(response, file)___		_		if (!requestPath.equals("/joboverview.json")) {_			StaticFileServerHandler.setDateAndCacheHeaders(response, file)__		}_		if (HttpHeaders.isKeepAlive(request)) {_			response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__		}_		HttpHeaders.setContentLength(response, fileLength)___		_		ctx.write(response)___		_		ChannelFuture lastContentFuture__		if (ctx.pipeline().get(SslHandler.class) == null) {_			ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__			lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__		} else {_			lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_				ctx.newProgressivePromise())__			_		}__		_		if (!HttpHeaders.isKeepAlive(request)) {_			lastContentFuture.addListener(ChannelFutureListener.CLOSE)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1492256190;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,static,file,server,handler,send,error,ctx
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1495650061;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,static,file,server,handler,send,error,ctx
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1502111816;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,static,file,server,handler,send,error,ctx
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1505860824;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,static,file,server,handler,send,error,ctx
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1527499265;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						StaticFileServerHandler.sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			StaticFileServerHandler.sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,static,file,server,handler,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,static,file,server,handler,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,static,file,server,handler,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,static,file,server,handler,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,static,file,server,handler,send,error,ctx
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1535963626;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						HandlerUtils.sendErrorResponse(_							ctx,_							request,_							new ErrorResponseBody(String.format("Unable to load requested file %s.", requestPath)),_							NOT_FOUND,_							Collections.emptyMap())__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("Internal server error."),_				INTERNAL_SERVER_ERROR,_				Collections.emptyMap())__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,handler,utils,send,error,response,ctx,request,new,error,response,body,string,format,unable,to,load,requested,file,s,request,path,collections,empty,map,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,handler,utils,send,error,response,ctx,request,new,error,response,body,internal,server,error,collections,empty,map
HistoryServerStaticFileServerHandler -> private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 		throws IOException, ParseException;1535963626;Response when running with leading JobManager.;private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_		throws IOException, ParseException {__		_		if (requestPath.endsWith("/")) {_			requestPath = requestPath + "index.html"__		}__		if (!requestPath.contains(".")) { _			requestPath = requestPath + ".json"__		}__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader()___			String pathToLoad = requestPath.replace("index.html", "index_hs.html")___			try (InputStream resourceStream = cl.getResourceAsStream("web" + pathToLoad)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + pathToLoad)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								LOG.debug("Loading missing file from classloader: {}", pathToLoad)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					LOG.error("error while responding", t)__				} finally {_					if (!success) {_						LOG.debug("Unable to load requested file {} from classloader", pathToLoad)__						HandlerUtils.sendErrorResponse(_							ctx,_							request,_							new ErrorResponseBody("File not found."),_							NOT_FOUND,_							Collections.emptyMap())__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				StaticFileServerHandler.sendNotModified(ctx)__				return__			}_		}__		if (LOG.isDebugEnabled()) {_			LOG.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		} catch (FileNotFoundException e) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				Collections.emptyMap())__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			StaticFileServerHandler.setContentTypeHeader(response, file)___			_			if (!requestPath.equals("/joboverview.json")) {_				StaticFileServerHandler.setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			LOG.error("Failed to serve file.", e)__			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("Internal server error."),_				INTERNAL_SERVER_ERROR,_				Collections.emptyMap())__		}_	};response,when,running,with,leading,job,manager;private,void,respond,with,file,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,if,request,path,ends,with,request,path,request,path,index,html,if,request,path,contains,request,path,request,path,json,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,history,server,static,file,server,handler,class,get,class,loader,string,path,to,load,request,path,replace,index,html,html,try,input,stream,resource,stream,cl,get,resource,as,stream,web,path,to,load,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,path,to,load,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,log,debug,loading,missing,file,from,classloader,path,to,load,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,log,error,error,while,responding,t,finally,if,success,log,debug,unable,to,load,requested,file,from,classloader,path,to,load,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,static,file,server,handler,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,log,is,debug,enabled,log,debug,responding,not,modified,for,file,file,get,absolute,path,static,file,server,handler,send,not,modified,ctx,return,if,log,is,debug,enabled,log,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,collections,empty,map,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,static,file,server,handler,set,content,type,header,response,file,if,request,path,equals,joboverview,json,static,file,server,handler,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,log,error,failed,to,serve,file,e,handler,utils,send,error,response,ctx,request,new,error,response,body,internal,server,error,collections,empty,map
