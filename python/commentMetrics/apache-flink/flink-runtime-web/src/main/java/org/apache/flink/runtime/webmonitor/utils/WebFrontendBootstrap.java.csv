commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;16;;@Override protected void initChannel(SocketChannel ch) {     RouterHandler handler = new RouterHandler(WebFrontendBootstrap.this.router, new HashMap<>()).     // SSL should be the first handler in the pipeline     if (serverSSLFactory != null) {         ch.pipeline().addLast("ssl", serverSSLFactory.createNettySSLHandler()).     }     ch.pipeline().addLast(new HttpServerCodec()).addLast(new ChunkedWriteHandler()).addLast(new HttpRequestHandler(uploadDir)).addLast(handler.getName(), handler).addLast(new PipelineErrorHandler(WebFrontendBootstrap.this.log)). }
false;public;0;3;;public ServerBootstrap getBootstrap() {     return bootstrap. }
false;public;0;13;;public int getServerPort() {     Channel server = this.serverChannel.     if (server != null) {         try {             return ((InetSocketAddress) server.localAddress()).getPort().         } catch (Exception e) {             log.error("Cannot access local server port", e).         }     }     return -1. }
false;public;0;3;;public String getRestAddress() {     return restAddress. }
false;public;0;13;;public void shutdown() {     if (this.serverChannel != null) {         this.serverChannel.close().awaitUninterruptibly().     }     if (bootstrap != null) {         if (bootstrap.group() != null) {             bootstrap.group().shutdownGracefully().         }         if (bootstrap.childGroup() != null) {             bootstrap.childGroup().shutdownGracefully().         }     } }
