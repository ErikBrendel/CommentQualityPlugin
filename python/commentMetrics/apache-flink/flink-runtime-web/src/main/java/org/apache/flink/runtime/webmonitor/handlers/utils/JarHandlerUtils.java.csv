# id;timestamp;commentText;codeText;commentWords;codeWords
JarHandlerUtils -> private static <R extends JarRequestBody, M extends MessageParameters> List<String> getProgramArgs( 			HandlerRequest<R, M> request, Logger log) throws RestHandlerException;1539096023;Parse program arguments in jar run or plan request.;private static <R extends JarRequestBody, M extends MessageParameters> List<String> getProgramArgs(_			HandlerRequest<R, M> request, Logger log) throws RestHandlerException {_		JarRequestBody requestBody = request.getRequestBody()__		@SuppressWarnings("deprecation")_		List<String> programArgs = tokenizeArguments(_			fromRequestBodyOrQueryParameter(_				emptyToNull(requestBody.getProgramArguments()),_				() -> getQueryParameter(request, ProgramArgsQueryParameter.class),_				null,_				log))__		List<String> programArgsList =_			fromRequestBodyOrQueryParameter(_				requestBody.getProgramArgumentsList(),_				() -> request.getQueryParameter(ProgramArgQueryParameter.class),_				null,_				log)__		if (!programArgsList.isEmpty()) {_			if (!programArgs.isEmpty()) {_				throw new RestHandlerException(_					"Confusing request: programArgs and programArgsList are specified, please, use only programArgsList",_					HttpResponseStatus.BAD_REQUEST)__			}_			return programArgsList__		} else {_			return programArgs__		}_	};parse,program,arguments,in,jar,run,or,plan,request;private,static,r,extends,jar,request,body,m,extends,message,parameters,list,string,get,program,args,handler,request,r,m,request,logger,log,throws,rest,handler,exception,jar,request,body,request,body,request,get,request,body,suppress,warnings,deprecation,list,string,program,args,tokenize,arguments,from,request,body,or,query,parameter,empty,to,null,request,body,get,program,arguments,get,query,parameter,request,program,args,query,parameter,class,null,log,list,string,program,args,list,from,request,body,or,query,parameter,request,body,get,program,arguments,list,request,get,query,parameter,program,arg,query,parameter,class,null,log,if,program,args,list,is,empty,if,program,args,is,empty,throw,new,rest,handler,exception,confusing,request,program,args,and,program,args,list,are,specified,please,use,only,program,args,list,http,response,status,return,program,args,list,else,return,program,args
JarHandlerUtils -> private static <R extends JarRequestBody, M extends MessageParameters> List<String> getProgramArgs( 			HandlerRequest<R, M> request, Logger log) throws RestHandlerException;1550138784;Parse program arguments in jar run or plan request.;private static <R extends JarRequestBody, M extends MessageParameters> List<String> getProgramArgs(_			HandlerRequest<R, M> request, Logger log) throws RestHandlerException {_		JarRequestBody requestBody = request.getRequestBody()__		@SuppressWarnings("deprecation")_		List<String> programArgs = tokenizeArguments(_			fromRequestBodyOrQueryParameter(_				emptyToNull(requestBody.getProgramArguments()),_				() -> getQueryParameter(request, ProgramArgsQueryParameter.class),_				null,_				log))__		List<String> programArgsList =_			fromRequestBodyOrQueryParameter(_				requestBody.getProgramArgumentsList(),_				() -> request.getQueryParameter(ProgramArgQueryParameter.class),_				null,_				log)__		if (!programArgsList.isEmpty()) {_			if (!programArgs.isEmpty()) {_				throw new RestHandlerException(_					"Confusing request: programArgs and programArgsList are specified, please, use only programArgsList",_					HttpResponseStatus.BAD_REQUEST)__			}_			return programArgsList__		} else {_			return programArgs__		}_	};parse,program,arguments,in,jar,run,or,plan,request;private,static,r,extends,jar,request,body,m,extends,message,parameters,list,string,get,program,args,handler,request,r,m,request,logger,log,throws,rest,handler,exception,jar,request,body,request,body,request,get,request,body,suppress,warnings,deprecation,list,string,program,args,tokenize,arguments,from,request,body,or,query,parameter,empty,to,null,request,body,get,program,arguments,get,query,parameter,request,program,args,query,parameter,class,null,log,list,string,program,args,list,from,request,body,or,query,parameter,request,body,get,program,arguments,list,request,get,query,parameter,program,arg,query,parameter,class,null,log,if,program,args,list,is,empty,if,program,args,is,empty,throw,new,rest,handler,exception,confusing,request,program,args,and,program,args,list,are,specified,please,use,only,program,args,list,http,response,status,return,program,args,list,else,return,program,args
JarHandlerUtils -> @VisibleForTesting 	static List<String> tokenizeArguments(@Nullable final String args);1539096023;Takes program arguments as a single string, and splits them into a list of string.__<pre>_tokenizeArguments("--foo bar")            = ["--foo" "bar"]_tokenizeArguments("--foo \"bar baz\"")    = ["--foo" "bar baz"]_tokenizeArguments("--foo 'bar baz'")      = ["--foo" "bar baz"]_tokenizeArguments(null)                   = []_</pre>__<strong>WARNING: </strong>This method does not respect escaped quotes.;@VisibleForTesting_	static List<String> tokenizeArguments(@Nullable final String args) {_		if (args == null) {_			return Collections.emptyList()__		}_		final Matcher matcher = ARGUMENTS_TOKENIZE_PATTERN.matcher(args)__		final List<String> tokens = new ArrayList<>()__		while (matcher.find()) {_			tokens.add(matcher.group()_				.trim()_				.replace("\"", "")_				.replace("\'", ""))__		}_		return tokens__	};takes,program,arguments,as,a,single,string,and,splits,them,into,a,list,of,string,pre,tokenize,arguments,foo,bar,foo,bar,tokenize,arguments,foo,bar,baz,foo,bar,baz,tokenize,arguments,foo,bar,baz,foo,bar,baz,tokenize,arguments,null,pre,strong,warning,strong,this,method,does,not,respect,escaped,quotes;visible,for,testing,static,list,string,tokenize,arguments,nullable,final,string,args,if,args,null,return,collections,empty,list,final,matcher,matcher,matcher,args,final,list,string,tokens,new,array,list,while,matcher,find,tokens,add,matcher,group,trim,replace,replace,return,tokens
JarHandlerUtils -> @VisibleForTesting 	static List<String> tokenizeArguments(@Nullable final String args);1550138784;Takes program arguments as a single string, and splits them into a list of string.__<pre>_tokenizeArguments("--foo bar")            = ["--foo" "bar"]_tokenizeArguments("--foo \"bar baz\"")    = ["--foo" "bar baz"]_tokenizeArguments("--foo 'bar baz'")      = ["--foo" "bar baz"]_tokenizeArguments(null)                   = []_</pre>__<strong>WARNING: </strong>This method does not respect escaped quotes.;@VisibleForTesting_	static List<String> tokenizeArguments(@Nullable final String args) {_		if (args == null) {_			return Collections.emptyList()__		}_		final Matcher matcher = ARGUMENTS_TOKENIZE_PATTERN.matcher(args)__		final List<String> tokens = new ArrayList<>()__		while (matcher.find()) {_			tokens.add(matcher.group()_				.trim()_				.replace("\"", "")_				.replace("\'", ""))__		}_		return tokens__	};takes,program,arguments,as,a,single,string,and,splits,them,into,a,list,of,string,pre,tokenize,arguments,foo,bar,foo,bar,tokenize,arguments,foo,bar,baz,foo,bar,baz,tokenize,arguments,foo,bar,baz,foo,bar,baz,tokenize,arguments,null,pre,strong,warning,strong,this,method,does,not,respect,escaped,quotes;visible,for,testing,static,list,string,tokenize,arguments,nullable,final,string,args,if,args,null,return,collections,empty,list,final,matcher,matcher,matcher,args,final,list,string,tokens,new,array,list,while,matcher,find,tokens,add,matcher,group,trim,replace,replace,return,tokens
