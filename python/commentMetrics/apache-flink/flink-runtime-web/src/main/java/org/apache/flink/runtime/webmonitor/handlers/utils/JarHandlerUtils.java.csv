commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;31;;public static <R extends JarRequestBody> JarHandlerContext fromRequest(@Nonnull final HandlerRequest<R, ?> request, @Nonnull final Path jarDir, @Nonnull final Logger log) throws RestHandlerException {     final JarRequestBody requestBody = request.getRequestBody().     final String pathParameter = request.getPathParameter(JarIdPathParameter.class).     Path jarFile = jarDir.resolve(pathParameter).     String entryClass = fromRequestBodyOrQueryParameter(emptyToNull(requestBody.getEntryClassName()), () -> emptyToNull(getQueryParameter(request, EntryClassQueryParameter.class)), null, log).     List<String> programArgs = JarHandlerUtils.getProgramArgs(request, log).     int parallelism = fromRequestBodyOrQueryParameter(requestBody.getParallelism(), () -> getQueryParameter(request, ParallelismQueryParameter.class), ExecutionConfig.PARALLELISM_DEFAULT, log).     JobID jobId = fromRequestBodyOrQueryParameter(requestBody.getJobId(), // No support via query parameter     () -> null, // Delegate default job ID to actual JobGraph generation     null, log).     return new JarHandlerContext(jarFile, entryClass, programArgs, parallelism, jobId). }
false;public;1;16;;public JobGraph toJobGraph(Configuration configuration) {     if (!Files.exists(jarFile)) {         throw new CompletionException(new RestHandlerException(String.format("Jar file %s does not exist", jarFile), HttpResponseStatus.BAD_REQUEST)).     }     try {         final PackagedProgram packagedProgram = new PackagedProgram(jarFile.toFile(), entryClass, programArgs.toArray(new String[0])).         return PackagedProgramUtils.createJobGraph(packagedProgram, configuration, parallelism, jobId).     } catch (final ProgramInvocationException e) {         throw new CompletionException(e).     } }
true;private,static;2;27;/**  * Parse program arguments in jar run or plan request.  */ ;/**  * Parse program arguments in jar run or plan request.  */ private static <R extends JarRequestBody, M extends MessageParameters> List<String> getProgramArgs(HandlerRequest<R, M> request, Logger log) throws RestHandlerException {     JarRequestBody requestBody = request.getRequestBody().     @SuppressWarnings("deprecation")     List<String> programArgs = tokenizeArguments(fromRequestBodyOrQueryParameter(emptyToNull(requestBody.getProgramArguments()), () -> getQueryParameter(request, ProgramArgsQueryParameter.class), null, log)).     List<String> programArgsList = fromRequestBodyOrQueryParameter(requestBody.getProgramArgumentsList(), () -> request.getQueryParameter(ProgramArgQueryParameter.class), null, log).     if (!programArgsList.isEmpty()) {         if (!programArgs.isEmpty()) {             throw new RestHandlerException("Confusing request: programArgs and programArgsList are specified, please, use only programArgsList", HttpResponseStatus.BAD_REQUEST).         }         return programArgsList.     } else {         return programArgs.     } }
true;static;1;15;/**  * Takes program arguments as a single string, and splits them into a list of string.  *  * <pre>  * tokenizeArguments("--foo bar")            = ["--foo" "bar"]  * tokenizeArguments("--foo \"bar baz\"")    = ["--foo" "bar baz"]  * tokenizeArguments("--foo 'bar baz'")      = ["--foo" "bar baz"]  * tokenizeArguments(null)                   = []  * </pre>  *  * <strong>WARNING: </strong>This method does not respect escaped quotes.  */ ;/**  * Takes program arguments as a single string, and splits them into a list of string.  *  * <pre>  * tokenizeArguments("--foo bar")            = ["--foo" "bar"]  * tokenizeArguments("--foo \"bar baz\"")    = ["--foo" "bar baz"]  * tokenizeArguments("--foo 'bar baz'")      = ["--foo" "bar baz"]  * tokenizeArguments(null)                   = []  * </pre>  *  * <strong>WARNING: </strong>This method does not respect escaped quotes.  */ @VisibleForTesting static List<String> tokenizeArguments(@Nullable final String args) {     if (args == null) {         return Collections.emptyList().     }     final Matcher matcher = ARGUMENTS_TOKENIZE_PATTERN.matcher(args).     final List<String> tokens = new ArrayList<>().     while (matcher.find()) {         tokens.add(matcher.group().trim().replace("\"", "").replace("\'", "")).     }     return tokens. }
