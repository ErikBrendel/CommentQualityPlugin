commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public Integer call() throws Exception {     HistoryServer hs = new HistoryServer(flinkConfig).     hs.run().     return 0. }
false;public,static;1;33;;public static void main(String[] args) throws Exception {     ParameterTool pt = ParameterTool.fromArgs(args).     String configDir = pt.getRequired("configDir").     LOG.info("Loading configuration from {}", configDir).     final Configuration flinkConfig = GlobalConfiguration.loadConfiguration(configDir).     try {         FileSystem.initialize(flinkConfig).     } catch (IOException e) {         throw new Exception("Error while setting the default filesystem scheme from configuration.", e).     }     // run the history server     SecurityUtils.install(new SecurityConfiguration(flinkConfig)).     try {         SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {              @Override             public Integer call() throws Exception {                 HistoryServer hs = new HistoryServer(flinkConfig).                 hs.run().                 return 0.             }         }).         System.exit(0).     } catch (Throwable t) {         final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class).         LOG.error("Failed to run HistoryServer.", strippedThrowable).         strippedThrowable.printStackTrace().         System.exit(1).     } }
false;;0;4;;@VisibleForTesting int getWebPort() {     return netty.getServerPort(). }
false;public;0;10;;public void run() {     try {         start().         new CountDownLatch(1).await().     } catch (Exception e) {         LOG.error("Failure while running HistoryServer.", e).     } finally {         stop().     } }
false;;0;21;;// ------------------------------------------------------------------------ // Life-cycle // ------------------------------------------------------------------------ void start() throws IOException, InterruptedException {     synchronized (startupShutdownLock) {         LOG.info("Starting history server.").         Files.createDirectories(webDir.toPath()).         LOG.info("Using directory {} as local cache.", webDir).         Router router = new Router().         router.addGet("/:*", new HistoryServerStaticFileServerHandler(webDir)).         if (!webDir.exists() && !webDir.mkdirs()) {             throw new IOException("Failed to create local directory " + webDir.getAbsoluteFile() + ".").         }         createDashboardConfigFile().         archiveFetcher.start().         netty = new WebFrontendBootstrap(router, LOG, webDir, serverSSLFactory, webAddress, webPort, config).     } }
false;;0;27;;void stop() {     if (shutdownRequested.compareAndSet(false, true)) {         synchronized (startupShutdownLock) {             LOG.info("Stopping history server.").             try {                 netty.shutdown().             } catch (Throwable t) {                 LOG.warn("Error while shutting down WebFrontendBootstrap.", t).             }             archiveFetcher.stop().             try {                 LOG.info("Removing web dashboard root cache directory {}", webDir).                 FileUtils.deleteDirectory(webDir).             } catch (Throwable t) {                 LOG.warn("Error while deleting web root directory {}", webDir, t).             }             LOG.info("Stopped history server.").             // Remove shutdown hook to prevent resource leaks             ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG).         }     } }
false;static;2;8;;// ------------------------------------------------------------------------ // File generation // ------------------------------------------------------------------------ static FileWriter createOrGetFile(File folder, String name) throws IOException {     File file = new File(folder, name + ".json").     if (!file.exists()) {         Files.createFile(file.toPath()).     }     FileWriter fr = new FileWriter(file).     return fr. }
false;private;0;9;;private void createDashboardConfigFile() throws IOException {     try (FileWriter fw = createOrGetFile(webDir, "config")) {         fw.write(createConfigJson(DashboardConfiguration.from(webRefreshIntervalMillis, ZonedDateTime.now()))).         fw.flush().     } catch (IOException ioe) {         LOG.error("Failed to write config file.").         throw ioe.     } }
false;private,static;1;17;;private static String createConfigJson(DashboardConfiguration dashboardConfiguration) throws IOException {     StringWriter writer = new StringWriter().     JsonGenerator gen = JsonFactory.JACKSON_FACTORY.createGenerator(writer).     gen.writeStartObject().     gen.writeNumberField(DashboardConfiguration.FIELD_NAME_REFRESH_INTERVAL, dashboardConfiguration.getRefreshInterval()).     gen.writeNumberField(DashboardConfiguration.FIELD_NAME_TIMEZONE_OFFSET, dashboardConfiguration.getTimeZoneOffset()).     gen.writeStringField(DashboardConfiguration.FIELD_NAME_TIMEZONE_NAME, dashboardConfiguration.getTimeZoneName()).     gen.writeStringField(DashboardConfiguration.FIELD_NAME_FLINK_VERSION, dashboardConfiguration.getFlinkVersion()).     gen.writeStringField(DashboardConfiguration.FIELD_NAME_FLINK_REVISION, dashboardConfiguration.getFlinkRevision()).     gen.writeEndObject().     gen.close().     return writer.toString(). }
false;public;0;3;;public Path getPath() {     return path. }
false;public;0;3;;public FileSystem getFs() {     return fs. }
