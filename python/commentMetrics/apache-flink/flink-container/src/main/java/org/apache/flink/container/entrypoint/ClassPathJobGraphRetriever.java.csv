commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public JobGraph retrieveJobGraph(Configuration configuration) throws FlinkException {     final PackagedProgram packagedProgram = createPackagedProgram().     final int defaultParallelism = configuration.getInteger(CoreOptions.DEFAULT_PARALLELISM).     try {         final JobGraph jobGraph = PackagedProgramUtils.createJobGraph(packagedProgram, configuration, defaultParallelism, jobId).         jobGraph.setAllowQueuedScheduling(true).         jobGraph.setSavepointRestoreSettings(savepointRestoreSettings).         return jobGraph.     } catch (Exception e) {         throw new FlinkException("Could not create the JobGraph from the provided user code jar.", e).     } }
false;private;0;9;;private PackagedProgram createPackagedProgram() throws FlinkException {     final String entryClass = getJobClassNameOrScanClassPath().     try {         final Class<?> mainClass = getClass().getClassLoader().loadClass(entryClass).         return new PackagedProgram(mainClass, programArguments).     } catch (ClassNotFoundException | ProgramInvocationException e) {         throw new FlinkException("Could not load the provided entrypoint class.", e).     } }
false;private;0;11;;private String getJobClassNameOrScanClassPath() throws FlinkException {     if (jobClassName != null) {         return jobClassName.     }     try {         return scanClassPathForJobJar().     } catch (IOException | NoSuchElementException | IllegalArgumentException e) {         throw new FlinkException("Failed to find job JAR on class path. Please provide the job class name explicitly.", e).     } }
false;private;0;7;;private String scanClassPathForJobJar() throws IOException {     LOG.info("Scanning class path for job JAR").     JarFileWithEntryClass jobJar = JarManifestParser.findOnlyEntryClass(jarsOnClassPath.get()).     LOG.info("Using {} as job jar", jobJar).     return jobJar.getEntryClass(). }
false;public;0;11;;@Override public Iterable<File> get() {     String classPath = System.getProperty(JAVA_CLASS_PATH, "").     String pathSeparator = System.getProperty(PATH_SEPARATOR, DEFAULT_PATH_SEPARATOR).     return Arrays.stream(classPath.split(pathSeparator)).filter(JarsOnClassPath::notNullAndNotEmpty).map(File::new).filter(File::isFile).collect(Collectors.toList()). }
false;private,static;1;3;;private static boolean notNullAndNotEmpty(String string) {     return string != null && !string.equals(""). }
