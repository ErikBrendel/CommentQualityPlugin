commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;File getJarFile() {     return jarFile. }
false;;0;3;;String getEntryClass() {     return entryClass. }
false;public;0;4;;@Override public String toString() {     return String.format("%s (entry class: %s)", jarFile.getAbsolutePath(), entryClass). }
true;static;1;17;/**  * Returns a JAR file with its entry class as specified in the manifest.  *  * @param jarFiles JAR files to parse  *  * @throws NoSuchElementException if no JAR file contains an entry class attribute  * @throws IllegalArgumentException if multiple JAR files contain an entry class manifest attribute  */ ;/**  * Returns a JAR file with its entry class as specified in the manifest.  *  * @param jarFiles JAR files to parse  *  * @throws NoSuchElementException if no JAR file contains an entry class attribute  * @throws IllegalArgumentException if multiple JAR files contain an entry class manifest attribute  */ static JarFileWithEntryClass findOnlyEntryClass(Iterable<File> jarFiles) throws IOException {     List<JarFileWithEntryClass> jarsWithEntryClasses = new ArrayList<>().     for (File jarFile : jarFiles) {         findEntryClass(jarFile).ifPresent(entryClass -> jarsWithEntryClasses.add(new JarFileWithEntryClass(jarFile, entryClass))).     }     int size = jarsWithEntryClasses.size().     if (size == 0) {         throw new NoSuchElementException("No JAR with manifest attribute for entry class").     }     if (size == 1) {         return jarsWithEntryClasses.get(0).     }     // else: size > 1     throw new IllegalArgumentException("Multiple JARs with manifest attribute for entry class: " + jarsWithEntryClasses). }
true;static;1;7;/**  * Returns the entry class as specified in the manifest of the provided JAR file.  *  * <p>The following manifest attributes are checked in order to find the entry class:  * <ol>  * <li>{@link PackagedProgram#MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS}</li>  * <li>{@link PackagedProgram#MANIFEST_ATTRIBUTE_MAIN_CLASS}</li>  * </ol>  *  * @param jarFile JAR file to parse  * @return Optional holding entry class  * @throws IOException If there is an error accessing the JAR  */ ;/**  * Returns the entry class as specified in the manifest of the provided JAR file.  *  * <p>The following manifest attributes are checked in order to find the entry class:  * <ol>  * <li>{@link PackagedProgram#MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS}</li>  * <li>{@link PackagedProgram#MANIFEST_ATTRIBUTE_MAIN_CLASS}</li>  * </ol>  *  * @param jarFile JAR file to parse  * @return Optional holding entry class  * @throws IOException If there is an error accessing the JAR  */ @VisibleForTesting static Optional<String> findEntryClass(File jarFile) throws IOException {     return findFirstManifestAttribute(jarFile, PackagedProgram.MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS, PackagedProgram.MANIFEST_ATTRIBUTE_MAIN_CLASS). }
true;private,static;2;8;/**  * Returns the value of the first manifest attribute found in the provided JAR file.  *  * @param jarFile    JAR file to parse  * @param attributes Attributes to check  * @return Optional holding value of first found attribute  * @throws IOException If there is an error accessing the JAR  */ ;/**  * Returns the value of the first manifest attribute found in the provided JAR file.  *  * @param jarFile    JAR file to parse  * @param attributes Attributes to check  * @return Optional holding value of first found attribute  * @throws IOException If there is an error accessing the JAR  */ private static Optional<String> findFirstManifestAttribute(File jarFile, String... attributes) throws IOException {     if (attributes.length == 0) {         return Optional.empty().     }     try (JarFile f = new JarFile(jarFile)) {         return findFirstManifestAttribute(f, attributes).     } }
false;private,static;2;16;;private static Optional<String> findFirstManifestAttribute(JarFile jarFile, String... attributes) throws IOException {     Manifest manifest = jarFile.getManifest().     if (manifest == null) {         return Optional.empty().     }     Attributes mainAttributes = manifest.getMainAttributes().     for (String attribute : attributes) {         String value = mainAttributes.getValue(attribute).         if (value != null) {             return Optional.of(value).         }     }     return Optional.empty(). }
