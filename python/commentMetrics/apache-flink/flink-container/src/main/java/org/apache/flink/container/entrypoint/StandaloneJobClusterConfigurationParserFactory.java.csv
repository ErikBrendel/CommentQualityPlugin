commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public Options getOptions() {     final Options options = new Options().     options.addOption(CONFIG_DIR_OPTION).     options.addOption(REST_PORT_OPTION).     options.addOption(JOB_CLASS_NAME_OPTION).     options.addOption(JOB_ID_OPTION).     options.addOption(DYNAMIC_PROPERTY_OPTION).     options.addOption(CliFrontendParser.SAVEPOINT_PATH_OPTION).     options.addOption(CliFrontendParser.SAVEPOINT_ALLOW_NON_RESTORED_OPTION).     return options. }
false;public;1;20;;@Override public StandaloneJobClusterConfiguration createResult(@Nonnull CommandLine commandLine) throws FlinkParseException {     final String configDir = commandLine.getOptionValue(CONFIG_DIR_OPTION.getOpt()).     final Properties dynamicProperties = commandLine.getOptionProperties(DYNAMIC_PROPERTY_OPTION.getOpt()).     final int restPort = getRestPort(commandLine).     final String hostname = commandLine.getOptionValue(HOST_OPTION.getOpt()).     final SavepointRestoreSettings savepointRestoreSettings = CliFrontendParser.createSavepointRestoreSettings(commandLine).     final JobID jobId = getJobId(commandLine).     final String jobClassName = commandLine.getOptionValue(JOB_CLASS_NAME_OPTION.getOpt()).     return new StandaloneJobClusterConfiguration(configDir, dynamicProperties, commandLine.getArgs(), hostname, restPort, savepointRestoreSettings, jobId, jobClassName). }
false;private;1;8;;private int getRestPort(CommandLine commandLine) throws FlinkParseException {     final String restPortString = commandLine.getOptionValue(REST_PORT_OPTION.getOpt(), "-1").     try {         return Integer.parseInt(restPortString).     } catch (NumberFormatException e) {         throw createFlinkParseException(REST_PORT_OPTION, e).     } }
false;private,static;1;11;;private static JobID getJobId(CommandLine commandLine) throws FlinkParseException {     String jobId = commandLine.getOptionValue(JOB_ID_OPTION.getOpt()).     if (jobId == null) {         return DEFAULT_JOB_ID.     }     try {         return JobID.fromHexString(jobId).     } catch (IllegalArgumentException e) {         throw createFlinkParseException(JOB_ID_OPTION, e).     } }
false;private,static;2;3;;private static FlinkParseException createFlinkParseException(Option option, Exception cause) {     return new FlinkParseException(String.format("Failed to parse '--%s' option", option.getLongOpt()), cause). }
