commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testFindEntryClassNoEntry() throws IOException {     File jarFile = createJarFileWithManifest(ImmutableMap.of()).     Optional<String> entry = JarManifestParser.findEntryClass(jarFile).     assertFalse(entry.isPresent()). }
false;public;0;10;;@Test public void testFindEntryClassAssemblerClass() throws IOException {     File jarFile = createJarFileWithManifest(ImmutableMap.of(PackagedProgram.MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS, "AssemblerClass")).     Optional<String> entry = JarManifestParser.findEntryClass(jarFile).     assertTrue(entry.isPresent()).     assertThat(entry.get(), is(equalTo("AssemblerClass"))). }
false;public;0;10;;@Test public void testFindEntryClassMainClass() throws IOException {     File jarFile = createJarFileWithManifest(ImmutableMap.of(PackagedProgram.MANIFEST_ATTRIBUTE_MAIN_CLASS, "MainClass")).     Optional<String> entry = JarManifestParser.findEntryClass(jarFile).     assertTrue(entry.isPresent()).     assertThat(entry.get(), is(equalTo("MainClass"))). }
false;public;0;12;;@Test public void testFindEntryClassAssemblerClassAndMainClass() throws IOException {     // We want the assembler class entry to have precedence over main class     File jarFile = createJarFileWithManifest(ImmutableMap.of(PackagedProgram.MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS, "AssemblerClass", PackagedProgram.MANIFEST_ATTRIBUTE_MAIN_CLASS, "MainClass")).     Optional<String> entry = JarManifestParser.findEntryClass(jarFile).     assertTrue(entry.isPresent()).     assertThat(entry.get(), is(equalTo("AssemblerClass"))). }
false;public;0;9;;@Test public void testFindEntryClassWithTestJobJar() throws IOException {     File jarFile = TestJob.getTestJobJar().     Optional<String> entryClass = JarManifestParser.findEntryClass(jarFile).     assertTrue(entryClass.isPresent()).     assertThat(entryClass.get(), is(equalTo(TestJob.class.getCanonicalName()))). }
false;public;0;4;;@Test(expected = NoSuchElementException.class) public void testFindOnlyEntryClassEmptyArgument() throws IOException {     JarManifestParser.findOnlyEntryClass(Collections.emptyList()). }
false;public;0;5;;@Test(expected = NoSuchElementException.class) public void testFindOnlyEntryClassSingleJarWithNoManifest() throws IOException {     File jarWithNoManifest = createJarFileWithManifest(ImmutableMap.of()).     JarManifestParser.findOnlyEntryClass(ImmutableList.of(jarWithNoManifest)). }
false;public;0;8;;@Test public void testFindOnlyEntryClassSingleJar() throws IOException {     File jarFile = TestJob.getTestJobJar().     JarFileWithEntryClass jarFileWithEntryClass = JarManifestParser.findOnlyEntryClass(ImmutableList.of(jarFile)).     assertThat(jarFileWithEntryClass.getEntryClass(), is(equalTo(TestJob.class.getCanonicalName()))). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testFindOnlyEntryClassMultipleJarsWithMultipleManifestEntries() throws IOException {     File jarFile = TestJob.getTestJobJar().     JarManifestParser.findOnlyEntryClass(ImmutableList.of(jarFile, jarFile, jarFile)). }
false;public;0;10;;@Test public void testFindOnlyEntryClassMultipleJarsWithSingleManifestEntry() throws IOException {     File jarWithNoManifest = createJarFileWithManifest(ImmutableMap.of()).     File jarFile = TestJob.getTestJobJar().     JarFileWithEntryClass jarFileWithEntryClass = JarManifestParser.findOnlyEntryClass(ImmutableList.of(jarWithNoManifest, jarFile)).     assertThat(jarFileWithEntryClass.getEntryClass(), is(equalTo(TestJob.class.getCanonicalName()))). }
false;private;1;9;;private File createJarFileWithManifest(Map<String, String> manifest) throws IOException {     final File jarFile = temporaryFolder.newFile().     try (ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarFile))).         PrintWriter pw = new PrintWriter(zos)) {         zos.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF")).         manifest.forEach((key, value) -> pw.println(String.format("%s: %s", key, value))).     }     return jarFile. }
