commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testJobGraphRetrieval() throws FlinkException {     final int parallelism = 42.     final Configuration configuration = new Configuration().     configuration.setInteger(CoreOptions.DEFAULT_PARALLELISM, parallelism).     final JobID jobId = new JobID().     final ClassPathJobGraphRetriever classPathJobGraphRetriever = new ClassPathJobGraphRetriever(jobId, SavepointRestoreSettings.none(), PROGRAM_ARGUMENTS, TestJob.class.getCanonicalName()).     final JobGraph jobGraph = classPathJobGraphRetriever.retrieveJobGraph(configuration).     assertThat(jobGraph.getName(), is(equalTo(TestJob.class.getCanonicalName() + "-suffix"))).     assertThat(jobGraph.getMaximumParallelism(), is(parallelism)).     assertEquals(jobGraph.getJobID(), jobId). }
false;public;0;15;;@Test public void testJobGraphRetrievalFromJar() throws FlinkException, FileNotFoundException {     final File testJar = TestJob.getTestJobJar().     final ClassPathJobGraphRetriever classPathJobGraphRetriever = new ClassPathJobGraphRetriever(new JobID(), SavepointRestoreSettings.none(), PROGRAM_ARGUMENTS, // No class name specified, but the test JAR "is" on the class path     null, () -> Collections.singleton(testJar)).     final JobGraph jobGraph = classPathJobGraphRetriever.retrieveJobGraph(new Configuration()).     assertThat(jobGraph.getName(), is(equalTo(TestJob.class.getCanonicalName() + "-suffix"))). }
false;public;0;17;;@Test public void testJobGraphRetrievalJobClassNameHasPrecedenceOverClassPath() throws FlinkException, FileNotFoundException {     final File testJar = new File("non-existing").     final ClassPathJobGraphRetriever classPathJobGraphRetriever = new ClassPathJobGraphRetriever(new JobID(), SavepointRestoreSettings.none(), PROGRAM_ARGUMENTS, // The class name should have precedence.     TestJob.class.getCanonicalName(), () -> Collections.singleton(testJar)).     final JobGraph jobGraph = classPathJobGraphRetriever.retrieveJobGraph(new Configuration()).     assertThat(jobGraph.getName(), is(equalTo(TestJob.class.getCanonicalName() + "-suffix"))). }
false;public;0;17;;@Test public void testSavepointRestoreSettings() throws FlinkException {     final Configuration configuration = new Configuration().     final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("foobar", true).     final JobID jobId = new JobID().     final ClassPathJobGraphRetriever classPathJobGraphRetriever = new ClassPathJobGraphRetriever(jobId, savepointRestoreSettings, PROGRAM_ARGUMENTS, TestJob.class.getCanonicalName()).     final JobGraph jobGraph = classPathJobGraphRetriever.retrieveJobGraph(configuration).     assertThat(jobGraph.getSavepointRestoreSettings(), is(equalTo(savepointRestoreSettings))).     assertEquals(jobGraph.getJobID(), jobId). }
false;public;0;7;;@Test public void testJarFromClassPathSupplierSanityCheck() {     Iterable<File> jarFiles = JarsOnClassPath.INSTANCE.get().     // Junit executes this test, so it should be returned as part of JARs on the class path     assertThat(jarFiles, hasItem(hasProperty("name", containsString("junit")))). }
false;public;0;24;;@Test public void testJarFromClassPathSupplier() throws IOException {     final File file1 = temporaryFolder.newFile().     final File file2 = temporaryFolder.newFile().     final File directory = temporaryFolder.newFolder().     // Mock java.class.path property. The empty strings are important as the shell scripts     // that prepare the Flink class path often have such entries.     final String classPath = javaClassPath("", "", "", file1.getAbsolutePath(), "", directory.getAbsolutePath(), "", file2.getAbsolutePath(), "", "").     Iterable<File> jarFiles = setClassPathAndGetJarsOnClassPath(classPath).     assertThat(jarFiles, contains(file1, file2)). }
false;private,static;1;4;;private static String javaClassPath(String... entries) {     String pathSeparator = System.getProperty(JarsOnClassPath.PATH_SEPARATOR).     return String.join(pathSeparator, entries). }
false;private,static;1;10;;private static Iterable<File> setClassPathAndGetJarsOnClassPath(String classPath) {     final String originalClassPath = System.getProperty(JarsOnClassPath.JAVA_CLASS_PATH).     try {         System.setProperty(JarsOnClassPath.JAVA_CLASS_PATH, classPath).         return JarsOnClassPath.INSTANCE.get().     } finally {         // Reset property         System.setProperty(JarsOnClassPath.JAVA_CLASS_PATH, originalClassPath).     } }
