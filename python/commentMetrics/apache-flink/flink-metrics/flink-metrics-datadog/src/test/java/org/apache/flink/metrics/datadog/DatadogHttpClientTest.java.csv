commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void mockSystemMillis() {     PowerMockito.mockStatic(DMetric.class).     PowerMockito.when(DMetric.getUnixEpochTimestamp()).thenReturn(MOCKED_SYSTEM_MILLIS). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testClientWithEmptyKey() {     new DatadogHttpClient(""). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testClientWithNullKey() {     new DatadogHttpClient(null). }
false;public;0;4;;@Override public Number getValue() {     return 1. }
false;public;0;14;;@Test public void serializeGauge() throws JsonProcessingException {     DGauge g = new DGauge(new Gauge<Number>() {          @Override         public Number getValue() {             return 1.         }     }, "testCounter", "localhost", tags).     assertEquals("{\"metric\":\"testCounter\",\"type\":\"gauge\",\"host\":\"localhost\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1]]}", DatadogHttpClient.serialize(g)). }
false;public;0;4;;@Override public Number getValue() {     return 1. }
false;public;0;14;;@Test public void serializeGaugeWithoutHost() throws JsonProcessingException {     DGauge g = new DGauge(new Gauge<Number>() {          @Override         public Number getValue() {             return 1.         }     }, "testCounter", null, tags).     assertEquals("{\"metric\":\"testCounter\",\"type\":\"gauge\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1]]}", DatadogHttpClient.serialize(g)). }
false;public;0;2;;@Override public void inc() { }
false;public;1;2;;@Override public void inc(long n) { }
false;public;0;2;;@Override public void dec() { }
false;public;1;2;;@Override public void dec(long n) { }
false;public;0;4;;@Override public long getCount() {     return 1. }
false;public;0;25;;@Test public void serializeCounter() throws JsonProcessingException {     DCounter c = new DCounter(new Counter() {          @Override         public void inc() {         }          @Override         public void inc(long n) {         }          @Override         public void dec() {         }          @Override         public void dec(long n) {         }          @Override         public long getCount() {             return 1.         }     }, "testCounter", "localhost", tags).     assertEquals("{\"metric\":\"testCounter\",\"type\":\"counter\",\"host\":\"localhost\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1]]}", DatadogHttpClient.serialize(c)). }
false;public;0;2;;@Override public void inc() { }
false;public;1;2;;@Override public void inc(long n) { }
false;public;0;2;;@Override public void dec() { }
false;public;1;2;;@Override public void dec(long n) { }
false;public;0;4;;@Override public long getCount() {     return 1. }
false;public;0;25;;@Test public void serializeCounterWithoutHost() throws JsonProcessingException {     DCounter c = new DCounter(new Counter() {          @Override         public void inc() {         }          @Override         public void inc(long n) {         }          @Override         public void dec() {         }          @Override         public void dec(long n) {         }          @Override         public long getCount() {             return 1.         }     }, "testCounter", null, tags).     assertEquals("{\"metric\":\"testCounter\",\"type\":\"counter\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1]]}", DatadogHttpClient.serialize(c)). }
false;public;0;2;;@Override public void markEvent() { }
false;public;1;2;;@Override public void markEvent(long n) { }
false;public;0;4;;@Override public double getRate() {     return 1. }
false;public;0;4;;@Override public long getCount() {     return 0. }
false;public;0;25;;@Test public void serializeMeter() throws JsonProcessingException {     DMeter m = new DMeter(new Meter() {          @Override         public void markEvent() {         }          @Override         public void markEvent(long n) {         }          @Override         public double getRate() {             return 1.         }          @Override         public long getCount() {             return 0.         }     }, "testMeter", "localhost", tags).     assertEquals("{\"metric\":\"testMeter\",\"type\":\"gauge\",\"host\":\"localhost\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1.0]]}", DatadogHttpClient.serialize(m)). }
false;public;0;2;;@Override public void markEvent() { }
false;public;1;2;;@Override public void markEvent(long n) { }
false;public;0;4;;@Override public double getRate() {     return 1. }
false;public;0;4;;@Override public long getCount() {     return 0. }
false;public;0;25;;@Test public void serializeMeterWithoutHost() throws JsonProcessingException {     DMeter m = new DMeter(new Meter() {          @Override         public void markEvent() {         }          @Override         public void markEvent(long n) {         }          @Override         public double getRate() {             return 1.         }          @Override         public long getCount() {             return 0.         }     }, "testMeter", null, tags).     assertEquals("{\"metric\":\"testMeter\",\"type\":\"gauge\",\"tags\":[\"tag1\",\"tag2\"],\"points\":[[123,1.0]]}", DatadogHttpClient.serialize(m)). }
