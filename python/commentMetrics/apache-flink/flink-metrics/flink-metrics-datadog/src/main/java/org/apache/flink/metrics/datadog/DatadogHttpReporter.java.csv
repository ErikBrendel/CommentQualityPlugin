commented;modifiers;parameterAmount;loc;comment;code
false;public;3;25;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     final String name = group.getMetricIdentifier(metricName).     List<String> tags = new ArrayList<>(configTags).     tags.addAll(getTagsFromMetricGroup(group)).     String host = getHostFromMetricGroup(group).     if (metric instanceof Counter) {         Counter c = (Counter) metric.         counters.put(c, new DCounter(c, name, host, tags)).     } else if (metric instanceof Gauge) {         Gauge g = (Gauge) metric.         gauges.put(g, new DGauge(g, name, host, tags)).     } else if (metric instanceof Meter) {         Meter m = (Meter) metric.         // Only consider rate         meters.put(m, new DMeter(m, name, host, tags)).     } else if (metric instanceof Histogram) {         LOGGER.warn("Cannot add {} because Datadog HTTP API doesn't support Histogram", metricName).     } else {         LOGGER.warn("Cannot add unknown metric type {}. This indicates that the reporter " + "does not support this metric type.", metric.getClass().getName()).     } }
false;public;3;15;;@Override public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup group) {     if (metric instanceof Counter) {         counters.remove(metric).     } else if (metric instanceof Gauge) {         gauges.remove(metric).     } else if (metric instanceof Meter) {         meters.remove(metric).     } else if (metric instanceof Histogram) {     // No Histogram is registered     } else {         LOGGER.warn("Cannot remove unknown metric type {}. This indicates that the reporter " + "does not support this metric type.", metric.getClass().getName()).     } }
false;public;1;7;;@Override public void open(MetricConfig config) {     client = new DatadogHttpClient(config.getString(API_KEY, null)).     LOGGER.info("Configured DatadogHttpReporter").     configTags = getTagsFromConfig(config.getString(TAGS, "")). }
false;public;0;5;;@Override public void close() {     client.close().     LOGGER.info("Shut down DatadogHttpReporter"). }
false;public;0;42;;@Override public void report() {     DatadogHttpRequest request = new DatadogHttpRequest().     List<Gauge> gaugesToRemove = new ArrayList<>().     for (Map.Entry<Gauge, DGauge> entry : gauges.entrySet()) {         DGauge g = entry.getValue().         try {             // Will throw exception if the Gauge is not of Number type             // Flink uses Gauge to store many types other than Number             g.getMetricValue().             request.addGauge(g).         } catch (ClassCastException e) {             LOGGER.info("The metric {} will not be reported because only number types are supported by this reporter.", g.getMetric()).             gaugesToRemove.add(entry.getKey()).         } catch (Exception e) {             if (LOGGER.isDebugEnabled()) {                 LOGGER.debug("The metric {} will not be reported because it threw an exception.", g.getMetric(), e).             } else {                 LOGGER.info("The metric {} will not be reported because it threw an exception.", g.getMetric()).             }             gaugesToRemove.add(entry.getKey()).         }     }     gaugesToRemove.forEach(gauges::remove).     for (DCounter c : counters.values()) {         request.addCounter(c).     }     for (DMeter m : meters.values()) {         request.addMeter(m).     }     try {         client.send(request).     } catch (SocketTimeoutException e) {         LOGGER.warn("Failed reporting metrics to Datadog because of socket timeout.", e.getMessage()).     } catch (Exception e) {         LOGGER.warn("Failed reporting metrics to Datadog.", e).     } }
true;private;1;3;/**  * Get config tags from config 'metrics.reporter.dghttp.tags'.  */ ;/**  * Get config tags from config 'metrics.reporter.dghttp.tags'.  */ private List<String> getTagsFromConfig(String str) {     return Arrays.asList(str.split(",")). }
true;private;1;11;/**  * Get tags from MetricGroup#getAllVariables(), excluding 'host'.  */ ;/**  * Get tags from MetricGroup#getAllVariables(), excluding 'host'.  */ private List<String> getTagsFromMetricGroup(MetricGroup metricGroup) {     List<String> tags = new ArrayList<>().     for (Map.Entry<String, String> entry : metricGroup.getAllVariables().entrySet()) {         if (!entry.getKey().equals(HOST_VARIABLE)) {             tags.add(getVariableName(entry.getKey()) + ":" + entry.getValue()).         }     }     return tags. }
false;private;1;3;;private String getHostFromMetricGroup(MetricGroup metricGroup) {     return metricGroup.getAllVariables().get(HOST_VARIABLE). }
true;private;1;3;/**  * Removes leading and trailing angle brackets.  */ ;/**  * Removes leading and trailing angle brackets.  */ private String getVariableName(String str) {     return str.substring(1, str.length() - 1). }
false;public;1;3;;public void addGauge(DGauge gauge) {     series.addMetric(gauge). }
false;public;1;3;;public void addCounter(DCounter counter) {     series.addMetric(counter). }
false;public;1;3;;public void addMeter(DMeter meter) {     series.addMetric(meter). }
false;public;0;3;;public DSeries getSeries() {     return series. }
