commented;modifiers;parameterAmount;loc;comment;code
false;public;1;46;;@Override public ScheduledReporter getReporter(MetricConfig config) {     String host = config.getString(ARG_HOST, null).     int port = config.getInteger(ARG_PORT, -1).     if (host == null || host.length() == 0 || port < 1) {         throw new IllegalArgumentException("Invalid host/port configuration. Host: " + host + " Port: " + port).     }     String prefix = config.getString(ARG_PREFIX, null).     String conversionRate = config.getString(ARG_CONVERSION_RATE, null).     String conversionDuration = config.getString(ARG_CONVERSION_DURATION, null).     String protocol = config.getString(ARG_PROTOCOL, "TCP").     com.codahale.metrics.graphite.GraphiteReporter.Builder builder = com.codahale.metrics.graphite.GraphiteReporter.forRegistry(registry).     if (prefix != null) {         builder.prefixedWith(prefix).     }     if (conversionRate != null) {         builder.convertRatesTo(TimeUnit.valueOf(conversionRate)).     }     if (conversionDuration != null) {         builder.convertDurationsTo(TimeUnit.valueOf(conversionDuration)).     }     Protocol prot.     try {         prot = Protocol.valueOf(protocol).     } catch (IllegalArgumentException iae) {         log.warn("Invalid protocol configuration: " + protocol + " Expected: TCP or UDP, defaulting to TCP.").         prot = Protocol.TCP.     }     log.info("Configured GraphiteReporter with {host:{}, port:{}, protocol:{}}", host, port, prot).     switch(prot) {         case UDP:             return builder.build(new GraphiteUDP(host, port)).         case TCP:         default:             return builder.build(new Graphite(host, port)).     } }
