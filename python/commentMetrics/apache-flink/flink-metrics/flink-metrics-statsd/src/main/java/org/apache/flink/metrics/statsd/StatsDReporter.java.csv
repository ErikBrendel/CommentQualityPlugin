commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public void open(MetricConfig config) {     String host = config.getString(ARG_HOST, null).     int port = config.getInteger(ARG_PORT, -1).     if (host == null || host.length() == 0 || port < 1) {         throw new IllegalArgumentException("Invalid host/port configuration. Host: " + host + " Port: " + port).     }     this.address = new InetSocketAddress(host, port).     try {         this.socket = new DatagramSocket(0).     } catch (SocketException e) {         throw new RuntimeException("Could not create datagram socket. ", e).     }     log.info("Configured StatsDReporter with {host:{}, port:{}}", host, port). }
false;public;0;7;;@Override public void close() {     closed = true.     if (socket != null && !socket.isClosed()) {         socket.close().     } }
false;public;0;33;;// ------------------------------------------------------------------------ @Override public void report() {     // operator creation and shutdown     try {         for (Map.Entry<Gauge<?>, String> entry : gauges.entrySet()) {             if (closed) {                 return.             }             reportGauge(entry.getValue(), entry.getKey()).         }         for (Map.Entry<Counter, String> entry : counters.entrySet()) {             if (closed) {                 return.             }             reportCounter(entry.getValue(), entry.getKey()).         }         for (Map.Entry<Histogram, String> entry : histograms.entrySet()) {             reportHistogram(entry.getValue(), entry.getKey()).         }         for (Map.Entry<Meter, String> entry : meters.entrySet()) {             reportMeter(entry.getValue(), entry.getKey()).         }     } catch (ConcurrentModificationException | NoSuchElementException e) {     // ignore - may happen when metrics are concurrently added or removed     // report next time     } }
false;private;2;3;;// ------------------------------------------------------------------------ private void reportCounter(final String name, final Counter counter) {     send(name, String.valueOf(counter.getCount())). }
false;private;2;6;;private void reportGauge(final String name, final Gauge<?> gauge) {     Object value = gauge.getValue().     if (value != null) {         send(name, value.toString()).     } }
false;private;2;20;;private void reportHistogram(final String name, final Histogram histogram) {     if (histogram != null) {         HistogramStatistics statistics = histogram.getStatistics().         if (statistics != null) {             send(prefix(name, "count"), String.valueOf(histogram.getCount())).             send(prefix(name, "max"), String.valueOf(statistics.getMax())).             send(prefix(name, "min"), String.valueOf(statistics.getMin())).             send(prefix(name, "mean"), String.valueOf(statistics.getMean())).             send(prefix(name, "stddev"), String.valueOf(statistics.getStdDev())).             send(prefix(name, "p50"), String.valueOf(statistics.getQuantile(0.5))).             send(prefix(name, "p75"), String.valueOf(statistics.getQuantile(0.75))).             send(prefix(name, "p95"), String.valueOf(statistics.getQuantile(0.95))).             send(prefix(name, "p98"), String.valueOf(statistics.getQuantile(0.98))).             send(prefix(name, "p99"), String.valueOf(statistics.getQuantile(0.99))).             send(prefix(name, "p999"), String.valueOf(statistics.getQuantile(0.999))).         }     } }
false;private;2;6;;private void reportMeter(final String name, final Meter meter) {     if (meter != null) {         send(prefix(name, "rate"), String.valueOf(meter.getRate())).         send(prefix(name, "count"), String.valueOf(meter.getCount())).     } }
false;private;1;13;;private String prefix(String... names) {     if (names.length > 0) {         StringBuilder stringBuilder = new StringBuilder(names[0]).         for (int i = 1. i < names.length. i++) {             stringBuilder.append('.').append(names[i]).         }         return stringBuilder.toString().     } else {         return "".     } }
false;private;2;10;;private void send(final String name, final String value) {     try {         String formatted = String.format("%s:%s|g", name, value).         byte[] data = formatted.getBytes(StandardCharsets.UTF_8).         socket.send(new DatagramPacket(data, data.length, this.address)).     } catch (IOException e) {         LOG.error("unable to send packet to statsd at '{}:{}'", address.getHostName(), address.getPort()).     } }
false;public;1;26;;@Override public String filterCharacters(String input) {     char[] chars = null.     final int strLen = input.length().     int pos = 0.     for (int i = 0. i < strLen. i++) {         final char c = input.charAt(i).         switch(c) {             case ':':                 if (chars == null) {                     chars = input.toCharArray().                 }                 chars[pos++] = '-'.                 break.             default:                 if (chars != null) {                     chars[pos] = c.                 }                 pos++.         }     }     return chars == null ? input : new String(chars, 0, pos). }
