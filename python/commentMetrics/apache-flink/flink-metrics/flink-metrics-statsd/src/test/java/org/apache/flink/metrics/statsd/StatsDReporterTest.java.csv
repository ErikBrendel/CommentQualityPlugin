# id;timestamp;commentText;codeText;commentWords;codeWords
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1472489286;Tests that meters are properly reported via the StatsD reporter;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(config)__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()____			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1474995330;Tests that meters are properly reported via the StatsD reporter;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()____			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1489060855;Tests that meters are properly reported via the StatsD reporter;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()____			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1492770690;Tests that meters are properly reported via the StatsD reporter;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()____			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1495637163;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1508844619;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1509547920;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1509547921;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1513102155;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDMetersReporting() throws Exception;1519406529;Tests that meters are properly reported via the StatsD reporter.;@Test_	public void testStatsDMetersReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String meterName = "meter"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))__			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")__			TestMeter meter = new TestMeter()__			metricGroup.meter(meterName, meter)__			String prefix = metricGroup.getMetricIdentifier(meterName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".rate:5.0|g")__			expectedLines.add(prefix + ".count:100|g")___			receiver.waitUntilNumLines(expectedLines.size(), timeout)___			Set<String> lines = receiver.getLines()___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown().get()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,meters,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dmeters,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,meter,name,meter,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,string,prefix,metric,group,get,metric,identifier,meter,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,rate,5,0,g,expected,lines,add,prefix,count,100,g,receiver,wait,until,num,lines,expected,lines,size,timeout,set,string,lines,receiver,get,lines,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,get,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1468591433;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTER_CLASS, "org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")__		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		Field reporterField = MetricRegistry.class.getDeclaredField("reporter")__		reporterField.setAccessible(true)___		MetricReporter metricReporter = (MetricReporter) reporterField.get(metricRegistry)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,field,reporter,field,metric,registry,class,get,declared,field,reporter,reporter,field,set,accessible,true,metric,reporter,metric,reporter,metric,reporter,reporter,field,get,metric,registry,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1469529015;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTER_CLASS, "org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")__		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		Field reporterField = MetricRegistry.class.getDeclaredField("reporter")__		reporterField.setAccessible(true)___		MetricReporter metricReporter = (MetricReporter) reporterField.get(metricRegistry)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,field,reporter,field,metric,registry,class,get,declared,field,reporter,reporter,field,set,accessible,true,metric,reporter,metric,reporter,metric,reporter,reporter,field,get,metric,registry,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1469545521;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1472489286;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1474995330;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1489060855;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1492770690;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1495637163;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1508844619;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1509547920;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1509547921;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1513102155;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "testTask"__		String jobName = "testJob:-!ax..?"__		String hostname = "local::host:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.metrics.statsd.StatsDReporterTest$TestingStatsDReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(configuration))___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)___		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type StatsDReporter", metricReporter instanceof StatsDReporter)___		TestingStatsDReporter reporter = (TestingStatsDReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,task,string,job,name,test,job,ax,string,hostname,local,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,config,constants,org,apache,flink,metrics,statsd,stats,dreporter,test,testing,stats,dreporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,stats,dreporter,metric,reporter,instanceof,stats,dreporter,testing,stats,dreporter,reporter,testing,stats,dreporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1467034323;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getScopeString() + "." + histogramName___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,registry,stats,dreporter,class,get,name,config,set,string,metric,registry,1,seconds,config,set,string,metric,registry,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,scope,string,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1467989485;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(MetricRegistry.KEY_METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getScopeString() + "." + histogramName___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,registry,stats,dreporter,class,get,name,config,set,string,metric,registry,1,seconds,config,set,string,metric,registry,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,scope,string,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1468229042;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getScopeString() + "." + histogramName___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,1,seconds,config,set,string,config,constants,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,scope,string,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1468403023;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,1,seconds,config,set,string,config,constants,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1468591433;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,1,seconds,config,set,string,config,constants,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1469529015;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_CLASS, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_INTERVAL, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "--host localhost --port " + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,1,seconds,config,set,string,config,constants,host,localhost,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1469545521;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1472489286;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1474995330;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1489060855;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1492770690;Tests that histograms are properly reported via the StatsD reporter;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1495637163;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1508844619;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistry registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1509547920;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1509547921;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1513102155;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
StatsDReporterTest -> @Test 	public void testStatsDHistogramReporting() throws Exception;1519406529;Tests that histograms are properly reported via the StatsD reporter.;@Test_	public void testStatsDHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		DatagramSocketReceiver receiver = null__		Thread receiverThread = null__		long timeout = 5000__		long joinTimeout = 30000___		String histogramName = "histogram"___		try {_			receiver = new DatagramSocketReceiver()___			receiverThread = new Thread(receiver)___			receiverThread.start()___			int port = receiver.getPort()___			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, StatsDReporter.class.getName())__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "1 SECONDS")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host", "localhost")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "" + port)___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			receiver.waitUntilNumLines(11, timeout)___			Set<String> lines = receiver.getLines()___			String prefix = metricGroup.getMetricIdentifier(histogramName)___			Set<String> expectedLines = new HashSet<>()___			expectedLines.add(prefix + ".count:1|g")__			expectedLines.add(prefix + ".mean:3.0|g")__			expectedLines.add(prefix + ".min:6|g")__			expectedLines.add(prefix + ".max:5|g")__			expectedLines.add(prefix + ".stddev:4.0|g")__			expectedLines.add(prefix + ".p75:0.75|g")__			expectedLines.add(prefix + ".p98:0.98|g")__			expectedLines.add(prefix + ".p99:0.99|g")__			expectedLines.add(prefix + ".p999:0.999|g")__			expectedLines.add(prefix + ".p95:0.95|g")__			expectedLines.add(prefix + ".p50:0.5|g")___			assertEquals(expectedLines, lines)___		} finally {_			if (registry != null) {_				registry.shutdown().get()__			}__			if (receiver != null) {_				receiver.stop()__			}__			if (receiverThread != null) {_				receiverThread.join(joinTimeout)__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,stats,d,reporter;test,public,void,test,stats,dhistogram,reporting,throws,exception,metric,registry,impl,registry,null,datagram,socket,receiver,receiver,null,thread,receiver,thread,null,long,timeout,5000,long,join,timeout,30000,string,histogram,name,histogram,try,receiver,new,datagram,socket,receiver,receiver,thread,new,thread,receiver,receiver,thread,start,int,port,receiver,get,port,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,stats,dreporter,class,get,name,config,set,string,config,constants,test,config,constants,1,seconds,config,set,string,config,constants,test,host,localhost,config,set,string,config,constants,test,port,port,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,receiver,wait,until,num,lines,11,timeout,set,string,lines,receiver,get,lines,string,prefix,metric,group,get,metric,identifier,histogram,name,set,string,expected,lines,new,hash,set,expected,lines,add,prefix,count,1,g,expected,lines,add,prefix,mean,3,0,g,expected,lines,add,prefix,min,6,g,expected,lines,add,prefix,max,5,g,expected,lines,add,prefix,stddev,4,0,g,expected,lines,add,prefix,p75,0,75,g,expected,lines,add,prefix,p98,0,98,g,expected,lines,add,prefix,p99,0,99,g,expected,lines,add,prefix,p999,0,999,g,expected,lines,add,prefix,p95,0,95,g,expected,lines,add,prefix,p50,0,5,g,assert,equals,expected,lines,lines,finally,if,registry,null,registry,shutdown,get,if,receiver,null,receiver,stop,if,receiver,thread,null,receiver,thread,join,join,timeout
