# id;timestamp;commentText;codeText;commentWords;codeWords
JMXReporterTest -> @Test 	public void testGenerateName();1469529015;Verifies that the JMXReporter properly generates the JMX name.;@Test_	public void testGenerateName() {_		String[] scope = {"value0", "value1", "\"value2 (test),=_:?'"}__		String jmxName = JMXReporter.generateJmxName("TestMetric", scope)___		assertEquals("org.apache.flink.metrics:key0=value0,key1=value1,key2=value2_(test)------,name=TestMetric", jmxName)__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,name;test,public,void,test,generate,name,string,scope,value0,value1,value2,test,string,jmx,name,jmxreporter,generate,jmx,name,test,metric,scope,assert,equals,org,apache,flink,metrics,key0,value0,key1,value1,key2,test,name,test,metric,jmx,name
JMXReporterTest -> @Test 	public void testGenerateName();1469545521;Verifies that the JMXReporter properly generates the JMX name.;@Test_	public void testGenerateName() {_		String[] scope = {"value0", "value1", "\"value2 (test),=_:?'"}__		String jmxName = JMXReporter.generateJmxName("TestMetric", scope)___		assertEquals("org.apache.flink.metrics:key0=value0,key1=value1,key2=value2_(test)------,name=TestMetric", jmxName)__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,name;test,public,void,test,generate,name,string,scope,value0,value1,value2,test,string,jmx,name,jmxreporter,generate,jmx,name,test,metric,scope,assert,equals,org,apache,flink,metrics,key0,value0,key1,value1,key2,test,name,test,metric,jmx,name
JMXReporterTest -> @Test 	public void testGenerateName();1472489286;Verifies that the JMXReporter properly generates the JMX name.;@Test_	public void testGenerateName() {_		String[] scope = {"value0", "value1", "\"value2 (test),=_:?'"}__		String jmxName = JMXReporter.generateJmxName("TestMetric", scope)___		assertEquals("org.apache.flink.metrics:key0=value0,key1=value1,key2=value2_(test)------,name=TestMetric", jmxName)__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,name;test,public,void,test,generate,name,string,scope,value0,value1,value2,test,string,jmx,name,jmxreporter,generate,jmx,name,test,metric,scope,assert,equals,org,apache,flink,metrics,key0,value0,key1,value1,key2,test,name,test,metric,jmx,name
JMXReporterTest -> @Test 	public void testGenerateName();1473959872;Verifies that the JMXReporter properly generates the JMX name.;@Test_	public void testGenerateName() {_		String[] scope = {"value0", "value1", "\"value2 (test),=_:?'"}__		String jmxName = JMXReporter.generateJmxName("TestMetric", scope)___		assertEquals("org.apache.flink.metrics:key0=value0,key1=value1,key2=value2_(test)------,name=TestMetric", jmxName)__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,name;test,public,void,test,generate,name,string,scope,value0,value1,value2,test,string,jmx,name,jmxreporter,generate,jmx,name,test,metric,scope,assert,equals,org,apache,flink,metrics,key0,value0,key1,value1,key2,test,name,test,metric,jmx,name
JMXReporterTest -> @Test 	public void testGenerateName();1474995330;Verifies that the JMXReporter properly generates the JMX name.;@Test_	public void testGenerateName() {_		String[] scope = {"value0", "value1", "\"value2 (test),=_:?'"}__		String jmxName = JMXReporter.generateJmxName("TestMetric", scope)___		assertEquals("org.apache.flink.metrics:key0=value0,key1=value1,key2=value2_(test)------,name=TestMetric", jmxName)__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,name;test,public,void,test,generate,name,string,scope,value0,value1,value2,test,string,jmx,name,jmxreporter,generate,jmx,name,test,metric,scope,assert,equals,org,apache,flink,metrics,key0,value0,key1,value1,key2,test,name,test,metric,jmx,name
JMXReporterTest -> @Test 	public void testGenerateTable();1477916104;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1492770690;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1495637163;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1509547920;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1509547921;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1512480704;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1513102155;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testGenerateTable();1519406529;Verifies that the JMXReporter properly generates the JMX table.;@Test_	public void testGenerateTable() {_		Map<String, String> vars = new HashMap<>()__		vars.put("key0", "value0")__		vars.put("key1", "value1")__		vars.put("\"key2,=_:?'", "\"value2 (test),=_:?'")___		Hashtable<String, String> jmxTable = JMXReporter.generateJmxTable(vars)___		assertEquals("value0", jmxTable.get("key0"))__		assertEquals("value1", jmxTable.get("key1"))__		assertEquals("value2_(test)------", jmxTable.get("key2------"))__	};verifies,that,the,jmxreporter,properly,generates,the,jmx,table;test,public,void,test,generate,table,map,string,string,vars,new,hash,map,vars,put,key0,value0,vars,put,key1,value1,vars,put,key2,value2,test,hashtable,string,string,jmx,table,jmxreporter,generate,jmx,table,vars,assert,equals,value0,jmx,table,get,key0,assert,equals,value1,jmx,table,get,key1,assert,equals,test,jmx,table,get,key2
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1472489286;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(meterName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,meter,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1473959872;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(meterName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,meter,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1474995330;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(meterName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,meter,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1477916104;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1492770690;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1495637163;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistry registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1509547920;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistryImpl registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,impl,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1509547921;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistryImpl registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(),  mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,impl,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1512480704;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistryImpl registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,impl,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1513102155;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistryImpl registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,impl,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testMeterReporting() throws Exception;1519406529;Tests that meters are properly reported via the JMXReporter.;@Test_	public void testMeterReporting() throws Exception {_		MetricRegistryImpl registry = null__		String meterName = "meter"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestMeter meter = new TestMeter()___			metricGroup.meter(meterName, meter)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + meterName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(2, attributeInfos.length)___			assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, "Rate"))__			assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"))___		} finally {_			if (registry != null) {_				registry.shutdown().get()__			}_		}_	};tests,that,meters,are,properly,reported,via,the,jmxreporter;test,public,void,test,meter,reporting,throws,exception,metric,registry,impl,registry,null,string,meter,name,meter,try,configuration,config,new,configuration,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,meter,meter,new,test,meter,metric,group,meter,meter,name,meter,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,meter,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,2,attribute,infos,length,assert,equals,meter,get,rate,m,bean,server,get,attribute,object,name,rate,assert,equals,meter,get,count,m,bean,server,get,attribute,object,name,count,finally,if,registry,null,registry,shutdown,get
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1469529015;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		JMXReporter rep1 = new JMXReporter()__		JMXReporter rep2 = new JMXReporter()___		MetricConfig cfg1 = new MetricConfig()__		cfg1.setProperty("port", "9040-9055")__		rep1.open(cfg1)__		rep2.open(cfg1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + rep1.getPort() + "/jndi/rmi://localhost:" + rep1.getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		url1 = null__		jmxCon1.close()__		jmxCon1 = null__		mCon1 = null___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + rep2.getPort() + "/jndi/rmi://localhost:" + rep2.getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		url2 = null__		jmxCon2.close()__		jmxCon2 = null__		mCon2 = null___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,jmxreporter,rep1,new,jmxreporter,jmxreporter,rep2,new,jmxreporter,metric,config,cfg1,new,metric,config,cfg1,set,property,port,9040,9055,rep1,open,cfg1,rep2,open,cfg1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,rep1,get,port,jndi,rmi,localhost,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,url1,null,jmx,con1,close,jmx,con1,null,m,con1,null,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,rep2,get,port,jndi,rmi,localhost,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,url2,null,jmx,con2,close,jmx,con2,null,m,con2,null,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1469545521;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		jmxCon2.close()___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,jmx,con2,close,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1472489286;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		jmxCon2.close()___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,jmx,con2,close,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1473959872;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		jmxCon2.close()___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,jmx,con2,close,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1474995330;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		jmxCon2.close()___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,jmx,con2,close,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1477916104;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1492770690;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter)rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1495637163;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1509547920;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1509547921;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1512480704;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1513102155;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testJMXAvailability() throws Exception;1519406529;Verifies that we can connect to multiple JMXReporters running on the same machine.__@throws Exception;@Test_	public void testJMXAvailability() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName())___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9040-9055")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9040-9055")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(1, new TaskManagerMetricGroup(reg, "host", "tm")))___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		JMXServiceURL url1 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep1).getPort() + "/jmxrmi")__		JMXConnector jmxCon1 = JMXConnectorFactory.connect(url1)__		MBeanServerConnection mCon1 = jmxCon1.getMBeanServerConnection()___		assertEquals(1, mCon1.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon1.getAttribute(objectName2, "Value"))___		jmxCon1.close()___		JMXServiceURL url2 = new JMXServiceURL("service:jmx:rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jndi/rmi://localhost:" + ((JMXReporter) rep2).getPort() + "/jmxrmi")__		JMXConnector jmxCon2 = JMXConnectorFactory.connect(url2)__		MBeanServerConnection mCon2 = jmxCon2.getMBeanServerConnection()___		assertEquals(1, mCon2.getAttribute(objectName1, "Value"))__		assertEquals(2, mCon2.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		jmxCon2.close()___		rep1.close()__		rep2.close()__		mg.close()__		reg.shutdown().get()__	};verifies,that,we,can,connect,to,multiple,jmxreporters,running,on,the,same,machine,throws,exception;test,public,void,test,jmxavailability,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test,reporter,class,get,name,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9040,9055,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9040,9055,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,1,new,task,manager,metric,group,reg,host,tm,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,jmxservice,url,url1,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep1,get,port,jndi,rmi,localhost,jmxreporter,rep1,get,port,jmxrmi,jmxconnector,jmx,con1,jmxconnector,factory,connect,url1,mbean,server,connection,m,con1,jmx,con1,get,mbean,server,connection,assert,equals,1,m,con1,get,attribute,object,name1,value,assert,equals,2,m,con1,get,attribute,object,name2,value,jmx,con1,close,jmxservice,url,url2,new,jmxservice,url,service,jmx,rmi,localhost,jmxreporter,rep2,get,port,jndi,rmi,localhost,jmxreporter,rep2,get,port,jmxrmi,jmxconnector,jmx,con2,jmxconnector,factory,connect,url2,mbean,server,connection,m,con2,jmx,con2,get,mbean,server,connection,assert,equals,1,m,con2,get,attribute,object,name1,value,assert,equals,2,m,con2,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,jmx,con2,close,rep1,close,rep2,close,mg,close,reg,shutdown,get
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1469529015;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_CLASS, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(histogramName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,histogram,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1469545521;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(histogramName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,histogram,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1472489286;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(histogramName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,histogram,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1473959872;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(config)___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(histogramName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,histogram,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1474995330;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMXReporter.generateJmxName(histogramName, metricGroup.getScopeComponents()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,jmxreporter,generate,jmx,name,histogram,name,metric,group,get,scope,components,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1477916104;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1492770690;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1495637163;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistry registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1509547920;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,impl,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1509547921;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestingHistogram histogram = new TestingHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,impl,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,testing,histogram,histogram,new,testing,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1512480704;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(MetricOptions.REPORTERS_LIST, "jmx_test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestHistogram histogram = new TestHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,impl,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,metric,options,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,histogram,histogram,new,test,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1513102155;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestHistogram histogram = new TestHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,impl,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,histogram,histogram,new,test,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown
JMXReporterTest -> @Test 	public void testHistogramReporting() throws Exception;1519406529;Tests that histograms are properly reported via the JMXReporter.;@Test_	public void testHistogramReporting() throws Exception {_		MetricRegistryImpl registry = null__		String histogramName = "histogram"___		try {_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "jmx_test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())___			registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___			TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(registry, "localhost", "tmId")___			TestHistogram histogram = new TestHistogram()___			metricGroup.histogram(histogramName, histogram)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___			ObjectName objectName = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager." + histogramName, JMXReporter.generateJmxTable(metricGroup.getAllVariables()))___			MBeanInfo info = mBeanServer.getMBeanInfo(objectName)___			MBeanAttributeInfo[] attributeInfos = info.getAttributes()___			assertEquals(11, attributeInfos.length)___			assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, "Count"))__			assertEquals(histogram.getStatistics().getMean(), mBeanServer.getAttribute(objectName, "Mean"))__			assertEquals(histogram.getStatistics().getStdDev(), mBeanServer.getAttribute(objectName, "StdDev"))__			assertEquals(histogram.getStatistics().getMax(), mBeanServer.getAttribute(objectName, "Max"))__			assertEquals(histogram.getStatistics().getMin(), mBeanServer.getAttribute(objectName, "Min"))__			assertEquals(histogram.getStatistics().getQuantile(0.5), mBeanServer.getAttribute(objectName, "Median"))__			assertEquals(histogram.getStatistics().getQuantile(0.75), mBeanServer.getAttribute(objectName, "75thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.95), mBeanServer.getAttribute(objectName, "95thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.98), mBeanServer.getAttribute(objectName, "98thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.99), mBeanServer.getAttribute(objectName, "99thPercentile"))__			assertEquals(histogram.getStatistics().getQuantile(0.999), mBeanServer.getAttribute(objectName, "999thPercentile"))___		} finally {_			if (registry != null) {_				registry.shutdown().get()__			}_		}_	};tests,that,histograms,are,properly,reported,via,the,jmxreporter;test,public,void,test,histogram,reporting,throws,exception,metric,registry,impl,registry,null,string,histogram,name,histogram,try,configuration,config,new,configuration,config,set,string,config,constants,config,constants,jmxreporter,class,get,name,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,metric,group,new,task,manager,metric,group,registry,localhost,tm,id,test,histogram,histogram,new,test,histogram,metric,group,histogram,histogram,name,histogram,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name,new,object,name,taskmanager,histogram,name,jmxreporter,generate,jmx,table,metric,group,get,all,variables,mbean,info,info,m,bean,server,get,mbean,info,object,name,mbean,attribute,info,attribute,infos,info,get,attributes,assert,equals,11,attribute,infos,length,assert,equals,histogram,get,count,m,bean,server,get,attribute,object,name,count,assert,equals,histogram,get,statistics,get,mean,m,bean,server,get,attribute,object,name,mean,assert,equals,histogram,get,statistics,get,std,dev,m,bean,server,get,attribute,object,name,std,dev,assert,equals,histogram,get,statistics,get,max,m,bean,server,get,attribute,object,name,max,assert,equals,histogram,get,statistics,get,min,m,bean,server,get,attribute,object,name,min,assert,equals,histogram,get,statistics,get,quantile,0,5,m,bean,server,get,attribute,object,name,median,assert,equals,histogram,get,statistics,get,quantile,0,75,m,bean,server,get,attribute,object,name,75th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,95,m,bean,server,get,attribute,object,name,95th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,98,m,bean,server,get,attribute,object,name,98th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,99,m,bean,server,get,attribute,object,name,99th,percentile,assert,equals,histogram,get,statistics,get,quantile,0,999,m,bean,server,get,attribute,object,name,999th,percentile,finally,if,registry,null,registry,shutdown,get
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1469529015;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		JMXReporter rep1 = new JMXReporter()__		JMXReporter rep2 = new JMXReporter()___		MetricConfig cfg1 = new MetricConfig()__		cfg1.setProperty("port", "9020-9035")___		rep1.open(cfg1)__		rep2.open(cfg1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.close()__		rep2.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,jmxreporter,rep1,new,jmxreporter,jmxreporter,rep2,new,jmxreporter,metric,config,cfg1,new,metric,config,cfg1,set,property,port,9020,9035,rep1,open,cfg1,rep2,open,cfg1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,close,rep2,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1469545521;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1472489286;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1473959872;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(cfg)___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1474995330;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		rep1.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}, "rep1", new TaskManagerMetricGroup(reg, "host", "tm"))___		rep2.notifyOfAddedMetric(new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}, "rep2", new TaskManagerMetricGroup(reg, "host", "tm"))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMXReporter.generateJmxName("rep1", mg.getScopeComponents()))__		ObjectName objectName2 = new ObjectName(JMXReporter.generateJmxName("rep2", mg.getScopeComponents()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,rep1,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,1,rep1,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,new,gauge,integer,override,public,integer,get,value,return,2,rep2,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,jmxreporter,generate,jmx,name,rep1,mg,get,scope,components,object,name,object,name2,new,object,name,jmxreporter,generate,jmx,name,rep2,mg,get,scope,components,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1477916104;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)__		_		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1492770690;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)__		_		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1495637163;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistry reg = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,reg,new,metric,registry,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1509547920;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1509547921;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1512480704;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()__		cfg.setString(MetricOptions.REPORTERS_LIST, "test1,test2")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,metric,options,test1,test2,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1513102155;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown
JMXReporterTest -> @Test 	public void testPortConflictHandling() throws Exception;1519406529;Verifies that multiple JMXReporters can be started on the same machine and register metrics at the MBeanServer.__@throws Exception if the attribute/mbean could not be found or the test is broken;@Test_	public void testPortConflictHandling() throws Exception {_		Configuration cfg = new Configuration()___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1.port", "9020-9035")___		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2.port", "9020-9035")___		MetricRegistryImpl reg = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg))___		TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, "host", "tm")___		List<MetricReporter> reporters = reg.getReporters()___		assertTrue(reporters.size() == 2)___		MetricReporter rep1 = reporters.get(0)__		MetricReporter rep2 = reporters.get(1)___		Gauge<Integer> g1 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 1__			}_		}__		Gauge<Integer> g2 = new Gauge<Integer>() {_			@Override_			public Integer getValue() {_				return 2__			}_		}___		rep1.notifyOfAddedMetric(g1, "rep1", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))__		rep2.notifyOfAddedMetric(g2, "rep2", new FrontMetricGroup<>(0, new TaskManagerMetricGroup(reg, "host", "tm")))___		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()___		ObjectName objectName1 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep1", JMXReporter.generateJmxTable(mg.getAllVariables()))__		ObjectName objectName2 = new ObjectName(JMX_DOMAIN_PREFIX + "taskmanager.rep2", JMXReporter.generateJmxTable(mg.getAllVariables()))___		assertEquals(1, mBeanServer.getAttribute(objectName1, "Value"))__		assertEquals(2, mBeanServer.getAttribute(objectName2, "Value"))___		rep1.notifyOfRemovedMetric(g1, "rep1", null)__		rep1.notifyOfRemovedMetric(g2, "rep2", null)___		mg.close()__		reg.shutdown().get()__	};verifies,that,multiple,jmxreporters,can,be,started,on,the,same,machine,and,register,metrics,at,the,mbean,server,throws,exception,if,the,attribute,mbean,could,not,be,found,or,the,test,is,broken;test,public,void,test,port,conflict,handling,throws,exception,configuration,cfg,new,configuration,cfg,set,string,config,constants,test1,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test1,port,9020,9035,cfg,set,string,config,constants,test2,config,constants,jmxreporter,class,get,name,cfg,set,string,config,constants,test2,port,9020,9035,metric,registry,impl,reg,new,metric,registry,impl,metric,registry,configuration,from,configuration,cfg,task,manager,metric,group,mg,new,task,manager,metric,group,reg,host,tm,list,metric,reporter,reporters,reg,get,reporters,assert,true,reporters,size,2,metric,reporter,rep1,reporters,get,0,metric,reporter,rep2,reporters,get,1,gauge,integer,g1,new,gauge,integer,override,public,integer,get,value,return,1,gauge,integer,g2,new,gauge,integer,override,public,integer,get,value,return,2,rep1,notify,of,added,metric,g1,rep1,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,rep2,notify,of,added,metric,g2,rep2,new,front,metric,group,0,new,task,manager,metric,group,reg,host,tm,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,taskmanager,rep1,jmxreporter,generate,jmx,table,mg,get,all,variables,object,name,object,name2,new,object,name,taskmanager,rep2,jmxreporter,generate,jmx,table,mg,get,all,variables,assert,equals,1,m,bean,server,get,attribute,object,name1,value,assert,equals,2,m,bean,server,get,attribute,object,name2,value,rep1,notify,of,removed,metric,g1,rep1,null,rep1,notify,of,removed,metric,g2,rep2,null,mg,close,reg,shutdown,get
