commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;8;;private static Configuration getConfiguration() {     Configuration flinkConfiguration = new Configuration().     flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName()).     flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>").     return flinkConfiguration. }
true;public;0;44;/**  * Tests that metrics registered on the JobManager are actually accessible via JMX.  */ ;/**  * Tests that metrics registered on the JobManager are actually accessible via JMX.  */ @Test public void testJobManagerJMXMetricAccess() throws Exception {     Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2)).     try {         JobVertex sourceJobVertex = new JobVertex("Source").         sourceJobVertex.setInvokableClass(BlockingInvokable.class).         JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex).         jobGraph.setSnapshotSettings(new JobCheckpointingSettings(Collections.<JobVertexID>emptyList(), Collections.<JobVertexID>emptyList(), Collections.<JobVertexID>emptyList(), new CheckpointCoordinatorConfiguration(500, 500, 50, 5, CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION, true), null)).         ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient().         client.setDetached(true).         client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader()).         FutureUtils.retrySuccessfulWithDelay(() -> client.getJobStatus(jobGraph.getJobID()), Time.milliseconds(10), deadline, status -> status == JobStatus.RUNNING, TestingUtils.defaultScheduledExecutor()).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).         MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer().         Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null).         Assert.assertEquals(1, nameSet.size()).         assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value")).         BlockingInvokable.unblock().     } finally {         BlockingInvokable.unblock().     } }
false;public;0;4;;@Override public void invoke() throws Exception {     LATCH.await(). }
false;public,static;0;3;;public static void unblock() {     LATCH.trigger(). }
