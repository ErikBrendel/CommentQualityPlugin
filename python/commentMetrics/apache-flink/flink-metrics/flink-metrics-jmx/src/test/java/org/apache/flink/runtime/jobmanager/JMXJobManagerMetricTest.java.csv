# id;timestamp;commentText;codeText;commentWords;codeWords
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1469529015;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_CLASS, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "--port 9060-9075")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			ObjectName objectName1 = new ObjectName("org.apache.flink.metrics:key0=jobmanager,key1=TestingJob,name=lastCheckpointSize")__			assertEquals(-1L, mBeanServer.getAttribute(objectName1, "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,jobmanager,flink,configuration,set,string,config,constants,port,9060,9075,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,org,apache,flink,metrics,key0,jobmanager,key1,testing,job,name,last,checkpoint,size,assert,equals,1l,m,bean,server,get,attribute,object,name1,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1469545521;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			ObjectName objectName1 = new ObjectName("org.apache.flink.metrics:key0=jobmanager,key1=TestingJob,name=lastCheckpointSize")__			assertEquals(-1L, mBeanServer.getAttribute(objectName1, "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,org,apache,flink,metrics,key0,jobmanager,key1,testing,job,name,last,checkpoint,size,assert,equals,1l,m,bean,server,get,attribute,object,name1,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1476432306;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none()))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			ObjectName objectName1 = new ObjectName("org.apache.flink.metrics:key0=jobmanager,key1=TestingJob,name=lastCheckpointSize")__			assertEquals(-1L, mBeanServer.getAttribute(objectName1, "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,object,name,object,name1,new,object,name,org,apache,flink,metrics,key0,jobmanager,key1,testing,job,name,last,checkpoint,size,assert,equals,1l,m,bean,server,get,attribute,object,name1,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1477916104;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none()))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1484038132;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1488304933;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobSnapshottingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), null, true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,snapshotting,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,null,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1492678790;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), null, true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,config,constants,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,null,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1492770690;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(MetricOptions.REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), null, true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,metric,options,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,null,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1495637163;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(MetricOptions.REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), null, true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,metric,options,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,null,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1495650059;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(MetricOptions.REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				500, 500, 50, 5, ExternalizedCheckpointSettings.none(), null, true))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,metric,options,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,500,500,50,5,externalized,checkpoint,settings,none,null,true,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1506618381;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(MetricOptions.REPORTERS_LIST, "test")__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					ExternalizedCheckpointSettings.none(),_					true),_				null))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,metric,options,test,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,externalized,checkpoint,settings,none,true,null,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1513102155;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					ExternalizedCheckpointSettings.none(),_					true),_				null))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,externalized,checkpoint,settings,none,true,null,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1515519059;Tests that metrics registered on the JobManager are actually accessible via JMX.__@throws Exception;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					ExternalizedCheckpointSettings.none(),_					true),_				null))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx,throws,exception;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,externalized,checkpoint,settings,none,true,null,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1516295283;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = new FiniteDuration(2, TimeUnit.MINUTES).fromNow()__		Configuration flinkConfiguration = new Configuration()___		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, JMXReporter.class.getName())__		flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port", "9060-9075")___		flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, "jobmanager.<job_name>")___		TestingCluster flink = new TestingCluster(flinkConfiguration)___		try {_			flink.start()___			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			flink.waitForActorsToBeAlive()___			flink.submitJobDetached(jobGraph)___			Future<Object> jobRunning = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()), deadline.timeLeft())__			Await.ready(jobRunning, deadline.timeLeft())___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			Future<Object> jobFinished = flink.getLeaderGateway(deadline.timeLeft())_				.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), deadline.timeLeft())___			BlockingInvokable.unblock()___			_			Await.ready(jobFinished, deadline.timeLeft())__		} finally {_			flink.stop()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,new,finite,duration,2,time,unit,minutes,from,now,configuration,flink,configuration,new,configuration,flink,configuration,set,string,config,constants,test,config,constants,jmxreporter,class,get,name,flink,configuration,set,string,config,constants,test,port,9060,9075,flink,configuration,set,string,metric,options,jobmanager,testing,cluster,flink,new,testing,cluster,flink,configuration,try,flink,start,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,flink,wait,for,actors,to,be,alive,flink,submit,job,detached,job,graph,future,object,job,running,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,wait,for,all,vertices,to,be,running,job,graph,get,job,id,deadline,time,left,await,ready,job,running,deadline,time,left,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,future,object,job,finished,flink,get,leader,gateway,deadline,time,left,ask,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,deadline,time,left,blocking,invokable,unblock,await,ready,job,finished,deadline,time,left,finally,flink,stop
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1521828709;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccesfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,succesful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1529682304;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccesfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,succesful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1529682304;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccesfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,succesful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1529682304;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccesfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,succesful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1540389860;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccesfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,succesful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
JMXJobManagerMetricTest -> @Test 	public void testJobManagerJMXMetricAccess() throws Exception;1542282018;Tests that metrics registered on the JobManager are actually accessible via JMX.;@Test_	public void testJobManagerJMXMetricAccess() throws Exception {_		Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2))___		try {_			JobVertex sourceJobVertex = new JobVertex("Source")__			sourceJobVertex.setInvokableClass(BlockingInvokable.class)___			JobGraph jobGraph = new JobGraph("TestingJob", sourceJobVertex)__			jobGraph.setSnapshotSettings(new JobCheckpointingSettings(_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				Collections.<JobVertexID>emptyList(),_				new CheckpointCoordinatorConfiguration(_					500,_					500,_					50,_					5,_					CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_					true),_				null))___			ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient()__			client.setDetached(true)__			client.submitJob(jobGraph, JMXJobManagerMetricTest.class.getClassLoader())___			FutureUtils.retrySuccessfulWithDelay(_				() -> client.getJobStatus(jobGraph.getJobID()),_				Time.milliseconds(10),_				deadline,_				status -> status == JobStatus.RUNNING,_				TestingUtils.defaultScheduledExecutor()_			).get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS)___			MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()__			Set<ObjectName> nameSet = mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"), null)__			Assert.assertEquals(1, nameSet.size())__			assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), "Value"))___			BlockingInvokable.unblock()__		} finally {_			BlockingInvokable.unblock()__		}_	};tests,that,metrics,registered,on,the,job,manager,are,actually,accessible,via,jmx;test,public,void,test,job,manager,jmxmetric,access,throws,exception,deadline,deadline,deadline,now,plus,duration,of,minutes,2,try,job,vertex,source,job,vertex,new,job,vertex,source,source,job,vertex,set,invokable,class,blocking,invokable,class,job,graph,job,graph,new,job,graph,testing,job,source,job,vertex,job,graph,set,snapshot,settings,new,job,checkpointing,settings,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,collections,job,vertex,id,empty,list,new,checkpoint,coordinator,configuration,500,500,50,5,checkpoint,retention,policy,true,null,cluster,client,client,get,cluster,client,client,set,detached,true,client,submit,job,job,graph,jmxjob,manager,metric,test,class,get,class,loader,future,utils,retry,successful,with,delay,client,get,job,status,job,graph,get,job,id,time,milliseconds,10,deadline,status,status,job,status,running,testing,utils,default,scheduled,executor,get,deadline,time,left,to,millis,time,unit,milliseconds,mbean,server,m,bean,server,management,factory,get,platform,mbean,server,set,object,name,name,set,m,bean,server,query,names,new,object,name,org,apache,flink,jobmanager,job,last,checkpoint,size,testing,job,null,assert,assert,equals,1,name,set,size,assert,equals,1l,m,bean,server,get,attribute,name,set,iterator,next,value,blocking,invokable,unblock,finally,blocking,invokable,unblock
