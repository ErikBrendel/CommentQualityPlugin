commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setupReporter() {     registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test1", portRangeProvider.next()))).     metricGroup = new FrontMetricGroup<>(0, new TaskManagerMetricGroup(registry, HOST_NAME, TASK_MANAGER)).     reporter = (PrometheusReporter) registry.getReporters().get(0). }
false;public;0;6;;@After public void shutdownRegistry() throws Exception {     if (registry != null) {         registry.shutdown().get().     } }
true;public;0;7;/**  * {@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.  *  * @throws UnirestException Might be thrown on HTTP problems.  */ ;/**  * {@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.  *  * @throws UnirestException Might be thrown on HTTP problems.  */ @Test public void counterIsReportedAsPrometheusGauge() throws UnirestException {     Counter testCounter = new SimpleCounter().     testCounter.inc(7).     assertThatGaugeIsExported(testCounter, "testCounter", "7.0"). }
false;public;0;4;;@Override public Integer getValue() {     return 1. }
false;public;0;11;;@Test public void gaugeIsReportedAsPrometheusGauge() throws UnirestException {     Gauge<Integer> testGauge = new Gauge<Integer>() {          @Override         public Integer getValue() {             return 1.         }     }.     assertThatGaugeIsExported(testGauge, "testGauge", "1.0"). }
false;public;0;4;;@Override public Integer getValue() {     return null. }
false;public;0;11;;@Test public void nullGaugeDoesNotBreakReporter() throws UnirestException {     Gauge<Integer> testGauge = new Gauge<Integer>() {          @Override         public Integer getValue() {             return null.         }     }.     assertThatGaugeIsExported(testGauge, "testGauge", "0.0"). }
false;public;0;6;;@Test public void meterRateIsReportedAsPrometheusGauge() throws UnirestException {     Meter testMeter = new TestMeter().     assertThatGaugeIsExported(testMeter, "testMeter", "5.0"). }
false;private;3;7;;private void assertThatGaugeIsExported(Metric metric, String name, String expectedValue) throws UnirestException {     final String prometheusName = SCOPE_PREFIX + name.     assertThat(addMetricAndPollResponse(metric, name), containsString(HELP_PREFIX + prometheusName + " " + name + " (scope: taskmanager)\n" + TYPE_PREFIX + prometheusName + " gauge" + "\n" + prometheusName + DEFAULT_LABELS + " " + expectedValue + "\n")). }
false;public;0;16;;@Test public void histogramIsReportedAsPrometheusSummary() throws UnirestException {     Histogram testHistogram = new TestHistogram().     String histogramName = "testHistogram".     String summaryName = SCOPE_PREFIX + histogramName.     String response = addMetricAndPollResponse(testHistogram, histogramName).     assertThat(response, containsString(HELP_PREFIX + summaryName + " " + histogramName + " (scope: taskmanager)\n" + TYPE_PREFIX + summaryName + " summary" + "\n" + summaryName + "_count" + DEFAULT_LABELS + " 1.0" + "\n")).     for (String quantile : Arrays.asList("0.5", "0.75", "0.95", "0.98", "0.99", "0.999")) {         assertThat(response, containsString(summaryName + "{" + DIMENSIONS + ",quantile=\"" + quantile + "\",} " + quantile + "\n")).     } }
false;public;0;20;;@Test public void metricIsRemovedWhenCollectorIsNotUnregisteredYet() throws UnirestException {     TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(registry, HOST_NAME, TASK_MANAGER).     String metricName = "metric".     Counter metric1 = new SimpleCounter().     FrontMetricGroup<TaskManagerJobMetricGroup> metricGroup1 = new FrontMetricGroup<>(0, new TaskManagerJobMetricGroup(registry, tmMetricGroup, JobID.generate(), "job_1")).     reporter.notifyOfAddedMetric(metric1, metricName, metricGroup1).     Counter metric2 = new SimpleCounter().     FrontMetricGroup<TaskManagerJobMetricGroup> metricGroup2 = new FrontMetricGroup<>(0, new TaskManagerJobMetricGroup(registry, tmMetricGroup, JobID.generate(), "job_2")).     reporter.notifyOfAddedMetric(metric2, metricName, metricGroup2).     reporter.notifyOfRemovedMetric(metric1, metricName, metricGroup1).     String response = pollMetrics(reporter.getPort()).getBody().     assertThat(response, not(containsString("job_1"))). }
false;public;0;16;;@Test public void invalidCharactersAreReplacedWithUnderscore() {     assertThat(PrometheusReporter.replaceInvalidChars(""), equalTo("")).     assertThat(PrometheusReporter.replaceInvalidChars("abc"), equalTo("abc")).     assertThat(PrometheusReporter.replaceInvalidChars("abc\""), equalTo("abc_")).     assertThat(PrometheusReporter.replaceInvalidChars("\"abc"), equalTo("_abc")).     assertThat(PrometheusReporter.replaceInvalidChars("\"abc\""), equalTo("_abc_")).     assertThat(PrometheusReporter.replaceInvalidChars("\"a\"b\"c\""), equalTo("_a_b_c_")).     assertThat(PrometheusReporter.replaceInvalidChars("\"\"\"\""), equalTo("____")).     assertThat(PrometheusReporter.replaceInvalidChars("    "), equalTo("____")).     assertThat(PrometheusReporter.replaceInvalidChars("\"ab .(c)'"), equalTo("_ab___c__")).     assertThat(PrometheusReporter.replaceInvalidChars("a b c"), equalTo("a_b_c")).     assertThat(PrometheusReporter.replaceInvalidChars("a b c "), equalTo("a_b_c_")).     assertThat(PrometheusReporter.replaceInvalidChars("a.b'c*"), equalTo("a_b_c_")).     assertThat(PrometheusReporter.replaceInvalidChars("a,=.:?'b,=.:?'c"), equalTo("a___:__b___:__c")). }
false;public;0;4;;@Override public Double getValue() {     return 3.14. }
false;public;0;9;;@Test public void doubleGaugeIsConvertedCorrectly() {     assertThat(reporter.gaugeFrom(new Gauge<Double>() {          @Override         public Double getValue() {             return 3.14.         }     }).get(), equalTo(3.14)). }
false;public;0;4;;@Override public Short getValue() {     return 13. }
false;public;0;9;;@Test public void shortGaugeIsConvertedCorrectly() {     assertThat(reporter.gaugeFrom(new Gauge<Short>() {          @Override         public Short getValue() {             return 13.         }     }).get(), equalTo(13.)). }
false;public;0;4;;@Override public Boolean getValue() {     return true. }
false;public;0;9;;@Test public void booleanGaugeIsConvertedCorrectly() {     assertThat(reporter.gaugeFrom(new Gauge<Boolean>() {          @Override         public Boolean getValue() {             return true.         }     }).get(), equalTo(1.)). }
false;public;0;4;;@Override public String getValue() {     return "I am not a number". }
true;public;0;9;/**  * Prometheus only supports numbers, so report non-numeric gauges as 0.  */ ;/**  * Prometheus only supports numbers, so report non-numeric gauges as 0.  */ @Test public void stringGaugeCannotBeConverted() {     assertThat(reporter.gaugeFrom(new Gauge<String>() {          @Override         public String getValue() {             return "I am not a number".         }     }).get(), equalTo(0.)). }
false;public;0;9;;@Test public void registeringSameMetricTwiceDoesNotThrowException() {     Counter counter = new SimpleCounter().     counter.inc().     String counterName = "testCounter".     reporter.notifyOfAddedMetric(counter, counterName, metricGroup).     reporter.notifyOfAddedMetric(counter, counterName, metricGroup). }
false;public;0;6;;@Test public void addingUnknownMetricTypeDoesNotThrowException() {     class SomeMetricType implements Metric {     }     reporter.notifyOfAddedMetric(new SomeMetricType(), "name", metricGroup). }
false;public;0;13;;@Test public void cannotStartTwoReportersOnSamePort() throws Exception {     final MetricRegistryImpl fixedPort1 = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test1", portRangeProvider.next()))).     assertThat(fixedPort1.getReporters(), hasSize(1)).     PrometheusReporter firstReporter = (PrometheusReporter) fixedPort1.getReporters().get(0).     final MetricRegistryImpl fixedPort2 = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test2", String.valueOf(firstReporter.getPort())))).     assertThat(fixedPort2.getReporters(), hasSize(0)).     fixedPort1.shutdown().get().     fixedPort2.shutdown().get(). }
false;public;0;12;;@Test public void canStartTwoReportersWhenUsingPortRange() throws Exception {     String portRange = portRangeProvider.next().     final MetricRegistryImpl portRange1 = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test1", portRange))).     final MetricRegistryImpl portRange2 = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test2", portRange))).     assertThat(portRange1.getReporters(), hasSize(1)).     assertThat(portRange2.getReporters(), hasSize(1)).     portRange1.shutdown().get().     portRange2.shutdown().get(). }
false;private;2;4;;private String addMetricAndPollResponse(Metric metric, String metricName) throws UnirestException {     reporter.notifyOfAddedMetric(metric, metricName, metricGroup).     return pollMetrics(reporter.getPort()).getBody(). }
false;static;1;3;;static HttpResponse<String> pollMetrics(int port) throws UnirestException {     return Unirest.get("http://localhost:" + port + "/metrics").asString(). }
false;static;2;6;;static Configuration createConfigWithOneReporter(String reporterName, String portString) {     Configuration cfg = new Configuration().     cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + reporterName + "." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getName()).     cfg.setString(ConfigConstants.METRICS_REPORTER_PREFIX + reporterName + "." + ARG_PORT, portString).     return cfg. }
false;public;0;4;;@After public void closeReporterAndShutdownRegistry() throws Exception {     registry.shutdown().get(). }
false;public;0;4;;@Override public boolean hasNext() {     // arbitrary limit that should be sufficient for test purposes     return base < 14000. }
true;public;0;9;/**  * Returns the next port range containing exactly 100 ports.  *  * @return next port range  */ ;/**  * Returns the next port range containing exactly 100 ports.  *  * @return next port range  */ public String next() {     if (!hasNext()) {         throw new NoSuchElementException().     }     int lowEnd = base.     int highEnd = base + 99.     base += 100.     return String.valueOf(lowEnd) + "-" + String.valueOf(highEnd). }
