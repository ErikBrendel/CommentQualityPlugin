commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setupReporter() {     registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(createConfigWithOneReporter("test1", "9400-9500"))).     reporter = (PrometheusReporter) registry.getReporters().get(0).     TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(registry, TASK_MANAGER_HOST, TASK_MANAGER_ID).     TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(registry, tmMetricGroup, jobId, JOB_NAME).     taskMetricGroup1 = new TaskMetricGroup(registry, tmJobMetricGroup, taskId1, taskAttemptId1, TASK_NAME, SUBTASK_INDEX_1, ATTEMPT_NUMBER).     taskMetricGroup2 = new TaskMetricGroup(registry, tmJobMetricGroup, taskId2, taskAttemptId2, TASK_NAME, SUBTASK_INDEX_2, ATTEMPT_NUMBER). }
false;public;0;6;;@After public void shutdownRegistry() throws Exception {     if (registry != null) {         registry.shutdown().get().     } }
false;public;0;15;;@Test public void countersCanBeAddedSeveralTimesIfTheyDifferInLabels() throws UnirestException {     Counter counter1 = new SimpleCounter().     counter1.inc(1).     Counter counter2 = new SimpleCounter().     counter2.inc(2).     taskMetricGroup1.counter("my_counter", counter1).     taskMetricGroup2.counter("my_counter", counter2).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues1), equalTo(1.)).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues2), equalTo(2.)). }
false;public;0;4;;@Override public Integer getValue() {     return 3. }
false;public;0;4;;@Override public Integer getValue() {     return 4. }
false;public;0;23;;@Test public void gaugesCanBeAddedSeveralTimesIfTheyDifferInLabels() throws UnirestException {     Gauge<Integer> gauge1 = new Gauge<Integer>() {          @Override         public Integer getValue() {             return 3.         }     }.     Gauge<Integer> gauge2 = new Gauge<Integer>() {          @Override         public Integer getValue() {             return 4.         }     }.     taskMetricGroup1.gauge("my_gauge", gauge1).     taskMetricGroup2.gauge("my_gauge", gauge2).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_gauge", LABEL_NAMES, labelValues1), equalTo(3.)).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_gauge", LABEL_NAMES, labelValues2), equalTo(4.)). }
false;public;0;12;;@Test public void metersCanBeAddedSeveralTimesIfTheyDifferInLabels() throws UnirestException {     Meter meter = new TestMeter().     taskMetricGroup1.meter("my_meter", meter).     taskMetricGroup2.meter("my_meter", meter).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_meter", LABEL_NAMES, labelValues1), equalTo(5.)).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_meter", LABEL_NAMES, labelValues2), equalTo(5.)). }
false;public;0;19;;@Test public void histogramsCanBeAddedSeveralTimesIfTheyDifferInLabels() throws UnirestException {     Histogram histogram = new TestHistogram().     taskMetricGroup1.histogram("my_histogram", histogram).     taskMetricGroup2.histogram("my_histogram", histogram).     final String exportedMetrics = pollMetrics(reporter.getPort()).getBody().     // histogram     assertThat(exportedMetrics, containsString("subtask_index=\"0\",quantile=\"0.5\",} 0.5")).     // histogram     assertThat(exportedMetrics, containsString("subtask_index=\"1\",quantile=\"0.5\",} 0.5")).     final String[] labelNamesWithQuantile = addToArray(LABEL_NAMES, "quantile").     for (Double quantile : PrometheusReporter.HistogramSummaryProxy.QUANTILES) {         assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_histogram", labelNamesWithQuantile, addToArray(labelValues1, "" + quantile)), equalTo(quantile)).         assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_histogram", labelNamesWithQuantile, addToArray(labelValues2, "" + quantile)), equalTo(quantile)).     } }
false;public;0;23;;@Test public void removingSingleInstanceOfMetricDoesNotBreakOtherInstances() throws UnirestException {     Counter counter1 = new SimpleCounter().     counter1.inc(1).     Counter counter2 = new SimpleCounter().     counter2.inc(2).     taskMetricGroup1.counter("my_counter", counter1).     taskMetricGroup2.counter("my_counter", counter2).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues1), equalTo(1.)).     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues2), equalTo(2.)).     taskMetricGroup2.close().     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues1), equalTo(1.)).     taskMetricGroup1.close().     assertThat(CollectorRegistry.defaultRegistry.getSampleValue("flink_taskmanager_job_task_my_counter", LABEL_NAMES, labelValues1), nullValue()). }
false;private;2;5;;private String[] addToArray(String[] array, String element) {     final String[] labelNames = Arrays.copyOf(array, LABEL_NAMES.length + 1).     labelNames[LABEL_NAMES.length] = element.     return labelNames. }
