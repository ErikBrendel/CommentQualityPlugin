commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;@Override public void open(MetricConfig config) {     super.open(config).     String host = config.getString(HOST.key(), HOST.defaultValue()).     int port = config.getInteger(PORT.key(), PORT.defaultValue()).     String configuredJobName = config.getString(JOB_NAME.key(), JOB_NAME.defaultValue()).     boolean randomSuffix = config.getBoolean(RANDOM_JOB_NAME_SUFFIX.key(), RANDOM_JOB_NAME_SUFFIX.defaultValue()).     deleteOnShutdown = config.getBoolean(DELETE_ON_SHUTDOWN.key(), DELETE_ON_SHUTDOWN.defaultValue()).     if (host == null || host.isEmpty() || port < 1) {         throw new IllegalArgumentException("Invalid host/port configuration. Host: " + host + " Port: " + port).     }     if (randomSuffix) {         this.jobName = configuredJobName + new AbstractID().     } else {         this.jobName = configuredJobName.     }     pushGateway = new PushGateway(host + ':' + port).     log.info("Configured PrometheusPushGatewayReporter with {host:{}, port:{}, jobName: {}, randomJobNameSuffix:{}, deleteOnShutdown:{}}", host, port, jobName, randomSuffix, deleteOnShutdown). }
false;public;0;8;;@Override public void report() {     try {         pushGateway.push(CollectorRegistry.defaultRegistry, jobName).     } catch (Exception e) {         log.warn("Failed to push metrics to PushGateway with jobName {}.", jobName, e).     } }
false;public;0;11;;@Override public void close() {     if (deleteOnShutdown && pushGateway != null) {         try {             pushGateway.delete(jobName).         } catch (IOException e) {             log.warn("Failed to delete metrics from PushGateway with jobName {}.", jobName, e).         }     }     super.close(). }
