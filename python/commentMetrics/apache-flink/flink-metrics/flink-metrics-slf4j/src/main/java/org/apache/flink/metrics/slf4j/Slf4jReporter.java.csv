commented;modifiers;parameterAmount;loc;comment;code
false;;0;4;;@VisibleForTesting Map<Gauge<?>, String> getGauges() {     return gauges. }
false;;0;4;;@VisibleForTesting Map<Counter, String> getCounters() {     return counters. }
false;;0;4;;@VisibleForTesting Map<Histogram, String> getHistograms() {     return histograms. }
false;;0;4;;@VisibleForTesting Map<Meter, String> getMeters() {     return meters. }
false;public;1;3;;@Override public void open(MetricConfig metricConfig) { }
false;public;0;3;;@Override public void close() { }
false;public;0;10;;@Override public void report() {     try {         tryReport().     } catch (ConcurrentModificationException ignored) {     // at tryReport() we don't synchronize while iterating over the various maps which might cause a     // ConcurrentModificationException to be thrown, if concurrently a metric is being added or removed.     } }
false;private;0;69;;private void tryReport() {     // initialize with previous size to avoid repeated resizing of backing array     // pad the size to allow deviations in the final string, for example due to different double value representations     StringBuilder builder = new StringBuilder((int) (previousSize * 1.1)).     builder.append(lineSeparator).append("=========================== Starting metrics report ===========================").append(lineSeparator).     builder.append(lineSeparator).append("-- Counters -------------------------------------------------------------------").append(lineSeparator).     for (Map.Entry<Counter, String> metric : counters.entrySet()) {         builder.append(metric.getValue()).append(": ").append(metric.getKey().getCount()).append(lineSeparator).     }     builder.append(lineSeparator).append("-- Gauges ---------------------------------------------------------------------").append(lineSeparator).     for (Map.Entry<Gauge<?>, String> metric : gauges.entrySet()) {         builder.append(metric.getValue()).append(": ").append(metric.getKey().getValue()).append(lineSeparator).     }     builder.append(lineSeparator).append("-- Meters ---------------------------------------------------------------------").append(lineSeparator).     for (Map.Entry<Meter, String> metric : meters.entrySet()) {         builder.append(metric.getValue()).append(": ").append(metric.getKey().getRate()).append(lineSeparator).     }     builder.append(lineSeparator).append("-- Histograms -----------------------------------------------------------------").append(lineSeparator).     for (Map.Entry<Histogram, String> metric : histograms.entrySet()) {         HistogramStatistics stats = metric.getKey().getStatistics().         builder.append(metric.getValue()).append(": count=").append(stats.size()).append(", min=").append(stats.getMin()).append(", max=").append(stats.getMax()).append(", mean=").append(stats.getMean()).append(", stddev=").append(stats.getStdDev()).append(", p50=").append(stats.getQuantile(0.50)).append(", p75=").append(stats.getQuantile(0.75)).append(", p95=").append(stats.getQuantile(0.95)).append(", p98=").append(stats.getQuantile(0.98)).append(", p99=").append(stats.getQuantile(0.99)).append(", p999=").append(stats.getQuantile(0.999)).append(lineSeparator).     }     builder.append(lineSeparator).append("=========================== Finished metrics report ===========================").append(lineSeparator).     LOG.info(builder.toString()).     previousSize = builder.length(). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input. }
