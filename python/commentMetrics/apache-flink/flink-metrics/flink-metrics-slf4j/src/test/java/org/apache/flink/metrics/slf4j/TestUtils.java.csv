commented;modifiers;parameterAmount;loc;comment;code
false;static;0;14;;static void addTestAppenderForRootLogger() {     org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger().     // hide logging output unless explicitly enabled     if (rootLogger.getLevel() == Level.OFF) {         org.apache.log4j.Logger.getRootLogger().removeAllAppenders().     }     org.apache.log4j.Logger logger = org.apache.log4j.LogManager.getLogger(Slf4jReporter.class).     logger.setLevel(org.apache.log4j.Level.INFO).     testAppender = new TestAppender().     logger.addAppender(testAppender). }
false;static;1;7;;static void checkForLogString(String expected) {     LoggingEvent found = getEventContainingString(expected).     if (found != null) {         return.     }     Assert.fail("Unable to find expected string '" + expected + "' in log messages."). }
false;static;1;16;;static LoggingEvent getEventContainingString(String expected) {     if (testAppender == null) {         throw new NullPointerException("Initialize test appender first").     }     LoggingEvent found = null.     // make sure that different threads are not logging while the logs are checked     synchronized (testAppender.events) {         for (LoggingEvent event : testAppender.events) {             if (event.getMessage().toString().contains(expected)) {                 found = event.                 break.             }         }     }     return found. }
false;public;0;2;;public void close() { }
false;public;0;3;;public boolean requiresLayout() {     return false. }
false;protected;1;6;;@Override protected void append(LoggingEvent event) {     synchronized (events) {         events.add(event).     } }
