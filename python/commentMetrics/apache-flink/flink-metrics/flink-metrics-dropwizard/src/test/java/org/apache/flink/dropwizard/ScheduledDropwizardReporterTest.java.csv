# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1481029611;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())____		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1492770690;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())____		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1495637163;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1508844619;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1509547920;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1509547921;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1513102155;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testMetricCleanup();1519406529;This test verifies that metrics are properly added and removed to/from the ScheduledDropwizardReporter and_the underlying Dropwizard MetricRegistry.;@Test_	public void testMetricCleanup() {_		TestingScheduledDropwizardReporter rep = new TestingScheduledDropwizardReporter()___		MetricGroup mp = new UnregisteredMetricsGroup()___		Counter c = new SimpleCounter()__		Meter m = new Meter() {_			@Override_			public void markEvent() {_			}__			@Override_			public void markEvent(long n) {_			}__			@Override_			public double getRate() {_				return 0__			}__			@Override_			public long getCount() {_				return 0__			}_		}__		Histogram h = new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		}__		Gauge g = new Gauge() {_			@Override_			public Object getValue() {_				return null__			}_		}___		rep.notifyOfAddedMetric(c, "counter", mp)__		assertEquals(1, rep.getCounters().size())__		assertEquals(1, rep.registry.getCounters().size())___		rep.notifyOfAddedMetric(m, "meter", mp)__		assertEquals(1, rep.getMeters().size())__		assertEquals(1, rep.registry.getMeters().size())___		rep.notifyOfAddedMetric(h, "histogram", mp)__		assertEquals(1, rep.getHistograms().size())__		assertEquals(1, rep.registry.getHistograms().size())___		rep.notifyOfAddedMetric(g, "gauge", mp)__		assertEquals(1, rep.getGauges().size())__		assertEquals(1, rep.registry.getGauges().size())___		rep.notifyOfRemovedMetric(c, "counter", mp)__		assertEquals(0, rep.getCounters().size())__		assertEquals(0, rep.registry.getCounters().size())___		rep.notifyOfRemovedMetric(m, "meter", mp)__		assertEquals(0, rep.getMeters().size())__		assertEquals(0, rep.registry.getMeters().size())___		rep.notifyOfRemovedMetric(h, "histogram", mp)__		assertEquals(0, rep.getHistograms().size())__		assertEquals(0, rep.registry.getHistograms().size())___		rep.notifyOfRemovedMetric(g, "gauge", mp)__		assertEquals(0, rep.getGauges().size())__		assertEquals(0, rep.registry.getGauges().size())__	};this,test,verifies,that,metrics,are,properly,added,and,removed,to,from,the,scheduled,dropwizard,reporter,and,the,underlying,dropwizard,metric,registry;test,public,void,test,metric,cleanup,testing,scheduled,dropwizard,reporter,rep,new,testing,scheduled,dropwizard,reporter,metric,group,mp,new,unregistered,metrics,group,counter,c,new,simple,counter,meter,m,new,meter,override,public,void,mark,event,override,public,void,mark,event,long,n,override,public,double,get,rate,return,0,override,public,long,get,count,return,0,histogram,h,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,gauge,g,new,gauge,override,public,object,get,value,return,null,rep,notify,of,added,metric,c,counter,mp,assert,equals,1,rep,get,counters,size,assert,equals,1,rep,registry,get,counters,size,rep,notify,of,added,metric,m,meter,mp,assert,equals,1,rep,get,meters,size,assert,equals,1,rep,registry,get,meters,size,rep,notify,of,added,metric,h,histogram,mp,assert,equals,1,rep,get,histograms,size,assert,equals,1,rep,registry,get,histograms,size,rep,notify,of,added,metric,g,gauge,mp,assert,equals,1,rep,get,gauges,size,assert,equals,1,rep,registry,get,gauges,size,rep,notify,of,removed,metric,c,counter,mp,assert,equals,0,rep,get,counters,size,assert,equals,0,rep,registry,get,counters,size,rep,notify,of,removed,metric,m,meter,mp,assert,equals,0,rep,get,meters,size,assert,equals,0,rep,registry,get,meters,size,rep,notify,of,removed,metric,h,histogram,mp,assert,equals,0,rep,get,histograms,size,assert,equals,0,rep,registry,get,histograms,size,rep,notify,of,removed,metric,g,gauge,mp,assert,equals,0,rep,get,gauges,size,assert,equals,0,rep,registry,get,gauges,size
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1468591433;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTER_CLASS, "org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")__		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		Field reporterField = MetricRegistry.class.getDeclaredField("reporter")__		reporterField.setAccessible(true)___		MetricReporter metricReporter = (MetricReporter) reporterField.get(metricRegistry)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,field,reporter,field,metric,registry,class,get,declared,field,reporter,reporter,field,set,accessible,true,metric,reporter,metric,reporter,metric,reporter,reporter,field,get,metric,registry,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1469529015;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTER_CLASS, "org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")__		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		Field reporterField = MetricRegistry.class.getDeclaredField("reporter")__		reporterField.setAccessible(true)___		MetricReporter metricReporter = (MetricReporter) reporterField.get(metricRegistry)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,field,reporter,field,metric,registry,class,get,declared,field,reporter,reporter,field,set,accessible,true,metric,reporter,metric,reporter,metric,reporter,reporter,field,get,metric,registry,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1469545521;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()___		taskMetricGroup.counter(counterName, myCounter)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()___		assertTrue(counters.containsKey(myCounter))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,task,metric,group,counter,counter,name,my,counter,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1472489286;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistry metricRegistry = new MetricRegistry(configuration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,metric,registry,new,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1474995330;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistry metricRegistry = new MetricRegistry(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1481029611;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(ConfigConstants.METRICS_SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(ConfigConstants.METRICS_SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistry metricRegistry = new MetricRegistry(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,config,constants,host,configuration,set,string,config,constants,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1492770690;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistry metricRegistry = new MetricRegistry(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1495637163;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistry metricRegistry = new MetricRegistry(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new AbstractID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,abstract,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1508844619;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistry metricRegistry = new MetricRegistry(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1509547920;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1509547921;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(MetricOptions.REPORTERS_LIST, "test")__		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,metric,options,test,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
ScheduledDropwizardReporterTest -> @Test 	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException;1513102155;Tests that the registered metrics' names don't contain invalid characters.;@Test_	public void testAddingMetrics() throws NoSuchFieldException, IllegalAccessException {_		Configuration configuration = new Configuration()__		String taskName = "test\"Ta\"..sk"__		String jobName = "testJ\"ob:-!ax..?"__		String hostname = "loc<>al\"::host\".:"__		String taskManagerId = "tas:kMana::ger"__		String counterName = "testCounter"___		configuration.setString(_				ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,_				"org.apache.flink.dropwizard.ScheduledDropwizardReporterTest$TestingScheduledDropwizardReporter")___		configuration.setString(MetricOptions.SCOPE_NAMING_TASK, "<host>.<tm_id>.<job_name>")__		configuration.setString(MetricOptions.SCOPE_DELIMITER, "_")___		MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(metricRegistryConfiguration)___		char delimiter = metricRegistry.getDelimiter()___		TaskManagerMetricGroup tmMetricGroup = new TaskManagerMetricGroup(metricRegistry, hostname, taskManagerId)__		TaskManagerJobMetricGroup tmJobMetricGroup = new TaskManagerJobMetricGroup(metricRegistry, tmMetricGroup, new JobID(), jobName)__		TaskMetricGroup taskMetricGroup = new TaskMetricGroup(metricRegistry, tmJobMetricGroup, new JobVertexID(), new AbstractID(), taskName, 0, 0)___		SimpleCounter myCounter = new SimpleCounter()__		com.codahale.metrics.Meter dropwizardMeter = new com.codahale.metrics.Meter()__		DropwizardMeterWrapper meterWrapper = new DropwizardMeterWrapper(dropwizardMeter)___		taskMetricGroup.counter(counterName, myCounter)__		taskMetricGroup.meter("meter", meterWrapper)___		List<MetricReporter> reporters = metricRegistry.getReporters()___		assertTrue(reporters.size() == 1)__		MetricReporter metricReporter = reporters.get(0)___		assertTrue("Reporter should be of type ScheduledDropwizardReporter", metricReporter instanceof ScheduledDropwizardReporter)___		TestingScheduledDropwizardReporter reporter = (TestingScheduledDropwizardReporter) metricReporter___		Map<Counter, String> counters = reporter.getCounters()__		assertTrue(counters.containsKey(myCounter))___		Map<Meter, String> meters = reporter.getMeters()__		assertTrue(meters.containsKey(meterWrapper))___		String expectedCounterName = reporter.filterCharacters(hostname)_			+ delimiter_			+ reporter.filterCharacters(taskManagerId)_			+ delimiter_			+ reporter.filterCharacters(jobName)_			+ delimiter_			+ reporter.filterCharacters(counterName)___		assertEquals(expectedCounterName, counters.get(myCounter))___		metricRegistry.shutdown()__	};tests,that,the,registered,metrics,names,don,t,contain,invalid,characters;test,public,void,test,adding,metrics,throws,no,such,field,exception,illegal,access,exception,configuration,configuration,new,configuration,string,task,name,test,ta,sk,string,job,name,test,j,ob,ax,string,hostname,loc,al,host,string,task,manager,id,tas,k,mana,ger,string,counter,name,test,counter,configuration,set,string,config,constants,test,config,constants,org,apache,flink,dropwizard,scheduled,dropwizard,reporter,test,testing,scheduled,dropwizard,reporter,configuration,set,string,metric,options,host,configuration,set,string,metric,options,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,char,delimiter,metric,registry,get,delimiter,task,manager,metric,group,tm,metric,group,new,task,manager,metric,group,metric,registry,hostname,task,manager,id,task,manager,job,metric,group,tm,job,metric,group,new,task,manager,job,metric,group,metric,registry,tm,metric,group,new,job,id,job,name,task,metric,group,task,metric,group,new,task,metric,group,metric,registry,tm,job,metric,group,new,job,vertex,id,new,abstract,id,task,name,0,0,simple,counter,my,counter,new,simple,counter,com,codahale,metrics,meter,dropwizard,meter,new,com,codahale,metrics,meter,dropwizard,meter,wrapper,meter,wrapper,new,dropwizard,meter,wrapper,dropwizard,meter,task,metric,group,counter,counter,name,my,counter,task,metric,group,meter,meter,meter,wrapper,list,metric,reporter,reporters,metric,registry,get,reporters,assert,true,reporters,size,1,metric,reporter,metric,reporter,reporters,get,0,assert,true,reporter,should,be,of,type,scheduled,dropwizard,reporter,metric,reporter,instanceof,scheduled,dropwizard,reporter,testing,scheduled,dropwizard,reporter,reporter,testing,scheduled,dropwizard,reporter,metric,reporter,map,counter,string,counters,reporter,get,counters,assert,true,counters,contains,key,my,counter,map,meter,string,meters,reporter,get,meters,assert,true,meters,contains,key,meter,wrapper,string,expected,counter,name,reporter,filter,characters,hostname,delimiter,reporter,filter,characters,task,manager,id,delimiter,reporter,filter,characters,job,name,delimiter,reporter,filter,characters,counter,name,assert,equals,expected,counter,name,counters,get,my,counter,metric,registry,shutdown
