commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testGetCount() {     Counter c = new SimpleCounter().     c.inc(5).     Meter m = new MeterView(c, 60).     assertEquals(5, m.getCount()). }
false;public;0;11;;@Test public void testMarkEvent() {     Counter c = new SimpleCounter().     Meter m = new MeterView(c, 60).     assertEquals(0, m.getCount()).     m.markEvent().     assertEquals(1, m.getCount()).     m.markEvent(2).     assertEquals(3, m.getCount()). }
false;public;0;47;;@Test public void testGetRate() {     Counter c = new SimpleCounter().     MeterView m = new MeterView(c, 60).     // values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]     for (int x = 0. x < 12. x++) {         m.markEvent(10).         m.update().     }     // values = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]     // 120 - 0 / 60     assertEquals(2.0, m.getRate(), 0.1).     for (int x = 0. x < 12. x++) {         m.markEvent(10).         m.update().     }     // values = [130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 120]     // 240 - 120 / 60     assertEquals(2.0, m.getRate(), 0.1).     for (int x = 0. x < 6. x++) {         m.markEvent(20).         m.update().     }     // values = [280, 300, 320, 340, 360, 180, 190, 200, 210, 220, 230, 240, 260]     // 360 - 180 / 60     assertEquals(3.0, m.getRate(), 0.1).     for (int x = 0. x < 6. x++) {         m.markEvent(20).         m.update().     }     // values = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 240, 260]     // 480 - 240 / 60     assertEquals(4.0, m.getRate(), 0.1).     for (int x = 0. x < 6. x++) {         m.update().     }     // values = [480, 480, 480, 480, 360, 380, 400, 420, 440, 460, 480, 480, 480]     // 480 - 360 / 60     assertEquals(2.0, m.getRate(), 0.1).     for (int x = 0. x < 6. x++) {         m.update().     }     // values = [480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480]     // 480 - 480 / 60     assertEquals(0.0, m.getRate(), 0.1). }
false;public;0;9;;@Test public void testTimeSpanBelowUpdateRate() {     int timeSpanInSeconds = 1.     MeterView m = new MeterView(timeSpanInSeconds).     assert timeSpanInSeconds < UPDATE_INTERVAL_SECONDS.     m.markEvent().     m.update().     assertEquals(0.2, m.getRate(), 0.0). }
