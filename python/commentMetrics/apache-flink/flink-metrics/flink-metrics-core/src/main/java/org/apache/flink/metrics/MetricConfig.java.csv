commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public String getString(String key, String defaultValue) {     return getProperty(key, defaultValue). }
true;public;2;6;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as an int.  */ ;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as an int.  */ public int getInteger(String key, int defaultValue) {     String argument = getProperty(key, null).     return argument == null ? defaultValue : Integer.parseInt(argument). }
true;public;2;6;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a long.  */ ;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a long.  */ public long getLong(String key, long defaultValue) {     String argument = getProperty(key, null).     return argument == null ? defaultValue : Long.parseLong(argument). }
true;public;2;6;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a float.  */ ;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a float.  */ public float getFloat(String key, float defaultValue) {     String argument = getProperty(key, null).     return argument == null ? defaultValue : Float.parseFloat(argument). }
true;public;2;6;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a double.  */ ;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a double.  */ public double getDouble(String key, double defaultValue) {     String argument = getProperty(key, null).     return argument == null ? defaultValue : Double.parseDouble(argument). }
true;public;2;6;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a boolean.  */ ;/**  * Searches for the property with the specified key in this property list.  * If the key is not found in this property list, the default property list,  * and its defaults, recursively, are then checked. The method returns the  * default value argument if the property is not found.  *  * @param key          the hashtable key.  * @param defaultValue a default value.  * @return the value in this property list with the specified key value parsed as a boolean.  */ public boolean getBoolean(String key, boolean defaultValue) {     String argument = getProperty(key, null).     return argument == null ? defaultValue : Boolean.parseBoolean(argument). }
