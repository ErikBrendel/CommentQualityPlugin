commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name name of the counter  * @return the created counter  */ ;// ------------------------------------------------------------------------ // Metrics // ------------------------------------------------------------------------ /**  * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name name of the counter  * @return the created counter  */ Counter counter(int name).
true;;1;1;/**  * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name name of the counter  * @return the created counter  */ ;/**  * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name name of the counter  * @return the created counter  */ Counter counter(String name).
true;;2;1;/**  * Registers a {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name    name of the counter  * @param counter counter to register  * @param <C>     counter type  * @return the given counter  */ ;/**  * Registers a {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name    name of the counter  * @param counter counter to register  * @param <C>     counter type  * @return the given counter  */ <C extends Counter> C counter(int name, C counter).
true;;2;1;/**  * Registers a {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name    name of the counter  * @param counter counter to register  * @param <C>     counter type  * @return the given counter  */ ;/**  * Registers a {@link org.apache.flink.metrics.Counter} with Flink.  *  * @param name    name of the counter  * @param counter counter to register  * @param <C>     counter type  * @return the given counter  */ <C extends Counter> C counter(String name, C counter).
true;;2;1;/**  * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.  *  * @param name  name of the gauge  * @param gauge gauge to register  * @param <T>   return type of the gauge  * @return the given gauge  */ ;/**  * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.  *  * @param name  name of the gauge  * @param gauge gauge to register  * @param <T>   return type of the gauge  * @return the given gauge  */ <T, G extends Gauge<T>> G gauge(int name, G gauge).
true;;2;1;/**  * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.  *  * @param name  name of the gauge  * @param gauge gauge to register  * @param <T>   return type of the gauge  * @return the given gauge  */ ;/**  * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.  *  * @param name  name of the gauge  * @param gauge gauge to register  * @param <T>   return type of the gauge  * @return the given gauge  */ <T, G extends Gauge<T>> G gauge(String name, G gauge).
true;;2;1;/**  * Registers a new {@link Histogram} with Flink.  *  * @param name name of the histogram  * @param histogram histogram to register  * @param <H> histogram type  * @return the registered histogram  */ ;/**  * Registers a new {@link Histogram} with Flink.  *  * @param name name of the histogram  * @param histogram histogram to register  * @param <H> histogram type  * @return the registered histogram  */ <H extends Histogram> H histogram(String name, H histogram).
true;;2;1;/**  * Registers a new {@link Histogram} with Flink.  *  * @param name name of the histogram  * @param histogram histogram to register  * @param <H> histogram type  * @return the registered histogram  */ ;/**  * Registers a new {@link Histogram} with Flink.  *  * @param name name of the histogram  * @param histogram histogram to register  * @param <H> histogram type  * @return the registered histogram  */ <H extends Histogram> H histogram(int name, H histogram).
true;;2;1;/**  * Registers a new {@link Meter} with Flink.  *  * @param name name of the meter  * @param meter meter to register  * @param <M> meter type  * @return the registered meter  */ ;/**  * Registers a new {@link Meter} with Flink.  *  * @param name name of the meter  * @param meter meter to register  * @param <M> meter type  * @return the registered meter  */ <M extends Meter> M meter(String name, M meter).
true;;2;1;/**  * Registers a new {@link Meter} with Flink.  *  * @param name name of the meter  * @param meter meter to register  * @param <M> meter type  * @return the registered meter  */ ;/**  * Registers a new {@link Meter} with Flink.  *  * @param name name of the meter  * @param meter meter to register  * @param <M> meter type  * @return the registered meter  */ <M extends Meter> M meter(int name, M meter).
true;;1;1;/**  * Creates a new MetricGroup and adds it to this groups sub-groups.  *  * @param name name of the group  * @return the created group  */ ;// ------------------------------------------------------------------------ // Groups // ------------------------------------------------------------------------ /**  * Creates a new MetricGroup and adds it to this groups sub-groups.  *  * @param name name of the group  * @return the created group  */ MetricGroup addGroup(int name).
true;;1;1;/**  * Creates a new MetricGroup and adds it to this groups sub-groups.  *  * @param name name of the group  * @return the created group  */ ;/**  * Creates a new MetricGroup and adds it to this groups sub-groups.  *  * @param name name of the group  * @return the created group  */ MetricGroup addGroup(String name).
true;;2;1;/**  * Creates a new key-value MetricGroup pair. The key group is added to this groups sub-groups, while the value group  * is added to the key group's sub-groups. This method returns the value group.  *  * <p>The only difference between calling this method and {@code group.addGroup(key).addGroup(value)} is that  * {@link #getAllVariables()} of the value group return an additional {@code "<key>"="value"} pair.  *  * @param key name of the first group  * @param value name of the second group  * @return the second created group  */ ;/**  * Creates a new key-value MetricGroup pair. The key group is added to this groups sub-groups, while the value group  * is added to the key group's sub-groups. This method returns the value group.  *  * <p>The only difference between calling this method and {@code group.addGroup(key).addGroup(value)} is that  * {@link #getAllVariables()} of the value group return an additional {@code "<key>"="value"} pair.  *  * @param key name of the first group  * @param value name of the second group  * @return the second created group  */ MetricGroup addGroup(String key, String value).
true;;0;1;/**  * Gets the scope as an array of the scope components, for example  * {@code ["host-7", "taskmanager-2", "window_word_count", "my-mapper"]}.  *  * @see #getMetricIdentifier(String)  * @see #getMetricIdentifier(String, CharacterFilter)  */ ;// ------------------------------------------------------------------------ // Scope // ------------------------------------------------------------------------ /**  * Gets the scope as an array of the scope components, for example  * {@code ["host-7", "taskmanager-2", "window_word_count", "my-mapper"]}.  *  * @see #getMetricIdentifier(String)  * @see #getMetricIdentifier(String, CharacterFilter)  */ String[] getScopeComponents().
true;;0;1;/**  * Returns a map of all variables and their associated value, for example  * {@code {"<host>"="host-7", "<tm_id>"="taskmanager-2"}}.  *  * @return map of all variables and their associated value  */ ;/**  * Returns a map of all variables and their associated value, for example  * {@code {"<host>"="host-7", "<tm_id>"="taskmanager-2"}}.  *  * @return map of all variables and their associated value  */ Map<String, String> getAllVariables().
true;;1;1;/**  * Returns the fully qualified metric name, for example  * {@code "host-7.taskmanager-2.window_word_count.my-mapper.metricName"}.  *  * @param metricName metric name  * @return fully qualified metric name  */ ;/**  * Returns the fully qualified metric name, for example  * {@code "host-7.taskmanager-2.window_word_count.my-mapper.metricName"}.  *  * @param metricName metric name  * @return fully qualified metric name  */ String getMetricIdentifier(String metricName).
true;;2;1;/**  * Returns the fully qualified metric name, for example  * {@code "host-7.taskmanager-2.window_word_count.my-mapper.metricName"}.  *  * @param metricName metric name  * @param filter character filter which is applied to the scope components if not null.  * @return fully qualified metric name  */ ;/**  * Returns the fully qualified metric name, for example  * {@code "host-7.taskmanager-2.window_word_count.my-mapper.metricName"}.  *  * @param metricName metric name  * @param filter character filter which is applied to the scope components if not null.  * @return fully qualified metric name  */ String getMetricIdentifier(String metricName, CharacterFilter filter).
