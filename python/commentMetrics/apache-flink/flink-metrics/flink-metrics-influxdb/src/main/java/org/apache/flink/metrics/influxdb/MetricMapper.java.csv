commented;modifiers;parameterAmount;loc;comment;code
false;static;3;10;;static Point map(MeasurementInfo info, Instant timestamp, Gauge<?> gauge) {     Point.Builder builder = builder(info, timestamp).     Object value = gauge.getValue().     if (value instanceof Number) {         builder.addField("value", (Number) value).     } else {         builder.addField("value", String.valueOf(value)).     }     return builder.build(). }
false;static;3;5;;static Point map(MeasurementInfo info, Instant timestamp, Counter counter) {     return builder(info, timestamp).addField("count", counter.getCount()).build(). }
false;static;3;16;;static Point map(MeasurementInfo info, Instant timestamp, Histogram histogram) {     HistogramStatistics statistics = histogram.getStatistics().     return builder(info, timestamp).addField("count", statistics.size()).addField("min", statistics.getMin()).addField("max", statistics.getMax()).addField("mean", statistics.getMean()).addField("stddev", statistics.getStdDev()).addField("p50", statistics.getQuantile(.50)).addField("p75", statistics.getQuantile(.75)).addField("p95", statistics.getQuantile(.95)).addField("p98", statistics.getQuantile(.98)).addField("p99", statistics.getQuantile(.99)).addField("p999", statistics.getQuantile(.999)).build(). }
false;static;3;6;;static Point map(MeasurementInfo info, Instant timestamp, Meter meter) {     return builder(info, timestamp).addField("count", meter.getCount()).addField("rate", meter.getRate()).build(). }
false;private,static;2;5;;private static Point.Builder builder(MeasurementInfo info, Instant timestamp) {     return Point.measurement(info.getName()).tag(info.getTags()).time(timestamp.toEpochMilli(), TimeUnit.MILLISECONDS). }
