commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMapGauge() {     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, (Gauge<Number>) () -> 42), "value=42").     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, (Gauge<Number>) () -> null), "value=null").     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, (Gauge<String>) () -> "hello"), "value=hello").     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, (Gauge<Long>) () -> 42L), "value=42"). }
false;public;0;9;;@Test public void testMapCounter() {     Counter counter = new SimpleCounter().     counter.inc(42L).     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, counter), "count=42"). }
false;public;0;18;;@Test public void testMapHistogram() {     Histogram histogram = new TestHistogram().     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, histogram), "count=3", "max=6", "mean=4.0", "min=7", "p50=0.5", "p75=0.75", "p95=0.95", "p98=0.98", "p99=0.99", "p999=0.999", "stddev=5.0"). }
false;public;0;9;;@Test public void testMapMeter() {     Meter meter = new TestMeter().     verifyPoint(MetricMapper.map(INFO, TIMESTAMP, meter), "count=100", "rate=5.0"). }
false;private;2;12;;private void verifyPoint(Point point, String... expectedFields) {     // Most methods of Point are package private. We use toString() method to check that values are as expected.     // An alternative can be to call lineProtocol() method, which additionally escapes values for InfluxDB format.     assertEquals("Point [name=" + NAME + ", time=" + TIMESTAMP.toEpochMilli() + ", tags={tag-1=42, tag-2=green}" + ", precision=MILLISECONDS" + ", fields={" + String.join(", ", expectedFields) + "}" + "]", point.toString()). }
false;private,static;1;6;;private static MeasurementInfo getMeasurementInfo(String name) {     Map<String, String> tags = new HashMap<>().     tags.put("tag-1", "42").     tags.put("tag-2", "green").     return new MeasurementInfo(name, tags). }
