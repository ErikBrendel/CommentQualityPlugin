commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testReporterRegistration() throws Exception {     MetricRegistryImpl metricRegistry = createMetricRegistry().     try {         assertEquals(1, metricRegistry.getReporters().size()).         MetricReporter reporter = metricRegistry.getReporters().get(0).         assertTrue(reporter instanceof InfluxdbReporter).     } finally {         metricRegistry.shutdown().get().     } }
false;public;0;17;;@Test public void testMetricRegistration() throws Exception {     MetricRegistryImpl metricRegistry = createMetricRegistry().     try {         String metricName = "TestCounter".         Counter counter = registerTestMetric(metricName, metricRegistry).         InfluxdbReporter reporter = (InfluxdbReporter) metricRegistry.getReporters().get(0).         MeasurementInfo measurementInfo = reporter.counters.get(counter).         assertNotNull("test metric must be registered in the reporter", measurementInfo).         assertEquals("taskmanager_" + metricName, measurementInfo.getName()).         assertThat(measurementInfo.getTags(), hasEntry("host", METRIC_HOSTNAME)).         assertThat(measurementInfo.getTags(), hasEntry("tm_id", METRIC_TM_ID)).     } finally {         metricRegistry.shutdown().get().     } }
false;public;0;23;;@Test public void testMetricReporting() throws Exception {     MetricRegistryImpl metricRegistry = createMetricRegistry().     try {         String metricName = "TestCounter".         Counter counter = registerTestMetric(metricName, metricRegistry).         counter.inc(42).         stubFor(post(urlPathEqualTo("/write")).willReturn(aResponse().withStatus(200))).         InfluxdbReporter reporter = (InfluxdbReporter) metricRegistry.getReporters().get(0).         reporter.report().         verify(postRequestedFor(urlPathEqualTo("/write")).withQueryParam("db", equalTo(TEST_INFLUXDB_DB)).withHeader("Content-Type", containing("text/plain")).withRequestBody(containing("taskmanager_" + metricName + ",host=" + METRIC_HOSTNAME + ",tm_id=" + METRIC_TM_ID + " count=42i"))).     } finally {         metricRegistry.shutdown().get().     } }
false;private;0;11;;private MetricRegistryImpl createMetricRegistry() {     String configPrefix = ConfigConstants.METRICS_REPORTER_PREFIX + "test.".     Configuration configuration = new Configuration().     configuration.setString(configPrefix + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, InfluxdbReporter.class.getTypeName()).     configuration.setString(configPrefix + "host", "localhost").     configuration.setString(configPrefix + "port", String.valueOf(wireMockRule.port())).     configuration.setString(configPrefix + "db", TEST_INFLUXDB_DB).     return new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(configuration)). }
false;private,static;2;4;;private static Counter registerTestMetric(String metricName, MetricRegistry metricRegistry) {     TaskManagerMetricGroup metricGroup = new TaskManagerMetricGroup(metricRegistry, METRIC_HOSTNAME, METRIC_TM_ID).     return metricGroup.counter(metricName). }
