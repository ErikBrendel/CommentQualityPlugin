commented;modifiers;parameterAmount;loc;comment;code
false;public;2;30;;@Override public void open(FileSystem fs, Path path) throws IOException {     super.open(fs, path).     if (keyClass == null) {         throw new IllegalStateException("Key Class has not been initialized.").     }     if (valueClass == null) {         throw new IllegalStateException("Value Class has not been initialized.").     }     CompressionCodec codec = null.     Configuration conf = fs.getConf().     if (!compressionCodecName.equals("None")) {         CompressionCodecFactory codecFactory = new CompressionCodecFactory(conf).         codec = codecFactory.getCodecByName(compressionCodecName).         if (codec == null) {             throw new RuntimeException("Codec " + compressionCodecName + " not found.").         }     }     // the non-deprecated constructor syntax is only available in recent hadoop versions...     writer = SequenceFile.createWriter(conf, getStream(), keyClass, valueClass, compressionType, codec). }
false;public;0;7;;@Override public void close() throws IOException {     if (writer != null) {         writer.close().     }     super.close(). }
false;public;1;5;;@Override public void write(Tuple2<K, V> element) throws IOException {     // Throws if the stream is not open     getStream().     writer.append(element.f0, element.f1). }
false;public;2;18;;@Override public void setInputType(TypeInformation<?> type, ExecutionConfig executionConfig) {     if (!type.isTupleType()) {         throw new IllegalArgumentException("Input TypeInformation is not a tuple type.").     }     TupleTypeInfoBase<?> tupleType = (TupleTypeInfoBase<?>) type.     if (tupleType.getArity() != 2) {         throw new IllegalArgumentException("Input TypeInformation must be a Tuple2 type.").     }     TypeInformation<K> keyType = tupleType.getTypeAt(0).     TypeInformation<V> valueType = tupleType.getTypeAt(1).     this.keyClass = keyType.getTypeClass().     this.valueClass = valueType.getTypeClass(). }
false;public;0;4;;@Override public SequenceFileWriter<K, V> duplicate() {     return new SequenceFileWriter<>(this). }
false;;0;3;;String getCompressionCodecName() {     return compressionCodecName. }
false;;0;3;;SequenceFile.CompressionType getCompressionType() {     return compressionType. }
false;;0;3;;Class<K> getKeyClass() {     return keyClass. }
false;;0;3;;Class<V> getValueClass() {     return valueClass. }
