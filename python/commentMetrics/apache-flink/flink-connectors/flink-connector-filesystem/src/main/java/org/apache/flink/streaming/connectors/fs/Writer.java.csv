commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Initializes the {@code Writer} for a newly opened bucket file.  * Any internal per-bucket initialization should be performed here.  *  * @param fs The {@link org.apache.hadoop.fs.FileSystem} containing the newly opened file.  * @param path The {@link org.apache.hadoop.fs.Path} of the newly opened file.  */ ;/**  * Initializes the {@code Writer} for a newly opened bucket file.  * Any internal per-bucket initialization should be performed here.  *  * @param fs The {@link org.apache.hadoop.fs.FileSystem} containing the newly opened file.  * @param path The {@link org.apache.hadoop.fs.Path} of the newly opened file.  */ void open(FileSystem fs, Path path) throws IOException.
true;;0;1;/**  * Flushes out any internally held data, and returns the offset that the file  * must be truncated to at recovery.  */ ;/**  * Flushes out any internally held data, and returns the offset that the file  * must be truncated to at recovery.  */ long flush() throws IOException.
true;;0;1;/**  * Retrieves the current position, and thus size, of the output file.  */ ;/**  * Retrieves the current position, and thus size, of the output file.  */ long getPos() throws IOException.
true;;0;1;/**  * Closes the {@code Writer}. If the writer is already closed, no action will be  * taken. The call should close all state related to the current output file,  * including the output stream opened in {@code open}.  */ ;/**  * Closes the {@code Writer}. If the writer is already closed, no action will be  * taken. The call should close all state related to the current output file,  * including the output stream opened in {@code open}.  */ void close() throws IOException.
true;;1;1;/**  * Writes one element to the bucket file.  */ ;/**  * Writes one element to the bucket file.  */ void write(T element) throws IOException.
true;;0;1;/**  * Duplicates the {@code Writer}. This is used to get one {@code Writer} for each  * parallel instance of the sink.  */ ;/**  * Duplicates the {@code Writer}. This is used to get one {@code Writer} for each  * parallel instance of the sink.  */ Writer<T> duplicate().
