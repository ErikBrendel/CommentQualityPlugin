commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ------------------------------------------------------------------------ // to properly mimic what happens in the runtime task, we need to make sure that // the file system safety net is in place @Before public void activateSafetyNet() {     FileSystemSafetyNet.initializeSafetyNetForThread(). }
false;public;0;4;;@After public void deactivateSafetyNet() {     FileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread(). }
false;public;0;7;;// ------------------------------------------------------------------------ @Test public void testInitForLocalFileSystem() throws Exception {     final Path path = new Path(tempFolder.newFolder().toURI()).     FileSystem fs = BucketingSink.createHadoopFileSystem(path, null).     assertEquals("file", fs.getUri().getScheme()). }
false;public;0;7;;@Test public void testInitForHadoopFileSystem() throws Exception {     final Path path = new Path("hdfs://localhost:51234/some/path/").     FileSystem fs = BucketingSink.createHadoopFileSystem(path, null).     assertEquals("hdfs", fs.getUri().getScheme()). }
false;public;0;5;;@Test(expected = UnsupportedFileSystemSchemeException.class) public void testInitForUnsupportedFileSystem() throws Exception {     final Path path = new Path("nofs://localhost:51234/some/path/").     BucketingSink.createHadoopFileSystem(path, null). }
