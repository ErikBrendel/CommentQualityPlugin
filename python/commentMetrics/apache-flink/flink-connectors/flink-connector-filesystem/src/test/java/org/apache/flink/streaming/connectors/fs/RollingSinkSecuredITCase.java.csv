# id;timestamp;commentText;codeText;commentWords;codeWords
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1480685315;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1484162264;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1487622556;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1495923089;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1498896127;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1506499511;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1506499511;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1515481551;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1516295283;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1529682304;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
RollingSinkSecuredITCase -> private static void skipIfHadoopVersionIsNotAppropriate();1540389860;Skips all tests if the Hadoop version doesn't match._We can't run this test class until HDFS-9213 is fixed which allows a secure DataNode_to bind to non-privileged ports for testing._For now, we skip this test class until Hadoop version 3.x.x.;private static void skipIfHadoopVersionIsNotAppropriate() {_		_		String hadoopVersionString = VersionInfo.getVersion()__		String[] split = hadoopVersionString.split("\\.")__		if (split.length != 3) {_			throw new IllegalStateException("Hadoop version was not of format 'X.X.X': " + hadoopVersionString)__		}_		Assume.assumeTrue(_			_			Integer.parseInt(split[0]) >= 3_		)__	};skips,all,tests,if,the,hadoop,version,doesn,t,match,we,can,t,run,this,test,class,until,hdfs,9213,is,fixed,which,allows,a,secure,data,node,to,bind,to,non,privileged,ports,for,testing,for,now,we,skip,this,test,class,until,hadoop,version,3,x,x;private,static,void,skip,if,hadoop,version,is,not,appropriate,string,hadoop,version,string,version,info,get,version,string,split,hadoop,version,string,split,if,split,length,3,throw,new,illegal,state,exception,hadoop,version,was,not,of,format,x,x,x,hadoop,version,string,assume,assume,true,integer,parse,int,split,0,3
