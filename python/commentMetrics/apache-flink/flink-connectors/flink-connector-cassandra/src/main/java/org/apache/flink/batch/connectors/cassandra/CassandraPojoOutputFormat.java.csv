commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void configure(Configuration parameters) {     this.cluster = builder.getCluster(). }
false;public;1;4;;@Override public void onSuccess(Void ignored) {     onWriteSuccess(). }
false;public;1;4;;@Override public void onFailure(Throwable t) {     onWriteFailure(t). }
true;public;2;23;/**  * Opens a Session to Cassandra and initializes the prepared statement.  *  * @param taskNumber The number of the parallel instance.  */ ;/**  * Opens a Session to Cassandra and initializes the prepared statement.  *  * @param taskNumber The number of the parallel instance.  */ @Override public void open(int taskNumber, int numTasks) {     this.session = cluster.connect().     MappingManager mappingManager = new MappingManager(session).     this.mapper = mappingManager.mapper(outputClass).     if (mapperOptions != null) {         Mapper.Option[] optionsArray = mapperOptions.getMapperOptions().         if (optionsArray != null) {             mapper.setDefaultSaveOptions(optionsArray).         }     }     this.callback = new FutureCallback<Void>() {          @Override         public void onSuccess(Void ignored) {             onWriteSuccess().         }          @Override         public void onFailure(Throwable t) {             onWriteFailure(t).         }     }. }
false;public;1;9;;@Override public void writeRecord(OUT record) throws IOException {     if (exception != null) {         throw new IOException("write record failed", exception).     }     ListenableFuture<Void> result = mapper.saveAsync(record).     Futures.addCallback(result, callback). }
true;protected;0;2;/**  * Callback that is invoked after a record is written to Cassandra successfully.  *  * <p>Subclass can override to provide its own logic.  */ ;/**  * Callback that is invoked after a record is written to Cassandra successfully.  *  * <p>Subclass can override to provide its own logic.  */ protected void onWriteSuccess() { }
true;protected;1;3;/**  * Callback that is invoked when failing to write to Cassandra.  * Current implementation will record the exception and fail the job upon next record.  *  * <p>Subclass can override to provide its own failure handling logic.  * @param t the exception  */ ;/**  * Callback that is invoked when failing to write to Cassandra.  * Current implementation will record the exception and fail the job upon next record.  *  * <p>Subclass can override to provide its own failure handling logic.  * @param t the exception  */ protected void onWriteFailure(Throwable t) {     exception = t. }
true;public;0;19;/**  * Closes all resources used.  */ ;/**  * Closes all resources used.  */ @Override public void close() {     mapper = null.     try {         if (session != null) {             session.close().         }     } catch (Exception e) {         LOG.error("Error while closing session.", e).     }     try {         if (cluster != null) {             cluster.close().         }     } catch (Exception e) {         LOG.error("Error while closing cluster.", e).     } }
