commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onSuccess(V ignored) {     semaphore.release(). }
false;public;1;6;;@Override public void onFailure(Throwable t) {     throwable.compareAndSet(null, t).     log.error("Error while sending value.", t).     semaphore.release(). }
false;public;1;21;;@Override public void open(Configuration configuration) {     this.callback = new FutureCallback<V>() {          @Override         public void onSuccess(V ignored) {             semaphore.release().         }          @Override         public void onFailure(Throwable t) {             throwable.compareAndSet(null, t).             log.error("Error while sending value.", t).             semaphore.release().         }     }.     this.cluster = builder.getCluster().     this.session = createSession().     throwable = new AtomicReference<>().     semaphore = new Semaphore(config.getMaxConcurrentRequests()). }
false;public;0;23;;@Override public void close() throws Exception {     try {         checkAsyncErrors().         flush().         checkAsyncErrors().     } finally {         try {             if (session != null) {                 session.close().             }         } catch (Exception e) {             log.error("Error while closing session.", e).         }         try {             if (cluster != null) {                 cluster.close().             }         } catch (Exception e) {             log.error("Error while closing cluster.", e).         }     } }
false;public;1;3;;@Override public void initializeState(FunctionInitializationContext context) throws Exception { }
false;public;1;6;;@Override public void snapshotState(FunctionSnapshotContext ctx) throws Exception {     checkAsyncErrors().     flush().     checkAsyncErrors(). }
false;public;1;7;;@Override public void invoke(IN value) throws Exception {     checkAsyncErrors().     tryAcquire().     final ListenableFuture<V> result = send(value).     Futures.addCallback(result, callback). }
false;protected;0;3;;protected Session createSession() {     return cluster.connect(). }
false;public,abstract;1;1;;public abstract ListenableFuture<V> send(IN value).
false;private;0;11;;private void tryAcquire() throws InterruptedException, TimeoutException {     if (!semaphore.tryAcquire(config.getMaxConcurrentRequestsTimeout().toMillis(), TimeUnit.MILLISECONDS)) {         throw new TimeoutException(String.format("Failed to acquire 1 permit of %d to send value in %s.", config.getMaxConcurrentRequests(), config.getMaxConcurrentRequestsTimeout())).     } }
false;private;0;6;;private void checkAsyncErrors() throws Exception {     final Throwable currentError = throwable.getAndSet(null).     if (currentError != null) {         failureHandler.onFailure(currentError).     } }
false;private;0;4;;private void flush() {     semaphore.acquireUninterruptibly(config.getMaxConcurrentRequests()).     semaphore.release(config.getMaxConcurrentRequests()). }
false;;0;4;;@VisibleForTesting int getAvailablePermits() {     return semaphore.availablePermits(). }
false;;0;4;;@VisibleForTesting int getAcquiredPermits() {     return config.getMaxConcurrentRequests() - semaphore.availablePermits(). }
